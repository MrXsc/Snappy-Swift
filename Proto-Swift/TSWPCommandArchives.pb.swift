// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TSWPCommandArchives.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum TSWP_ObjectPropertyType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case kObjectPropertyTypeBool // = 0
  case kObjectPropertyTypeFloat // = 1
  case kObjectPropertyTypeInteger // = 2
  case kObjectPropertyTypeString // = 3
  case kObjectPropertyTypeIDPath // = 4
  case kObjectPropertyTypeFill // = 5
  case kObjectPropertyTypeColor // = 6
  case kObjectPropertyTypeShadow // = 7

  init() {
    self = .kObjectPropertyTypeBool
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .kObjectPropertyTypeBool
    case 1: self = .kObjectPropertyTypeFloat
    case 2: self = .kObjectPropertyTypeInteger
    case 3: self = .kObjectPropertyTypeString
    case 4: self = .kObjectPropertyTypeIDPath
    case 5: self = .kObjectPropertyTypeFill
    case 6: self = .kObjectPropertyTypeColor
    case 7: self = .kObjectPropertyTypeShadow
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .kObjectPropertyTypeBool: return 0
    case .kObjectPropertyTypeFloat: return 1
    case .kObjectPropertyTypeInteger: return 2
    case .kObjectPropertyTypeString: return 3
    case .kObjectPropertyTypeIDPath: return 4
    case .kObjectPropertyTypeFill: return 5
    case .kObjectPropertyTypeColor: return 6
    case .kObjectPropertyTypeShadow: return 7
    }
  }

}

#if swift(>=4.2)

extension TSWP_ObjectPropertyType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSWP_DummyCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var foo: UInt32 {
    get {return _foo ?? 0}
    set {_foo = newValue}
  }
  /// Returns true if `foo` has been explicitly set.
  var hasFoo: Bool {return self._foo != nil}
  /// Clears the value of `foo`. Subsequent reads from it will return its default value.
  mutating func clearFoo() {self._foo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _foo: UInt32? = nil
}

struct TSWP_TextCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storage: TSP_Reference {
    get {return _storage ?? TSP_Reference()}
    set {_storage = newValue}
  }
  /// Returns true if `storage` has been explicitly set.
  var hasStorage: Bool {return self._storage != nil}
  /// Clears the value of `storage`. Subsequent reads from it will return its default value.
  mutating func clearStorage() {self._storage = nil}

  var undoTransaction: TSWP_UndoTransaction {
    get {return _undoTransaction ?? TSWP_UndoTransaction()}
    set {_undoTransaction = newValue}
  }
  /// Returns true if `undoTransaction` has been explicitly set.
  var hasUndoTransaction: Bool {return self._undoTransaction != nil}
  /// Clears the value of `undoTransaction`. Subsequent reads from it will return its default value.
  mutating func clearUndoTransaction() {self._undoTransaction = nil}

  var restoreRangeLocation: UInt32 {
    get {return _restoreRangeLocation ?? 0}
    set {_restoreRangeLocation = newValue}
  }
  /// Returns true if `restoreRangeLocation` has been explicitly set.
  var hasRestoreRangeLocation: Bool {return self._restoreRangeLocation != nil}
  /// Clears the value of `restoreRangeLocation`. Subsequent reads from it will return its default value.
  mutating func clearRestoreRangeLocation() {self._restoreRangeLocation = nil}

  var restoreRangeLength: UInt32 {
    get {return _restoreRangeLength ?? 0}
    set {_restoreRangeLength = newValue}
  }
  /// Returns true if `restoreRangeLength` has been explicitly set.
  var hasRestoreRangeLength: Bool {return self._restoreRangeLength != nil}
  /// Clears the value of `restoreRangeLength`. Subsequent reads from it will return its default value.
  mutating func clearRestoreRangeLength() {self._restoreRangeLength = nil}

  var redoRestoreRangeLocation: UInt32 {
    get {return _redoRestoreRangeLocation ?? 0}
    set {_redoRestoreRangeLocation = newValue}
  }
  /// Returns true if `redoRestoreRangeLocation` has been explicitly set.
  var hasRedoRestoreRangeLocation: Bool {return self._redoRestoreRangeLocation != nil}
  /// Clears the value of `redoRestoreRangeLocation`. Subsequent reads from it will return its default value.
  mutating func clearRedoRestoreRangeLocation() {self._redoRestoreRangeLocation = nil}

  var redoRestoreRangeLength: UInt32 {
    get {return _redoRestoreRangeLength ?? 0}
    set {_redoRestoreRangeLength = newValue}
  }
  /// Returns true if `redoRestoreRangeLength` has been explicitly set.
  var hasRedoRestoreRangeLength: Bool {return self._redoRestoreRangeLength != nil}
  /// Clears the value of `redoRestoreRangeLength`. Subsequent reads from it will return its default value.
  mutating func clearRedoRestoreRangeLength() {self._redoRestoreRangeLength = nil}

  var textCommandFlags: UInt32 {
    get {return _textCommandFlags ?? 0}
    set {_textCommandFlags = newValue}
  }
  /// Returns true if `textCommandFlags` has been explicitly set.
  var hasTextCommandFlags: Bool {return self._textCommandFlags != nil}
  /// Clears the value of `textCommandFlags`. Subsequent reads from it will return its default value.
  mutating func clearTextCommandFlags() {self._textCommandFlags = nil}

  var kind: TSWP_TextCommandArchive.Kind {
    get {return _kind ?? .kKindContained}
    set {_kind = newValue}
  }
  /// Returns true if `kind` has been explicitly set.
  var hasKind: Bool {return self._kind != nil}
  /// Clears the value of `kind`. Subsequent reads from it will return its default value.
  mutating func clearKind() {self._kind = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Kind: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kKindContained // = 0
    case kKindReplaceText // = 1
    case kKindPaste // = 2
    case kKindParagraphStyle // = 3
    case kKindListStyle // = 4
    case kKindIndentParagraphLevel // = 5
    case kKindDragText // = 6
    case kKindPasteStyle // = 7
    case kKindApplyChangesInRange // = 8
    case kKindInsertCitationField // = 10
    case kKindInsertBibliographyEntry // = 11
    case kKindFormatCitationFields // = 12
    case kKindInsertTocsmartField // = 13
    case kKindInsertDateTimeField // = 14
    case kKindUpdateDateTimeField // = 15
    case kKindSetParagraphFirstTopicNumber // = 16
    case kKindCharacterStyle // = 17
    case kKindRevertStyles // = 18
    case kKindSetParagraphBidi // = 19

    init() {
      self = .kKindContained
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kKindContained
      case 1: self = .kKindReplaceText
      case 2: self = .kKindPaste
      case 3: self = .kKindParagraphStyle
      case 4: self = .kKindListStyle
      case 5: self = .kKindIndentParagraphLevel
      case 6: self = .kKindDragText
      case 7: self = .kKindPasteStyle
      case 8: self = .kKindApplyChangesInRange
      case 10: self = .kKindInsertCitationField
      case 11: self = .kKindInsertBibliographyEntry
      case 12: self = .kKindFormatCitationFields
      case 13: self = .kKindInsertTocsmartField
      case 14: self = .kKindInsertDateTimeField
      case 15: self = .kKindUpdateDateTimeField
      case 16: self = .kKindSetParagraphFirstTopicNumber
      case 17: self = .kKindCharacterStyle
      case 18: self = .kKindRevertStyles
      case 19: self = .kKindSetParagraphBidi
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kKindContained: return 0
      case .kKindReplaceText: return 1
      case .kKindPaste: return 2
      case .kKindParagraphStyle: return 3
      case .kKindListStyle: return 4
      case .kKindIndentParagraphLevel: return 5
      case .kKindDragText: return 6
      case .kKindPasteStyle: return 7
      case .kKindApplyChangesInRange: return 8
      case .kKindInsertCitationField: return 10
      case .kKindInsertBibliographyEntry: return 11
      case .kKindFormatCitationFields: return 12
      case .kKindInsertTocsmartField: return 13
      case .kKindInsertDateTimeField: return 14
      case .kKindUpdateDateTimeField: return 15
      case .kKindSetParagraphFirstTopicNumber: return 16
      case .kKindCharacterStyle: return 17
      case .kKindRevertStyles: return 18
      case .kKindSetParagraphBidi: return 19
      }
    }

  }

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _storage: TSP_Reference? = nil
  fileprivate var _undoTransaction: TSWP_UndoTransaction? = nil
  fileprivate var _restoreRangeLocation: UInt32? = nil
  fileprivate var _restoreRangeLength: UInt32? = nil
  fileprivate var _redoRestoreRangeLocation: UInt32? = nil
  fileprivate var _redoRestoreRangeLength: UInt32? = nil
  fileprivate var _textCommandFlags: UInt32? = nil
  fileprivate var _kind: TSWP_TextCommandArchive.Kind? = nil
}

#if swift(>=4.2)

extension TSWP_TextCommandArchive.Kind: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSWP_StorageActionCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storage: TSP_UUIDPath {
    get {return _storage ?? TSP_UUIDPath()}
    set {_storage = newValue}
  }
  /// Returns true if `storage` has been explicitly set.
  var hasStorage: Bool {return self._storage != nil}
  /// Clears the value of `storage`. Subsequent reads from it will return its default value.
  mutating func clearStorage() {self._storage = nil}

  var undoTransaction: TSWP_UndoTransaction {
    get {return _undoTransaction ?? TSWP_UndoTransaction()}
    set {_undoTransaction = newValue}
  }
  /// Returns true if `undoTransaction` has been explicitly set.
  var hasUndoTransaction: Bool {return self._undoTransaction != nil}
  /// Clears the value of `undoTransaction`. Subsequent reads from it will return its default value.
  mutating func clearUndoTransaction() {self._undoTransaction = nil}

  var textCommandFlags: UInt32 {
    get {return _textCommandFlags ?? 0}
    set {_textCommandFlags = newValue}
  }
  /// Returns true if `textCommandFlags` has been explicitly set.
  var hasTextCommandFlags: Bool {return self._textCommandFlags != nil}
  /// Clears the value of `textCommandFlags`. Subsequent reads from it will return its default value.
  mutating func clearTextCommandFlags() {self._textCommandFlags = nil}

  var kind: TSWP_StorageActionCommandArchive.Kind {
    get {return _kind ?? .kKindContained}
    set {_kind = newValue}
  }
  /// Returns true if `kind` has been explicitly set.
  var hasKind: Bool {return self._kind != nil}
  /// Clears the value of `kind`. Subsequent reads from it will return its default value.
  mutating func clearKind() {self._kind = nil}

  var customFormatKeys: [TSP_UUID] = []

  var isForwardInverseCommand: Bool {
    get {return _isForwardInverseCommand ?? false}
    set {_isForwardInverseCommand = newValue}
  }
  /// Returns true if `isForwardInverseCommand` has been explicitly set.
  var hasIsForwardInverseCommand: Bool {return self._isForwardInverseCommand != nil}
  /// Clears the value of `isForwardInverseCommand`. Subsequent reads from it will return its default value.
  mutating func clearIsForwardInverseCommand() {self._isForwardInverseCommand = nil}

  var coalesceable: Bool {
    get {return _coalesceable ?? false}
    set {_coalesceable = newValue}
  }
  /// Returns true if `coalesceable` has been explicitly set.
  var hasCoalesceable: Bool {return self._coalesceable != nil}
  /// Clears the value of `coalesceable`. Subsequent reads from it will return its default value.
  mutating func clearCoalesceable() {self._coalesceable = nil}

  var coalescingText: Bool {
    get {return _coalescingText ?? false}
    set {_coalescingText = newValue}
  }
  /// Returns true if `coalescingText` has been explicitly set.
  var hasCoalescingText: Bool {return self._coalescingText != nil}
  /// Clears the value of `coalescingText`. Subsequent reads from it will return its default value.
  mutating func clearCoalescingText() {self._coalescingText = nil}

  var shouldMigrateStyles: Bool {
    get {return _shouldMigrateStyles ?? false}
    set {_shouldMigrateStyles = newValue}
  }
  /// Returns true if `shouldMigrateStyles` has been explicitly set.
  var hasShouldMigrateStyles: Bool {return self._shouldMigrateStyles != nil}
  /// Clears the value of `shouldMigrateStyles`. Subsequent reads from it will return its default value.
  mutating func clearShouldMigrateStyles() {self._shouldMigrateStyles = nil}

  var changedDataReferenceRecord: TSK_DataReferenceRecord {
    get {return _changedDataReferenceRecord ?? TSK_DataReferenceRecord()}
    set {_changedDataReferenceRecord = newValue}
  }
  /// Returns true if `changedDataReferenceRecord` has been explicitly set.
  var hasChangedDataReferenceRecord: Bool {return self._changedDataReferenceRecord != nil}
  /// Clears the value of `changedDataReferenceRecord`. Subsequent reads from it will return its default value.
  mutating func clearChangedDataReferenceRecord() {self._changedDataReferenceRecord = nil}

  var coalescingProperty: String {
    get {return _coalescingProperty ?? String()}
    set {_coalescingProperty = newValue}
  }
  /// Returns true if `coalescingProperty` has been explicitly set.
  var hasCoalescingProperty: Bool {return self._coalescingProperty != nil}
  /// Clears the value of `coalescingProperty`. Subsequent reads from it will return its default value.
  mutating func clearCoalescingProperty() {self._coalescingProperty = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Kind: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kKindContained // = 0
    case kKindReplaceText // = 1
    case kKindPaste // = 2
    case kKindParagraphStyle // = 3
    case kKindListStyle // = 4
    case kKindIndentParagraphLevel // = 5
    case kKindDragText // = 6
    case kKindPasteStyle // = 7
    case kKindApplyChangesInRange // = 8
    case kKindInsertCitationField // = 10
    case kKindInsertBibliographyEntry // = 11
    case kKindFormatCitationFields // = 12
    case kKindInsertTocsmartField // = 13
    case kKindInsertDateTimeField // = 14
    case kKindUpdateDateTimeField // = 15
    case kKindSetParagraphFirstTopicNumber // = 16
    case kKindCharacterStyle // = 17
    case kKindRevertStyles // = 18
    case kKindSetParagraphBidi // = 19
    case kKindFormatText // = 20
    case kKindInsertAttachment // = 21
    case kKindCreateHyperlink // = 22
    case kKindModifyHyperlink // = 23
    case kKindRemoveHyperlink // = 24
    case kKindApplyHighlightText // = 25
    case kKindPropagateStyleChanges // = 26
    case kKindMovedAnchoredDrawableInline // = 27
    case kKindMoveDrawablesAttached // = 28
    case kKindMoveMoveDrawablesFloating // = 29
    case kKindMoveInlineDrawableAnchored // = 30
    case kKindAnchorAttachment // = 31
    case kKindBookmark // = 32
    case kKindReplaceSection // = 33
    case kKindApplyPencilAnnotation // = 34
    case kKindCreateRuby // = 35
    case kKindModifyRuby // = 36
    case kKindRemoveRuby // = 37
    case kKindTateChuYoko // = 38
    case kKindDropCapStyle // = 39

    init() {
      self = .kKindContained
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kKindContained
      case 1: self = .kKindReplaceText
      case 2: self = .kKindPaste
      case 3: self = .kKindParagraphStyle
      case 4: self = .kKindListStyle
      case 5: self = .kKindIndentParagraphLevel
      case 6: self = .kKindDragText
      case 7: self = .kKindPasteStyle
      case 8: self = .kKindApplyChangesInRange
      case 10: self = .kKindInsertCitationField
      case 11: self = .kKindInsertBibliographyEntry
      case 12: self = .kKindFormatCitationFields
      case 13: self = .kKindInsertTocsmartField
      case 14: self = .kKindInsertDateTimeField
      case 15: self = .kKindUpdateDateTimeField
      case 16: self = .kKindSetParagraphFirstTopicNumber
      case 17: self = .kKindCharacterStyle
      case 18: self = .kKindRevertStyles
      case 19: self = .kKindSetParagraphBidi
      case 20: self = .kKindFormatText
      case 21: self = .kKindInsertAttachment
      case 22: self = .kKindCreateHyperlink
      case 23: self = .kKindModifyHyperlink
      case 24: self = .kKindRemoveHyperlink
      case 25: self = .kKindApplyHighlightText
      case 26: self = .kKindPropagateStyleChanges
      case 27: self = .kKindMovedAnchoredDrawableInline
      case 28: self = .kKindMoveDrawablesAttached
      case 29: self = .kKindMoveMoveDrawablesFloating
      case 30: self = .kKindMoveInlineDrawableAnchored
      case 31: self = .kKindAnchorAttachment
      case 32: self = .kKindBookmark
      case 33: self = .kKindReplaceSection
      case 34: self = .kKindApplyPencilAnnotation
      case 35: self = .kKindCreateRuby
      case 36: self = .kKindModifyRuby
      case 37: self = .kKindRemoveRuby
      case 38: self = .kKindTateChuYoko
      case 39: self = .kKindDropCapStyle
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kKindContained: return 0
      case .kKindReplaceText: return 1
      case .kKindPaste: return 2
      case .kKindParagraphStyle: return 3
      case .kKindListStyle: return 4
      case .kKindIndentParagraphLevel: return 5
      case .kKindDragText: return 6
      case .kKindPasteStyle: return 7
      case .kKindApplyChangesInRange: return 8
      case .kKindInsertCitationField: return 10
      case .kKindInsertBibliographyEntry: return 11
      case .kKindFormatCitationFields: return 12
      case .kKindInsertTocsmartField: return 13
      case .kKindInsertDateTimeField: return 14
      case .kKindUpdateDateTimeField: return 15
      case .kKindSetParagraphFirstTopicNumber: return 16
      case .kKindCharacterStyle: return 17
      case .kKindRevertStyles: return 18
      case .kKindSetParagraphBidi: return 19
      case .kKindFormatText: return 20
      case .kKindInsertAttachment: return 21
      case .kKindCreateHyperlink: return 22
      case .kKindModifyHyperlink: return 23
      case .kKindRemoveHyperlink: return 24
      case .kKindApplyHighlightText: return 25
      case .kKindPropagateStyleChanges: return 26
      case .kKindMovedAnchoredDrawableInline: return 27
      case .kKindMoveDrawablesAttached: return 28
      case .kKindMoveMoveDrawablesFloating: return 29
      case .kKindMoveInlineDrawableAnchored: return 30
      case .kKindAnchorAttachment: return 31
      case .kKindBookmark: return 32
      case .kKindReplaceSection: return 33
      case .kKindApplyPencilAnnotation: return 34
      case .kKindCreateRuby: return 35
      case .kKindModifyRuby: return 36
      case .kKindRemoveRuby: return 37
      case .kKindTateChuYoko: return 38
      case .kKindDropCapStyle: return 39
      }
    }

  }

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _storage: TSP_UUIDPath? = nil
  fileprivate var _undoTransaction: TSWP_UndoTransaction? = nil
  fileprivate var _textCommandFlags: UInt32? = nil
  fileprivate var _kind: TSWP_StorageActionCommandArchive.Kind? = nil
  fileprivate var _isForwardInverseCommand: Bool? = nil
  fileprivate var _coalesceable: Bool? = nil
  fileprivate var _coalescingText: Bool? = nil
  fileprivate var _shouldMigrateStyles: Bool? = nil
  fileprivate var _changedDataReferenceRecord: TSK_DataReferenceRecord? = nil
  fileprivate var _coalescingProperty: String? = nil
}

#if swift(>=4.2)

extension TSWP_StorageActionCommandArchive.Kind: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSWP_SetColumnStyleCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storage: TSP_Reference {
    get {return _storage ?? TSP_Reference()}
    set {_storage = newValue}
  }
  /// Returns true if `storage` has been explicitly set.
  var hasStorage: Bool {return self._storage != nil}
  /// Clears the value of `storage`. Subsequent reads from it will return its default value.
  mutating func clearStorage() {self._storage = nil}

  var undoTransaction: TSWP_UndoTransaction {
    get {return _undoTransaction ?? TSWP_UndoTransaction()}
    set {_undoTransaction = newValue}
  }
  /// Returns true if `undoTransaction` has been explicitly set.
  var hasUndoTransaction: Bool {return self._undoTransaction != nil}
  /// Clears the value of `undoTransaction`. Subsequent reads from it will return its default value.
  mutating func clearUndoTransaction() {self._undoTransaction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _storage: TSP_Reference? = nil
  fileprivate var _undoTransaction: TSWP_UndoTransaction? = nil
}

struct TSWP_ReplaceAllUsesOfStyleCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storage: TSP_Reference {
    get {return _storage ?? TSP_Reference()}
    set {_storage = newValue}
  }
  /// Returns true if `storage` has been explicitly set.
  var hasStorage: Bool {return self._storage != nil}
  /// Clears the value of `storage`. Subsequent reads from it will return its default value.
  mutating func clearStorage() {self._storage = nil}

  var undoTransaction: TSWP_UndoTransaction {
    get {return _undoTransaction ?? TSWP_UndoTransaction()}
    set {_undoTransaction = newValue}
  }
  /// Returns true if `undoTransaction` has been explicitly set.
  var hasUndoTransaction: Bool {return self._undoTransaction != nil}
  /// Clears the value of `undoTransaction`. Subsequent reads from it will return its default value.
  mutating func clearUndoTransaction() {self._undoTransaction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _storage: TSP_Reference? = nil
  fileprivate var _undoTransaction: TSWP_UndoTransaction? = nil
}

struct TSWP_InsertColumnsCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storage: TSP_Reference {
    get {return _storage ?? TSP_Reference()}
    set {_storage = newValue}
  }
  /// Returns true if `storage` has been explicitly set.
  var hasStorage: Bool {return self._storage != nil}
  /// Clears the value of `storage`. Subsequent reads from it will return its default value.
  mutating func clearStorage() {self._storage = nil}

  var columnIndex: UInt32 {
    get {return _columnIndex ?? 0}
    set {_columnIndex = newValue}
  }
  /// Returns true if `columnIndex` has been explicitly set.
  var hasColumnIndex: Bool {return self._columnIndex != nil}
  /// Clears the value of `columnIndex`. Subsequent reads from it will return its default value.
  mutating func clearColumnIndex() {self._columnIndex = nil}

  var columnCount: UInt32 {
    get {return _columnCount ?? 0}
    set {_columnCount = newValue}
  }
  /// Returns true if `columnCount` has been explicitly set.
  var hasColumnCount: Bool {return self._columnCount != nil}
  /// Clears the value of `columnCount`. Subsequent reads from it will return its default value.
  mutating func clearColumnCount() {self._columnCount = nil}

  var undoTransaction: TSWP_UndoTransaction {
    get {return _undoTransaction ?? TSWP_UndoTransaction()}
    set {_undoTransaction = newValue}
  }
  /// Returns true if `undoTransaction` has been explicitly set.
  var hasUndoTransaction: Bool {return self._undoTransaction != nil}
  /// Clears the value of `undoTransaction`. Subsequent reads from it will return its default value.
  mutating func clearUndoTransaction() {self._undoTransaction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _storage: TSP_Reference? = nil
  fileprivate var _columnIndex: UInt32? = nil
  fileprivate var _columnCount: UInt32? = nil
  fileprivate var _undoTransaction: TSWP_UndoTransaction? = nil
}

struct TSWP_InsertRowsCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storage: TSP_Reference {
    get {return _storage ?? TSP_Reference()}
    set {_storage = newValue}
  }
  /// Returns true if `storage` has been explicitly set.
  var hasStorage: Bool {return self._storage != nil}
  /// Clears the value of `storage`. Subsequent reads from it will return its default value.
  mutating func clearStorage() {self._storage = nil}

  var rowIndex: UInt32 {
    get {return _rowIndex ?? 0}
    set {_rowIndex = newValue}
  }
  /// Returns true if `rowIndex` has been explicitly set.
  var hasRowIndex: Bool {return self._rowIndex != nil}
  /// Clears the value of `rowIndex`. Subsequent reads from it will return its default value.
  mutating func clearRowIndex() {self._rowIndex = nil}

  var rowCount: UInt32 {
    get {return _rowCount ?? 0}
    set {_rowCount = newValue}
  }
  /// Returns true if `rowCount` has been explicitly set.
  var hasRowCount: Bool {return self._rowCount != nil}
  /// Clears the value of `rowCount`. Subsequent reads from it will return its default value.
  mutating func clearRowCount() {self._rowCount = nil}

  var undoTransaction: TSWP_UndoTransaction {
    get {return _undoTransaction ?? TSWP_UndoTransaction()}
    set {_undoTransaction = newValue}
  }
  /// Returns true if `undoTransaction` has been explicitly set.
  var hasUndoTransaction: Bool {return self._undoTransaction != nil}
  /// Clears the value of `undoTransaction`. Subsequent reads from it will return its default value.
  mutating func clearUndoTransaction() {self._undoTransaction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _storage: TSP_Reference? = nil
  fileprivate var _rowIndex: UInt32? = nil
  fileprivate var _rowCount: UInt32? = nil
  fileprivate var _undoTransaction: TSWP_UndoTransaction? = nil
}

struct TSWP_RemoveColumnsCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storage: TSP_Reference {
    get {return _storage ?? TSP_Reference()}
    set {_storage = newValue}
  }
  /// Returns true if `storage` has been explicitly set.
  var hasStorage: Bool {return self._storage != nil}
  /// Clears the value of `storage`. Subsequent reads from it will return its default value.
  mutating func clearStorage() {self._storage = nil}

  var columnIndex: UInt32 {
    get {return _columnIndex ?? 0}
    set {_columnIndex = newValue}
  }
  /// Returns true if `columnIndex` has been explicitly set.
  var hasColumnIndex: Bool {return self._columnIndex != nil}
  /// Clears the value of `columnIndex`. Subsequent reads from it will return its default value.
  mutating func clearColumnIndex() {self._columnIndex = nil}

  var columnCount: UInt32 {
    get {return _columnCount ?? 0}
    set {_columnCount = newValue}
  }
  /// Returns true if `columnCount` has been explicitly set.
  var hasColumnCount: Bool {return self._columnCount != nil}
  /// Clears the value of `columnCount`. Subsequent reads from it will return its default value.
  mutating func clearColumnCount() {self._columnCount = nil}

  var undoTransaction: TSWP_UndoTransaction {
    get {return _undoTransaction ?? TSWP_UndoTransaction()}
    set {_undoTransaction = newValue}
  }
  /// Returns true if `undoTransaction` has been explicitly set.
  var hasUndoTransaction: Bool {return self._undoTransaction != nil}
  /// Clears the value of `undoTransaction`. Subsequent reads from it will return its default value.
  mutating func clearUndoTransaction() {self._undoTransaction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _storage: TSP_Reference? = nil
  fileprivate var _columnIndex: UInt32? = nil
  fileprivate var _columnCount: UInt32? = nil
  fileprivate var _undoTransaction: TSWP_UndoTransaction? = nil
}

struct TSWP_RemoveRowsCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storage: TSP_Reference {
    get {return _storage ?? TSP_Reference()}
    set {_storage = newValue}
  }
  /// Returns true if `storage` has been explicitly set.
  var hasStorage: Bool {return self._storage != nil}
  /// Clears the value of `storage`. Subsequent reads from it will return its default value.
  mutating func clearStorage() {self._storage = nil}

  var rowIndex: UInt32 {
    get {return _rowIndex ?? 0}
    set {_rowIndex = newValue}
  }
  /// Returns true if `rowIndex` has been explicitly set.
  var hasRowIndex: Bool {return self._rowIndex != nil}
  /// Clears the value of `rowIndex`. Subsequent reads from it will return its default value.
  mutating func clearRowIndex() {self._rowIndex = nil}

  var rowCount: UInt32 {
    get {return _rowCount ?? 0}
    set {_rowCount = newValue}
  }
  /// Returns true if `rowCount` has been explicitly set.
  var hasRowCount: Bool {return self._rowCount != nil}
  /// Clears the value of `rowCount`. Subsequent reads from it will return its default value.
  mutating func clearRowCount() {self._rowCount = nil}

  var undoTransaction: TSWP_UndoTransaction {
    get {return _undoTransaction ?? TSWP_UndoTransaction()}
    set {_undoTransaction = newValue}
  }
  /// Returns true if `undoTransaction` has been explicitly set.
  var hasUndoTransaction: Bool {return self._undoTransaction != nil}
  /// Clears the value of `undoTransaction`. Subsequent reads from it will return its default value.
  mutating func clearUndoTransaction() {self._undoTransaction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _storage: TSP_Reference? = nil
  fileprivate var _rowIndex: UInt32? = nil
  fileprivate var _rowCount: UInt32? = nil
  fileprivate var _undoTransaction: TSWP_UndoTransaction? = nil
}

struct TSWP_MergeCellsCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storage: TSP_Reference {
    get {return _storage ?? TSP_Reference()}
    set {_storage = newValue}
  }
  /// Returns true if `storage` has been explicitly set.
  var hasStorage: Bool {return self._storage != nil}
  /// Clears the value of `storage`. Subsequent reads from it will return its default value.
  mutating func clearStorage() {self._storage = nil}

  var row: UInt32 {
    get {return _row ?? 0}
    set {_row = newValue}
  }
  /// Returns true if `row` has been explicitly set.
  var hasRow: Bool {return self._row != nil}
  /// Clears the value of `row`. Subsequent reads from it will return its default value.
  mutating func clearRow() {self._row = nil}

  var column: UInt32 {
    get {return _column ?? 0}
    set {_column = newValue}
  }
  /// Returns true if `column` has been explicitly set.
  var hasColumn: Bool {return self._column != nil}
  /// Clears the value of `column`. Subsequent reads from it will return its default value.
  mutating func clearColumn() {self._column = nil}

  var rowCount: UInt32 {
    get {return _rowCount ?? 0}
    set {_rowCount = newValue}
  }
  /// Returns true if `rowCount` has been explicitly set.
  var hasRowCount: Bool {return self._rowCount != nil}
  /// Clears the value of `rowCount`. Subsequent reads from it will return its default value.
  mutating func clearRowCount() {self._rowCount = nil}

  var columnCount: UInt32 {
    get {return _columnCount ?? 0}
    set {_columnCount = newValue}
  }
  /// Returns true if `columnCount` has been explicitly set.
  var hasColumnCount: Bool {return self._columnCount != nil}
  /// Clears the value of `columnCount`. Subsequent reads from it will return its default value.
  mutating func clearColumnCount() {self._columnCount = nil}

  var undoTransaction: TSWP_UndoTransaction {
    get {return _undoTransaction ?? TSWP_UndoTransaction()}
    set {_undoTransaction = newValue}
  }
  /// Returns true if `undoTransaction` has been explicitly set.
  var hasUndoTransaction: Bool {return self._undoTransaction != nil}
  /// Clears the value of `undoTransaction`. Subsequent reads from it will return its default value.
  mutating func clearUndoTransaction() {self._undoTransaction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _storage: TSP_Reference? = nil
  fileprivate var _row: UInt32? = nil
  fileprivate var _column: UInt32? = nil
  fileprivate var _rowCount: UInt32? = nil
  fileprivate var _columnCount: UInt32? = nil
  fileprivate var _undoTransaction: TSWP_UndoTransaction? = nil
}

struct TSWP_ApplyPlaceholderTextCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storage: TSP_Reference {
    get {return _storage ?? TSP_Reference()}
    set {_storage = newValue}
  }
  /// Returns true if `storage` has been explicitly set.
  var hasStorage: Bool {return self._storage != nil}
  /// Clears the value of `storage`. Subsequent reads from it will return its default value.
  mutating func clearStorage() {self._storage = nil}

  var selectionRangeLocation: UInt32 {
    get {return _selectionRangeLocation ?? 0}
    set {_selectionRangeLocation = newValue}
  }
  /// Returns true if `selectionRangeLocation` has been explicitly set.
  var hasSelectionRangeLocation: Bool {return self._selectionRangeLocation != nil}
  /// Clears the value of `selectionRangeLocation`. Subsequent reads from it will return its default value.
  mutating func clearSelectionRangeLocation() {self._selectionRangeLocation = nil}

  var selectionRangeLength: UInt32 {
    get {return _selectionRangeLength ?? 0}
    set {_selectionRangeLength = newValue}
  }
  /// Returns true if `selectionRangeLength` has been explicitly set.
  var hasSelectionRangeLength: Bool {return self._selectionRangeLength != nil}
  /// Clears the value of `selectionRangeLength`. Subsequent reads from it will return its default value.
  mutating func clearSelectionRangeLength() {self._selectionRangeLength = nil}

  var undoTransaction: TSWP_UndoTransaction {
    get {return _undoTransaction ?? TSWP_UndoTransaction()}
    set {_undoTransaction = newValue}
  }
  /// Returns true if `undoTransaction` has been explicitly set.
  var hasUndoTransaction: Bool {return self._undoTransaction != nil}
  /// Clears the value of `undoTransaction`. Subsequent reads from it will return its default value.
  mutating func clearUndoTransaction() {self._undoTransaction = nil}

  var scriptTag: String {
    get {return _scriptTag ?? String()}
    set {_scriptTag = newValue}
  }
  /// Returns true if `scriptTag` has been explicitly set.
  var hasScriptTag: Bool {return self._scriptTag != nil}
  /// Clears the value of `scriptTag`. Subsequent reads from it will return its default value.
  mutating func clearScriptTag() {self._scriptTag = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _storage: TSP_Reference? = nil
  fileprivate var _selectionRangeLocation: UInt32? = nil
  fileprivate var _selectionRangeLength: UInt32? = nil
  fileprivate var _undoTransaction: TSWP_UndoTransaction? = nil
  fileprivate var _scriptTag: String? = nil
}

struct TSWP_UpdateDateTimeFieldCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSWP_TextCommandArchive {
    get {return _super ?? TSWP_TextCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var dateTimeField: TSP_Reference {
    get {return _dateTimeField ?? TSP_Reference()}
    set {_dateTimeField = newValue}
  }
  /// Returns true if `dateTimeField` has been explicitly set.
  var hasDateTimeField: Bool {return self._dateTimeField != nil}
  /// Clears the value of `dateTimeField`. Subsequent reads from it will return its default value.
  mutating func clearDateTimeField() {self._dateTimeField = nil}

  var date: TSP_Date {
    get {return _date ?? TSP_Date()}
    set {_date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  var hasDate: Bool {return self._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  mutating func clearDate() {self._date = nil}

  var dateStyle: TSWP_DateTimeSmartFieldArchive.DateTimeFormatterStyle {
    get {return _dateStyle ?? .kDateTimeFormatterStyleNone}
    set {_dateStyle = newValue}
  }
  /// Returns true if `dateStyle` has been explicitly set.
  var hasDateStyle: Bool {return self._dateStyle != nil}
  /// Clears the value of `dateStyle`. Subsequent reads from it will return its default value.
  mutating func clearDateStyle() {self._dateStyle = nil}

  var timeStyle: TSWP_DateTimeSmartFieldArchive.DateTimeFormatterStyle {
    get {return _timeStyle ?? .kDateTimeFormatterStyleNone}
    set {_timeStyle = newValue}
  }
  /// Returns true if `timeStyle` has been explicitly set.
  var hasTimeStyle: Bool {return self._timeStyle != nil}
  /// Clears the value of `timeStyle`. Subsequent reads from it will return its default value.
  mutating func clearTimeStyle() {self._timeStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSWP_TextCommandArchive? = nil
  fileprivate var _dateTimeField: TSP_Reference? = nil
  fileprivate var _date: TSP_Date? = nil
  fileprivate var _dateStyle: TSWP_DateTimeSmartFieldArchive.DateTimeFormatterStyle? = nil
  fileprivate var _timeStyle: TSWP_DateTimeSmartFieldArchive.DateTimeFormatterStyle? = nil
}

struct TSWP_ApplyRubyTextCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storage: TSP_Reference {
    get {return _storage ?? TSP_Reference()}
    set {_storage = newValue}
  }
  /// Returns true if `storage` has been explicitly set.
  var hasStorage: Bool {return self._storage != nil}
  /// Clears the value of `storage`. Subsequent reads from it will return its default value.
  mutating func clearStorage() {self._storage = nil}

  var selectionRangeLocation: UInt32 {
    get {return _selectionRangeLocation ?? 0}
    set {_selectionRangeLocation = newValue}
  }
  /// Returns true if `selectionRangeLocation` has been explicitly set.
  var hasSelectionRangeLocation: Bool {return self._selectionRangeLocation != nil}
  /// Clears the value of `selectionRangeLocation`. Subsequent reads from it will return its default value.
  mutating func clearSelectionRangeLocation() {self._selectionRangeLocation = nil}

  var selectionRangeLength: UInt32 {
    get {return _selectionRangeLength ?? 0}
    set {_selectionRangeLength = newValue}
  }
  /// Returns true if `selectionRangeLength` has been explicitly set.
  var hasSelectionRangeLength: Bool {return self._selectionRangeLength != nil}
  /// Clears the value of `selectionRangeLength`. Subsequent reads from it will return its default value.
  mutating func clearSelectionRangeLength() {self._selectionRangeLength = nil}

  var rubyText: String {
    get {return _rubyText ?? String()}
    set {_rubyText = newValue}
  }
  /// Returns true if `rubyText` has been explicitly set.
  var hasRubyText: Bool {return self._rubyText != nil}
  /// Clears the value of `rubyText`. Subsequent reads from it will return its default value.
  mutating func clearRubyText() {self._rubyText = nil}

  var undoTransaction: TSWP_UndoTransaction {
    get {return _undoTransaction ?? TSWP_UndoTransaction()}
    set {_undoTransaction = newValue}
  }
  /// Returns true if `undoTransaction` has been explicitly set.
  var hasUndoTransaction: Bool {return self._undoTransaction != nil}
  /// Clears the value of `undoTransaction`. Subsequent reads from it will return its default value.
  mutating func clearUndoTransaction() {self._undoTransaction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _storage: TSP_Reference? = nil
  fileprivate var _selectionRangeLocation: UInt32? = nil
  fileprivate var _selectionRangeLength: UInt32? = nil
  fileprivate var _rubyText: String? = nil
  fileprivate var _undoTransaction: TSWP_UndoTransaction? = nil
}

struct TSWP_ModifyRubyTextCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var rubyField: TSP_Reference {
    get {return _rubyField ?? TSP_Reference()}
    set {_rubyField = newValue}
  }
  /// Returns true if `rubyField` has been explicitly set.
  var hasRubyField: Bool {return self._rubyField != nil}
  /// Clears the value of `rubyField`. Subsequent reads from it will return its default value.
  mutating func clearRubyField() {self._rubyField = nil}

  var rubyText: String {
    get {return _rubyText ?? String()}
    set {_rubyText = newValue}
  }
  /// Returns true if `rubyText` has been explicitly set.
  var hasRubyText: Bool {return self._rubyText != nil}
  /// Clears the value of `rubyText`. Subsequent reads from it will return its default value.
  mutating func clearRubyText() {self._rubyText = nil}

  var baseText: String {
    get {return _baseText ?? String()}
    set {_baseText = newValue}
  }
  /// Returns true if `baseText` has been explicitly set.
  var hasBaseText: Bool {return self._baseText != nil}
  /// Clears the value of `baseText`. Subsequent reads from it will return its default value.
  mutating func clearBaseText() {self._baseText = nil}

  var undoTransaction: TSWP_UndoTransaction {
    get {return _undoTransaction ?? TSWP_UndoTransaction()}
    set {_undoTransaction = newValue}
  }
  /// Returns true if `undoTransaction` has been explicitly set.
  var hasUndoTransaction: Bool {return self._undoTransaction != nil}
  /// Clears the value of `undoTransaction`. Subsequent reads from it will return its default value.
  mutating func clearUndoTransaction() {self._undoTransaction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _rubyField: TSP_Reference? = nil
  fileprivate var _rubyText: String? = nil
  fileprivate var _baseText: String? = nil
  fileprivate var _undoTransaction: TSWP_UndoTransaction? = nil
}

struct TSWP_ModifyTOCSettingsBaseCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldTocSettings: TSP_Reference {
    get {return _oldTocSettings ?? TSP_Reference()}
    set {_oldTocSettings = newValue}
  }
  /// Returns true if `oldTocSettings` has been explicitly set.
  var hasOldTocSettings: Bool {return self._oldTocSettings != nil}
  /// Clears the value of `oldTocSettings`. Subsequent reads from it will return its default value.
  mutating func clearOldTocSettings() {self._oldTocSettings = nil}

  var newTocSettings: TSP_Reference {
    get {return _newTocSettings ?? TSP_Reference()}
    set {_newTocSettings = newValue}
  }
  /// Returns true if `newTocSettings` has been explicitly set.
  var hasNewTocSettings: Bool {return self._newTocSettings != nil}
  /// Clears the value of `newTocSettings`. Subsequent reads from it will return its default value.
  mutating func clearNewTocSettings() {self._newTocSettings = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _oldTocSettings: TSP_Reference? = nil
  fileprivate var _newTocSettings: TSP_Reference? = nil
}

struct TSWP_ModifyTOCSettingsForTOCInfoCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSWP_ModifyTOCSettingsBaseCommandArchive {
    get {return _super ?? TSWP_ModifyTOCSettingsBaseCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var tocInfoUuidPath: TSP_UUIDPath {
    get {return _tocInfoUuidPath ?? TSP_UUIDPath()}
    set {_tocInfoUuidPath = newValue}
  }
  /// Returns true if `tocInfoUuidPath` has been explicitly set.
  var hasTocInfoUuidPath: Bool {return self._tocInfoUuidPath != nil}
  /// Clears the value of `tocInfoUuidPath`. Subsequent reads from it will return its default value.
  mutating func clearTocInfoUuidPath() {self._tocInfoUuidPath = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSWP_ModifyTOCSettingsBaseCommandArchive? = nil
  fileprivate var _tocInfoUuidPath: TSP_UUIDPath? = nil
}

struct TSWP_ModifyTOCSettingsPresetForThemeCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSWP_ModifyTOCSettingsBaseCommandArchive {
    get {return _super ?? TSWP_ModifyTOCSettingsBaseCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var theme: TSP_Reference {
    get {return _theme ?? TSP_Reference()}
    set {_theme = newValue}
  }
  /// Returns true if `theme` has been explicitly set.
  var hasTheme: Bool {return self._theme != nil}
  /// Clears the value of `theme`. Subsequent reads from it will return its default value.
  mutating func clearTheme() {self._theme = nil}

  var presetIndex: UInt32 {
    get {return _presetIndex ?? 0}
    set {_presetIndex = newValue}
  }
  /// Returns true if `presetIndex` has been explicitly set.
  var hasPresetIndex: Bool {return self._presetIndex != nil}
  /// Clears the value of `presetIndex`. Subsequent reads from it will return its default value.
  mutating func clearPresetIndex() {self._presetIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSWP_ModifyTOCSettingsBaseCommandArchive? = nil
  fileprivate var _theme: TSP_Reference? = nil
  fileprivate var _presetIndex: UInt32? = nil
}

struct TSWP_AnchorAttachmentCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSWP_StorageActionCommandArchive {
    get {return _super ?? TSWP_StorageActionCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var attachment: TSP_Reference {
    get {return _attachment ?? TSP_Reference()}
    set {_attachment = newValue}
  }
  /// Returns true if `attachment` has been explicitly set.
  var hasAttachment: Bool {return self._attachment != nil}
  /// Clears the value of `attachment`. Subsequent reads from it will return its default value.
  mutating func clearAttachment() {self._attachment = nil}

  var hOffsetType: UInt32 {
    get {return _hOffsetType ?? 0}
    set {_hOffsetType = newValue}
  }
  /// Returns true if `hOffsetType` has been explicitly set.
  var hasHOffsetType: Bool {return self._hOffsetType != nil}
  /// Clears the value of `hOffsetType`. Subsequent reads from it will return its default value.
  mutating func clearHOffsetType() {self._hOffsetType = nil}

  var hOffset: Float {
    get {return _hOffset ?? 0}
    set {_hOffset = newValue}
  }
  /// Returns true if `hOffset` has been explicitly set.
  var hasHOffset: Bool {return self._hOffset != nil}
  /// Clears the value of `hOffset`. Subsequent reads from it will return its default value.
  mutating func clearHOffset() {self._hOffset = nil}

  var vOffsetType: UInt32 {
    get {return _vOffsetType ?? 0}
    set {_vOffsetType = newValue}
  }
  /// Returns true if `vOffsetType` has been explicitly set.
  var hasVOffsetType: Bool {return self._vOffsetType != nil}
  /// Clears the value of `vOffsetType`. Subsequent reads from it will return its default value.
  mutating func clearVOffsetType() {self._vOffsetType = nil}

  var vOffset: Float {
    get {return _vOffset ?? 0}
    set {_vOffset = newValue}
  }
  /// Returns true if `vOffset` has been explicitly set.
  var hasVOffset: Bool {return self._vOffset != nil}
  /// Clears the value of `vOffset`. Subsequent reads from it will return its default value.
  mutating func clearVOffset() {self._vOffset = nil}

  var isHtmlWrap: Bool {
    get {return _isHtmlWrap ?? false}
    set {_isHtmlWrap = newValue}
  }
  /// Returns true if `isHtmlWrap` has been explicitly set.
  var hasIsHtmlWrap: Bool {return self._isHtmlWrap != nil}
  /// Clears the value of `isHtmlWrap`. Subsequent reads from it will return its default value.
  mutating func clearIsHtmlWrap() {self._isHtmlWrap = nil}

  var undoHOffsetType: UInt32 {
    get {return _undoHOffsetType ?? 0}
    set {_undoHOffsetType = newValue}
  }
  /// Returns true if `undoHOffsetType` has been explicitly set.
  var hasUndoHOffsetType: Bool {return self._undoHOffsetType != nil}
  /// Clears the value of `undoHOffsetType`. Subsequent reads from it will return its default value.
  mutating func clearUndoHOffsetType() {self._undoHOffsetType = nil}

  var undoHOffset: Float {
    get {return _undoHOffset ?? 0}
    set {_undoHOffset = newValue}
  }
  /// Returns true if `undoHOffset` has been explicitly set.
  var hasUndoHOffset: Bool {return self._undoHOffset != nil}
  /// Clears the value of `undoHOffset`. Subsequent reads from it will return its default value.
  mutating func clearUndoHOffset() {self._undoHOffset = nil}

  var undoVOffsetType: UInt32 {
    get {return _undoVOffsetType ?? 0}
    set {_undoVOffsetType = newValue}
  }
  /// Returns true if `undoVOffsetType` has been explicitly set.
  var hasUndoVOffsetType: Bool {return self._undoVOffsetType != nil}
  /// Clears the value of `undoVOffsetType`. Subsequent reads from it will return its default value.
  mutating func clearUndoVOffsetType() {self._undoVOffsetType = nil}

  var undoVOffset: Float {
    get {return _undoVOffset ?? 0}
    set {_undoVOffset = newValue}
  }
  /// Returns true if `undoVOffset` has been explicitly set.
  var hasUndoVOffset: Bool {return self._undoVOffset != nil}
  /// Clears the value of `undoVOffset`. Subsequent reads from it will return its default value.
  mutating func clearUndoVOffset() {self._undoVOffset = nil}

  var undoIsHtmlWrap: Bool {
    get {return _undoIsHtmlWrap ?? false}
    set {_undoIsHtmlWrap = newValue}
  }
  /// Returns true if `undoIsHtmlWrap` has been explicitly set.
  var hasUndoIsHtmlWrap: Bool {return self._undoIsHtmlWrap != nil}
  /// Clears the value of `undoIsHtmlWrap`. Subsequent reads from it will return its default value.
  mutating func clearUndoIsHtmlWrap() {self._undoIsHtmlWrap = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSWP_StorageActionCommandArchive? = nil
  fileprivate var _attachment: TSP_Reference? = nil
  fileprivate var _hOffsetType: UInt32? = nil
  fileprivate var _hOffset: Float? = nil
  fileprivate var _vOffsetType: UInt32? = nil
  fileprivate var _vOffset: Float? = nil
  fileprivate var _isHtmlWrap: Bool? = nil
  fileprivate var _undoHOffsetType: UInt32? = nil
  fileprivate var _undoHOffset: Float? = nil
  fileprivate var _undoVOffsetType: UInt32? = nil
  fileprivate var _undoVOffset: Float? = nil
  fileprivate var _undoIsHtmlWrap: Bool? = nil
}

struct TSWP_TextApplyThemeCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSS_ApplyThemeChildCommandArchive {
    get {return _super ?? TSS_ApplyThemeChildCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storage: TSP_Reference {
    get {return _storage ?? TSP_Reference()}
    set {_storage = newValue}
  }
  /// Returns true if `storage` has been explicitly set.
  var hasStorage: Bool {return self._storage != nil}
  /// Clears the value of `storage`. Subsequent reads from it will return its default value.
  mutating func clearStorage() {self._storage = nil}

  var undoTransaction: TSWP_UndoTransaction {
    get {return _undoTransaction ?? TSWP_UndoTransaction()}
    set {_undoTransaction = newValue}
  }
  /// Returns true if `undoTransaction` has been explicitly set.
  var hasUndoTransaction: Bool {return self._undoTransaction != nil}
  /// Clears the value of `undoTransaction`. Subsequent reads from it will return its default value.
  mutating func clearUndoTransaction() {self._undoTransaction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSS_ApplyThemeChildCommandArchive? = nil
  fileprivate var _storage: TSP_Reference? = nil
  fileprivate var _undoTransaction: TSWP_UndoTransaction? = nil
}

struct TSWP_MoveColumnsCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storage: TSP_Reference {
    get {return _storage ?? TSP_Reference()}
    set {_storage = newValue}
  }
  /// Returns true if `storage` has been explicitly set.
  var hasStorage: Bool {return self._storage != nil}
  /// Clears the value of `storage`. Subsequent reads from it will return its default value.
  mutating func clearStorage() {self._storage = nil}

  var srcIndex: UInt32 {
    get {return _srcIndex ?? 0}
    set {_srcIndex = newValue}
  }
  /// Returns true if `srcIndex` has been explicitly set.
  var hasSrcIndex: Bool {return self._srcIndex != nil}
  /// Clears the value of `srcIndex`. Subsequent reads from it will return its default value.
  mutating func clearSrcIndex() {self._srcIndex = nil}

  var dstIndex: UInt32 {
    get {return _dstIndex ?? 0}
    set {_dstIndex = newValue}
  }
  /// Returns true if `dstIndex` has been explicitly set.
  var hasDstIndex: Bool {return self._dstIndex != nil}
  /// Clears the value of `dstIndex`. Subsequent reads from it will return its default value.
  mutating func clearDstIndex() {self._dstIndex = nil}

  var count: UInt32 {
    get {return _count ?? 0}
    set {_count = newValue}
  }
  /// Returns true if `count` has been explicitly set.
  var hasCount: Bool {return self._count != nil}
  /// Clears the value of `count`. Subsequent reads from it will return its default value.
  mutating func clearCount() {self._count = nil}

  var undoTransaction: TSWP_UndoTransaction {
    get {return _undoTransaction ?? TSWP_UndoTransaction()}
    set {_undoTransaction = newValue}
  }
  /// Returns true if `undoTransaction` has been explicitly set.
  var hasUndoTransaction: Bool {return self._undoTransaction != nil}
  /// Clears the value of `undoTransaction`. Subsequent reads from it will return its default value.
  mutating func clearUndoTransaction() {self._undoTransaction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _storage: TSP_Reference? = nil
  fileprivate var _srcIndex: UInt32? = nil
  fileprivate var _dstIndex: UInt32? = nil
  fileprivate var _count: UInt32? = nil
  fileprivate var _undoTransaction: TSWP_UndoTransaction? = nil
}

struct TSWP_MoveRowsCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storage: TSP_Reference {
    get {return _storage ?? TSP_Reference()}
    set {_storage = newValue}
  }
  /// Returns true if `storage` has been explicitly set.
  var hasStorage: Bool {return self._storage != nil}
  /// Clears the value of `storage`. Subsequent reads from it will return its default value.
  mutating func clearStorage() {self._storage = nil}

  var srcIndex: UInt32 {
    get {return _srcIndex ?? 0}
    set {_srcIndex = newValue}
  }
  /// Returns true if `srcIndex` has been explicitly set.
  var hasSrcIndex: Bool {return self._srcIndex != nil}
  /// Clears the value of `srcIndex`. Subsequent reads from it will return its default value.
  mutating func clearSrcIndex() {self._srcIndex = nil}

  var dstIndex: UInt32 {
    get {return _dstIndex ?? 0}
    set {_dstIndex = newValue}
  }
  /// Returns true if `dstIndex` has been explicitly set.
  var hasDstIndex: Bool {return self._dstIndex != nil}
  /// Clears the value of `dstIndex`. Subsequent reads from it will return its default value.
  mutating func clearDstIndex() {self._dstIndex = nil}

  var count: UInt32 {
    get {return _count ?? 0}
    set {_count = newValue}
  }
  /// Returns true if `count` has been explicitly set.
  var hasCount: Bool {return self._count != nil}
  /// Clears the value of `count`. Subsequent reads from it will return its default value.
  mutating func clearCount() {self._count = nil}

  var undoTransaction: TSWP_UndoTransaction {
    get {return _undoTransaction ?? TSWP_UndoTransaction()}
    set {_undoTransaction = newValue}
  }
  /// Returns true if `undoTransaction` has been explicitly set.
  var hasUndoTransaction: Bool {return self._undoTransaction != nil}
  /// Clears the value of `undoTransaction`. Subsequent reads from it will return its default value.
  mutating func clearUndoTransaction() {self._undoTransaction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _storage: TSP_Reference? = nil
  fileprivate var _srcIndex: UInt32? = nil
  fileprivate var _dstIndex: UInt32? = nil
  fileprivate var _count: UInt32? = nil
  fileprivate var _undoTransaction: TSWP_UndoTransaction? = nil
}

struct TSWP_ShapeApplyPresetCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_BaseApplyPresetCommandArchive {
    get {return _super ?? TSD_BaseApplyPresetCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var undoStyle: TSP_Reference {
    get {return _undoStyle ?? TSP_Reference()}
    set {_undoStyle = newValue}
  }
  /// Returns true if `undoStyle` has been explicitly set.
  var hasUndoStyle: Bool {return self._undoStyle != nil}
  /// Clears the value of `undoStyle`. Subsequent reads from it will return its default value.
  mutating func clearUndoStyle() {self._undoStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_BaseApplyPresetCommandArchive? = nil
  fileprivate var _undoStyle: TSP_Reference? = nil
}

struct TSWP_StyleBaseCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var theme: TSP_Reference {
    get {return _theme ?? TSP_Reference()}
    set {_theme = newValue}
  }
  /// Returns true if `theme` has been explicitly set.
  var hasTheme: Bool {return self._theme != nil}
  /// Clears the value of `theme`. Subsequent reads from it will return its default value.
  mutating func clearTheme() {self._theme = nil}

  var style: TSP_Reference {
    get {return _style ?? TSP_Reference()}
    set {_style = newValue}
  }
  /// Returns true if `style` has been explicitly set.
  var hasStyle: Bool {return self._style != nil}
  /// Clears the value of `style`. Subsequent reads from it will return its default value.
  mutating func clearStyle() {self._style = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _theme: TSP_Reference? = nil
  fileprivate var _style: TSP_Reference? = nil
}

struct TSWP_StyleCreateCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSWP_StyleBaseCommandArchive {
    get {return _super ?? TSWP_StyleBaseCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var presetIndex: UInt32 {
    get {return _presetIndex ?? 0}
    set {_presetIndex = newValue}
  }
  /// Returns true if `presetIndex` has been explicitly set.
  var hasPresetIndex: Bool {return self._presetIndex != nil}
  /// Clears the value of `presetIndex`. Subsequent reads from it will return its default value.
  mutating func clearPresetIndex() {self._presetIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSWP_StyleBaseCommandArchive? = nil
  fileprivate var _presetIndex: UInt32? = nil
}

struct TSWP_StyleRenameCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSWP_StyleBaseCommandArchive {
    get {return _super ?? TSWP_StyleBaseCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var updatedName: String {
    get {return _updatedName ?? String()}
    set {_updatedName = newValue}
  }
  /// Returns true if `updatedName` has been explicitly set.
  var hasUpdatedName: Bool {return self._updatedName != nil}
  /// Clears the value of `updatedName`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedName() {self._updatedName = nil}

  var oldName: String {
    get {return _oldName ?? String()}
    set {_oldName = newValue}
  }
  /// Returns true if `oldName` has been explicitly set.
  var hasOldName: Bool {return self._oldName != nil}
  /// Clears the value of `oldName`. Subsequent reads from it will return its default value.
  mutating func clearOldName() {self._oldName = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSWP_StyleBaseCommandArchive? = nil
  fileprivate var _updatedName: String? = nil
  fileprivate var _oldName: String? = nil
}

struct TSWP_StyleUpdateCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSWP_StyleBaseCommandArchive {
    get {return _super ?? TSWP_StyleBaseCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var originalStyle: TSP_Reference {
    get {return _originalStyle ?? TSP_Reference()}
    set {_originalStyle = newValue}
  }
  /// Returns true if `originalStyle` has been explicitly set.
  var hasOriginalStyle: Bool {return self._originalStyle != nil}
  /// Clears the value of `originalStyle`. Subsequent reads from it will return its default value.
  mutating func clearOriginalStyle() {self._originalStyle = nil}

  var updatedStyle: TSP_Reference {
    get {return _updatedStyle ?? TSP_Reference()}
    set {_updatedStyle = newValue}
  }
  /// Returns true if `updatedStyle` has been explicitly set.
  var hasUpdatedStyle: Bool {return self._updatedStyle != nil}
  /// Clears the value of `updatedStyle`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedStyle() {self._updatedStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSWP_StyleBaseCommandArchive? = nil
  fileprivate var _originalStyle: TSP_Reference? = nil
  fileprivate var _updatedStyle: TSP_Reference? = nil
}

struct TSWP_StyleDeleteCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSWP_StyleBaseCommandArchive {
    get {return _super ?? TSWP_StyleBaseCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldPresetIndex: UInt32 {
    get {return _oldPresetIndex ?? 0}
    set {_oldPresetIndex = newValue}
  }
  /// Returns true if `oldPresetIndex` has been explicitly set.
  var hasOldPresetIndex: Bool {return self._oldPresetIndex != nil}
  /// Clears the value of `oldPresetIndex`. Subsequent reads from it will return its default value.
  mutating func clearOldPresetIndex() {self._oldPresetIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSWP_StyleBaseCommandArchive? = nil
  fileprivate var _oldPresetIndex: UInt32? = nil
}

struct TSWP_StyleReorderCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSWP_StyleBaseCommandArchive {
    get {return _super ?? TSWP_StyleBaseCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldPresetIndex: UInt32 {
    get {return _oldPresetIndex ?? 0}
    set {_oldPresetIndex = newValue}
  }
  /// Returns true if `oldPresetIndex` has been explicitly set.
  var hasOldPresetIndex: Bool {return self._oldPresetIndex != nil}
  /// Clears the value of `oldPresetIndex`. Subsequent reads from it will return its default value.
  mutating func clearOldPresetIndex() {self._oldPresetIndex = nil}

  var newPresetIndex: UInt32 {
    get {return _newPresetIndex ?? 0}
    set {_newPresetIndex = newValue}
  }
  /// Returns true if `newPresetIndex` has been explicitly set.
  var hasNewPresetIndex: Bool {return self._newPresetIndex != nil}
  /// Clears the value of `newPresetIndex`. Subsequent reads from it will return its default value.
  mutating func clearNewPresetIndex() {self._newPresetIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSWP_StyleBaseCommandArchive? = nil
  fileprivate var _oldPresetIndex: UInt32? = nil
  fileprivate var _newPresetIndex: UInt32? = nil
}

struct TSWP_StyleUpdatePropertyMapCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSS_StyleUpdatePropertyMapCommandArchive {
    get {return _super ?? TSS_StyleUpdatePropertyMapCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSS_StyleUpdatePropertyMapCommandArchive? = nil
}

struct TSWP_ShapeStyleSetValueCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_BaseStyleSetValueCommandArchive {
    get {return _super ?? TSD_BaseStyleSetValueCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var change: TSWP_ShapeStylePropertyChangeSetArchive {
    get {return _change ?? TSWP_ShapeStylePropertyChangeSetArchive()}
    set {_change = newValue}
  }
  /// Returns true if `change` has been explicitly set.
  var hasChange: Bool {return self._change != nil}
  /// Clears the value of `change`. Subsequent reads from it will return its default value.
  mutating func clearChange() {self._change = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_BaseStyleSetValueCommandArchive? = nil
  fileprivate var _change: TSWP_ShapeStylePropertyChangeSetArchive? = nil
}

struct TSWP_SelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var storageUuidPath: TSP_UUIDPath {
    get {return _storageUuidPath ?? TSP_UUIDPath()}
    set {_storageUuidPath = newValue}
  }
  /// Returns true if `storageUuidPath` has been explicitly set.
  var hasStorageUuidPath: Bool {return self._storageUuidPath != nil}
  /// Clears the value of `storageUuidPath`. Subsequent reads from it will return its default value.
  mutating func clearStorageUuidPath() {self._storageUuidPath = nil}

  var selection: TSP_Reference {
    get {return _selection ?? TSP_Reference()}
    set {_selection = newValue}
  }
  /// Returns true if `selection` has been explicitly set.
  var hasSelection: Bool {return self._selection != nil}
  /// Clears the value of `selection`. Subsequent reads from it will return its default value.
  mutating func clearSelection() {self._selection = nil}

  var transformedToNoop: Bool {
    get {return _transformedToNoop ?? false}
    set {_transformedToNoop = newValue}
  }
  /// Returns true if `transformedToNoop` has been explicitly set.
  var hasTransformedToNoop: Bool {return self._transformedToNoop != nil}
  /// Clears the value of `transformedToNoop`. Subsequent reads from it will return its default value.
  mutating func clearTransformedToNoop() {self._transformedToNoop = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storageUuidPath: TSP_UUIDPath? = nil
  fileprivate var _selection: TSP_Reference? = nil
  fileprivate var _transformedToNoop: Bool? = nil
}

struct TSWP_PencilAnnotationSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var storageUuidPath: TSP_UUIDPath {
    get {return _storageUuidPath ?? TSP_UUIDPath()}
    set {_storageUuidPath = newValue}
  }
  /// Returns true if `storageUuidPath` has been explicitly set.
  var hasStorageUuidPath: Bool {return self._storageUuidPath != nil}
  /// Clears the value of `storageUuidPath`. Subsequent reads from it will return its default value.
  mutating func clearStorageUuidPath() {self._storageUuidPath = nil}

  var textPencilAnnotationUuid: String {
    get {return _textPencilAnnotationUuid ?? String()}
    set {_textPencilAnnotationUuid = newValue}
  }
  /// Returns true if `textPencilAnnotationUuid` has been explicitly set.
  var hasTextPencilAnnotationUuid: Bool {return self._textPencilAnnotationUuid != nil}
  /// Clears the value of `textPencilAnnotationUuid`. Subsequent reads from it will return its default value.
  mutating func clearTextPencilAnnotationUuid() {self._textPencilAnnotationUuid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storageUuidPath: TSP_UUIDPath? = nil
  fileprivate var _textPencilAnnotationUuid: String? = nil
}

struct TSWP_ShapeSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_ShapeSelectionTransformerArchive {
    get {return _super ?? TSD_ShapeSelectionTransformerArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storageUuidPath: TSP_UUIDPath {
    get {return _storageUuidPath ?? TSP_UUIDPath()}
    set {_storageUuidPath = newValue}
  }
  /// Returns true if `storageUuidPath` has been explicitly set.
  var hasStorageUuidPath: Bool {return self._storageUuidPath != nil}
  /// Clears the value of `storageUuidPath`. Subsequent reads from it will return its default value.
  mutating func clearStorageUuidPath() {self._storageUuidPath = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_ShapeSelectionTransformerArchive? = nil
  fileprivate var _storageUuidPath: TSP_UUIDPath? = nil
}

struct TSWP_ShapeContentDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_DrawableContentDescription {
    get {return _super ?? TSD_DrawableContentDescription()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var textRangeLocation: UInt32 {
    get {return _textRangeLocation ?? 0}
    set {_textRangeLocation = newValue}
  }
  /// Returns true if `textRangeLocation` has been explicitly set.
  var hasTextRangeLocation: Bool {return self._textRangeLocation != nil}
  /// Clears the value of `textRangeLocation`. Subsequent reads from it will return its default value.
  mutating func clearTextRangeLocation() {self._textRangeLocation = nil}

  var textRangeLength: UInt32 {
    get {return _textRangeLength ?? 0}
    set {_textRangeLength = newValue}
  }
  /// Returns true if `textRangeLength` has been explicitly set.
  var hasTextRangeLength: Bool {return self._textRangeLength != nil}
  /// Clears the value of `textRangeLength`. Subsequent reads from it will return its default value.
  mutating func clearTextRangeLength() {self._textRangeLength = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_DrawableContentDescription? = nil
  fileprivate var _textRangeLocation: UInt32? = nil
  fileprivate var _textRangeLength: UInt32? = nil
}

struct TSWP_ObjectPropertyArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var type: TSWP_ObjectPropertyType {
    get {return _type ?? .kObjectPropertyTypeBool}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var boolValue: Bool {
    get {return _boolValue ?? false}
    set {_boolValue = newValue}
  }
  /// Returns true if `boolValue` has been explicitly set.
  var hasBoolValue: Bool {return self._boolValue != nil}
  /// Clears the value of `boolValue`. Subsequent reads from it will return its default value.
  mutating func clearBoolValue() {self._boolValue = nil}

  var floatValue: Float {
    get {return _floatValue ?? 0}
    set {_floatValue = newValue}
  }
  /// Returns true if `floatValue` has been explicitly set.
  var hasFloatValue: Bool {return self._floatValue != nil}
  /// Clears the value of `floatValue`. Subsequent reads from it will return its default value.
  mutating func clearFloatValue() {self._floatValue = nil}

  var integerValue: Int32 {
    get {return _integerValue ?? 0}
    set {_integerValue = newValue}
  }
  /// Returns true if `integerValue` has been explicitly set.
  var hasIntegerValue: Bool {return self._integerValue != nil}
  /// Clears the value of `integerValue`. Subsequent reads from it will return its default value.
  mutating func clearIntegerValue() {self._integerValue = nil}

  var stringValue: String {
    get {return _stringValue ?? String()}
    set {_stringValue = newValue}
  }
  /// Returns true if `stringValue` has been explicitly set.
  var hasStringValue: Bool {return self._stringValue != nil}
  /// Clears the value of `stringValue`. Subsequent reads from it will return its default value.
  mutating func clearStringValue() {self._stringValue = nil}

  var idPathValue: TSP_UUIDPath {
    get {return _idPathValue ?? TSP_UUIDPath()}
    set {_idPathValue = newValue}
  }
  /// Returns true if `idPathValue` has been explicitly set.
  var hasIDPathValue: Bool {return self._idPathValue != nil}
  /// Clears the value of `idPathValue`. Subsequent reads from it will return its default value.
  mutating func clearIDPathValue() {self._idPathValue = nil}

  var fillValue: TSD_FillArchive {
    get {return _fillValue ?? TSD_FillArchive()}
    set {_fillValue = newValue}
  }
  /// Returns true if `fillValue` has been explicitly set.
  var hasFillValue: Bool {return self._fillValue != nil}
  /// Clears the value of `fillValue`. Subsequent reads from it will return its default value.
  mutating func clearFillValue() {self._fillValue = nil}

  var colorValue: TSP_Color {
    get {return _colorValue ?? TSP_Color()}
    set {_colorValue = newValue}
  }
  /// Returns true if `colorValue` has been explicitly set.
  var hasColorValue: Bool {return self._colorValue != nil}
  /// Clears the value of `colorValue`. Subsequent reads from it will return its default value.
  mutating func clearColorValue() {self._colorValue = nil}

  var shadowValue: TSD_ShadowArchive {
    get {return _shadowValue ?? TSD_ShadowArchive()}
    set {_shadowValue = newValue}
  }
  /// Returns true if `shadowValue` has been explicitly set.
  var hasShadowValue: Bool {return self._shadowValue != nil}
  /// Clears the value of `shadowValue`. Subsequent reads from it will return its default value.
  mutating func clearShadowValue() {self._shadowValue = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _type: TSWP_ObjectPropertyType? = nil
  fileprivate var _boolValue: Bool? = nil
  fileprivate var _floatValue: Float? = nil
  fileprivate var _integerValue: Int32? = nil
  fileprivate var _stringValue: String? = nil
  fileprivate var _idPathValue: TSP_UUIDPath? = nil
  fileprivate var _fillValue: TSD_FillArchive? = nil
  fileprivate var _colorValue: TSP_Color? = nil
  fileprivate var _shadowValue: TSD_ShadowArchive? = nil
}

struct TSWP_SetObjectPropertiesCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var objectUuidPath: TSP_UUIDPath {
    get {return _objectUuidPath ?? TSP_UUIDPath()}
    set {_objectUuidPath = newValue}
  }
  /// Returns true if `objectUuidPath` has been explicitly set.
  var hasObjectUuidPath: Bool {return self._objectUuidPath != nil}
  /// Clears the value of `objectUuidPath`. Subsequent reads from it will return its default value.
  mutating func clearObjectUuidPath() {self._objectUuidPath = nil}

  var properties: [TSWP_ObjectPropertyArchive] = []

  var actionString: String {
    get {return _actionString ?? String()}
    set {_actionString = newValue}
  }
  /// Returns true if `actionString` has been explicitly set.
  var hasActionString: Bool {return self._actionString != nil}
  /// Clears the value of `actionString`. Subsequent reads from it will return its default value.
  mutating func clearActionString() {self._actionString = nil}

  var oldProperties: [TSWP_ObjectPropertyArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _objectUuidPath: TSP_UUIDPath? = nil
  fileprivate var _actionString: String? = nil
}

struct TSWP_UpdateFlowInfoCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var commandMode: TSWP_UpdateFlowInfoCommandArchive.Mode {
    get {return _commandMode ?? .kModeRearrange}
    set {_commandMode = newValue}
  }
  /// Returns true if `commandMode` has been explicitly set.
  var hasCommandMode: Bool {return self._commandMode != nil}
  /// Clears the value of `commandMode`. Subsequent reads from it will return its default value.
  mutating func clearCommandMode() {self._commandMode = nil}

  var flowInfoUuidPath: TSP_UUIDPath {
    get {return _flowInfoUuidPath ?? TSP_UUIDPath()}
    set {_flowInfoUuidPath = newValue}
  }
  /// Returns true if `flowInfoUuidPath` has been explicitly set.
  var hasFlowInfoUuidPath: Bool {return self._flowInfoUuidPath != nil}
  /// Clears the value of `flowInfoUuidPath`. Subsequent reads from it will return its default value.
  mutating func clearFlowInfoUuidPath() {self._flowInfoUuidPath = nil}

  var textBoxIDPathToAddOrRemove: TSP_UUIDPath {
    get {return _textBoxIDPathToAddOrRemove ?? TSP_UUIDPath()}
    set {_textBoxIDPathToAddOrRemove = newValue}
  }
  /// Returns true if `textBoxIDPathToAddOrRemove` has been explicitly set.
  var hasTextBoxIDPathToAddOrRemove: Bool {return self._textBoxIDPathToAddOrRemove != nil}
  /// Clears the value of `textBoxIDPathToAddOrRemove`. Subsequent reads from it will return its default value.
  mutating func clearTextBoxIDPathToAddOrRemove() {self._textBoxIDPathToAddOrRemove = nil}

  var textBoxIDPathsAtStart: [TSP_UUIDPath] = []

  var suggestedTextBoxIDPathsAtEnd: [TSP_UUIDPath] = []

  var undoTextBoxesToRestore: [TSP_Reference] = []

  var undoAddedShapeInfo: TSP_Reference {
    get {return _undoAddedShapeInfo ?? TSP_Reference()}
    set {_undoAddedShapeInfo = newValue}
  }
  /// Returns true if `undoAddedShapeInfo` has been explicitly set.
  var hasUndoAddedShapeInfo: Bool {return self._undoAddedShapeInfo != nil}
  /// Clears the value of `undoAddedShapeInfo`. Subsequent reads from it will return its default value.
  mutating func clearUndoAddedShapeInfo() {self._undoAddedShapeInfo = nil}

  var undoRemovedShapeInfo: TSP_Reference {
    get {return _undoRemovedShapeInfo ?? TSP_Reference()}
    set {_undoRemovedShapeInfo = newValue}
  }
  /// Returns true if `undoRemovedShapeInfo` has been explicitly set.
  var hasUndoRemovedShapeInfo: Bool {return self._undoRemovedShapeInfo != nil}
  /// Clears the value of `undoRemovedShapeInfo`. Subsequent reads from it will return its default value.
  mutating func clearUndoRemovedShapeInfo() {self._undoRemovedShapeInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Mode: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kModeRearrange // = 0
    case kModeAdd // = 1
    case kModeRemove // = 2
    case kModeCompensate // = 3

    init() {
      self = .kModeRearrange
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kModeRearrange
      case 1: self = .kModeAdd
      case 2: self = .kModeRemove
      case 3: self = .kModeCompensate
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kModeRearrange: return 0
      case .kModeAdd: return 1
      case .kModeRemove: return 2
      case .kModeCompensate: return 3
      }
    }

  }

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _commandMode: TSWP_UpdateFlowInfoCommandArchive.Mode? = nil
  fileprivate var _flowInfoUuidPath: TSP_UUIDPath? = nil
  fileprivate var _textBoxIDPathToAddOrRemove: TSP_UUIDPath? = nil
  fileprivate var _undoAddedShapeInfo: TSP_Reference? = nil
  fileprivate var _undoRemovedShapeInfo: TSP_Reference? = nil
}

#if swift(>=4.2)

extension TSWP_UpdateFlowInfoCommandArchive.Mode: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSWP_AddFlowInfoCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var flowInfoToAdd: TSP_Reference {
    get {return _flowInfoToAdd ?? TSP_Reference()}
    set {_flowInfoToAdd = newValue}
  }
  /// Returns true if `flowInfoToAdd` has been explicitly set.
  var hasFlowInfoToAdd: Bool {return self._flowInfoToAdd != nil}
  /// Clears the value of `flowInfoToAdd`. Subsequent reads from it will return its default value.
  mutating func clearFlowInfoToAdd() {self._flowInfoToAdd = nil}

  var flowInfoArchive: TSP_Reference {
    get {return _flowInfoArchive ?? TSP_Reference()}
    set {_flowInfoArchive = newValue}
  }
  /// Returns true if `flowInfoArchive` has been explicitly set.
  var hasFlowInfoArchive: Bool {return self._flowInfoArchive != nil}
  /// Clears the value of `flowInfoArchive`. Subsequent reads from it will return its default value.
  mutating func clearFlowInfoArchive() {self._flowInfoArchive = nil}

  var undoUserInterfaceIdentifierToRestore: UInt32 {
    get {return _undoUserInterfaceIdentifierToRestore ?? 0}
    set {_undoUserInterfaceIdentifierToRestore = newValue}
  }
  /// Returns true if `undoUserInterfaceIdentifierToRestore` has been explicitly set.
  var hasUndoUserInterfaceIdentifierToRestore: Bool {return self._undoUserInterfaceIdentifierToRestore != nil}
  /// Clears the value of `undoUserInterfaceIdentifierToRestore`. Subsequent reads from it will return its default value.
  mutating func clearUndoUserInterfaceIdentifierToRestore() {self._undoUserInterfaceIdentifierToRestore = nil}

  var undoNextUserInterfaceIdentifierToRestore: UInt32 {
    get {return _undoNextUserInterfaceIdentifierToRestore ?? 0}
    set {_undoNextUserInterfaceIdentifierToRestore = newValue}
  }
  /// Returns true if `undoNextUserInterfaceIdentifierToRestore` has been explicitly set.
  var hasUndoNextUserInterfaceIdentifierToRestore: Bool {return self._undoNextUserInterfaceIdentifierToRestore != nil}
  /// Clears the value of `undoNextUserInterfaceIdentifierToRestore`. Subsequent reads from it will return its default value.
  mutating func clearUndoNextUserInterfaceIdentifierToRestore() {self._undoNextUserInterfaceIdentifierToRestore = nil}

  var workingUndoObject: TSP_Reference {
    get {return _workingUndoObject ?? TSP_Reference()}
    set {_workingUndoObject = newValue}
  }
  /// Returns true if `workingUndoObject` has been explicitly set.
  var hasWorkingUndoObject: Bool {return self._workingUndoObject != nil}
  /// Clears the value of `workingUndoObject`. Subsequent reads from it will return its default value.
  mutating func clearWorkingUndoObject() {self._workingUndoObject = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _flowInfoToAdd: TSP_Reference? = nil
  fileprivate var _flowInfoArchive: TSP_Reference? = nil
  fileprivate var _undoUserInterfaceIdentifierToRestore: UInt32? = nil
  fileprivate var _undoNextUserInterfaceIdentifierToRestore: UInt32? = nil
  fileprivate var _workingUndoObject: TSP_Reference? = nil
}

struct TSWP_RemoveFlowInfoCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var flowInfoUuidPath: TSP_UUIDPath {
    get {return _flowInfoUuidPath ?? TSP_UUIDPath()}
    set {_flowInfoUuidPath = newValue}
  }
  /// Returns true if `flowInfoUuidPath` has been explicitly set.
  var hasFlowInfoUuidPath: Bool {return self._flowInfoUuidPath != nil}
  /// Clears the value of `flowInfoUuidPath`. Subsequent reads from it will return its default value.
  mutating func clearFlowInfoUuidPath() {self._flowInfoUuidPath = nil}

  var undoObject: TSP_Reference {
    get {return _undoObject ?? TSP_Reference()}
    set {_undoObject = newValue}
  }
  /// Returns true if `undoObject` has been explicitly set.
  var hasUndoObject: Bool {return self._undoObject != nil}
  /// Clears the value of `undoObject`. Subsequent reads from it will return its default value.
  mutating func clearUndoObject() {self._undoObject = nil}

  var undoUserInterfaceIdentifierToRestore: UInt32 {
    get {return _undoUserInterfaceIdentifierToRestore ?? 0}
    set {_undoUserInterfaceIdentifierToRestore = newValue}
  }
  /// Returns true if `undoUserInterfaceIdentifierToRestore` has been explicitly set.
  var hasUndoUserInterfaceIdentifierToRestore: Bool {return self._undoUserInterfaceIdentifierToRestore != nil}
  /// Clears the value of `undoUserInterfaceIdentifierToRestore`. Subsequent reads from it will return its default value.
  mutating func clearUndoUserInterfaceIdentifierToRestore() {self._undoUserInterfaceIdentifierToRestore = nil}

  var undoNextUserInterfaceIdentifierToRestore: UInt32 {
    get {return _undoNextUserInterfaceIdentifierToRestore ?? 0}
    set {_undoNextUserInterfaceIdentifierToRestore = newValue}
  }
  /// Returns true if `undoNextUserInterfaceIdentifierToRestore` has been explicitly set.
  var hasUndoNextUserInterfaceIdentifierToRestore: Bool {return self._undoNextUserInterfaceIdentifierToRestore != nil}
  /// Clears the value of `undoNextUserInterfaceIdentifierToRestore`. Subsequent reads from it will return its default value.
  mutating func clearUndoNextUserInterfaceIdentifierToRestore() {self._undoNextUserInterfaceIdentifierToRestore = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _flowInfoUuidPath: TSP_UUIDPath? = nil
  fileprivate var _undoObject: TSP_Reference? = nil
  fileprivate var _undoUserInterfaceIdentifierToRestore: UInt32? = nil
  fileprivate var _undoNextUserInterfaceIdentifierToRestore: UInt32? = nil
}

struct TSWP_TextCommentReplyCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storageUuidPath: TSP_UUIDPath {
    get {return _storageUuidPath ?? TSP_UUIDPath()}
    set {_storageUuidPath = newValue}
  }
  /// Returns true if `storageUuidPath` has been explicitly set.
  var hasStorageUuidPath: Bool {return self._storageUuidPath != nil}
  /// Clears the value of `storageUuidPath`. Subsequent reads from it will return its default value.
  mutating func clearStorageUuidPath() {self._storageUuidPath = nil}

  var annotationUuid: String {
    get {return _annotationUuid ?? String()}
    set {_annotationUuid = newValue}
  }
  /// Returns true if `annotationUuid` has been explicitly set.
  var hasAnnotationUuid: Bool {return self._annotationUuid != nil}
  /// Clears the value of `annotationUuid`. Subsequent reads from it will return its default value.
  mutating func clearAnnotationUuid() {self._annotationUuid = nil}

  var forwardComment: TSP_Reference {
    get {return _forwardComment ?? TSP_Reference()}
    set {_forwardComment = newValue}
  }
  /// Returns true if `forwardComment` has been explicitly set.
  var hasForwardComment: Bool {return self._forwardComment != nil}
  /// Clears the value of `forwardComment`. Subsequent reads from it will return its default value.
  mutating func clearForwardComment() {self._forwardComment = nil}

  var inverseComment: TSP_Reference {
    get {return _inverseComment ?? TSP_Reference()}
    set {_inverseComment = newValue}
  }
  /// Returns true if `inverseComment` has been explicitly set.
  var hasInverseComment: Bool {return self._inverseComment != nil}
  /// Clears the value of `inverseComment`. Subsequent reads from it will return its default value.
  mutating func clearInverseComment() {self._inverseComment = nil}

  var forwardVariant: TSD_CommentCommandVariant {
    get {return _forwardVariant ?? .baseComment}
    set {_forwardVariant = newValue}
  }
  /// Returns true if `forwardVariant` has been explicitly set.
  var hasForwardVariant: Bool {return self._forwardVariant != nil}
  /// Clears the value of `forwardVariant`. Subsequent reads from it will return its default value.
  mutating func clearForwardVariant() {self._forwardVariant = nil}

  var inverseVariant: TSD_CommentCommandVariant {
    get {return _inverseVariant ?? .baseComment}
    set {_inverseVariant = newValue}
  }
  /// Returns true if `inverseVariant` has been explicitly set.
  var hasInverseVariant: Bool {return self._inverseVariant != nil}
  /// Clears the value of `inverseVariant`. Subsequent reads from it will return its default value.
  mutating func clearInverseVariant() {self._inverseVariant = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _storageUuidPath: TSP_UUIDPath? = nil
  fileprivate var _annotationUuid: String? = nil
  fileprivate var _forwardComment: TSP_Reference? = nil
  fileprivate var _inverseComment: TSP_Reference? = nil
  fileprivate var _forwardVariant: TSD_CommentCommandVariant? = nil
  fileprivate var _inverseVariant: TSD_CommentCommandVariant? = nil
}

struct TSWP_ContainedObjectsCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var target: TSP_Reference {
    get {return _target ?? TSP_Reference()}
    set {_target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  var hasTarget: Bool {return self._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  mutating func clearTarget() {self._target = nil}

  var objects: [TSP_Reference] = []

  var undoObjectForCommit: TSP_Reference {
    get {return _undoObjectForCommit ?? TSP_Reference()}
    set {_undoObjectForCommit = newValue}
  }
  /// Returns true if `undoObjectForCommit` has been explicitly set.
  var hasUndoObjectForCommit: Bool {return self._undoObjectForCommit != nil}
  /// Clears the value of `undoObjectForCommit`. Subsequent reads from it will return its default value.
  mutating func clearUndoObjectForCommit() {self._undoObjectForCommit = nil}

  var undoObjectForMakeInverse: TSP_Reference {
    get {return _undoObjectForMakeInverse ?? TSP_Reference()}
    set {_undoObjectForMakeInverse = newValue}
  }
  /// Returns true if `undoObjectForMakeInverse` has been explicitly set.
  var hasUndoObjectForMakeInverse: Bool {return self._undoObjectForMakeInverse != nil}
  /// Clears the value of `undoObjectForMakeInverse`. Subsequent reads from it will return its default value.
  mutating func clearUndoObjectForMakeInverse() {self._undoObjectForMakeInverse = nil}

  var addBehaviorArgs: TSWP_ContainedObjectsCommandArchive.AddBehaviorArgs {
    get {return _addBehaviorArgs ?? TSWP_ContainedObjectsCommandArchive.AddBehaviorArgs()}
    set {_addBehaviorArgs = newValue}
  }
  /// Returns true if `addBehaviorArgs` has been explicitly set.
  var hasAddBehaviorArgs: Bool {return self._addBehaviorArgs != nil}
  /// Clears the value of `addBehaviorArgs`. Subsequent reads from it will return its default value.
  mutating func clearAddBehaviorArgs() {self._addBehaviorArgs = nil}

  var removeBehaviorArgs: TSWP_ContainedObjectsCommandArchive.RemoveBehaviorArgs {
    get {return _removeBehaviorArgs ?? TSWP_ContainedObjectsCommandArchive.RemoveBehaviorArgs()}
    set {_removeBehaviorArgs = newValue}
  }
  /// Returns true if `removeBehaviorArgs` has been explicitly set.
  var hasRemoveBehaviorArgs: Bool {return self._removeBehaviorArgs != nil}
  /// Clears the value of `removeBehaviorArgs`. Subsequent reads from it will return its default value.
  mutating func clearRemoveBehaviorArgs() {self._removeBehaviorArgs = nil}

  var rearrangeBehaviorArgs: TSWP_ContainedObjectsCommandArchive.RearrangeBehaviorArgs {
    get {return _rearrangeBehaviorArgs ?? TSWP_ContainedObjectsCommandArchive.RearrangeBehaviorArgs()}
    set {_rearrangeBehaviorArgs = newValue}
  }
  /// Returns true if `rearrangeBehaviorArgs` has been explicitly set.
  var hasRearrangeBehaviorArgs: Bool {return self._rearrangeBehaviorArgs != nil}
  /// Clears the value of `rearrangeBehaviorArgs`. Subsequent reads from it will return its default value.
  mutating func clearRearrangeBehaviorArgs() {self._rearrangeBehaviorArgs = nil}

  var containerName: String {
    get {return _containerName ?? String()}
    set {_containerName = newValue}
  }
  /// Returns true if `containerName` has been explicitly set.
  var hasContainerName: Bool {return self._containerName != nil}
  /// Clears the value of `containerName`. Subsequent reads from it will return its default value.
  mutating func clearContainerName() {self._containerName = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct AddBehaviorArgs {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var argsList: [TSK_AddIdOperationArgs] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct RemoveBehaviorArgs {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var argsList: [TSK_RemoveIdOperationArgs] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct RearrangeBehaviorArgs {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var argsList: [TSK_RearrangeIdOperationArgs] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _target: TSP_Reference? = nil
  fileprivate var _undoObjectForCommit: TSP_Reference? = nil
  fileprivate var _undoObjectForMakeInverse: TSP_Reference? = nil
  fileprivate var _addBehaviorArgs: TSWP_ContainedObjectsCommandArchive.AddBehaviorArgs? = nil
  fileprivate var _removeBehaviorArgs: TSWP_ContainedObjectsCommandArchive.RemoveBehaviorArgs? = nil
  fileprivate var _rearrangeBehaviorArgs: TSWP_ContainedObjectsCommandArchive.RearrangeBehaviorArgs? = nil
  fileprivate var _containerName: String? = nil
}

struct TSWP_EquationInfoGeometryCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_MediaInfoGeometryCommandArchive {
    get {return _super ?? TSD_MediaInfoGeometryCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_MediaInfoGeometryCommandArchive? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TSWP"

extension TSWP_ObjectPropertyType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kObjectPropertyTypeBool"),
    1: .same(proto: "kObjectPropertyTypeFloat"),
    2: .same(proto: "kObjectPropertyTypeInteger"),
    3: .same(proto: "kObjectPropertyTypeString"),
    4: .same(proto: "kObjectPropertyTypeIdPath"),
    5: .same(proto: "kObjectPropertyTypeFill"),
    6: .same(proto: "kObjectPropertyTypeColor"),
    7: .same(proto: "kObjectPropertyTypeShadow"),
  ]
}

extension TSWP_DummyCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DummyCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "foo"),
  ]

  public var isInitialized: Bool {
    if self._foo == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._foo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._foo {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_DummyCommandArchive, rhs: TSWP_DummyCommandArchive) -> Bool {
    if lhs._foo != rhs._foo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_TextCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TextCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "storage"),
    3: .standard(proto: "undo_transaction"),
    4: .standard(proto: "restore_range_location"),
    5: .standard(proto: "restore_range_length"),
    6: .standard(proto: "redo_restore_range_location"),
    7: .standard(proto: "redo_restore_range_length"),
    9: .standard(proto: "text_command_flags"),
    10: .same(proto: "kind"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storage, !v.isInitialized {return false}
    if let v = self._undoTransaction, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storage)
      case 3: try decoder.decodeSingularMessageField(value: &self._undoTransaction)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._restoreRangeLocation)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._restoreRangeLength)
      case 6: try decoder.decodeSingularUInt32Field(value: &self._redoRestoreRangeLocation)
      case 7: try decoder.decodeSingularUInt32Field(value: &self._redoRestoreRangeLength)
      case 9: try decoder.decodeSingularUInt32Field(value: &self._textCommandFlags)
      case 10: try decoder.decodeSingularEnumField(value: &self._kind)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._undoTransaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._restoreRangeLocation {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._restoreRangeLength {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._redoRestoreRangeLocation {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._redoRestoreRangeLength {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._textCommandFlags {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
    }
    if let v = self._kind {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_TextCommandArchive, rhs: TSWP_TextCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storage != rhs._storage {return false}
    if lhs._undoTransaction != rhs._undoTransaction {return false}
    if lhs._restoreRangeLocation != rhs._restoreRangeLocation {return false}
    if lhs._restoreRangeLength != rhs._restoreRangeLength {return false}
    if lhs._redoRestoreRangeLocation != rhs._redoRestoreRangeLocation {return false}
    if lhs._redoRestoreRangeLength != rhs._redoRestoreRangeLength {return false}
    if lhs._textCommandFlags != rhs._textCommandFlags {return false}
    if lhs._kind != rhs._kind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_TextCommandArchive.Kind: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kKindContained"),
    1: .same(proto: "kKindReplaceText"),
    2: .same(proto: "kKindPaste"),
    3: .same(proto: "kKindParagraphStyle"),
    4: .same(proto: "kKindListStyle"),
    5: .same(proto: "kKindIndentParagraphLevel"),
    6: .same(proto: "kKindDragText"),
    7: .same(proto: "kKindPasteStyle"),
    8: .same(proto: "kKindApplyChangesInRange"),
    10: .same(proto: "kKindInsertCitationField"),
    11: .same(proto: "kKindInsertBibliographyEntry"),
    12: .same(proto: "kKindFormatCitationFields"),
    13: .same(proto: "kKindInsertTOCSmartField"),
    14: .same(proto: "kKindInsertDateTimeField"),
    15: .same(proto: "kKindUpdateDateTimeField"),
    16: .same(proto: "kKindSetParagraphFirstTopicNumber"),
    17: .same(proto: "kKindCharacterStyle"),
    18: .same(proto: "kKindRevertStyles"),
    19: .same(proto: "kKindSetParagraphBidi"),
  ]
}

extension TSWP_StorageActionCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StorageActionCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "storage"),
    3: .standard(proto: "undo_transaction"),
    4: .standard(proto: "text_command_flags"),
    5: .same(proto: "kind"),
    6: .standard(proto: "custom_format_keys"),
    7: .standard(proto: "is_forward_inverse_command"),
    8: .same(proto: "coalesceable"),
    9: .standard(proto: "coalescing_text"),
    10: .standard(proto: "should_migrate_styles"),
    11: .standard(proto: "changed_data_reference_record"),
    12: .standard(proto: "coalescing_property"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storage, !v.isInitialized {return false}
    if let v = self._undoTransaction, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.customFormatKeys) {return false}
    if let v = self._changedDataReferenceRecord, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storage)
      case 3: try decoder.decodeSingularMessageField(value: &self._undoTransaction)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._textCommandFlags)
      case 5: try decoder.decodeSingularEnumField(value: &self._kind)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.customFormatKeys)
      case 7: try decoder.decodeSingularBoolField(value: &self._isForwardInverseCommand)
      case 8: try decoder.decodeSingularBoolField(value: &self._coalesceable)
      case 9: try decoder.decodeSingularBoolField(value: &self._coalescingText)
      case 10: try decoder.decodeSingularBoolField(value: &self._shouldMigrateStyles)
      case 11: try decoder.decodeSingularMessageField(value: &self._changedDataReferenceRecord)
      case 12: try decoder.decodeSingularStringField(value: &self._coalescingProperty)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._undoTransaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._textCommandFlags {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._kind {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    }
    if !self.customFormatKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.customFormatKeys, fieldNumber: 6)
    }
    if let v = self._isForwardInverseCommand {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    if let v = self._coalesceable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._coalescingText {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    if let v = self._shouldMigrateStyles {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    }
    if let v = self._changedDataReferenceRecord {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._coalescingProperty {
      try visitor.visitSingularStringField(value: v, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_StorageActionCommandArchive, rhs: TSWP_StorageActionCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storage != rhs._storage {return false}
    if lhs._undoTransaction != rhs._undoTransaction {return false}
    if lhs._textCommandFlags != rhs._textCommandFlags {return false}
    if lhs._kind != rhs._kind {return false}
    if lhs.customFormatKeys != rhs.customFormatKeys {return false}
    if lhs._isForwardInverseCommand != rhs._isForwardInverseCommand {return false}
    if lhs._coalesceable != rhs._coalesceable {return false}
    if lhs._coalescingText != rhs._coalescingText {return false}
    if lhs._shouldMigrateStyles != rhs._shouldMigrateStyles {return false}
    if lhs._changedDataReferenceRecord != rhs._changedDataReferenceRecord {return false}
    if lhs._coalescingProperty != rhs._coalescingProperty {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_StorageActionCommandArchive.Kind: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kKindContained"),
    1: .same(proto: "kKindReplaceText"),
    2: .same(proto: "kKindPaste"),
    3: .same(proto: "kKindParagraphStyle"),
    4: .same(proto: "kKindListStyle"),
    5: .same(proto: "kKindIndentParagraphLevel"),
    6: .same(proto: "kKindDragText"),
    7: .same(proto: "kKindPasteStyle"),
    8: .same(proto: "kKindApplyChangesInRange"),
    10: .same(proto: "kKindInsertCitationField"),
    11: .same(proto: "kKindInsertBibliographyEntry"),
    12: .same(proto: "kKindFormatCitationFields"),
    13: .same(proto: "kKindInsertTOCSmartField"),
    14: .same(proto: "kKindInsertDateTimeField"),
    15: .same(proto: "kKindUpdateDateTimeField"),
    16: .same(proto: "kKindSetParagraphFirstTopicNumber"),
    17: .same(proto: "kKindCharacterStyle"),
    18: .same(proto: "kKindRevertStyles"),
    19: .same(proto: "kKindSetParagraphBidi"),
    20: .same(proto: "kKindFormatText"),
    21: .same(proto: "kKindInsertAttachment"),
    22: .same(proto: "kKindCreateHyperlink"),
    23: .same(proto: "kKindModifyHyperlink"),
    24: .same(proto: "kKindRemoveHyperlink"),
    25: .same(proto: "kKindApplyHighlightText"),
    26: .same(proto: "kKindPropagateStyleChanges"),
    27: .same(proto: "kKindMovedAnchoredDrawableInline"),
    28: .same(proto: "kKindMoveDrawablesAttached"),
    29: .same(proto: "kKindMoveMoveDrawablesFloating"),
    30: .same(proto: "kKindMoveInlineDrawableAnchored"),
    31: .same(proto: "kKindAnchorAttachment"),
    32: .same(proto: "kKindBookmark"),
    33: .same(proto: "kKindReplaceSection"),
    34: .same(proto: "kKindApplyPencilAnnotation"),
    35: .same(proto: "kKindCreateRuby"),
    36: .same(proto: "kKindModifyRuby"),
    37: .same(proto: "kKindRemoveRuby"),
    38: .same(proto: "kKindTateChuYoko"),
    39: .same(proto: "kKindDropCapStyle"),
  ]
}

extension TSWP_SetColumnStyleCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetColumnStyleCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "storage"),
    3: .standard(proto: "undo_transaction"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storage, !v.isInitialized {return false}
    if let v = self._undoTransaction, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storage)
      case 3: try decoder.decodeSingularMessageField(value: &self._undoTransaction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._undoTransaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_SetColumnStyleCommandArchive, rhs: TSWP_SetColumnStyleCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storage != rhs._storage {return false}
    if lhs._undoTransaction != rhs._undoTransaction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_ReplaceAllUsesOfStyleCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReplaceAllUsesOfStyleCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "storage"),
    3: .standard(proto: "undo_transaction"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storage, !v.isInitialized {return false}
    if let v = self._undoTransaction, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storage)
      case 3: try decoder.decodeSingularMessageField(value: &self._undoTransaction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._undoTransaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_ReplaceAllUsesOfStyleCommandArchive, rhs: TSWP_ReplaceAllUsesOfStyleCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storage != rhs._storage {return false}
    if lhs._undoTransaction != rhs._undoTransaction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_InsertColumnsCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InsertColumnsCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "storage"),
    3: .standard(proto: "column_index"),
    4: .standard(proto: "column_count"),
    5: .standard(proto: "undo_transaction"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storage, !v.isInitialized {return false}
    if let v = self._undoTransaction, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storage)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._columnIndex)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._columnCount)
      case 5: try decoder.decodeSingularMessageField(value: &self._undoTransaction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._columnIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._columnCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._undoTransaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_InsertColumnsCommandArchive, rhs: TSWP_InsertColumnsCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storage != rhs._storage {return false}
    if lhs._columnIndex != rhs._columnIndex {return false}
    if lhs._columnCount != rhs._columnCount {return false}
    if lhs._undoTransaction != rhs._undoTransaction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_InsertRowsCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InsertRowsCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "storage"),
    3: .standard(proto: "row_index"),
    4: .standard(proto: "row_count"),
    5: .standard(proto: "undo_transaction"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storage, !v.isInitialized {return false}
    if let v = self._undoTransaction, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storage)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._rowIndex)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._rowCount)
      case 5: try decoder.decodeSingularMessageField(value: &self._undoTransaction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._rowIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._rowCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._undoTransaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_InsertRowsCommandArchive, rhs: TSWP_InsertRowsCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storage != rhs._storage {return false}
    if lhs._rowIndex != rhs._rowIndex {return false}
    if lhs._rowCount != rhs._rowCount {return false}
    if lhs._undoTransaction != rhs._undoTransaction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_RemoveColumnsCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveColumnsCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "storage"),
    3: .standard(proto: "column_index"),
    4: .standard(proto: "column_count"),
    5: .standard(proto: "undo_transaction"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storage, !v.isInitialized {return false}
    if let v = self._undoTransaction, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storage)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._columnIndex)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._columnCount)
      case 5: try decoder.decodeSingularMessageField(value: &self._undoTransaction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._columnIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._columnCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._undoTransaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_RemoveColumnsCommandArchive, rhs: TSWP_RemoveColumnsCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storage != rhs._storage {return false}
    if lhs._columnIndex != rhs._columnIndex {return false}
    if lhs._columnCount != rhs._columnCount {return false}
    if lhs._undoTransaction != rhs._undoTransaction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_RemoveRowsCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveRowsCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "storage"),
    3: .standard(proto: "row_index"),
    4: .standard(proto: "row_count"),
    5: .standard(proto: "undo_transaction"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storage, !v.isInitialized {return false}
    if let v = self._undoTransaction, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storage)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._rowIndex)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._rowCount)
      case 5: try decoder.decodeSingularMessageField(value: &self._undoTransaction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._rowIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._rowCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._undoTransaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_RemoveRowsCommandArchive, rhs: TSWP_RemoveRowsCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storage != rhs._storage {return false}
    if lhs._rowIndex != rhs._rowIndex {return false}
    if lhs._rowCount != rhs._rowCount {return false}
    if lhs._undoTransaction != rhs._undoTransaction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_MergeCellsCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MergeCellsCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "storage"),
    3: .same(proto: "row"),
    4: .same(proto: "column"),
    5: .standard(proto: "row_count"),
    6: .standard(proto: "column_count"),
    7: .standard(proto: "undo_transaction"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storage, !v.isInitialized {return false}
    if let v = self._undoTransaction, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storage)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._row)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._column)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._rowCount)
      case 6: try decoder.decodeSingularUInt32Field(value: &self._columnCount)
      case 7: try decoder.decodeSingularMessageField(value: &self._undoTransaction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._row {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._column {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._rowCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._columnCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._undoTransaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_MergeCellsCommandArchive, rhs: TSWP_MergeCellsCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storage != rhs._storage {return false}
    if lhs._row != rhs._row {return false}
    if lhs._column != rhs._column {return false}
    if lhs._rowCount != rhs._rowCount {return false}
    if lhs._columnCount != rhs._columnCount {return false}
    if lhs._undoTransaction != rhs._undoTransaction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_ApplyPlaceholderTextCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApplyPlaceholderTextCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "storage"),
    3: .standard(proto: "selection_range_location"),
    4: .standard(proto: "selection_range_length"),
    5: .standard(proto: "undo_transaction"),
    6: .standard(proto: "script_tag"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storage, !v.isInitialized {return false}
    if let v = self._undoTransaction, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storage)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._selectionRangeLocation)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._selectionRangeLength)
      case 5: try decoder.decodeSingularMessageField(value: &self._undoTransaction)
      case 6: try decoder.decodeSingularStringField(value: &self._scriptTag)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._selectionRangeLocation {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._selectionRangeLength {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._undoTransaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._scriptTag {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_ApplyPlaceholderTextCommandArchive, rhs: TSWP_ApplyPlaceholderTextCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storage != rhs._storage {return false}
    if lhs._selectionRangeLocation != rhs._selectionRangeLocation {return false}
    if lhs._selectionRangeLength != rhs._selectionRangeLength {return false}
    if lhs._undoTransaction != rhs._undoTransaction {return false}
    if lhs._scriptTag != rhs._scriptTag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_UpdateDateTimeFieldCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateDateTimeFieldCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "date_time_field"),
    3: .same(proto: "date"),
    4: .standard(proto: "date_style"),
    5: .standard(proto: "time_style"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._dateTimeField, !v.isInitialized {return false}
    if let v = self._date, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._dateTimeField)
      case 3: try decoder.decodeSingularMessageField(value: &self._date)
      case 4: try decoder.decodeSingularEnumField(value: &self._dateStyle)
      case 5: try decoder.decodeSingularEnumField(value: &self._timeStyle)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._dateTimeField {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._date {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._dateStyle {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    if let v = self._timeStyle {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_UpdateDateTimeFieldCommandArchive, rhs: TSWP_UpdateDateTimeFieldCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._dateTimeField != rhs._dateTimeField {return false}
    if lhs._date != rhs._date {return false}
    if lhs._dateStyle != rhs._dateStyle {return false}
    if lhs._timeStyle != rhs._timeStyle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_ApplyRubyTextCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApplyRubyTextCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "storage"),
    3: .standard(proto: "selection_range_location"),
    4: .standard(proto: "selection_range_length"),
    5: .standard(proto: "ruby_text"),
    6: .standard(proto: "undo_transaction"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storage, !v.isInitialized {return false}
    if let v = self._undoTransaction, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storage)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._selectionRangeLocation)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._selectionRangeLength)
      case 5: try decoder.decodeSingularStringField(value: &self._rubyText)
      case 6: try decoder.decodeSingularMessageField(value: &self._undoTransaction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._selectionRangeLocation {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._selectionRangeLength {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._rubyText {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._undoTransaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_ApplyRubyTextCommandArchive, rhs: TSWP_ApplyRubyTextCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storage != rhs._storage {return false}
    if lhs._selectionRangeLocation != rhs._selectionRangeLocation {return false}
    if lhs._selectionRangeLength != rhs._selectionRangeLength {return false}
    if lhs._rubyText != rhs._rubyText {return false}
    if lhs._undoTransaction != rhs._undoTransaction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_ModifyRubyTextCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModifyRubyTextCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "ruby_field"),
    3: .standard(proto: "ruby_text"),
    4: .standard(proto: "base_text"),
    5: .standard(proto: "undo_transaction"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._rubyField, !v.isInitialized {return false}
    if let v = self._undoTransaction, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._rubyField)
      case 3: try decoder.decodeSingularStringField(value: &self._rubyText)
      case 4: try decoder.decodeSingularStringField(value: &self._baseText)
      case 5: try decoder.decodeSingularMessageField(value: &self._undoTransaction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._rubyField {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._rubyText {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._baseText {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._undoTransaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_ModifyRubyTextCommandArchive, rhs: TSWP_ModifyRubyTextCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._rubyField != rhs._rubyField {return false}
    if lhs._rubyText != rhs._rubyText {return false}
    if lhs._baseText != rhs._baseText {return false}
    if lhs._undoTransaction != rhs._undoTransaction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_ModifyTOCSettingsBaseCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModifyTOCSettingsBaseCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "old_toc_settings"),
    3: .standard(proto: "new_toc_settings"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._oldTocSettings, !v.isInitialized {return false}
    if let v = self._newTocSettings, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._oldTocSettings)
      case 3: try decoder.decodeSingularMessageField(value: &self._newTocSettings)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldTocSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._newTocSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_ModifyTOCSettingsBaseCommandArchive, rhs: TSWP_ModifyTOCSettingsBaseCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldTocSettings != rhs._oldTocSettings {return false}
    if lhs._newTocSettings != rhs._newTocSettings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_ModifyTOCSettingsForTOCInfoCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModifyTOCSettingsForTOCInfoCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "toc_info_uuid_path"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._tocInfoUuidPath, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._tocInfoUuidPath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._tocInfoUuidPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_ModifyTOCSettingsForTOCInfoCommandArchive, rhs: TSWP_ModifyTOCSettingsForTOCInfoCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._tocInfoUuidPath != rhs._tocInfoUuidPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_ModifyTOCSettingsPresetForThemeCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModifyTOCSettingsPresetForThemeCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "theme"),
    3: .standard(proto: "preset_index"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._theme, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._theme)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._presetIndex)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._theme {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._presetIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_ModifyTOCSettingsPresetForThemeCommandArchive, rhs: TSWP_ModifyTOCSettingsPresetForThemeCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._theme != rhs._theme {return false}
    if lhs._presetIndex != rhs._presetIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_AnchorAttachmentCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AnchorAttachmentCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "attachment"),
    3: .standard(proto: "h_offset_type"),
    4: .standard(proto: "h_offset"),
    5: .standard(proto: "v_offset_type"),
    6: .standard(proto: "v_offset"),
    7: .standard(proto: "is_html_wrap"),
    8: .standard(proto: "undo_h_offset_type"),
    9: .standard(proto: "undo_h_offset"),
    10: .standard(proto: "undo_v_offset_type"),
    11: .standard(proto: "undo_v_offset"),
    12: .standard(proto: "undo_is_html_wrap"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._attachment, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._attachment)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._hOffsetType)
      case 4: try decoder.decodeSingularFloatField(value: &self._hOffset)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._vOffsetType)
      case 6: try decoder.decodeSingularFloatField(value: &self._vOffset)
      case 7: try decoder.decodeSingularBoolField(value: &self._isHtmlWrap)
      case 8: try decoder.decodeSingularUInt32Field(value: &self._undoHOffsetType)
      case 9: try decoder.decodeSingularFloatField(value: &self._undoHOffset)
      case 10: try decoder.decodeSingularUInt32Field(value: &self._undoVOffsetType)
      case 11: try decoder.decodeSingularFloatField(value: &self._undoVOffset)
      case 12: try decoder.decodeSingularBoolField(value: &self._undoIsHtmlWrap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._attachment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._hOffsetType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._hOffset {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    if let v = self._vOffsetType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._vOffset {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 6)
    }
    if let v = self._isHtmlWrap {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    if let v = self._undoHOffsetType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    }
    if let v = self._undoHOffset {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 9)
    }
    if let v = self._undoVOffsetType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
    }
    if let v = self._undoVOffset {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
    }
    if let v = self._undoIsHtmlWrap {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_AnchorAttachmentCommandArchive, rhs: TSWP_AnchorAttachmentCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._attachment != rhs._attachment {return false}
    if lhs._hOffsetType != rhs._hOffsetType {return false}
    if lhs._hOffset != rhs._hOffset {return false}
    if lhs._vOffsetType != rhs._vOffsetType {return false}
    if lhs._vOffset != rhs._vOffset {return false}
    if lhs._isHtmlWrap != rhs._isHtmlWrap {return false}
    if lhs._undoHOffsetType != rhs._undoHOffsetType {return false}
    if lhs._undoHOffset != rhs._undoHOffset {return false}
    if lhs._undoVOffsetType != rhs._undoVOffsetType {return false}
    if lhs._undoVOffset != rhs._undoVOffset {return false}
    if lhs._undoIsHtmlWrap != rhs._undoIsHtmlWrap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_TextApplyThemeCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TextApplyThemeCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "storage"),
    6: .standard(proto: "undo_transaction"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storage, !v.isInitialized {return false}
    if let v = self._undoTransaction, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storage)
      case 6: try decoder.decodeSingularMessageField(value: &self._undoTransaction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._undoTransaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_TextApplyThemeCommandArchive, rhs: TSWP_TextApplyThemeCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storage != rhs._storage {return false}
    if lhs._undoTransaction != rhs._undoTransaction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_MoveColumnsCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MoveColumnsCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "storage"),
    3: .standard(proto: "src_index"),
    4: .standard(proto: "dst_index"),
    5: .same(proto: "count"),
    6: .standard(proto: "undo_transaction"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storage, !v.isInitialized {return false}
    if let v = self._undoTransaction, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storage)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._srcIndex)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._dstIndex)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._count)
      case 6: try decoder.decodeSingularMessageField(value: &self._undoTransaction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._srcIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._dstIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._count {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._undoTransaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_MoveColumnsCommandArchive, rhs: TSWP_MoveColumnsCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storage != rhs._storage {return false}
    if lhs._srcIndex != rhs._srcIndex {return false}
    if lhs._dstIndex != rhs._dstIndex {return false}
    if lhs._count != rhs._count {return false}
    if lhs._undoTransaction != rhs._undoTransaction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_MoveRowsCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MoveRowsCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "storage"),
    3: .standard(proto: "src_index"),
    4: .standard(proto: "dst_index"),
    5: .same(proto: "count"),
    6: .standard(proto: "undo_transaction"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storage, !v.isInitialized {return false}
    if let v = self._undoTransaction, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storage)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._srcIndex)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._dstIndex)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._count)
      case 6: try decoder.decodeSingularMessageField(value: &self._undoTransaction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._srcIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._dstIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._count {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._undoTransaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_MoveRowsCommandArchive, rhs: TSWP_MoveRowsCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storage != rhs._storage {return false}
    if lhs._srcIndex != rhs._srcIndex {return false}
    if lhs._dstIndex != rhs._dstIndex {return false}
    if lhs._count != rhs._count {return false}
    if lhs._undoTransaction != rhs._undoTransaction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_ShapeApplyPresetCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShapeApplyPresetCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "undo_style"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._undoStyle, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._undoStyle)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._undoStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_ShapeApplyPresetCommandArchive, rhs: TSWP_ShapeApplyPresetCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._undoStyle != rhs._undoStyle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_StyleBaseCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StyleBaseCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "theme"),
    3: .same(proto: "style"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._theme, !v.isInitialized {return false}
    if let v = self._style, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._theme)
      case 3: try decoder.decodeSingularMessageField(value: &self._style)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._theme {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_StyleBaseCommandArchive, rhs: TSWP_StyleBaseCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._theme != rhs._theme {return false}
    if lhs._style != rhs._style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_StyleCreateCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StyleCreateCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "preset_index"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._presetIndex)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._presetIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_StyleCreateCommandArchive, rhs: TSWP_StyleCreateCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._presetIndex != rhs._presetIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_StyleRenameCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StyleRenameCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "updated_name"),
    3: .standard(proto: "old_name"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularStringField(value: &self._updatedName)
      case 3: try decoder.decodeSingularStringField(value: &self._oldName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updatedName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._oldName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_StyleRenameCommandArchive, rhs: TSWP_StyleRenameCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._updatedName != rhs._updatedName {return false}
    if lhs._oldName != rhs._oldName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_StyleUpdateCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StyleUpdateCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "original_style"),
    3: .standard(proto: "updated_style"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._originalStyle, !v.isInitialized {return false}
    if let v = self._updatedStyle, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._originalStyle)
      case 3: try decoder.decodeSingularMessageField(value: &self._updatedStyle)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._originalStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._updatedStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_StyleUpdateCommandArchive, rhs: TSWP_StyleUpdateCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._originalStyle != rhs._originalStyle {return false}
    if lhs._updatedStyle != rhs._updatedStyle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_StyleDeleteCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StyleDeleteCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "old_preset_index"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._oldPresetIndex)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldPresetIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_StyleDeleteCommandArchive, rhs: TSWP_StyleDeleteCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldPresetIndex != rhs._oldPresetIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_StyleReorderCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StyleReorderCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "old_preset_index"),
    3: .standard(proto: "new_preset_index"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._oldPresetIndex)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._newPresetIndex)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldPresetIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._newPresetIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_StyleReorderCommandArchive, rhs: TSWP_StyleReorderCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldPresetIndex != rhs._oldPresetIndex {return false}
    if lhs._newPresetIndex != rhs._newPresetIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_StyleUpdatePropertyMapCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StyleUpdatePropertyMapCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_StyleUpdatePropertyMapCommandArchive, rhs: TSWP_StyleUpdatePropertyMapCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_ShapeStyleSetValueCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShapeStyleSetValueCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    4: .same(proto: "change"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._change, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 4: try decoder.decodeSingularMessageField(value: &self._change)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._change {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_ShapeStyleSetValueCommandArchive, rhs: TSWP_ShapeStyleSetValueCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._change != rhs._change {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_SelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "storage_uuid_path"),
    2: .same(proto: "selection"),
    3: .standard(proto: "transformed_to_noop"),
  ]

  public var isInitialized: Bool {
    if self._storageUuidPath == nil {return false}
    if self._selection == nil {return false}
    if let v = self._storageUuidPath, !v.isInitialized {return false}
    if let v = self._selection, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._storageUuidPath)
      case 2: try decoder.decodeSingularMessageField(value: &self._selection)
      case 3: try decoder.decodeSingularBoolField(value: &self._transformedToNoop)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._storageUuidPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._selection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._transformedToNoop {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_SelectionTransformerArchive, rhs: TSWP_SelectionTransformerArchive) -> Bool {
    if lhs._storageUuidPath != rhs._storageUuidPath {return false}
    if lhs._selection != rhs._selection {return false}
    if lhs._transformedToNoop != rhs._transformedToNoop {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_PencilAnnotationSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PencilAnnotationSelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "storage_uuid_path"),
    2: .standard(proto: "text_pencil_annotation_uuid"),
  ]

  public var isInitialized: Bool {
    if self._storageUuidPath == nil {return false}
    if self._textPencilAnnotationUuid == nil {return false}
    if let v = self._storageUuidPath, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._storageUuidPath)
      case 2: try decoder.decodeSingularStringField(value: &self._textPencilAnnotationUuid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._storageUuidPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._textPencilAnnotationUuid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_PencilAnnotationSelectionTransformerArchive, rhs: TSWP_PencilAnnotationSelectionTransformerArchive) -> Bool {
    if lhs._storageUuidPath != rhs._storageUuidPath {return false}
    if lhs._textPencilAnnotationUuid != rhs._textPencilAnnotationUuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_ShapeSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShapeSelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "storage_uuid_path"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storageUuidPath, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storageUuidPath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storageUuidPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_ShapeSelectionTransformerArchive, rhs: TSWP_ShapeSelectionTransformerArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storageUuidPath != rhs._storageUuidPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_ShapeContentDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShapeContentDescription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "text_range_location"),
    3: .standard(proto: "text_range_length"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._textRangeLocation)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._textRangeLength)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._textRangeLocation {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._textRangeLength {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_ShapeContentDescription, rhs: TSWP_ShapeContentDescription) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._textRangeLocation != rhs._textRangeLocation {return false}
    if lhs._textRangeLength != rhs._textRangeLength {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_ObjectPropertyArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ObjectPropertyArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "type"),
    3: .standard(proto: "bool_value"),
    4: .standard(proto: "float_value"),
    5: .standard(proto: "integer_value"),
    6: .standard(proto: "string_value"),
    7: .standard(proto: "id_path_value"),
    8: .standard(proto: "fill_value"),
    9: .standard(proto: "color_value"),
    10: .standard(proto: "shadow_value"),
  ]

  public var isInitialized: Bool {
    if self._name == nil {return false}
    if self._type == nil {return false}
    if let v = self._idPathValue, !v.isInitialized {return false}
    if let v = self._fillValue, !v.isInitialized {return false}
    if let v = self._colorValue, !v.isInitialized {return false}
    if let v = self._shadowValue, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeSingularEnumField(value: &self._type)
      case 3: try decoder.decodeSingularBoolField(value: &self._boolValue)
      case 4: try decoder.decodeSingularFloatField(value: &self._floatValue)
      case 5: try decoder.decodeSingularInt32Field(value: &self._integerValue)
      case 6: try decoder.decodeSingularStringField(value: &self._stringValue)
      case 7: try decoder.decodeSingularMessageField(value: &self._idPathValue)
      case 8: try decoder.decodeSingularMessageField(value: &self._fillValue)
      case 9: try decoder.decodeSingularMessageField(value: &self._colorValue)
      case 10: try decoder.decodeSingularMessageField(value: &self._shadowValue)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._boolValue {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._floatValue {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    if let v = self._integerValue {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._stringValue {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if let v = self._idPathValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._fillValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._colorValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._shadowValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_ObjectPropertyArchive, rhs: TSWP_ObjectPropertyArchive) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._type != rhs._type {return false}
    if lhs._boolValue != rhs._boolValue {return false}
    if lhs._floatValue != rhs._floatValue {return false}
    if lhs._integerValue != rhs._integerValue {return false}
    if lhs._stringValue != rhs._stringValue {return false}
    if lhs._idPathValue != rhs._idPathValue {return false}
    if lhs._fillValue != rhs._fillValue {return false}
    if lhs._colorValue != rhs._colorValue {return false}
    if lhs._shadowValue != rhs._shadowValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_SetObjectPropertiesCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetObjectPropertiesCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "object_uuid_path"),
    3: .same(proto: "properties"),
    4: .standard(proto: "action_string"),
    5: .standard(proto: "old_properties"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._objectUuidPath == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._objectUuidPath, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.properties) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.oldProperties) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._objectUuidPath)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.properties)
      case 4: try decoder.decodeSingularStringField(value: &self._actionString)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.oldProperties)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._objectUuidPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.properties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.properties, fieldNumber: 3)
    }
    if let v = self._actionString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if !self.oldProperties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.oldProperties, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_SetObjectPropertiesCommandArchive, rhs: TSWP_SetObjectPropertiesCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._objectUuidPath != rhs._objectUuidPath {return false}
    if lhs.properties != rhs.properties {return false}
    if lhs._actionString != rhs._actionString {return false}
    if lhs.oldProperties != rhs.oldProperties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_UpdateFlowInfoCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateFlowInfoCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "command_mode"),
    3: .standard(proto: "flow_info_uuid_path"),
    4: .standard(proto: "text_box_id_path_to_add_or_remove"),
    5: .standard(proto: "text_box_id_paths_at_start"),
    6: .standard(proto: "suggested_text_box_id_paths_at_end"),
    7: .standard(proto: "undo_text_boxes_to_restore"),
    8: .standard(proto: "undo_added_shape_info"),
    9: .standard(proto: "undo_removed_shape_info"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._flowInfoUuidPath, !v.isInitialized {return false}
    if let v = self._textBoxIDPathToAddOrRemove, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.textBoxIDPathsAtStart) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.suggestedTextBoxIDPathsAtEnd) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.undoTextBoxesToRestore) {return false}
    if let v = self._undoAddedShapeInfo, !v.isInitialized {return false}
    if let v = self._undoRemovedShapeInfo, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularEnumField(value: &self._commandMode)
      case 3: try decoder.decodeSingularMessageField(value: &self._flowInfoUuidPath)
      case 4: try decoder.decodeSingularMessageField(value: &self._textBoxIDPathToAddOrRemove)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.textBoxIDPathsAtStart)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.suggestedTextBoxIDPathsAtEnd)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.undoTextBoxesToRestore)
      case 8: try decoder.decodeSingularMessageField(value: &self._undoAddedShapeInfo)
      case 9: try decoder.decodeSingularMessageField(value: &self._undoRemovedShapeInfo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._commandMode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._flowInfoUuidPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._textBoxIDPathToAddOrRemove {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.textBoxIDPathsAtStart.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.textBoxIDPathsAtStart, fieldNumber: 5)
    }
    if !self.suggestedTextBoxIDPathsAtEnd.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.suggestedTextBoxIDPathsAtEnd, fieldNumber: 6)
    }
    if !self.undoTextBoxesToRestore.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.undoTextBoxesToRestore, fieldNumber: 7)
    }
    if let v = self._undoAddedShapeInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._undoRemovedShapeInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_UpdateFlowInfoCommandArchive, rhs: TSWP_UpdateFlowInfoCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._commandMode != rhs._commandMode {return false}
    if lhs._flowInfoUuidPath != rhs._flowInfoUuidPath {return false}
    if lhs._textBoxIDPathToAddOrRemove != rhs._textBoxIDPathToAddOrRemove {return false}
    if lhs.textBoxIDPathsAtStart != rhs.textBoxIDPathsAtStart {return false}
    if lhs.suggestedTextBoxIDPathsAtEnd != rhs.suggestedTextBoxIDPathsAtEnd {return false}
    if lhs.undoTextBoxesToRestore != rhs.undoTextBoxesToRestore {return false}
    if lhs._undoAddedShapeInfo != rhs._undoAddedShapeInfo {return false}
    if lhs._undoRemovedShapeInfo != rhs._undoRemovedShapeInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_UpdateFlowInfoCommandArchive.Mode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kModeRearrange"),
    1: .same(proto: "kModeAdd"),
    2: .same(proto: "kModeRemove"),
    3: .same(proto: "kModeCompensate"),
  ]
}

extension TSWP_AddFlowInfoCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddFlowInfoCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "flow_info_to_add"),
    3: .standard(proto: "flow_info_archive"),
    4: .standard(proto: "undo_user_interface_identifier_to_restore"),
    5: .standard(proto: "undo_next_user_interface_identifier_to_restore"),
    6: .standard(proto: "working_undo_object"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._flowInfoToAdd, !v.isInitialized {return false}
    if let v = self._flowInfoArchive, !v.isInitialized {return false}
    if let v = self._workingUndoObject, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._flowInfoToAdd)
      case 3: try decoder.decodeSingularMessageField(value: &self._flowInfoArchive)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._undoUserInterfaceIdentifierToRestore)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._undoNextUserInterfaceIdentifierToRestore)
      case 6: try decoder.decodeSingularMessageField(value: &self._workingUndoObject)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._flowInfoToAdd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._flowInfoArchive {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._undoUserInterfaceIdentifierToRestore {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._undoNextUserInterfaceIdentifierToRestore {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._workingUndoObject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_AddFlowInfoCommandArchive, rhs: TSWP_AddFlowInfoCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._flowInfoToAdd != rhs._flowInfoToAdd {return false}
    if lhs._flowInfoArchive != rhs._flowInfoArchive {return false}
    if lhs._undoUserInterfaceIdentifierToRestore != rhs._undoUserInterfaceIdentifierToRestore {return false}
    if lhs._undoNextUserInterfaceIdentifierToRestore != rhs._undoNextUserInterfaceIdentifierToRestore {return false}
    if lhs._workingUndoObject != rhs._workingUndoObject {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_RemoveFlowInfoCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveFlowInfoCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "flow_info_uuid_path"),
    3: .standard(proto: "undo_object"),
    4: .standard(proto: "undo_user_interface_identifier_to_restore"),
    5: .standard(proto: "undo_next_user_interface_identifier_to_restore"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._flowInfoUuidPath, !v.isInitialized {return false}
    if let v = self._undoObject, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._flowInfoUuidPath)
      case 3: try decoder.decodeSingularMessageField(value: &self._undoObject)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._undoUserInterfaceIdentifierToRestore)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._undoNextUserInterfaceIdentifierToRestore)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._flowInfoUuidPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._undoObject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._undoUserInterfaceIdentifierToRestore {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._undoNextUserInterfaceIdentifierToRestore {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_RemoveFlowInfoCommandArchive, rhs: TSWP_RemoveFlowInfoCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._flowInfoUuidPath != rhs._flowInfoUuidPath {return false}
    if lhs._undoObject != rhs._undoObject {return false}
    if lhs._undoUserInterfaceIdentifierToRestore != rhs._undoUserInterfaceIdentifierToRestore {return false}
    if lhs._undoNextUserInterfaceIdentifierToRestore != rhs._undoNextUserInterfaceIdentifierToRestore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_TextCommentReplyCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TextCommentReplyCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "storage_uuid_path"),
    3: .standard(proto: "annotation_uuid"),
    4: .standard(proto: "forward_comment"),
    5: .standard(proto: "inverse_comment"),
    6: .standard(proto: "forward_variant"),
    7: .standard(proto: "inverse_variant"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storageUuidPath, !v.isInitialized {return false}
    if let v = self._forwardComment, !v.isInitialized {return false}
    if let v = self._inverseComment, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storageUuidPath)
      case 3: try decoder.decodeSingularStringField(value: &self._annotationUuid)
      case 4: try decoder.decodeSingularMessageField(value: &self._forwardComment)
      case 5: try decoder.decodeSingularMessageField(value: &self._inverseComment)
      case 6: try decoder.decodeSingularEnumField(value: &self._forwardVariant)
      case 7: try decoder.decodeSingularEnumField(value: &self._inverseVariant)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storageUuidPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._annotationUuid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._forwardComment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._inverseComment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._forwardVariant {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    }
    if let v = self._inverseVariant {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_TextCommentReplyCommandArchive, rhs: TSWP_TextCommentReplyCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storageUuidPath != rhs._storageUuidPath {return false}
    if lhs._annotationUuid != rhs._annotationUuid {return false}
    if lhs._forwardComment != rhs._forwardComment {return false}
    if lhs._inverseComment != rhs._inverseComment {return false}
    if lhs._forwardVariant != rhs._forwardVariant {return false}
    if lhs._inverseVariant != rhs._inverseVariant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_ContainedObjectsCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContainedObjectsCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "target"),
    3: .same(proto: "objects"),
    4: .standard(proto: "undo_object_for_commit"),
    5: .standard(proto: "undo_object_for_make_inverse"),
    6: .standard(proto: "add_behavior_args"),
    7: .standard(proto: "remove_behavior_args"),
    8: .standard(proto: "rearrange_behavior_args"),
    9: .standard(proto: "container_name"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._target == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._target, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.objects) {return false}
    if let v = self._undoObjectForCommit, !v.isInitialized {return false}
    if let v = self._undoObjectForMakeInverse, !v.isInitialized {return false}
    if let v = self._addBehaviorArgs, !v.isInitialized {return false}
    if let v = self._removeBehaviorArgs, !v.isInitialized {return false}
    if let v = self._rearrangeBehaviorArgs, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._target)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.objects)
      case 4: try decoder.decodeSingularMessageField(value: &self._undoObjectForCommit)
      case 5: try decoder.decodeSingularMessageField(value: &self._undoObjectForMakeInverse)
      case 6: try decoder.decodeSingularMessageField(value: &self._addBehaviorArgs)
      case 7: try decoder.decodeSingularMessageField(value: &self._removeBehaviorArgs)
      case 8: try decoder.decodeSingularMessageField(value: &self._rearrangeBehaviorArgs)
      case 9: try decoder.decodeSingularStringField(value: &self._containerName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._target {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.objects.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.objects, fieldNumber: 3)
    }
    if let v = self._undoObjectForCommit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._undoObjectForMakeInverse {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._addBehaviorArgs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._removeBehaviorArgs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._rearrangeBehaviorArgs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._containerName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_ContainedObjectsCommandArchive, rhs: TSWP_ContainedObjectsCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._target != rhs._target {return false}
    if lhs.objects != rhs.objects {return false}
    if lhs._undoObjectForCommit != rhs._undoObjectForCommit {return false}
    if lhs._undoObjectForMakeInverse != rhs._undoObjectForMakeInverse {return false}
    if lhs._addBehaviorArgs != rhs._addBehaviorArgs {return false}
    if lhs._removeBehaviorArgs != rhs._removeBehaviorArgs {return false}
    if lhs._rearrangeBehaviorArgs != rhs._rearrangeBehaviorArgs {return false}
    if lhs._containerName != rhs._containerName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_ContainedObjectsCommandArchive.AddBehaviorArgs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSWP_ContainedObjectsCommandArchive.protoMessageName + ".AddBehaviorArgs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "args_list"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.argsList) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.argsList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.argsList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.argsList, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_ContainedObjectsCommandArchive.AddBehaviorArgs, rhs: TSWP_ContainedObjectsCommandArchive.AddBehaviorArgs) -> Bool {
    if lhs.argsList != rhs.argsList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_ContainedObjectsCommandArchive.RemoveBehaviorArgs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSWP_ContainedObjectsCommandArchive.protoMessageName + ".RemoveBehaviorArgs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "args_list"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.argsList) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.argsList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.argsList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.argsList, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_ContainedObjectsCommandArchive.RemoveBehaviorArgs, rhs: TSWP_ContainedObjectsCommandArchive.RemoveBehaviorArgs) -> Bool {
    if lhs.argsList != rhs.argsList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_ContainedObjectsCommandArchive.RearrangeBehaviorArgs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSWP_ContainedObjectsCommandArchive.protoMessageName + ".RearrangeBehaviorArgs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "args_list"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.argsList) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.argsList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.argsList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.argsList, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_ContainedObjectsCommandArchive.RearrangeBehaviorArgs, rhs: TSWP_ContainedObjectsCommandArchive.RearrangeBehaviorArgs) -> Bool {
    if lhs.argsList != rhs.argsList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSWP_EquationInfoGeometryCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EquationInfoGeometryCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSWP_EquationInfoGeometryCommandArchive, rhs: TSWP_EquationInfoGeometryCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
