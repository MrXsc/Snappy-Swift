// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TSCHArchives.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct TSCH_ChartDrawableArchive: SwiftProtobuf.ExtensibleMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_DrawableArchive {
    get {return _super ?? TSD_DrawableArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _super: TSD_DrawableArchive? = nil
}

struct TSCH_ChartArchive: SwiftProtobuf.ExtensibleMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chartType: TSCH_ChartType {
    get {return _storage._chartType ?? .undefinedChartType}
    set {_uniqueStorage()._chartType = newValue}
  }
  /// Returns true if `chartType` has been explicitly set.
  var hasChartType: Bool {return _storage._chartType != nil}
  /// Clears the value of `chartType`. Subsequent reads from it will return its default value.
  mutating func clearChartType() {_uniqueStorage()._chartType = nil}

  var scatterFormat: TSCH_ScatterFormat {
    get {return _storage._scatterFormat ?? .unknown}
    set {_uniqueStorage()._scatterFormat = newValue}
  }
  /// Returns true if `scatterFormat` has been explicitly set.
  var hasScatterFormat: Bool {return _storage._scatterFormat != nil}
  /// Clears the value of `scatterFormat`. Subsequent reads from it will return its default value.
  mutating func clearScatterFormat() {_uniqueStorage()._scatterFormat = nil}

  var legendFrame: TSCH_RectArchive {
    get {return _storage._legendFrame ?? TSCH_RectArchive()}
    set {_uniqueStorage()._legendFrame = newValue}
  }
  /// Returns true if `legendFrame` has been explicitly set.
  var hasLegendFrame: Bool {return _storage._legendFrame != nil}
  /// Clears the value of `legendFrame`. Subsequent reads from it will return its default value.
  mutating func clearLegendFrame() {_uniqueStorage()._legendFrame = nil}

  var preset: TSP_Reference {
    get {return _storage._preset ?? TSP_Reference()}
    set {_uniqueStorage()._preset = newValue}
  }
  /// Returns true if `preset` has been explicitly set.
  var hasPreset: Bool {return _storage._preset != nil}
  /// Clears the value of `preset`. Subsequent reads from it will return its default value.
  mutating func clearPreset() {_uniqueStorage()._preset = nil}

  var seriesDirection: TSCH_SeriesDirection {
    get {return _storage._seriesDirection ?? .unknown}
    set {_uniqueStorage()._seriesDirection = newValue}
  }
  /// Returns true if `seriesDirection` has been explicitly set.
  var hasSeriesDirection: Bool {return _storage._seriesDirection != nil}
  /// Clears the value of `seriesDirection`. Subsequent reads from it will return its default value.
  mutating func clearSeriesDirection() {_uniqueStorage()._seriesDirection = nil}

  var containsDefaultData: Bool {
    get {return _storage._containsDefaultData ?? false}
    set {_uniqueStorage()._containsDefaultData = newValue}
  }
  /// Returns true if `containsDefaultData` has been explicitly set.
  var hasContainsDefaultData: Bool {return _storage._containsDefaultData != nil}
  /// Clears the value of `containsDefaultData`. Subsequent reads from it will return its default value.
  mutating func clearContainsDefaultData() {_uniqueStorage()._containsDefaultData = nil}

  var grid: TSCH_ChartGridArchive {
    get {return _storage._grid ?? TSCH_ChartGridArchive()}
    set {_uniqueStorage()._grid = newValue}
  }
  /// Returns true if `grid` has been explicitly set.
  var hasGrid: Bool {return _storage._grid != nil}
  /// Clears the value of `grid`. Subsequent reads from it will return its default value.
  mutating func clearGrid() {_uniqueStorage()._grid = nil}

  var mediator: TSP_Reference {
    get {return _storage._mediator ?? TSP_Reference()}
    set {_uniqueStorage()._mediator = newValue}
  }
  /// Returns true if `mediator` has been explicitly set.
  var hasMediator: Bool {return _storage._mediator != nil}
  /// Clears the value of `mediator`. Subsequent reads from it will return its default value.
  mutating func clearMediator() {_uniqueStorage()._mediator = nil}

  var chartStyle: TSP_Reference {
    get {return _storage._chartStyle ?? TSP_Reference()}
    set {_uniqueStorage()._chartStyle = newValue}
  }
  /// Returns true if `chartStyle` has been explicitly set.
  var hasChartStyle: Bool {return _storage._chartStyle != nil}
  /// Clears the value of `chartStyle`. Subsequent reads from it will return its default value.
  mutating func clearChartStyle() {_uniqueStorage()._chartStyle = nil}

  var chartNonStyle: TSP_Reference {
    get {return _storage._chartNonStyle ?? TSP_Reference()}
    set {_uniqueStorage()._chartNonStyle = newValue}
  }
  /// Returns true if `chartNonStyle` has been explicitly set.
  var hasChartNonStyle: Bool {return _storage._chartNonStyle != nil}
  /// Clears the value of `chartNonStyle`. Subsequent reads from it will return its default value.
  mutating func clearChartNonStyle() {_uniqueStorage()._chartNonStyle = nil}

  var legendStyle: TSP_Reference {
    get {return _storage._legendStyle ?? TSP_Reference()}
    set {_uniqueStorage()._legendStyle = newValue}
  }
  /// Returns true if `legendStyle` has been explicitly set.
  var hasLegendStyle: Bool {return _storage._legendStyle != nil}
  /// Clears the value of `legendStyle`. Subsequent reads from it will return its default value.
  mutating func clearLegendStyle() {_uniqueStorage()._legendStyle = nil}

  var legendNonStyle: TSP_Reference {
    get {return _storage._legendNonStyle ?? TSP_Reference()}
    set {_uniqueStorage()._legendNonStyle = newValue}
  }
  /// Returns true if `legendNonStyle` has been explicitly set.
  var hasLegendNonStyle: Bool {return _storage._legendNonStyle != nil}
  /// Clears the value of `legendNonStyle`. Subsequent reads from it will return its default value.
  mutating func clearLegendNonStyle() {_uniqueStorage()._legendNonStyle = nil}

  var valueAxisStyles: [TSP_Reference] {
    get {return _storage._valueAxisStyles}
    set {_uniqueStorage()._valueAxisStyles = newValue}
  }

  var valueAxisNonstyles: [TSP_Reference] {
    get {return _storage._valueAxisNonstyles}
    set {_uniqueStorage()._valueAxisNonstyles = newValue}
  }

  var categoryAxisStyles: [TSP_Reference] {
    get {return _storage._categoryAxisStyles}
    set {_uniqueStorage()._categoryAxisStyles = newValue}
  }

  var categoryAxisNonstyles: [TSP_Reference] {
    get {return _storage._categoryAxisNonstyles}
    set {_uniqueStorage()._categoryAxisNonstyles = newValue}
  }

  var seriesThemeStyles: [TSP_Reference] {
    get {return _storage._seriesThemeStyles}
    set {_uniqueStorage()._seriesThemeStyles = newValue}
  }

  var seriesPrivateStyles: TSP_SparseReferenceArray {
    get {return _storage._seriesPrivateStyles ?? TSP_SparseReferenceArray()}
    set {_uniqueStorage()._seriesPrivateStyles = newValue}
  }
  /// Returns true if `seriesPrivateStyles` has been explicitly set.
  var hasSeriesPrivateStyles: Bool {return _storage._seriesPrivateStyles != nil}
  /// Clears the value of `seriesPrivateStyles`. Subsequent reads from it will return its default value.
  mutating func clearSeriesPrivateStyles() {_uniqueStorage()._seriesPrivateStyles = nil}

  var seriesNonStyles: TSP_SparseReferenceArray {
    get {return _storage._seriesNonStyles ?? TSP_SparseReferenceArray()}
    set {_uniqueStorage()._seriesNonStyles = newValue}
  }
  /// Returns true if `seriesNonStyles` has been explicitly set.
  var hasSeriesNonStyles: Bool {return _storage._seriesNonStyles != nil}
  /// Clears the value of `seriesNonStyles`. Subsequent reads from it will return its default value.
  mutating func clearSeriesNonStyles() {_uniqueStorage()._seriesNonStyles = nil}

  var paragraphStyles: [TSP_Reference] {
    get {return _storage._paragraphStyles}
    set {_uniqueStorage()._paragraphStyles = newValue}
  }

  var multidatasetIndex: UInt32 {
    get {return _storage._multidatasetIndex ?? 0}
    set {_uniqueStorage()._multidatasetIndex = newValue}
  }
  /// Returns true if `multidatasetIndex` has been explicitly set.
  var hasMultidatasetIndex: Bool {return _storage._multidatasetIndex != nil}
  /// Clears the value of `multidatasetIndex`. Subsequent reads from it will return its default value.
  mutating func clearMultidatasetIndex() {_uniqueStorage()._multidatasetIndex = nil}

  var needsCalcEngineDeferredImportAction: Bool {
    get {return _storage._needsCalcEngineDeferredImportAction ?? false}
    set {_uniqueStorage()._needsCalcEngineDeferredImportAction = newValue}
  }
  /// Returns true if `needsCalcEngineDeferredImportAction` has been explicitly set.
  var hasNeedsCalcEngineDeferredImportAction: Bool {return _storage._needsCalcEngineDeferredImportAction != nil}
  /// Clears the value of `needsCalcEngineDeferredImportAction`. Subsequent reads from it will return its default value.
  mutating func clearNeedsCalcEngineDeferredImportAction() {_uniqueStorage()._needsCalcEngineDeferredImportAction = nil}

  var ownedPreset: TSP_Reference {
    get {return _storage._ownedPreset ?? TSP_Reference()}
    set {_uniqueStorage()._ownedPreset = newValue}
  }
  /// Returns true if `ownedPreset` has been explicitly set.
  var hasOwnedPreset: Bool {return _storage._ownedPreset != nil}
  /// Clears the value of `ownedPreset`. Subsequent reads from it will return its default value.
  mutating func clearOwnedPreset() {_uniqueStorage()._ownedPreset = nil}

  var isDirty: Bool {
    get {return _storage._isDirty ?? false}
    set {_uniqueStorage()._isDirty = newValue}
  }
  /// Returns true if `isDirty` has been explicitly set.
  var hasIsDirty: Bool {return _storage._isDirty != nil}
  /// Clears the value of `isDirty`. Subsequent reads from it will return its default value.
  mutating func clearIsDirty() {_uniqueStorage()._isDirty = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSCH_ChartMultiDataIndexUpgrade {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSCH_ChartGarlicMinMaxUpgrade {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var horizontalMin: Double {
    get {return _horizontalMin ?? 0}
    set {_horizontalMin = newValue}
  }
  /// Returns true if `horizontalMin` has been explicitly set.
  var hasHorizontalMin: Bool {return self._horizontalMin != nil}
  /// Clears the value of `horizontalMin`. Subsequent reads from it will return its default value.
  mutating func clearHorizontalMin() {self._horizontalMin = nil}

  var horizontalMax: Double {
    get {return _horizontalMax ?? 0}
    set {_horizontalMax = newValue}
  }
  /// Returns true if `horizontalMax` has been explicitly set.
  var hasHorizontalMax: Bool {return self._horizontalMax != nil}
  /// Clears the value of `horizontalMax`. Subsequent reads from it will return its default value.
  mutating func clearHorizontalMax() {self._horizontalMax = nil}

  var valueMin: Double {
    get {return _valueMin ?? 0}
    set {_valueMin = newValue}
  }
  /// Returns true if `valueMin` has been explicitly set.
  var hasValueMin: Bool {return self._valueMin != nil}
  /// Clears the value of `valueMin`. Subsequent reads from it will return its default value.
  mutating func clearValueMin() {self._valueMin = nil}

  var valueMax: Double {
    get {return _valueMax ?? 0}
    set {_valueMax = newValue}
  }
  /// Returns true if `valueMax` has been explicitly set.
  var hasValueMax: Bool {return self._valueMax != nil}
  /// Clears the value of `valueMax`. Subsequent reads from it will return its default value.
  mutating func clearValueMax() {self._valueMax = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _horizontalMin: Double? = nil
  fileprivate var _horizontalMax: Double? = nil
  fileprivate var _valueMin: Double? = nil
  fileprivate var _valueMax: Double? = nil
}

struct TSCH_ChartGarlicLabelFormatUpgrade {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var valuePrefix: String {
    get {return _valuePrefix ?? String()}
    set {_valuePrefix = newValue}
  }
  /// Returns true if `valuePrefix` has been explicitly set.
  var hasValuePrefix: Bool {return self._valuePrefix != nil}
  /// Clears the value of `valuePrefix`. Subsequent reads from it will return its default value.
  mutating func clearValuePrefix() {self._valuePrefix = nil}

  var valueSuffix: String {
    get {return _valueSuffix ?? String()}
    set {_valueSuffix = newValue}
  }
  /// Returns true if `valueSuffix` has been explicitly set.
  var hasValueSuffix: Bool {return self._valueSuffix != nil}
  /// Clears the value of `valueSuffix`. Subsequent reads from it will return its default value.
  mutating func clearValueSuffix() {self._valueSuffix = nil}

  var valueUseSeparator: Bool {
    get {return _valueUseSeparator ?? false}
    set {_valueUseSeparator = newValue}
  }
  /// Returns true if `valueUseSeparator` has been explicitly set.
  var hasValueUseSeparator: Bool {return self._valueUseSeparator != nil}
  /// Clears the value of `valueUseSeparator`. Subsequent reads from it will return its default value.
  mutating func clearValueUseSeparator() {self._valueUseSeparator = nil}

  var horizontalPrefix: String {
    get {return _horizontalPrefix ?? String()}
    set {_horizontalPrefix = newValue}
  }
  /// Returns true if `horizontalPrefix` has been explicitly set.
  var hasHorizontalPrefix: Bool {return self._horizontalPrefix != nil}
  /// Clears the value of `horizontalPrefix`. Subsequent reads from it will return its default value.
  mutating func clearHorizontalPrefix() {self._horizontalPrefix = nil}

  var horizontalSuffix: String {
    get {return _horizontalSuffix ?? String()}
    set {_horizontalSuffix = newValue}
  }
  /// Returns true if `horizontalSuffix` has been explicitly set.
  var hasHorizontalSuffix: Bool {return self._horizontalSuffix != nil}
  /// Clears the value of `horizontalSuffix`. Subsequent reads from it will return its default value.
  mutating func clearHorizontalSuffix() {self._horizontalSuffix = nil}

  var horizontalUseSeparator: Bool {
    get {return _horizontalUseSeparator ?? false}
    set {_horizontalUseSeparator = newValue}
  }
  /// Returns true if `horizontalUseSeparator` has been explicitly set.
  var hasHorizontalUseSeparator: Bool {return self._horizontalUseSeparator != nil}
  /// Clears the value of `horizontalUseSeparator`. Subsequent reads from it will return its default value.
  mutating func clearHorizontalUseSeparator() {self._horizontalUseSeparator = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _valuePrefix: String? = nil
  fileprivate var _valueSuffix: String? = nil
  fileprivate var _valueUseSeparator: Bool? = nil
  fileprivate var _horizontalPrefix: String? = nil
  fileprivate var _horizontalSuffix: String? = nil
  fileprivate var _horizontalUseSeparator: Bool? = nil
}

struct TSCH_ChartPasteboardAdditionsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSCH_ChartPreserveAppearanceForPresetArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSCH_ChartSupportsProportionalBendedCalloutLinesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSCH_ChartSupportsRoundedCornersArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSCH_ChartSupportsSeriesPropertySpacingArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSCH_ChartGridArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rowName: [String] = []

  var columnName: [String] = []

  var gridRow: [TSCH_GridRow] = []

  var idMap: TSCH_ChartGridArchive.ChartGridRowColumnIdMap {
    get {return _idMap ?? TSCH_ChartGridArchive.ChartGridRowColumnIdMap()}
    set {_idMap = newValue}
  }
  /// Returns true if `idMap` has been explicitly set.
  var hasIDMap: Bool {return self._idMap != nil}
  /// Clears the value of `idMap`. Subsequent reads from it will return its default value.
  mutating func clearIDMap() {self._idMap = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct ChartGridRowColumnIdMap {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var rowIDMap: [TSCH_ChartGridArchive.ChartGridRowColumnIdMap.Entry] = []

    var columnIDMap: [TSCH_ChartGridArchive.ChartGridRowColumnIdMap.Entry] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Entry {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var uniqueID: String {
        get {return _uniqueID ?? String()}
        set {_uniqueID = newValue}
      }
      /// Returns true if `uniqueID` has been explicitly set.
      var hasUniqueID: Bool {return self._uniqueID != nil}
      /// Clears the value of `uniqueID`. Subsequent reads from it will return its default value.
      mutating func clearUniqueID() {self._uniqueID = nil}

      var index: UInt32 {
        get {return _index ?? 0}
        set {_index = newValue}
      }
      /// Returns true if `index` has been explicitly set.
      var hasIndex: Bool {return self._index != nil}
      /// Clears the value of `index`. Subsequent reads from it will return its default value.
      mutating func clearIndex() {self._index = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _uniqueID: String? = nil
      fileprivate var _index: UInt32? = nil
    }

    init() {}
  }

  init() {}

  fileprivate var _idMap: TSCH_ChartGridArchive.ChartGridRowColumnIdMap? = nil
}

struct TSCH_ChartMediatorArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var info: TSP_Reference {
    get {return _info ?? TSP_Reference()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {self._info = nil}

  var localSeriesIndexes: [UInt32] = []

  var remoteSeriesIndexes: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _info: TSP_Reference? = nil
}

struct TSCH_ChartFillSetArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identifier: String {
    get {return _identifier ?? String()}
    set {_identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return self._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {self._identifier = nil}

  var lookupString: String {
    get {return _lookupString ?? String()}
    set {_lookupString = newValue}
  }
  /// Returns true if `lookupString` has been explicitly set.
  var hasLookupString: Bool {return self._lookupString != nil}
  /// Clears the value of `lookupString`. Subsequent reads from it will return its default value.
  mutating func clearLookupString() {self._lookupString = nil}

  var numberOfThemeSeriesStyles: UInt32 {
    get {return _numberOfThemeSeriesStyles ?? 0}
    set {_numberOfThemeSeriesStyles = newValue}
  }
  /// Returns true if `numberOfThemeSeriesStyles` has been explicitly set.
  var hasNumberOfThemeSeriesStyles: Bool {return self._numberOfThemeSeriesStyles != nil}
  /// Clears the value of `numberOfThemeSeriesStyles`. Subsequent reads from it will return its default value.
  mutating func clearNumberOfThemeSeriesStyles() {self._numberOfThemeSeriesStyles = nil}

  var seriesStyles: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _identifier: String? = nil
  fileprivate var _lookupString: String? = nil
  fileprivate var _numberOfThemeSeriesStyles: UInt32? = nil
}

struct TSCH_ChartStylePreset: SwiftProtobuf.ExtensibleMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chartStyle: TSP_Reference {
    get {return _chartStyle ?? TSP_Reference()}
    set {_chartStyle = newValue}
  }
  /// Returns true if `chartStyle` has been explicitly set.
  var hasChartStyle: Bool {return self._chartStyle != nil}
  /// Clears the value of `chartStyle`. Subsequent reads from it will return its default value.
  mutating func clearChartStyle() {self._chartStyle = nil}

  var legendStyle: TSP_Reference {
    get {return _legendStyle ?? TSP_Reference()}
    set {_legendStyle = newValue}
  }
  /// Returns true if `legendStyle` has been explicitly set.
  var hasLegendStyle: Bool {return self._legendStyle != nil}
  /// Clears the value of `legendStyle`. Subsequent reads from it will return its default value.
  mutating func clearLegendStyle() {self._legendStyle = nil}

  var valueAxisStyles: [TSP_Reference] = []

  var categoryAxisStyles: [TSP_Reference] = []

  var seriesStyles: [TSP_Reference] = []

  var paragraphStyles: [TSP_Reference] = []

  var uuid: Data {
    get {return _uuid ?? SwiftProtobuf.Internal.emptyData}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _chartStyle: TSP_Reference? = nil
  fileprivate var _legendStyle: TSP_Reference? = nil
  fileprivate var _uuid: Data? = nil
}

struct TSCH_ChartPresetsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chartPresets: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSCH_PropertyValueStorageContainerArchive: SwiftProtobuf.ExtensibleMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chartStyle: TSP_Reference {
    get {return _chartStyle ?? TSP_Reference()}
    set {_chartStyle = newValue}
  }
  /// Returns true if `chartStyle` has been explicitly set.
  var hasChartStyle: Bool {return self._chartStyle != nil}
  /// Clears the value of `chartStyle`. Subsequent reads from it will return its default value.
  mutating func clearChartStyle() {self._chartStyle = nil}

  var chartNonstyle: TSP_Reference {
    get {return _chartNonstyle ?? TSP_Reference()}
    set {_chartNonstyle = newValue}
  }
  /// Returns true if `chartNonstyle` has been explicitly set.
  var hasChartNonstyle: Bool {return self._chartNonstyle != nil}
  /// Clears the value of `chartNonstyle`. Subsequent reads from it will return its default value.
  mutating func clearChartNonstyle() {self._chartNonstyle = nil}

  var legendStyle: TSP_Reference {
    get {return _legendStyle ?? TSP_Reference()}
    set {_legendStyle = newValue}
  }
  /// Returns true if `legendStyle` has been explicitly set.
  var hasLegendStyle: Bool {return self._legendStyle != nil}
  /// Clears the value of `legendStyle`. Subsequent reads from it will return its default value.
  mutating func clearLegendStyle() {self._legendStyle = nil}

  var legendNonstyle: TSP_Reference {
    get {return _legendNonstyle ?? TSP_Reference()}
    set {_legendNonstyle = newValue}
  }
  /// Returns true if `legendNonstyle` has been explicitly set.
  var hasLegendNonstyle: Bool {return self._legendNonstyle != nil}
  /// Clears the value of `legendNonstyle`. Subsequent reads from it will return its default value.
  mutating func clearLegendNonstyle() {self._legendNonstyle = nil}

  var valueAxisStyles: TSP_SparseReferenceArray {
    get {return _valueAxisStyles ?? TSP_SparseReferenceArray()}
    set {_valueAxisStyles = newValue}
  }
  /// Returns true if `valueAxisStyles` has been explicitly set.
  var hasValueAxisStyles: Bool {return self._valueAxisStyles != nil}
  /// Clears the value of `valueAxisStyles`. Subsequent reads from it will return its default value.
  mutating func clearValueAxisStyles() {self._valueAxisStyles = nil}

  var valueAxisNonstyles: TSP_SparseReferenceArray {
    get {return _valueAxisNonstyles ?? TSP_SparseReferenceArray()}
    set {_valueAxisNonstyles = newValue}
  }
  /// Returns true if `valueAxisNonstyles` has been explicitly set.
  var hasValueAxisNonstyles: Bool {return self._valueAxisNonstyles != nil}
  /// Clears the value of `valueAxisNonstyles`. Subsequent reads from it will return its default value.
  mutating func clearValueAxisNonstyles() {self._valueAxisNonstyles = nil}

  var categoryAxisStyles: TSP_SparseReferenceArray {
    get {return _categoryAxisStyles ?? TSP_SparseReferenceArray()}
    set {_categoryAxisStyles = newValue}
  }
  /// Returns true if `categoryAxisStyles` has been explicitly set.
  var hasCategoryAxisStyles: Bool {return self._categoryAxisStyles != nil}
  /// Clears the value of `categoryAxisStyles`. Subsequent reads from it will return its default value.
  mutating func clearCategoryAxisStyles() {self._categoryAxisStyles = nil}

  var categoryAxisNonstyles: TSP_SparseReferenceArray {
    get {return _categoryAxisNonstyles ?? TSP_SparseReferenceArray()}
    set {_categoryAxisNonstyles = newValue}
  }
  /// Returns true if `categoryAxisNonstyles` has been explicitly set.
  var hasCategoryAxisNonstyles: Bool {return self._categoryAxisNonstyles != nil}
  /// Clears the value of `categoryAxisNonstyles`. Subsequent reads from it will return its default value.
  mutating func clearCategoryAxisNonstyles() {self._categoryAxisNonstyles = nil}

  var seriesThemeStyles: TSP_SparseReferenceArray {
    get {return _seriesThemeStyles ?? TSP_SparseReferenceArray()}
    set {_seriesThemeStyles = newValue}
  }
  /// Returns true if `seriesThemeStyles` has been explicitly set.
  var hasSeriesThemeStyles: Bool {return self._seriesThemeStyles != nil}
  /// Clears the value of `seriesThemeStyles`. Subsequent reads from it will return its default value.
  mutating func clearSeriesThemeStyles() {self._seriesThemeStyles = nil}

  var seriesPrivateStyles: TSP_SparseReferenceArray {
    get {return _seriesPrivateStyles ?? TSP_SparseReferenceArray()}
    set {_seriesPrivateStyles = newValue}
  }
  /// Returns true if `seriesPrivateStyles` has been explicitly set.
  var hasSeriesPrivateStyles: Bool {return self._seriesPrivateStyles != nil}
  /// Clears the value of `seriesPrivateStyles`. Subsequent reads from it will return its default value.
  mutating func clearSeriesPrivateStyles() {self._seriesPrivateStyles = nil}

  var seriesNonstyles: TSP_SparseReferenceArray {
    get {return _seriesNonstyles ?? TSP_SparseReferenceArray()}
    set {_seriesNonstyles = newValue}
  }
  /// Returns true if `seriesNonstyles` has been explicitly set.
  var hasSeriesNonstyles: Bool {return self._seriesNonstyles != nil}
  /// Clears the value of `seriesNonstyles`. Subsequent reads from it will return its default value.
  mutating func clearSeriesNonstyles() {self._seriesNonstyles = nil}

  var paragraphStyles: TSP_SparseReferenceArray {
    get {return _paragraphStyles ?? TSP_SparseReferenceArray()}
    set {_paragraphStyles = newValue}
  }
  /// Returns true if `paragraphStyles` has been explicitly set.
  var hasParagraphStyles: Bool {return self._paragraphStyles != nil}
  /// Clears the value of `paragraphStyles`. Subsequent reads from it will return its default value.
  mutating func clearParagraphStyles() {self._paragraphStyles = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _chartStyle: TSP_Reference? = nil
  fileprivate var _chartNonstyle: TSP_Reference? = nil
  fileprivate var _legendStyle: TSP_Reference? = nil
  fileprivate var _legendNonstyle: TSP_Reference? = nil
  fileprivate var _valueAxisStyles: TSP_SparseReferenceArray? = nil
  fileprivate var _valueAxisNonstyles: TSP_SparseReferenceArray? = nil
  fileprivate var _categoryAxisStyles: TSP_SparseReferenceArray? = nil
  fileprivate var _categoryAxisNonstyles: TSP_SparseReferenceArray? = nil
  fileprivate var _seriesThemeStyles: TSP_SparseReferenceArray? = nil
  fileprivate var _seriesPrivateStyles: TSP_SparseReferenceArray? = nil
  fileprivate var _seriesNonstyles: TSP_SparseReferenceArray? = nil
  fileprivate var _paragraphStyles: TSP_SparseReferenceArray? = nil
}

struct TSCH_StylePasteboardDataArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSS_StyleArchive {
    get {return _super ?? TSS_StyleArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var styleNetwork: TSCH_PropertyValueStorageContainerArchive {
    get {return _styleNetwork ?? TSCH_PropertyValueStorageContainerArchive()}
    set {_styleNetwork = newValue}
  }
  /// Returns true if `styleNetwork` has been explicitly set.
  var hasStyleNetwork: Bool {return self._styleNetwork != nil}
  /// Clears the value of `styleNetwork`. Subsequent reads from it will return its default value.
  mutating func clearStyleNetwork() {self._styleNetwork = nil}

  var copiedFromEntireChart: Bool {
    get {return _copiedFromEntireChart ?? false}
    set {_copiedFromEntireChart = newValue}
  }
  /// Returns true if `copiedFromEntireChart` has been explicitly set.
  var hasCopiedFromEntireChart: Bool {return self._copiedFromEntireChart != nil}
  /// Clears the value of `copiedFromEntireChart`. Subsequent reads from it will return its default value.
  mutating func clearCopiedFromEntireChart() {self._copiedFromEntireChart = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSS_StyleArchive? = nil
  fileprivate var _styleNetwork: TSCH_PropertyValueStorageContainerArchive? = nil
  fileprivate var _copiedFromEntireChart: Bool? = nil
}

struct TSCH_ChartSelectionPathTypeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pathType: String {
    get {return _pathType ?? String()}
    set {_pathType = newValue}
  }
  /// Returns true if `pathType` has been explicitly set.
  var hasPathType: Bool {return self._pathType != nil}
  /// Clears the value of `pathType`. Subsequent reads from it will return its default value.
  mutating func clearPathType() {self._pathType = nil}

  var pathName: String {
    get {return _pathName ?? String()}
    set {_pathName = newValue}
  }
  /// Returns true if `pathName` has been explicitly set.
  var hasPathName: Bool {return self._pathName != nil}
  /// Clears the value of `pathName`. Subsequent reads from it will return its default value.
  mutating func clearPathName() {self._pathName = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pathType: String? = nil
  fileprivate var _pathName: String? = nil
}

struct TSCH_ChartAxisIDArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var axisType: TSCH_AxisType {
    get {return _axisType ?? .unknown}
    set {_axisType = newValue}
  }
  /// Returns true if `axisType` has been explicitly set.
  var hasAxisType: Bool {return self._axisType != nil}
  /// Clears the value of `axisType`. Subsequent reads from it will return its default value.
  mutating func clearAxisType() {self._axisType = nil}

  var ordinal: UInt32 {
    get {return _ordinal ?? 0}
    set {_ordinal = newValue}
  }
  /// Returns true if `ordinal` has been explicitly set.
  var hasOrdinal: Bool {return self._ordinal != nil}
  /// Clears the value of `ordinal`. Subsequent reads from it will return its default value.
  mutating func clearOrdinal() {self._ordinal = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _axisType: TSCH_AxisType? = nil
  fileprivate var _ordinal: UInt32? = nil
}

struct TSCH_ChartSelectionPathArgumentArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var number: UInt32 {
    get {return _number ?? 0}
    set {_number = newValue}
  }
  /// Returns true if `number` has been explicitly set.
  var hasNumber: Bool {return self._number != nil}
  /// Clears the value of `number`. Subsequent reads from it will return its default value.
  mutating func clearNumber() {self._number = nil}

  var axisID: TSCH_ChartAxisIDArchive {
    get {return _axisID ?? TSCH_ChartAxisIDArchive()}
    set {_axisID = newValue}
  }
  /// Returns true if `axisID` has been explicitly set.
  var hasAxisID: Bool {return self._axisID != nil}
  /// Clears the value of `axisID`. Subsequent reads from it will return its default value.
  mutating func clearAxisID() {self._axisID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _number: UInt32? = nil
  fileprivate var _axisID: TSCH_ChartAxisIDArchive? = nil
}

struct TSCH_ChartSelectionPathArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pathType: TSCH_ChartSelectionPathTypeArchive {
    get {return _storage._pathType ?? TSCH_ChartSelectionPathTypeArchive()}
    set {_uniqueStorage()._pathType = newValue}
  }
  /// Returns true if `pathType` has been explicitly set.
  var hasPathType: Bool {return _storage._pathType != nil}
  /// Clears the value of `pathType`. Subsequent reads from it will return its default value.
  mutating func clearPathType() {_uniqueStorage()._pathType = nil}

  var subSelection: TSCH_ChartSelectionPathArchive {
    get {return _storage._subSelection ?? TSCH_ChartSelectionPathArchive()}
    set {_uniqueStorage()._subSelection = newValue}
  }
  /// Returns true if `subSelection` has been explicitly set.
  var hasSubSelection: Bool {return _storage._subSelection != nil}
  /// Clears the value of `subSelection`. Subsequent reads from it will return its default value.
  mutating func clearSubSelection() {_uniqueStorage()._subSelection = nil}

  var arguments: [TSCH_ChartSelectionPathArgumentArchive] {
    get {return _storage._arguments}
    set {_uniqueStorage()._arguments = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSCH_ChartSelectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_DrawableSelectionArchive {
    get {return _super ?? TSD_DrawableSelectionArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var chart: TSP_Reference {
    get {return _chart ?? TSP_Reference()}
    set {_chart = newValue}
  }
  /// Returns true if `chart` has been explicitly set.
  var hasChart: Bool {return self._chart != nil}
  /// Clears the value of `chart`. Subsequent reads from it will return its default value.
  mutating func clearChart() {self._chart = nil}

  var paths: [TSCH_ChartSelectionPathArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_DrawableSelectionArchive? = nil
  fileprivate var _chart: TSP_Reference? = nil
}

struct TSCH_ChartCDESelectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chart: TSP_Reference {
    get {return _chart ?? TSP_Reference()}
    set {_chart = newValue}
  }
  /// Returns true if `chart` has been explicitly set.
  var hasChart: Bool {return self._chart != nil}
  /// Clears the value of `chart`. Subsequent reads from it will return its default value.
  mutating func clearChart() {self._chart = nil}

  var selectionType: Int32 {
    get {return _selectionType ?? 0}
    set {_selectionType = newValue}
  }
  /// Returns true if `selectionType` has been explicitly set.
  var hasSelectionType: Bool {return self._selectionType != nil}
  /// Clears the value of `selectionType`. Subsequent reads from it will return its default value.
  mutating func clearSelectionType() {self._selectionType = nil}

  var rowLocation: UInt32 {
    get {return _rowLocation ?? 0}
    set {_rowLocation = newValue}
  }
  /// Returns true if `rowLocation` has been explicitly set.
  var hasRowLocation: Bool {return self._rowLocation != nil}
  /// Clears the value of `rowLocation`. Subsequent reads from it will return its default value.
  mutating func clearRowLocation() {self._rowLocation = nil}

  var rowLength: UInt32 {
    get {return _rowLength ?? 0}
    set {_rowLength = newValue}
  }
  /// Returns true if `rowLength` has been explicitly set.
  var hasRowLength: Bool {return self._rowLength != nil}
  /// Clears the value of `rowLength`. Subsequent reads from it will return its default value.
  mutating func clearRowLength() {self._rowLength = nil}

  var columnLocation: UInt32 {
    get {return _columnLocation ?? 0}
    set {_columnLocation = newValue}
  }
  /// Returns true if `columnLocation` has been explicitly set.
  var hasColumnLocation: Bool {return self._columnLocation != nil}
  /// Clears the value of `columnLocation`. Subsequent reads from it will return its default value.
  mutating func clearColumnLocation() {self._columnLocation = nil}

  var columnLength: UInt32 {
    get {return _columnLength ?? 0}
    set {_columnLength = newValue}
  }
  /// Returns true if `columnLength` has been explicitly set.
  var hasColumnLength: Bool {return self._columnLength != nil}
  /// Clears the value of `columnLength`. Subsequent reads from it will return its default value.
  mutating func clearColumnLength() {self._columnLength = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _chart: TSP_Reference? = nil
  fileprivate var _selectionType: Int32? = nil
  fileprivate var _rowLocation: UInt32? = nil
  fileprivate var _rowLength: UInt32? = nil
  fileprivate var _columnLocation: UInt32? = nil
  fileprivate var _columnLength: UInt32? = nil
}

struct TSCH_ChartUIState: SwiftProtobuf.ExtensibleMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chart: TSP_Reference {
    get {return _chart ?? TSP_Reference()}
    set {_chart = newValue}
  }
  /// Returns true if `chart` has been explicitly set.
  var hasChart: Bool {return self._chart != nil}
  /// Clears the value of `chart`. Subsequent reads from it will return its default value.
  mutating func clearChart() {self._chart = nil}

  var cdeLastRowSelected: Int32 {
    get {return _cdeLastRowSelected ?? 0}
    set {_cdeLastRowSelected = newValue}
  }
  /// Returns true if `cdeLastRowSelected` has been explicitly set.
  var hasCdeLastRowSelected: Bool {return self._cdeLastRowSelected != nil}
  /// Clears the value of `cdeLastRowSelected`. Subsequent reads from it will return its default value.
  mutating func clearCdeLastRowSelected() {self._cdeLastRowSelected = nil}

  var cdeLastColSelected: Int32 {
    get {return _cdeLastColSelected ?? 0}
    set {_cdeLastColSelected = newValue}
  }
  /// Returns true if `cdeLastColSelected` has been explicitly set.
  var hasCdeLastColSelected: Bool {return self._cdeLastColSelected != nil}
  /// Clears the value of `cdeLastColSelected`. Subsequent reads from it will return its default value.
  mutating func clearCdeLastColSelected() {self._cdeLastColSelected = nil}

  var cdeLastRowCount: Int32 {
    get {return _cdeLastRowCount ?? 0}
    set {_cdeLastRowCount = newValue}
  }
  /// Returns true if `cdeLastRowCount` has been explicitly set.
  var hasCdeLastRowCount: Bool {return self._cdeLastRowCount != nil}
  /// Clears the value of `cdeLastRowCount`. Subsequent reads from it will return its default value.
  mutating func clearCdeLastRowCount() {self._cdeLastRowCount = nil}

  var cdeLastColCount: Int32 {
    get {return _cdeLastColCount ?? 0}
    set {_cdeLastColCount = newValue}
  }
  /// Returns true if `cdeLastColCount` has been explicitly set.
  var hasCdeLastColCount: Bool {return self._cdeLastColCount != nil}
  /// Clears the value of `cdeLastColCount`. Subsequent reads from it will return its default value.
  mutating func clearCdeLastColCount() {self._cdeLastColCount = nil}

  var cdeUseFullKeyboard: Bool {
    get {return _cdeUseFullKeyboard ?? false}
    set {_cdeUseFullKeyboard = newValue}
  }
  /// Returns true if `cdeUseFullKeyboard` has been explicitly set.
  var hasCdeUseFullKeyboard: Bool {return self._cdeUseFullKeyboard != nil}
  /// Clears the value of `cdeUseFullKeyboard`. Subsequent reads from it will return its default value.
  mutating func clearCdeUseFullKeyboard() {self._cdeUseFullKeyboard = nil}

  var multiDataSetIndex: Int32 {
    get {return _multiDataSetIndex ?? 0}
    set {_multiDataSetIndex = newValue}
  }
  /// Returns true if `multiDataSetIndex` has been explicitly set.
  var hasMultiDataSetIndex: Bool {return self._multiDataSetIndex != nil}
  /// Clears the value of `multiDataSetIndex`. Subsequent reads from it will return its default value.
  mutating func clearMultiDataSetIndex() {self._multiDataSetIndex = nil}

  var isValidMultiDataSetIndex: Bool {
    get {return _isValidMultiDataSetIndex ?? false}
    set {_isValidMultiDataSetIndex = newValue}
  }
  /// Returns true if `isValidMultiDataSetIndex` has been explicitly set.
  var hasIsValidMultiDataSetIndex: Bool {return self._isValidMultiDataSetIndex != nil}
  /// Clears the value of `isValidMultiDataSetIndex`. Subsequent reads from it will return its default value.
  mutating func clearIsValidMultiDataSetIndex() {self._isValidMultiDataSetIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _chart: TSP_Reference? = nil
  fileprivate var _cdeLastRowSelected: Int32? = nil
  fileprivate var _cdeLastColSelected: Int32? = nil
  fileprivate var _cdeLastRowCount: Int32? = nil
  fileprivate var _cdeLastColCount: Int32? = nil
  fileprivate var _cdeUseFullKeyboard: Bool? = nil
  fileprivate var _multiDataSetIndex: Int32? = nil
  fileprivate var _isValidMultiDataSetIndex: Bool? = nil
}

struct TSCH_ChartUIStateMultiDataIndexUpgrade {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSCH_ChartFormatStructExtensions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSCH_ChartReferenceLineNonStyleItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var nonStyle: TSP_Reference {
    get {return _nonStyle ?? TSP_Reference()}
    set {_nonStyle = newValue}
  }
  /// Returns true if `nonStyle` has been explicitly set.
  var hasNonStyle: Bool {return self._nonStyle != nil}
  /// Clears the value of `nonStyle`. Subsequent reads from it will return its default value.
  mutating func clearNonStyle() {self._nonStyle = nil}

  var uuid: TSP_UUID {
    get {return _uuid ?? TSP_UUID()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _nonStyle: TSP_Reference? = nil
  fileprivate var _uuid: TSP_UUID? = nil
}

struct TSCH_ChartAxisReferenceLineNonStylesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var axisID: TSCH_ChartAxisIDArchive {
    get {return _axisID ?? TSCH_ChartAxisIDArchive()}
    set {_axisID = newValue}
  }
  /// Returns true if `axisID` has been explicitly set.
  var hasAxisID: Bool {return self._axisID != nil}
  /// Clears the value of `axisID`. Subsequent reads from it will return its default value.
  mutating func clearAxisID() {self._axisID = nil}

  var referenceLineNonStyleItems: [TSCH_ChartReferenceLineNonStyleItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _axisID: TSCH_ChartAxisIDArchive? = nil
}

struct TSCH_ChartAxisReferenceLineStylesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var axisID: TSCH_ChartAxisIDArchive {
    get {return _axisID ?? TSCH_ChartAxisIDArchive()}
    set {_axisID = newValue}
  }
  /// Returns true if `axisID` has been explicitly set.
  var hasAxisID: Bool {return self._axisID != nil}
  /// Clears the value of `axisID`. Subsequent reads from it will return its default value.
  mutating func clearAxisID() {self._axisID = nil}

  var referenceLineStyles: TSP_SparseReferenceArray {
    get {return _referenceLineStyles ?? TSP_SparseReferenceArray()}
    set {_referenceLineStyles = newValue}
  }
  /// Returns true if `referenceLineStyles` has been explicitly set.
  var hasReferenceLineStyles: Bool {return self._referenceLineStyles != nil}
  /// Clears the value of `referenceLineStyles`. Subsequent reads from it will return its default value.
  mutating func clearReferenceLineStyles() {self._referenceLineStyles = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _axisID: TSCH_ChartAxisIDArchive? = nil
  fileprivate var _referenceLineStyles: TSP_SparseReferenceArray? = nil
}

struct TSCH_ChartReferenceLinesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var referenceLineNonStylesMap: [TSCH_ChartAxisReferenceLineNonStylesArchive] = []

  var referenceLineStylesMap: [TSCH_ChartAxisReferenceLineStylesArchive] = []

  var themePresetReferenceLineStyle: TSP_Reference {
    get {return _themePresetReferenceLineStyle ?? TSP_Reference()}
    set {_themePresetReferenceLineStyle = newValue}
  }
  /// Returns true if `themePresetReferenceLineStyle` has been explicitly set.
  var hasThemePresetReferenceLineStyle: Bool {return self._themePresetReferenceLineStyle != nil}
  /// Clears the value of `themePresetReferenceLineStyle`. Subsequent reads from it will return its default value.
  mutating func clearThemePresetReferenceLineStyle() {self._themePresetReferenceLineStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _themePresetReferenceLineStyle: TSP_Reference? = nil
}

struct TSCH_ChartPresetReferenceLineStylesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var referenceLineStyles: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSCH_ChartAxisReferenceLineSparseNonStylesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var axisID: TSCH_ChartAxisIDArchive {
    get {return _axisID ?? TSCH_ChartAxisIDArchive()}
    set {_axisID = newValue}
  }
  /// Returns true if `axisID` has been explicitly set.
  var hasAxisID: Bool {return self._axisID != nil}
  /// Clears the value of `axisID`. Subsequent reads from it will return its default value.
  mutating func clearAxisID() {self._axisID = nil}

  var referenceLineNonStyleItems: [TSCH_ChartReferenceLineNonStyleItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _axisID: TSCH_ChartAxisIDArchive? = nil
}

struct TSCH_PropertyValueStorageContainerReferenceLinesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var referenceLineNonStylesMap: [TSCH_ChartAxisReferenceLineSparseNonStylesArchive] = []

  var referenceLineStylesMap: [TSCH_ChartAxisReferenceLineStylesArchive] = []

  var themePresetReferenceLineStyle: TSP_Reference {
    get {return _themePresetReferenceLineStyle ?? TSP_Reference()}
    set {_themePresetReferenceLineStyle = newValue}
  }
  /// Returns true if `themePresetReferenceLineStyle` has been explicitly set.
  var hasThemePresetReferenceLineStyle: Bool {return self._themePresetReferenceLineStyle != nil}
  /// Clears the value of `themePresetReferenceLineStyle`. Subsequent reads from it will return its default value.
  mutating func clearThemePresetReferenceLineStyle() {self._themePresetReferenceLineStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _themePresetReferenceLineStyle: TSP_Reference? = nil
}

// MARK: - Extension support defined in TSCHArchives.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension TSCH_ChartArchive {

  var TSCH_scene3DSettingsConstantDepth: Bool {
    get {return getExtensionValue(ext: TSCH_Extensions_scene3d_settings_constant_depth) ?? false}
    set {setExtensionValue(ext: TSCH_Extensions_scene3d_settings_constant_depth, value: newValue)}
  }
  /// Returns true if extension `TSCH_Extensions_scene3d_settings_constant_depth`
  /// has been explicitly set.
  var hasTSCH_scene3DSettingsConstantDepth: Bool {
    return hasExtensionValue(ext: TSCH_Extensions_scene3d_settings_constant_depth)
  }
  /// Clears the value of extension `TSCH_Extensions_scene3d_settings_constant_depth`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_scene3DSettingsConstantDepth() {
    clearExtensionValue(ext: TSCH_Extensions_scene3d_settings_constant_depth)
  }

  var TSCH_lastAppliedFillSetLookupString: String {
    get {return getExtensionValue(ext: TSCH_Extensions_last_applied_fill_set_lookup_string) ?? String()}
    set {setExtensionValue(ext: TSCH_Extensions_last_applied_fill_set_lookup_string, value: newValue)}
  }
  /// Returns true if extension `TSCH_Extensions_last_applied_fill_set_lookup_string`
  /// has been explicitly set.
  var hasTSCH_lastAppliedFillSetLookupString: Bool {
    return hasExtensionValue(ext: TSCH_Extensions_last_applied_fill_set_lookup_string)
  }
  /// Clears the value of extension `TSCH_Extensions_last_applied_fill_set_lookup_string`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_lastAppliedFillSetLookupString() {
    clearExtensionValue(ext: TSCH_Extensions_last_applied_fill_set_lookup_string)
  }

  var TSCH_referenceLines: TSCH_ChartReferenceLinesArchive {
    get {return getExtensionValue(ext: TSCH_Extensions_reference_lines) ?? TSCH_ChartReferenceLinesArchive()}
    set {setExtensionValue(ext: TSCH_Extensions_reference_lines, value: newValue)}
  }
  /// Returns true if extension `TSCH_Extensions_reference_lines`
  /// has been explicitly set.
  var hasTSCH_referenceLines: Bool {
    return hasExtensionValue(ext: TSCH_Extensions_reference_lines)
  }
  /// Clears the value of extension `TSCH_Extensions_reference_lines`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_referenceLines() {
    clearExtensionValue(ext: TSCH_Extensions_reference_lines)
  }

  var TSCH_ChartMultiDataIndexUpgrade_upgradedToUiState: Bool {
    get {return getExtensionValue(ext: TSCH_ChartMultiDataIndexUpgrade.Extensions.upgraded_to_ui_state) ?? false}
    set {setExtensionValue(ext: TSCH_ChartMultiDataIndexUpgrade.Extensions.upgraded_to_ui_state, value: newValue)}
  }
  /// Returns true if extension `TSCH_ChartMultiDataIndexUpgrade.Extensions.upgraded_to_ui_state`
  /// has been explicitly set.
  var hasTSCH_ChartMultiDataIndexUpgrade_upgradedToUiState: Bool {
    return hasExtensionValue(ext: TSCH_ChartMultiDataIndexUpgrade.Extensions.upgraded_to_ui_state)
  }
  /// Clears the value of extension `TSCH_ChartMultiDataIndexUpgrade.Extensions.upgraded_to_ui_state`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_ChartMultiDataIndexUpgrade_upgradedToUiState() {
    clearExtensionValue(ext: TSCH_ChartMultiDataIndexUpgrade.Extensions.upgraded_to_ui_state)
  }

  var TSCH_ChartGarlicMinMaxUpgrade_garlicMinMaxUpgrade: TSCH_ChartGarlicMinMaxUpgrade {
    get {return getExtensionValue(ext: TSCH_ChartGarlicMinMaxUpgrade.Extensions.garlic_min_max_upgrade) ?? TSCH_ChartGarlicMinMaxUpgrade()}
    set {setExtensionValue(ext: TSCH_ChartGarlicMinMaxUpgrade.Extensions.garlic_min_max_upgrade, value: newValue)}
  }
  /// Returns true if extension `TSCH_ChartGarlicMinMaxUpgrade.Extensions.garlic_min_max_upgrade`
  /// has been explicitly set.
  var hasTSCH_ChartGarlicMinMaxUpgrade_garlicMinMaxUpgrade: Bool {
    return hasExtensionValue(ext: TSCH_ChartGarlicMinMaxUpgrade.Extensions.garlic_min_max_upgrade)
  }
  /// Clears the value of extension `TSCH_ChartGarlicMinMaxUpgrade.Extensions.garlic_min_max_upgrade`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_ChartGarlicMinMaxUpgrade_garlicMinMaxUpgrade() {
    clearExtensionValue(ext: TSCH_ChartGarlicMinMaxUpgrade.Extensions.garlic_min_max_upgrade)
  }

  var TSCH_ChartGarlicLabelFormatUpgrade_garlicLabelFormatUpgrade: TSCH_ChartGarlicLabelFormatUpgrade {
    get {return getExtensionValue(ext: TSCH_ChartGarlicLabelFormatUpgrade.Extensions.garlic_label_format_upgrade) ?? TSCH_ChartGarlicLabelFormatUpgrade()}
    set {setExtensionValue(ext: TSCH_ChartGarlicLabelFormatUpgrade.Extensions.garlic_label_format_upgrade, value: newValue)}
  }
  /// Returns true if extension `TSCH_ChartGarlicLabelFormatUpgrade.Extensions.garlic_label_format_upgrade`
  /// has been explicitly set.
  var hasTSCH_ChartGarlicLabelFormatUpgrade_garlicLabelFormatUpgrade: Bool {
    return hasExtensionValue(ext: TSCH_ChartGarlicLabelFormatUpgrade.Extensions.garlic_label_format_upgrade)
  }
  /// Clears the value of extension `TSCH_ChartGarlicLabelFormatUpgrade.Extensions.garlic_label_format_upgrade`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_ChartGarlicLabelFormatUpgrade_garlicLabelFormatUpgrade() {
    clearExtensionValue(ext: TSCH_ChartGarlicLabelFormatUpgrade.Extensions.garlic_label_format_upgrade)
  }

  var TSCH_ChartPasteboardAdditionsArchive_presetIndexForPasteboard: UInt32 {
    get {return getExtensionValue(ext: TSCH_ChartPasteboardAdditionsArchive.Extensions.preset_index_for_pasteboard) ?? 0}
    set {setExtensionValue(ext: TSCH_ChartPasteboardAdditionsArchive.Extensions.preset_index_for_pasteboard, value: newValue)}
  }
  /// Returns true if extension `TSCH_ChartPasteboardAdditionsArchive.Extensions.preset_index_for_pasteboard`
  /// has been explicitly set.
  var hasTSCH_ChartPasteboardAdditionsArchive_presetIndexForPasteboard: Bool {
    return hasExtensionValue(ext: TSCH_ChartPasteboardAdditionsArchive.Extensions.preset_index_for_pasteboard)
  }
  /// Clears the value of extension `TSCH_ChartPasteboardAdditionsArchive.Extensions.preset_index_for_pasteboard`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_ChartPasteboardAdditionsArchive_presetIndexForPasteboard() {
    clearExtensionValue(ext: TSCH_ChartPasteboardAdditionsArchive.Extensions.preset_index_for_pasteboard)
  }

  var TSCH_ChartPasteboardAdditionsArchive_presetUuidForPasteboard: Data {
    get {return getExtensionValue(ext: TSCH_ChartPasteboardAdditionsArchive.Extensions.preset_uuid_for_pasteboard) ?? SwiftProtobuf.Internal.emptyData}
    set {setExtensionValue(ext: TSCH_ChartPasteboardAdditionsArchive.Extensions.preset_uuid_for_pasteboard, value: newValue)}
  }
  /// Returns true if extension `TSCH_ChartPasteboardAdditionsArchive.Extensions.preset_uuid_for_pasteboard`
  /// has been explicitly set.
  var hasTSCH_ChartPasteboardAdditionsArchive_presetUuidForPasteboard: Bool {
    return hasExtensionValue(ext: TSCH_ChartPasteboardAdditionsArchive.Extensions.preset_uuid_for_pasteboard)
  }
  /// Clears the value of extension `TSCH_ChartPasteboardAdditionsArchive.Extensions.preset_uuid_for_pasteboard`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_ChartPasteboardAdditionsArchive_presetUuidForPasteboard() {
    clearExtensionValue(ext: TSCH_ChartPasteboardAdditionsArchive.Extensions.preset_uuid_for_pasteboard)
  }

  var TSCH_ChartPasteboardAdditionsArchive_customFormatListForPasteboard: TSP_Reference {
    get {return getExtensionValue(ext: TSCH_ChartPasteboardAdditionsArchive.Extensions.custom_format_list_for_pasteboard) ?? TSP_Reference()}
    set {setExtensionValue(ext: TSCH_ChartPasteboardAdditionsArchive.Extensions.custom_format_list_for_pasteboard, value: newValue)}
  }
  /// Returns true if extension `TSCH_ChartPasteboardAdditionsArchive.Extensions.custom_format_list_for_pasteboard`
  /// has been explicitly set.
  var hasTSCH_ChartPasteboardAdditionsArchive_customFormatListForPasteboard: Bool {
    return hasExtensionValue(ext: TSCH_ChartPasteboardAdditionsArchive.Extensions.custom_format_list_for_pasteboard)
  }
  /// Clears the value of extension `TSCH_ChartPasteboardAdditionsArchive.Extensions.custom_format_list_for_pasteboard`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_ChartPasteboardAdditionsArchive_customFormatListForPasteboard() {
    clearExtensionValue(ext: TSCH_ChartPasteboardAdditionsArchive.Extensions.custom_format_list_for_pasteboard)
  }

  var TSCH_ChartPreserveAppearanceForPresetArchive_appearancePreservedForPreset: Bool {
    get {return getExtensionValue(ext: TSCH_ChartPreserveAppearanceForPresetArchive.Extensions.appearance_preserved_for_preset) ?? false}
    set {setExtensionValue(ext: TSCH_ChartPreserveAppearanceForPresetArchive.Extensions.appearance_preserved_for_preset, value: newValue)}
  }
  /// Returns true if extension `TSCH_ChartPreserveAppearanceForPresetArchive.Extensions.appearance_preserved_for_preset`
  /// has been explicitly set.
  var hasTSCH_ChartPreserveAppearanceForPresetArchive_appearancePreservedForPreset: Bool {
    return hasExtensionValue(ext: TSCH_ChartPreserveAppearanceForPresetArchive.Extensions.appearance_preserved_for_preset)
  }
  /// Clears the value of extension `TSCH_ChartPreserveAppearanceForPresetArchive.Extensions.appearance_preserved_for_preset`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_ChartPreserveAppearanceForPresetArchive_appearancePreservedForPreset() {
    clearExtensionValue(ext: TSCH_ChartPreserveAppearanceForPresetArchive.Extensions.appearance_preserved_for_preset)
  }

  var TSCH_ChartSupportsProportionalBendedCalloutLinesArchive_supportsProportionalBendedCalloutLines: Bool {
    get {return getExtensionValue(ext: TSCH_ChartSupportsProportionalBendedCalloutLinesArchive.Extensions.supports_proportional_bended_callout_lines) ?? false}
    set {setExtensionValue(ext: TSCH_ChartSupportsProportionalBendedCalloutLinesArchive.Extensions.supports_proportional_bended_callout_lines, value: newValue)}
  }
  /// Returns true if extension `TSCH_ChartSupportsProportionalBendedCalloutLinesArchive.Extensions.supports_proportional_bended_callout_lines`
  /// has been explicitly set.
  var hasTSCH_ChartSupportsProportionalBendedCalloutLinesArchive_supportsProportionalBendedCalloutLines: Bool {
    return hasExtensionValue(ext: TSCH_ChartSupportsProportionalBendedCalloutLinesArchive.Extensions.supports_proportional_bended_callout_lines)
  }
  /// Clears the value of extension `TSCH_ChartSupportsProportionalBendedCalloutLinesArchive.Extensions.supports_proportional_bended_callout_lines`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_ChartSupportsProportionalBendedCalloutLinesArchive_supportsProportionalBendedCalloutLines() {
    clearExtensionValue(ext: TSCH_ChartSupportsProportionalBendedCalloutLinesArchive.Extensions.supports_proportional_bended_callout_lines)
  }

  var TSCH_ChartSupportsRoundedCornersArchive_deprecatedSupportsRoundedCorners: Bool {
    get {return getExtensionValue(ext: TSCH_ChartSupportsRoundedCornersArchive.Extensions.deprecated_supports_rounded_corners) ?? false}
    set {setExtensionValue(ext: TSCH_ChartSupportsRoundedCornersArchive.Extensions.deprecated_supports_rounded_corners, value: newValue)}
  }
  /// Returns true if extension `TSCH_ChartSupportsRoundedCornersArchive.Extensions.deprecated_supports_rounded_corners`
  /// has been explicitly set.
  var hasTSCH_ChartSupportsRoundedCornersArchive_deprecatedSupportsRoundedCorners: Bool {
    return hasExtensionValue(ext: TSCH_ChartSupportsRoundedCornersArchive.Extensions.deprecated_supports_rounded_corners)
  }
  /// Clears the value of extension `TSCH_ChartSupportsRoundedCornersArchive.Extensions.deprecated_supports_rounded_corners`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_ChartSupportsRoundedCornersArchive_deprecatedSupportsRoundedCorners() {
    clearExtensionValue(ext: TSCH_ChartSupportsRoundedCornersArchive.Extensions.deprecated_supports_rounded_corners)
  }

  var TSCH_ChartSupportsRoundedCornersArchive_supportsRoundedCorners: Bool {
    get {return getExtensionValue(ext: TSCH_ChartSupportsRoundedCornersArchive.Extensions.supports_rounded_corners) ?? false}
    set {setExtensionValue(ext: TSCH_ChartSupportsRoundedCornersArchive.Extensions.supports_rounded_corners, value: newValue)}
  }
  /// Returns true if extension `TSCH_ChartSupportsRoundedCornersArchive.Extensions.supports_rounded_corners`
  /// has been explicitly set.
  var hasTSCH_ChartSupportsRoundedCornersArchive_supportsRoundedCorners: Bool {
    return hasExtensionValue(ext: TSCH_ChartSupportsRoundedCornersArchive.Extensions.supports_rounded_corners)
  }
  /// Clears the value of extension `TSCH_ChartSupportsRoundedCornersArchive.Extensions.supports_rounded_corners`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_ChartSupportsRoundedCornersArchive_supportsRoundedCorners() {
    clearExtensionValue(ext: TSCH_ChartSupportsRoundedCornersArchive.Extensions.supports_rounded_corners)
  }

  var TSCH_ChartSupportsSeriesPropertySpacingArchive_supportsSeriesValueLabelSpacing: Bool {
    get {return getExtensionValue(ext: TSCH_ChartSupportsSeriesPropertySpacingArchive.Extensions.supports_series_value_label_spacing) ?? false}
    set {setExtensionValue(ext: TSCH_ChartSupportsSeriesPropertySpacingArchive.Extensions.supports_series_value_label_spacing, value: newValue)}
  }
  /// Returns true if extension `TSCH_ChartSupportsSeriesPropertySpacingArchive.Extensions.supports_series_value_label_spacing`
  /// has been explicitly set.
  var hasTSCH_ChartSupportsSeriesPropertySpacingArchive_supportsSeriesValueLabelSpacing: Bool {
    return hasExtensionValue(ext: TSCH_ChartSupportsSeriesPropertySpacingArchive.Extensions.supports_series_value_label_spacing)
  }
  /// Clears the value of extension `TSCH_ChartSupportsSeriesPropertySpacingArchive.Extensions.supports_series_value_label_spacing`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_ChartSupportsSeriesPropertySpacingArchive_supportsSeriesValueLabelSpacing() {
    clearExtensionValue(ext: TSCH_ChartSupportsSeriesPropertySpacingArchive.Extensions.supports_series_value_label_spacing)
  }

  var TSCH_ChartSupportsSeriesPropertySpacingArchive_supportsSeriesErrorBarSpacing: Bool {
    get {return getExtensionValue(ext: TSCH_ChartSupportsSeriesPropertySpacingArchive.Extensions.supports_series_error_bar_spacing) ?? false}
    set {setExtensionValue(ext: TSCH_ChartSupportsSeriesPropertySpacingArchive.Extensions.supports_series_error_bar_spacing, value: newValue)}
  }
  /// Returns true if extension `TSCH_ChartSupportsSeriesPropertySpacingArchive.Extensions.supports_series_error_bar_spacing`
  /// has been explicitly set.
  var hasTSCH_ChartSupportsSeriesPropertySpacingArchive_supportsSeriesErrorBarSpacing: Bool {
    return hasExtensionValue(ext: TSCH_ChartSupportsSeriesPropertySpacingArchive.Extensions.supports_series_error_bar_spacing)
  }
  /// Clears the value of extension `TSCH_ChartSupportsSeriesPropertySpacingArchive.Extensions.supports_series_error_bar_spacing`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_ChartSupportsSeriesPropertySpacingArchive_supportsSeriesErrorBarSpacing() {
    clearExtensionValue(ext: TSCH_ChartSupportsSeriesPropertySpacingArchive.Extensions.supports_series_error_bar_spacing)
  }
}

extension TSCH_ChartAxisNonStyleArchive {

  var TSCH_axisSupportsCustomNumberFormat: Bool {
    get {return getExtensionValue(ext: TSCH_Extensions_axis_supports_custom_number_format) ?? false}
    set {setExtensionValue(ext: TSCH_Extensions_axis_supports_custom_number_format, value: newValue)}
  }
  /// Returns true if extension `TSCH_Extensions_axis_supports_custom_number_format`
  /// has been explicitly set.
  var hasTSCH_axisSupportsCustomNumberFormat: Bool {
    return hasExtensionValue(ext: TSCH_Extensions_axis_supports_custom_number_format)
  }
  /// Clears the value of extension `TSCH_Extensions_axis_supports_custom_number_format`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_axisSupportsCustomNumberFormat() {
    clearExtensionValue(ext: TSCH_Extensions_axis_supports_custom_number_format)
  }

  var TSCH_axisSupportsCustomDateFormat: Bool {
    get {return getExtensionValue(ext: TSCH_Extensions_axis_supports_custom_date_format) ?? false}
    set {setExtensionValue(ext: TSCH_Extensions_axis_supports_custom_date_format, value: newValue)}
  }
  /// Returns true if extension `TSCH_Extensions_axis_supports_custom_date_format`
  /// has been explicitly set.
  var hasTSCH_axisSupportsCustomDateFormat: Bool {
    return hasExtensionValue(ext: TSCH_Extensions_axis_supports_custom_date_format)
  }
  /// Clears the value of extension `TSCH_Extensions_axis_supports_custom_date_format`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_axisSupportsCustomDateFormat() {
    clearExtensionValue(ext: TSCH_Extensions_axis_supports_custom_date_format)
  }
}

extension TSCH_ChartDrawableArchive {

  var TSCH_ChartArchive_unity: TSCH_ChartArchive {
    get {return getExtensionValue(ext: TSCH_ChartArchive.Extensions.unity) ?? TSCH_ChartArchive()}
    set {setExtensionValue(ext: TSCH_ChartArchive.Extensions.unity, value: newValue)}
  }
  /// Returns true if extension `TSCH_ChartArchive.Extensions.unity`
  /// has been explicitly set.
  var hasTSCH_ChartArchive_unity: Bool {
    return hasExtensionValue(ext: TSCH_ChartArchive.Extensions.unity)
  }
  /// Clears the value of extension `TSCH_ChartArchive.Extensions.unity`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_ChartArchive_unity() {
    clearExtensionValue(ext: TSCH_ChartArchive.Extensions.unity)
  }
}

extension TSCH_ChartSeriesNonStyleArchive {

  var TSCH_seriesSupportsCustomNumberFormat: Bool {
    get {return getExtensionValue(ext: TSCH_Extensions_series_supports_custom_number_format) ?? false}
    set {setExtensionValue(ext: TSCH_Extensions_series_supports_custom_number_format, value: newValue)}
  }
  /// Returns true if extension `TSCH_Extensions_series_supports_custom_number_format`
  /// has been explicitly set.
  var hasTSCH_seriesSupportsCustomNumberFormat: Bool {
    return hasExtensionValue(ext: TSCH_Extensions_series_supports_custom_number_format)
  }
  /// Clears the value of extension `TSCH_Extensions_series_supports_custom_number_format`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_seriesSupportsCustomNumberFormat() {
    clearExtensionValue(ext: TSCH_Extensions_series_supports_custom_number_format)
  }

  var TSCH_seriesSupportsCustomDateFormat: Bool {
    get {return getExtensionValue(ext: TSCH_Extensions_series_supports_custom_date_format) ?? false}
    set {setExtensionValue(ext: TSCH_Extensions_series_supports_custom_date_format, value: newValue)}
  }
  /// Returns true if extension `TSCH_Extensions_series_supports_custom_date_format`
  /// has been explicitly set.
  var hasTSCH_seriesSupportsCustomDateFormat: Bool {
    return hasExtensionValue(ext: TSCH_Extensions_series_supports_custom_date_format)
  }
  /// Clears the value of extension `TSCH_Extensions_series_supports_custom_date_format`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_seriesSupportsCustomDateFormat() {
    clearExtensionValue(ext: TSCH_Extensions_series_supports_custom_date_format)
  }

  var TSCH_seriesSupportsCalloutLines: Bool {
    get {return getExtensionValue(ext: TSCH_Extensions_series_supports_callout_lines) ?? false}
    set {setExtensionValue(ext: TSCH_Extensions_series_supports_callout_lines, value: newValue)}
  }
  /// Returns true if extension `TSCH_Extensions_series_supports_callout_lines`
  /// has been explicitly set.
  var hasTSCH_seriesSupportsCalloutLines: Bool {
    return hasExtensionValue(ext: TSCH_Extensions_series_supports_callout_lines)
  }
  /// Clears the value of extension `TSCH_Extensions_series_supports_callout_lines`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_seriesSupportsCalloutLines() {
    clearExtensionValue(ext: TSCH_Extensions_series_supports_callout_lines)
  }
}

extension TSCH_ChartSeriesStyleArchive {

  var TSCH_seriesSupportsDonut: Bool {
    get {return getExtensionValue(ext: TSCH_Extensions_series_supports_donut) ?? false}
    set {setExtensionValue(ext: TSCH_Extensions_series_supports_donut, value: newValue)}
  }
  /// Returns true if extension `TSCH_Extensions_series_supports_donut`
  /// has been explicitly set.
  var hasTSCH_seriesSupportsDonut: Bool {
    return hasExtensionValue(ext: TSCH_Extensions_series_supports_donut)
  }
  /// Clears the value of extension `TSCH_Extensions_series_supports_donut`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_seriesSupportsDonut() {
    clearExtensionValue(ext: TSCH_Extensions_series_supports_donut)
  }
}

extension TSCH_ChartStylePreset {

  var TSCH_presetReferenceLineStyles: TSCH_ChartPresetReferenceLineStylesArchive {
    get {return getExtensionValue(ext: TSCH_Extensions_preset_reference_line_styles) ?? TSCH_ChartPresetReferenceLineStylesArchive()}
    set {setExtensionValue(ext: TSCH_Extensions_preset_reference_line_styles, value: newValue)}
  }
  /// Returns true if extension `TSCH_Extensions_preset_reference_line_styles`
  /// has been explicitly set.
  var hasTSCH_presetReferenceLineStyles: Bool {
    return hasExtensionValue(ext: TSCH_Extensions_preset_reference_line_styles)
  }
  /// Clears the value of extension `TSCH_Extensions_preset_reference_line_styles`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_presetReferenceLineStyles() {
    clearExtensionValue(ext: TSCH_Extensions_preset_reference_line_styles)
  }
}

extension TSCH_ChartUIState {

  var TSCH_ChartUIStateMultiDataIndexUpgrade_upgradedFromModel: Bool {
    get {return getExtensionValue(ext: TSCH_ChartUIStateMultiDataIndexUpgrade.Extensions.upgraded_from_model) ?? false}
    set {setExtensionValue(ext: TSCH_ChartUIStateMultiDataIndexUpgrade.Extensions.upgraded_from_model, value: newValue)}
  }
  /// Returns true if extension `TSCH_ChartUIStateMultiDataIndexUpgrade.Extensions.upgraded_from_model`
  /// has been explicitly set.
  var hasTSCH_ChartUIStateMultiDataIndexUpgrade_upgradedFromModel: Bool {
    return hasExtensionValue(ext: TSCH_ChartUIStateMultiDataIndexUpgrade.Extensions.upgraded_from_model)
  }
  /// Clears the value of extension `TSCH_ChartUIStateMultiDataIndexUpgrade.Extensions.upgraded_from_model`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_ChartUIStateMultiDataIndexUpgrade_upgradedFromModel() {
    clearExtensionValue(ext: TSCH_ChartUIStateMultiDataIndexUpgrade.Extensions.upgraded_from_model)
  }
}

extension TSCH_PropertyValueStorageContainerArchive {

  var TSCH_propertyValueStorageContainerReferenceLines: TSCH_PropertyValueStorageContainerReferenceLinesArchive {
    get {return getExtensionValue(ext: TSCH_Extensions_property_value_storage_container_reference_lines) ?? TSCH_PropertyValueStorageContainerReferenceLinesArchive()}
    set {setExtensionValue(ext: TSCH_Extensions_property_value_storage_container_reference_lines, value: newValue)}
  }
  /// Returns true if extension `TSCH_Extensions_property_value_storage_container_reference_lines`
  /// has been explicitly set.
  var hasTSCH_propertyValueStorageContainerReferenceLines: Bool {
    return hasExtensionValue(ext: TSCH_Extensions_property_value_storage_container_reference_lines)
  }
  /// Clears the value of extension `TSCH_Extensions_property_value_storage_container_reference_lines`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_propertyValueStorageContainerReferenceLines() {
    clearExtensionValue(ext: TSCH_Extensions_property_value_storage_container_reference_lines)
  }
}

extension TSK_FormatStructArchive {

  var TSCH_ChartFormatStructExtensions_prefix: String {
    get {return getExtensionValue(ext: TSCH_ChartFormatStructExtensions.Extensions.prefix) ?? String()}
    set {setExtensionValue(ext: TSCH_ChartFormatStructExtensions.Extensions.prefix, value: newValue)}
  }
  /// Returns true if extension `TSCH_ChartFormatStructExtensions.Extensions.prefix`
  /// has been explicitly set.
  var hasTSCH_ChartFormatStructExtensions_prefix: Bool {
    return hasExtensionValue(ext: TSCH_ChartFormatStructExtensions.Extensions.prefix)
  }
  /// Clears the value of extension `TSCH_ChartFormatStructExtensions.Extensions.prefix`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_ChartFormatStructExtensions_prefix() {
    clearExtensionValue(ext: TSCH_ChartFormatStructExtensions.Extensions.prefix)
  }

  var TSCH_ChartFormatStructExtensions_suffix: String {
    get {return getExtensionValue(ext: TSCH_ChartFormatStructExtensions.Extensions.suffix) ?? String()}
    set {setExtensionValue(ext: TSCH_ChartFormatStructExtensions.Extensions.suffix, value: newValue)}
  }
  /// Returns true if extension `TSCH_ChartFormatStructExtensions.Extensions.suffix`
  /// has been explicitly set.
  var hasTSCH_ChartFormatStructExtensions_suffix: Bool {
    return hasExtensionValue(ext: TSCH_ChartFormatStructExtensions.Extensions.suffix)
  }
  /// Clears the value of extension `TSCH_ChartFormatStructExtensions.Extensions.suffix`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_ChartFormatStructExtensions_suffix() {
    clearExtensionValue(ext: TSCH_ChartFormatStructExtensions.Extensions.suffix)
  }
}

extension TSS_ThemeArchive {

  var TSCH_ChartPresetsArchive_extension: TSCH_ChartPresetsArchive {
    get {return getExtensionValue(ext: TSCH_ChartPresetsArchive.Extensions.extension) ?? TSCH_ChartPresetsArchive()}
    set {setExtensionValue(ext: TSCH_ChartPresetsArchive.Extensions.extension, value: newValue)}
  }
  /// Returns true if extension `TSCH_ChartPresetsArchive.Extensions.extension`
  /// has been explicitly set.
  var hasTSCH_ChartPresetsArchive_extension: Bool {
    return hasExtensionValue(ext: TSCH_ChartPresetsArchive.Extensions.extension)
  }
  /// Clears the value of extension `TSCH_ChartPresetsArchive.Extensions.extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_ChartPresetsArchive_extension() {
    clearExtensionValue(ext: TSCH_ChartPresetsArchive.Extensions.extension)
  }

}

// MARK: - File's ExtensionMap: TSCH_Tscharchives_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let TSCH_Tscharchives_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  TSCH_Extensions_scene3d_settings_constant_depth,
  TSCH_Extensions_last_applied_fill_set_lookup_string,
  TSCH_Extensions_series_supports_donut,
  TSCH_Extensions_series_supports_custom_number_format,
  TSCH_Extensions_series_supports_custom_date_format,
  TSCH_Extensions_series_supports_callout_lines,
  TSCH_Extensions_axis_supports_custom_number_format,
  TSCH_Extensions_axis_supports_custom_date_format,
  TSCH_Extensions_reference_lines,
  TSCH_Extensions_preset_reference_line_styles,
  TSCH_Extensions_property_value_storage_container_reference_lines,
  TSCH_ChartArchive.Extensions.unity,
  TSCH_ChartMultiDataIndexUpgrade.Extensions.upgraded_to_ui_state,
  TSCH_ChartGarlicMinMaxUpgrade.Extensions.garlic_min_max_upgrade,
  TSCH_ChartGarlicLabelFormatUpgrade.Extensions.garlic_label_format_upgrade,
  TSCH_ChartPasteboardAdditionsArchive.Extensions.preset_index_for_pasteboard,
  TSCH_ChartPasteboardAdditionsArchive.Extensions.preset_uuid_for_pasteboard,
  TSCH_ChartPasteboardAdditionsArchive.Extensions.custom_format_list_for_pasteboard,
  TSCH_ChartPreserveAppearanceForPresetArchive.Extensions.appearance_preserved_for_preset,
  TSCH_ChartSupportsProportionalBendedCalloutLinesArchive.Extensions.supports_proportional_bended_callout_lines,
  TSCH_ChartSupportsRoundedCornersArchive.Extensions.deprecated_supports_rounded_corners,
  TSCH_ChartSupportsRoundedCornersArchive.Extensions.supports_rounded_corners,
  TSCH_ChartSupportsSeriesPropertySpacingArchive.Extensions.supports_series_value_label_spacing,
  TSCH_ChartSupportsSeriesPropertySpacingArchive.Extensions.supports_series_error_bar_spacing,
  TSCH_ChartPresetsArchive.Extensions.extension,
  TSCH_ChartUIStateMultiDataIndexUpgrade.Extensions.upgraded_from_model,
  TSCH_ChartFormatStructExtensions.Extensions.prefix,
  TSCH_ChartFormatStructExtensions.Extensions.suffix
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

let TSCH_Extensions_scene3d_settings_constant_depth = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, TSCH_ChartArchive>(
  _protobuf_fieldNumber: 10002,
  fieldName: "TSCH.scene3d_settings_constant_depth"
)

let TSCH_Extensions_last_applied_fill_set_lookup_string = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, TSCH_ChartArchive>(
  _protobuf_fieldNumber: 10004,
  fieldName: "TSCH.last_applied_fill_set_lookup_string"
)

let TSCH_Extensions_series_supports_donut = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, TSCH_ChartSeriesStyleArchive>(
  _protobuf_fieldNumber: 10001,
  fieldName: "TSCH.series_supports_donut"
)

let TSCH_Extensions_series_supports_custom_number_format = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, TSCH_ChartSeriesNonStyleArchive>(
  _protobuf_fieldNumber: 10001,
  fieldName: "TSCH.series_supports_custom_number_format"
)

let TSCH_Extensions_series_supports_custom_date_format = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, TSCH_ChartSeriesNonStyleArchive>(
  _protobuf_fieldNumber: 10002,
  fieldName: "TSCH.series_supports_custom_date_format"
)

let TSCH_Extensions_series_supports_callout_lines = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, TSCH_ChartSeriesNonStyleArchive>(
  _protobuf_fieldNumber: 10003,
  fieldName: "TSCH.series_supports_callout_lines"
)

let TSCH_Extensions_axis_supports_custom_number_format = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, TSCH_ChartAxisNonStyleArchive>(
  _protobuf_fieldNumber: 10001,
  fieldName: "TSCH.axis_supports_custom_number_format"
)

let TSCH_Extensions_axis_supports_custom_date_format = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, TSCH_ChartAxisNonStyleArchive>(
  _protobuf_fieldNumber: 10002,
  fieldName: "TSCH.axis_supports_custom_date_format"
)

let TSCH_Extensions_reference_lines = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TSCH_ChartReferenceLinesArchive>, TSCH_ChartArchive>(
  _protobuf_fieldNumber: 10005,
  fieldName: "TSCH.reference_lines"
)

let TSCH_Extensions_preset_reference_line_styles = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TSCH_ChartPresetReferenceLineStylesArchive>, TSCH_ChartStylePreset>(
  _protobuf_fieldNumber: 10000,
  fieldName: "TSCH.preset_reference_line_styles"
)

let TSCH_Extensions_property_value_storage_container_reference_lines = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TSCH_PropertyValueStorageContainerReferenceLinesArchive>, TSCH_PropertyValueStorageContainerArchive>(
  _protobuf_fieldNumber: 10000,
  fieldName: "TSCH.property_value_storage_container_reference_lines"
)

extension TSCH_ChartArchive {
  enum Extensions {
    static let unity = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TSCH_ChartArchive>, TSCH_ChartDrawableArchive>(
      _protobuf_fieldNumber: 10000,
      fieldName: "TSCH.ChartArchive.unity"
    )
  }
}

extension TSCH_ChartMultiDataIndexUpgrade {
  enum Extensions {
    static let upgraded_to_ui_state = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, TSCH_ChartArchive>(
      _protobuf_fieldNumber: 10021,
      fieldName: "TSCH.ChartMultiDataIndexUpgrade.upgraded_to_ui_state"
    )
  }
}

extension TSCH_ChartGarlicMinMaxUpgrade {
  enum Extensions {
    static let garlic_min_max_upgrade = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TSCH_ChartGarlicMinMaxUpgrade>, TSCH_ChartArchive>(
      _protobuf_fieldNumber: 10010,
      fieldName: "TSCH.ChartGarlicMinMaxUpgrade.garlic_min_max_upgrade"
    )
  }
}

extension TSCH_ChartGarlicLabelFormatUpgrade {
  enum Extensions {
    static let garlic_label_format_upgrade = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TSCH_ChartGarlicLabelFormatUpgrade>, TSCH_ChartArchive>(
      _protobuf_fieldNumber: 10011,
      fieldName: "TSCH.ChartGarlicLabelFormatUpgrade.garlic_label_format_upgrade"
    )
  }
}

extension TSCH_ChartPasteboardAdditionsArchive {
  enum Extensions {
    static let preset_index_for_pasteboard = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, TSCH_ChartArchive>(
      _protobuf_fieldNumber: 10000,
      fieldName: "TSCH.ChartPasteboardAdditionsArchive.preset_index_for_pasteboard"
    )

    static let preset_uuid_for_pasteboard = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, TSCH_ChartArchive>(
      _protobuf_fieldNumber: 10001,
      fieldName: "TSCH.ChartPasteboardAdditionsArchive.preset_uuid_for_pasteboard"
    )

    static let custom_format_list_for_pasteboard = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TSP_Reference>, TSCH_ChartArchive>(
      _protobuf_fieldNumber: 10003,
      fieldName: "TSCH.ChartPasteboardAdditionsArchive.custom_format_list_for_pasteboard"
    )
  }
}

extension TSCH_ChartPreserveAppearanceForPresetArchive {
  enum Extensions {
    static let appearance_preserved_for_preset = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, TSCH_ChartArchive>(
      _protobuf_fieldNumber: 10023,
      fieldName: "TSCH.ChartPreserveAppearanceForPresetArchive.appearance_preserved_for_preset"
    )
  }
}

extension TSCH_ChartSupportsProportionalBendedCalloutLinesArchive {
  enum Extensions {
    static let supports_proportional_bended_callout_lines = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, TSCH_ChartArchive>(
      _protobuf_fieldNumber: 10024,
      fieldName: "TSCH.ChartSupportsProportionalBendedCalloutLinesArchive.supports_proportional_bended_callout_lines"
    )
  }
}

extension TSCH_ChartSupportsRoundedCornersArchive {
  enum Extensions {
    static let deprecated_supports_rounded_corners = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, TSCH_ChartArchive>(
      _protobuf_fieldNumber: 10025,
      fieldName: "TSCH.ChartSupportsRoundedCornersArchive.deprecated_supports_rounded_corners"
    )

    static let supports_rounded_corners = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, TSCH_ChartArchive>(
      _protobuf_fieldNumber: 10026,
      fieldName: "TSCH.ChartSupportsRoundedCornersArchive.supports_rounded_corners"
    )
  }
}

extension TSCH_ChartSupportsSeriesPropertySpacingArchive {
  enum Extensions {
    static let supports_series_value_label_spacing = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, TSCH_ChartArchive>(
      _protobuf_fieldNumber: 10027,
      fieldName: "TSCH.ChartSupportsSeriesPropertySpacingArchive.supports_series_value_label_spacing"
    )

    static let supports_series_error_bar_spacing = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, TSCH_ChartArchive>(
      _protobuf_fieldNumber: 10028,
      fieldName: "TSCH.ChartSupportsSeriesPropertySpacingArchive.supports_series_error_bar_spacing"
    )
  }
}

extension TSCH_ChartPresetsArchive {
  enum Extensions {
    static let `extension` = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TSCH_ChartPresetsArchive>, TSS_ThemeArchive>(
      _protobuf_fieldNumber: 120,
      fieldName: "TSCH.ChartPresetsArchive.extension"
    )
  }
}

extension TSCH_ChartUIStateMultiDataIndexUpgrade {
  enum Extensions {
    static let upgraded_from_model = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, TSCH_ChartUIState>(
      _protobuf_fieldNumber: 10022,
      fieldName: "TSCH.ChartUIStateMultiDataIndexUpgrade.upgraded_from_model"
    )
  }
}

extension TSCH_ChartFormatStructExtensions {
  enum Extensions {
    static let prefix = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, TSK_FormatStructArchive>(
      _protobuf_fieldNumber: 10000,
      fieldName: "TSCH.ChartFormatStructExtensions.prefix"
    )

    static let suffix = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, TSK_FormatStructArchive>(
      _protobuf_fieldNumber: 10001,
      fieldName: "TSCH.ChartFormatStructExtensions.suffix"
    )
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TSCH"

extension TSCH_ChartDrawableArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartDrawableArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 10000..<536870912:
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: TSCH_ChartDrawableArchive.self, fieldNumber: fieldNumber)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 10000, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartDrawableArchive, rhs: TSCH_ChartDrawableArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension TSCH_ChartArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chart_type"),
    2: .standard(proto: "scatter_format"),
    3: .standard(proto: "legend_frame"),
    4: .same(proto: "preset"),
    5: .standard(proto: "series_direction"),
    6: .standard(proto: "contains_default_data"),
    7: .same(proto: "grid"),
    8: .same(proto: "mediator"),
    9: .standard(proto: "chart_style"),
    10: .standard(proto: "chart_non_style"),
    11: .standard(proto: "legend_style"),
    12: .standard(proto: "legend_non_style"),
    13: .standard(proto: "value_axis_styles"),
    14: .standard(proto: "value_axis_nonstyles"),
    15: .standard(proto: "category_axis_styles"),
    16: .standard(proto: "category_axis_nonstyles"),
    17: .standard(proto: "series_theme_styles"),
    18: .standard(proto: "series_private_styles"),
    19: .standard(proto: "series_non_styles"),
    20: .standard(proto: "paragraph_styles"),
    21: .standard(proto: "multidataset_index"),
    22: .standard(proto: "needs_calc_engine_deferred_import_action"),
    23: .standard(proto: "owned_preset"),
    24: .standard(proto: "is_dirty"),
  ]

  fileprivate class _StorageClass {
    var _chartType: TSCH_ChartType? = nil
    var _scatterFormat: TSCH_ScatterFormat? = nil
    var _legendFrame: TSCH_RectArchive? = nil
    var _preset: TSP_Reference? = nil
    var _seriesDirection: TSCH_SeriesDirection? = nil
    var _containsDefaultData: Bool? = nil
    var _grid: TSCH_ChartGridArchive? = nil
    var _mediator: TSP_Reference? = nil
    var _chartStyle: TSP_Reference? = nil
    var _chartNonStyle: TSP_Reference? = nil
    var _legendStyle: TSP_Reference? = nil
    var _legendNonStyle: TSP_Reference? = nil
    var _valueAxisStyles: [TSP_Reference] = []
    var _valueAxisNonstyles: [TSP_Reference] = []
    var _categoryAxisStyles: [TSP_Reference] = []
    var _categoryAxisNonstyles: [TSP_Reference] = []
    var _seriesThemeStyles: [TSP_Reference] = []
    var _seriesPrivateStyles: TSP_SparseReferenceArray? = nil
    var _seriesNonStyles: TSP_SparseReferenceArray? = nil
    var _paragraphStyles: [TSP_Reference] = []
    var _multidatasetIndex: UInt32? = nil
    var _needsCalcEngineDeferredImportAction: Bool? = nil
    var _ownedPreset: TSP_Reference? = nil
    var _isDirty: Bool? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chartType = source._chartType
      _scatterFormat = source._scatterFormat
      _legendFrame = source._legendFrame
      _preset = source._preset
      _seriesDirection = source._seriesDirection
      _containsDefaultData = source._containsDefaultData
      _grid = source._grid
      _mediator = source._mediator
      _chartStyle = source._chartStyle
      _chartNonStyle = source._chartNonStyle
      _legendStyle = source._legendStyle
      _legendNonStyle = source._legendNonStyle
      _valueAxisStyles = source._valueAxisStyles
      _valueAxisNonstyles = source._valueAxisNonstyles
      _categoryAxisStyles = source._categoryAxisStyles
      _categoryAxisNonstyles = source._categoryAxisNonstyles
      _seriesThemeStyles = source._seriesThemeStyles
      _seriesPrivateStyles = source._seriesPrivateStyles
      _seriesNonStyles = source._seriesNonStyles
      _paragraphStyles = source._paragraphStyles
      _multidatasetIndex = source._multidatasetIndex
      _needsCalcEngineDeferredImportAction = source._needsCalcEngineDeferredImportAction
      _ownedPreset = source._ownedPreset
      _isDirty = source._isDirty
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._legendFrame, !v.isInitialized {return false}
      if let v = _storage._preset, !v.isInitialized {return false}
      if let v = _storage._grid, !v.isInitialized {return false}
      if let v = _storage._mediator, !v.isInitialized {return false}
      if let v = _storage._chartStyle, !v.isInitialized {return false}
      if let v = _storage._chartNonStyle, !v.isInitialized {return false}
      if let v = _storage._legendStyle, !v.isInitialized {return false}
      if let v = _storage._legendNonStyle, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._valueAxisStyles) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._valueAxisNonstyles) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._categoryAxisStyles) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._categoryAxisNonstyles) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._seriesThemeStyles) {return false}
      if let v = _storage._seriesPrivateStyles, !v.isInitialized {return false}
      if let v = _storage._seriesNonStyles, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._paragraphStyles) {return false}
      if let v = _storage._ownedPreset, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._chartType)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._scatterFormat)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._legendFrame)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._preset)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._seriesDirection)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._containsDefaultData)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._grid)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._mediator)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._chartStyle)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._chartNonStyle)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._legendStyle)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._legendNonStyle)
        case 13: try decoder.decodeRepeatedMessageField(value: &_storage._valueAxisStyles)
        case 14: try decoder.decodeRepeatedMessageField(value: &_storage._valueAxisNonstyles)
        case 15: try decoder.decodeRepeatedMessageField(value: &_storage._categoryAxisStyles)
        case 16: try decoder.decodeRepeatedMessageField(value: &_storage._categoryAxisNonstyles)
        case 17: try decoder.decodeRepeatedMessageField(value: &_storage._seriesThemeStyles)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._seriesPrivateStyles)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._seriesNonStyles)
        case 20: try decoder.decodeRepeatedMessageField(value: &_storage._paragraphStyles)
        case 21: try decoder.decodeSingularUInt32Field(value: &_storage._multidatasetIndex)
        case 22: try decoder.decodeSingularBoolField(value: &_storage._needsCalcEngineDeferredImportAction)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._ownedPreset)
        case 24: try decoder.decodeSingularBoolField(value: &_storage._isDirty)
        case 10000..<536870912:
          try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: TSCH_ChartArchive.self, fieldNumber: fieldNumber)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._chartType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      }
      if let v = _storage._scatterFormat {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      }
      if let v = _storage._legendFrame {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._preset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._seriesDirection {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
      }
      if let v = _storage._containsDefaultData {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      }
      if let v = _storage._grid {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._mediator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._chartStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._chartNonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._legendStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._legendNonStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if !_storage._valueAxisStyles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._valueAxisStyles, fieldNumber: 13)
      }
      if !_storage._valueAxisNonstyles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._valueAxisNonstyles, fieldNumber: 14)
      }
      if !_storage._categoryAxisStyles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._categoryAxisStyles, fieldNumber: 15)
      }
      if !_storage._categoryAxisNonstyles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._categoryAxisNonstyles, fieldNumber: 16)
      }
      if !_storage._seriesThemeStyles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._seriesThemeStyles, fieldNumber: 17)
      }
      if let v = _storage._seriesPrivateStyles {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._seriesNonStyles {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if !_storage._paragraphStyles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._paragraphStyles, fieldNumber: 20)
      }
      if let v = _storage._multidatasetIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 21)
      }
      if let v = _storage._needsCalcEngineDeferredImportAction {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 22)
      }
      if let v = _storage._ownedPreset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if let v = _storage._isDirty {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 24)
      }
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 10000, end: 536870912)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartArchive, rhs: TSCH_ChartArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._chartType != rhs_storage._chartType {return false}
        if _storage._scatterFormat != rhs_storage._scatterFormat {return false}
        if _storage._legendFrame != rhs_storage._legendFrame {return false}
        if _storage._preset != rhs_storage._preset {return false}
        if _storage._seriesDirection != rhs_storage._seriesDirection {return false}
        if _storage._containsDefaultData != rhs_storage._containsDefaultData {return false}
        if _storage._grid != rhs_storage._grid {return false}
        if _storage._mediator != rhs_storage._mediator {return false}
        if _storage._chartStyle != rhs_storage._chartStyle {return false}
        if _storage._chartNonStyle != rhs_storage._chartNonStyle {return false}
        if _storage._legendStyle != rhs_storage._legendStyle {return false}
        if _storage._legendNonStyle != rhs_storage._legendNonStyle {return false}
        if _storage._valueAxisStyles != rhs_storage._valueAxisStyles {return false}
        if _storage._valueAxisNonstyles != rhs_storage._valueAxisNonstyles {return false}
        if _storage._categoryAxisStyles != rhs_storage._categoryAxisStyles {return false}
        if _storage._categoryAxisNonstyles != rhs_storage._categoryAxisNonstyles {return false}
        if _storage._seriesThemeStyles != rhs_storage._seriesThemeStyles {return false}
        if _storage._seriesPrivateStyles != rhs_storage._seriesPrivateStyles {return false}
        if _storage._seriesNonStyles != rhs_storage._seriesNonStyles {return false}
        if _storage._paragraphStyles != rhs_storage._paragraphStyles {return false}
        if _storage._multidatasetIndex != rhs_storage._multidatasetIndex {return false}
        if _storage._needsCalcEngineDeferredImportAction != rhs_storage._needsCalcEngineDeferredImportAction {return false}
        if _storage._ownedPreset != rhs_storage._ownedPreset {return false}
        if _storage._isDirty != rhs_storage._isDirty {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension TSCH_ChartMultiDataIndexUpgrade: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartMultiDataIndexUpgrade"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartMultiDataIndexUpgrade, rhs: TSCH_ChartMultiDataIndexUpgrade) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartGarlicMinMaxUpgrade: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartGarlicMinMaxUpgrade"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "horizontal_min"),
    2: .standard(proto: "horizontal_max"),
    3: .standard(proto: "value_min"),
    4: .standard(proto: "value_max"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._horizontalMin)
      case 2: try decoder.decodeSingularDoubleField(value: &self._horizontalMax)
      case 3: try decoder.decodeSingularDoubleField(value: &self._valueMin)
      case 4: try decoder.decodeSingularDoubleField(value: &self._valueMax)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._horizontalMin {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    if let v = self._horizontalMax {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    if let v = self._valueMin {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }
    if let v = self._valueMax {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartGarlicMinMaxUpgrade, rhs: TSCH_ChartGarlicMinMaxUpgrade) -> Bool {
    if lhs._horizontalMin != rhs._horizontalMin {return false}
    if lhs._horizontalMax != rhs._horizontalMax {return false}
    if lhs._valueMin != rhs._valueMin {return false}
    if lhs._valueMax != rhs._valueMax {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartGarlicLabelFormatUpgrade: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartGarlicLabelFormatUpgrade"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "value_prefix"),
    2: .standard(proto: "value_suffix"),
    3: .standard(proto: "value_use_separator"),
    4: .standard(proto: "horizontal_prefix"),
    5: .standard(proto: "horizontal_suffix"),
    6: .standard(proto: "horizontal_use_separator"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._valuePrefix)
      case 2: try decoder.decodeSingularStringField(value: &self._valueSuffix)
      case 3: try decoder.decodeSingularBoolField(value: &self._valueUseSeparator)
      case 4: try decoder.decodeSingularStringField(value: &self._horizontalPrefix)
      case 5: try decoder.decodeSingularStringField(value: &self._horizontalSuffix)
      case 6: try decoder.decodeSingularBoolField(value: &self._horizontalUseSeparator)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._valuePrefix {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._valueSuffix {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._valueUseSeparator {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._horizontalPrefix {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._horizontalSuffix {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._horizontalUseSeparator {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartGarlicLabelFormatUpgrade, rhs: TSCH_ChartGarlicLabelFormatUpgrade) -> Bool {
    if lhs._valuePrefix != rhs._valuePrefix {return false}
    if lhs._valueSuffix != rhs._valueSuffix {return false}
    if lhs._valueUseSeparator != rhs._valueUseSeparator {return false}
    if lhs._horizontalPrefix != rhs._horizontalPrefix {return false}
    if lhs._horizontalSuffix != rhs._horizontalSuffix {return false}
    if lhs._horizontalUseSeparator != rhs._horizontalUseSeparator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartPasteboardAdditionsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartPasteboardAdditionsArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartPasteboardAdditionsArchive, rhs: TSCH_ChartPasteboardAdditionsArchive) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartPreserveAppearanceForPresetArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartPreserveAppearanceForPresetArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartPreserveAppearanceForPresetArchive, rhs: TSCH_ChartPreserveAppearanceForPresetArchive) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartSupportsProportionalBendedCalloutLinesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartSupportsProportionalBendedCalloutLinesArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartSupportsProportionalBendedCalloutLinesArchive, rhs: TSCH_ChartSupportsProportionalBendedCalloutLinesArchive) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartSupportsRoundedCornersArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartSupportsRoundedCornersArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartSupportsRoundedCornersArchive, rhs: TSCH_ChartSupportsRoundedCornersArchive) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartSupportsSeriesPropertySpacingArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartSupportsSeriesPropertySpacingArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartSupportsSeriesPropertySpacingArchive, rhs: TSCH_ChartSupportsSeriesPropertySpacingArchive) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartGridArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartGridArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "row_name"),
    2: .standard(proto: "column_name"),
    3: .standard(proto: "grid_row"),
    4: .same(proto: "idMap"),
  ]

  public var isInitialized: Bool {
    if let v = self._idMap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.rowName)
      case 2: try decoder.decodeRepeatedStringField(value: &self.columnName)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.gridRow)
      case 4: try decoder.decodeSingularMessageField(value: &self._idMap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rowName.isEmpty {
      try visitor.visitRepeatedStringField(value: self.rowName, fieldNumber: 1)
    }
    if !self.columnName.isEmpty {
      try visitor.visitRepeatedStringField(value: self.columnName, fieldNumber: 2)
    }
    if !self.gridRow.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gridRow, fieldNumber: 3)
    }
    if let v = self._idMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartGridArchive, rhs: TSCH_ChartGridArchive) -> Bool {
    if lhs.rowName != rhs.rowName {return false}
    if lhs.columnName != rhs.columnName {return false}
    if lhs.gridRow != rhs.gridRow {return false}
    if lhs._idMap != rhs._idMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartGridArchive.ChartGridRowColumnIdMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSCH_ChartGridArchive.protoMessageName + ".ChartGridRowColumnIdMap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "row_id_map"),
    2: .standard(proto: "column_id_map"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.rowIDMap) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.columnIDMap) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.rowIDMap)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.columnIDMap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rowIDMap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rowIDMap, fieldNumber: 1)
    }
    if !self.columnIDMap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.columnIDMap, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartGridArchive.ChartGridRowColumnIdMap, rhs: TSCH_ChartGridArchive.ChartGridRowColumnIdMap) -> Bool {
    if lhs.rowIDMap != rhs.rowIDMap {return false}
    if lhs.columnIDMap != rhs.columnIDMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartGridArchive.ChartGridRowColumnIdMap.Entry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSCH_ChartGridArchive.ChartGridRowColumnIdMap.protoMessageName + ".Entry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uniqueId"),
    2: .same(proto: "index"),
  ]

  public var isInitialized: Bool {
    if self._uniqueID == nil {return false}
    if self._index == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._uniqueID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._index)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._uniqueID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._index {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartGridArchive.ChartGridRowColumnIdMap.Entry, rhs: TSCH_ChartGridArchive.ChartGridRowColumnIdMap.Entry) -> Bool {
    if lhs._uniqueID != rhs._uniqueID {return false}
    if lhs._index != rhs._index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartMediatorArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartMediatorArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "info"),
    2: .standard(proto: "local_series_indexes"),
    3: .standard(proto: "remote_series_indexes"),
  ]

  public var isInitialized: Bool {
    if let v = self._info, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._info)
      case 2: try decoder.decodeRepeatedUInt32Field(value: &self.localSeriesIndexes)
      case 3: try decoder.decodeRepeatedUInt32Field(value: &self.remoteSeriesIndexes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.localSeriesIndexes.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.localSeriesIndexes, fieldNumber: 2)
    }
    if !self.remoteSeriesIndexes.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.remoteSeriesIndexes, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartMediatorArchive, rhs: TSCH_ChartMediatorArchive) -> Bool {
    if lhs._info != rhs._info {return false}
    if lhs.localSeriesIndexes != rhs.localSeriesIndexes {return false}
    if lhs.remoteSeriesIndexes != rhs.remoteSeriesIndexes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartFillSetArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartFillSetArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .standard(proto: "lookup_string"),
    3: .standard(proto: "number_of_theme_series_styles"),
    4: .standard(proto: "series_styles"),
  ]

  public var isInitialized: Bool {
    if self._identifier == nil {return false}
    if self._lookupString == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.seriesStyles) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._identifier)
      case 2: try decoder.decodeSingularStringField(value: &self._lookupString)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._numberOfThemeSeriesStyles)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.seriesStyles)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._identifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._lookupString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._numberOfThemeSeriesStyles {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if !self.seriesStyles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.seriesStyles, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartFillSetArchive, rhs: TSCH_ChartFillSetArchive) -> Bool {
    if lhs._identifier != rhs._identifier {return false}
    if lhs._lookupString != rhs._lookupString {return false}
    if lhs._numberOfThemeSeriesStyles != rhs._numberOfThemeSeriesStyles {return false}
    if lhs.seriesStyles != rhs.seriesStyles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartStylePreset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartStylePreset"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chart_style"),
    2: .standard(proto: "legend_style"),
    3: .standard(proto: "value_axis_styles"),
    4: .standard(proto: "category_axis_styles"),
    5: .standard(proto: "series_styles"),
    6: .standard(proto: "paragraph_styles"),
    7: .same(proto: "uuid"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if let v = self._chartStyle, !v.isInitialized {return false}
    if let v = self._legendStyle, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.valueAxisStyles) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.categoryAxisStyles) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.seriesStyles) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.paragraphStyles) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._chartStyle)
      case 2: try decoder.decodeSingularMessageField(value: &self._legendStyle)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.valueAxisStyles)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.categoryAxisStyles)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.seriesStyles)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.paragraphStyles)
      case 7: try decoder.decodeSingularBytesField(value: &self._uuid)
      case 10000..<536870912:
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: TSCH_ChartStylePreset.self, fieldNumber: fieldNumber)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._chartStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._legendStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.valueAxisStyles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.valueAxisStyles, fieldNumber: 3)
    }
    if !self.categoryAxisStyles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.categoryAxisStyles, fieldNumber: 4)
    }
    if !self.seriesStyles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.seriesStyles, fieldNumber: 5)
    }
    if !self.paragraphStyles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.paragraphStyles, fieldNumber: 6)
    }
    if let v = self._uuid {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 7)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 10000, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartStylePreset, rhs: TSCH_ChartStylePreset) -> Bool {
    if lhs._chartStyle != rhs._chartStyle {return false}
    if lhs._legendStyle != rhs._legendStyle {return false}
    if lhs.valueAxisStyles != rhs.valueAxisStyles {return false}
    if lhs.categoryAxisStyles != rhs.categoryAxisStyles {return false}
    if lhs.seriesStyles != rhs.seriesStyles {return false}
    if lhs.paragraphStyles != rhs.paragraphStyles {return false}
    if lhs._uuid != rhs._uuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension TSCH_ChartPresetsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartPresetsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chart_presets"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.chartPresets) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.chartPresets)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chartPresets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.chartPresets, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartPresetsArchive, rhs: TSCH_ChartPresetsArchive) -> Bool {
    if lhs.chartPresets != rhs.chartPresets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_PropertyValueStorageContainerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PropertyValueStorageContainerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chart_style"),
    2: .standard(proto: "chart_nonstyle"),
    3: .standard(proto: "legend_style"),
    4: .standard(proto: "legend_nonstyle"),
    5: .standard(proto: "value_axis_styles"),
    6: .standard(proto: "value_axis_nonstyles"),
    7: .standard(proto: "category_axis_styles"),
    8: .standard(proto: "category_axis_nonstyles"),
    9: .standard(proto: "series_theme_styles"),
    10: .standard(proto: "series_private_styles"),
    11: .standard(proto: "series_nonstyles"),
    12: .standard(proto: "paragraph_styles"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if let v = self._chartStyle, !v.isInitialized {return false}
    if let v = self._chartNonstyle, !v.isInitialized {return false}
    if let v = self._legendStyle, !v.isInitialized {return false}
    if let v = self._legendNonstyle, !v.isInitialized {return false}
    if let v = self._valueAxisStyles, !v.isInitialized {return false}
    if let v = self._valueAxisNonstyles, !v.isInitialized {return false}
    if let v = self._categoryAxisStyles, !v.isInitialized {return false}
    if let v = self._categoryAxisNonstyles, !v.isInitialized {return false}
    if let v = self._seriesThemeStyles, !v.isInitialized {return false}
    if let v = self._seriesPrivateStyles, !v.isInitialized {return false}
    if let v = self._seriesNonstyles, !v.isInitialized {return false}
    if let v = self._paragraphStyles, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._chartStyle)
      case 2: try decoder.decodeSingularMessageField(value: &self._chartNonstyle)
      case 3: try decoder.decodeSingularMessageField(value: &self._legendStyle)
      case 4: try decoder.decodeSingularMessageField(value: &self._legendNonstyle)
      case 5: try decoder.decodeSingularMessageField(value: &self._valueAxisStyles)
      case 6: try decoder.decodeSingularMessageField(value: &self._valueAxisNonstyles)
      case 7: try decoder.decodeSingularMessageField(value: &self._categoryAxisStyles)
      case 8: try decoder.decodeSingularMessageField(value: &self._categoryAxisNonstyles)
      case 9: try decoder.decodeSingularMessageField(value: &self._seriesThemeStyles)
      case 10: try decoder.decodeSingularMessageField(value: &self._seriesPrivateStyles)
      case 11: try decoder.decodeSingularMessageField(value: &self._seriesNonstyles)
      case 12: try decoder.decodeSingularMessageField(value: &self._paragraphStyles)
      case 10000..<536870912:
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: TSCH_PropertyValueStorageContainerArchive.self, fieldNumber: fieldNumber)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._chartStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._chartNonstyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._legendStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._legendNonstyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._valueAxisStyles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._valueAxisNonstyles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._categoryAxisStyles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._categoryAxisNonstyles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._seriesThemeStyles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._seriesPrivateStyles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._seriesNonstyles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._paragraphStyles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 10000, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_PropertyValueStorageContainerArchive, rhs: TSCH_PropertyValueStorageContainerArchive) -> Bool {
    if lhs._chartStyle != rhs._chartStyle {return false}
    if lhs._chartNonstyle != rhs._chartNonstyle {return false}
    if lhs._legendStyle != rhs._legendStyle {return false}
    if lhs._legendNonstyle != rhs._legendNonstyle {return false}
    if lhs._valueAxisStyles != rhs._valueAxisStyles {return false}
    if lhs._valueAxisNonstyles != rhs._valueAxisNonstyles {return false}
    if lhs._categoryAxisStyles != rhs._categoryAxisStyles {return false}
    if lhs._categoryAxisNonstyles != rhs._categoryAxisNonstyles {return false}
    if lhs._seriesThemeStyles != rhs._seriesThemeStyles {return false}
    if lhs._seriesPrivateStyles != rhs._seriesPrivateStyles {return false}
    if lhs._seriesNonstyles != rhs._seriesNonstyles {return false}
    if lhs._paragraphStyles != rhs._paragraphStyles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension TSCH_StylePasteboardDataArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StylePasteboardDataArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "style_network"),
    3: .standard(proto: "copied_from_entire_chart"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._styleNetwork, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._styleNetwork)
      case 3: try decoder.decodeSingularBoolField(value: &self._copiedFromEntireChart)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._styleNetwork {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._copiedFromEntireChart {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_StylePasteboardDataArchive, rhs: TSCH_StylePasteboardDataArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._styleNetwork != rhs._styleNetwork {return false}
    if lhs._copiedFromEntireChart != rhs._copiedFromEntireChart {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartSelectionPathTypeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartSelectionPathTypeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "path_type"),
    2: .standard(proto: "path_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._pathType)
      case 2: try decoder.decodeSingularStringField(value: &self._pathName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._pathType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._pathName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartSelectionPathTypeArchive, rhs: TSCH_ChartSelectionPathTypeArchive) -> Bool {
    if lhs._pathType != rhs._pathType {return false}
    if lhs._pathName != rhs._pathName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartAxisIDArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartAxisIDArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "axis_type"),
    2: .same(proto: "ordinal"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._axisType)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._ordinal)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._axisType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._ordinal {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartAxisIDArchive, rhs: TSCH_ChartAxisIDArchive) -> Bool {
    if lhs._axisType != rhs._axisType {return false}
    if lhs._ordinal != rhs._ordinal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartSelectionPathArgumentArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartSelectionPathArgumentArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .standard(proto: "axis_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._number)
      case 2: try decoder.decodeSingularMessageField(value: &self._axisID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._number {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._axisID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartSelectionPathArgumentArchive, rhs: TSCH_ChartSelectionPathArgumentArchive) -> Bool {
    if lhs._number != rhs._number {return false}
    if lhs._axisID != rhs._axisID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartSelectionPathArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartSelectionPathArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "path_type"),
    2: .standard(proto: "sub_selection"),
    3: .same(proto: "arguments"),
  ]

  fileprivate class _StorageClass {
    var _pathType: TSCH_ChartSelectionPathTypeArchive? = nil
    var _subSelection: TSCH_ChartSelectionPathArchive? = nil
    var _arguments: [TSCH_ChartSelectionPathArgumentArchive] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _pathType = source._pathType
      _subSelection = source._subSelection
      _arguments = source._arguments
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._pathType)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._subSelection)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._arguments)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._pathType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._subSelection {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._arguments.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._arguments, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartSelectionPathArchive, rhs: TSCH_ChartSelectionPathArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._pathType != rhs_storage._pathType {return false}
        if _storage._subSelection != rhs_storage._subSelection {return false}
        if _storage._arguments != rhs_storage._arguments {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartSelectionArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "super"),
    1: .same(proto: "chart"),
    2: .same(proto: "paths"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._chart, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._chart)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.paths)
      case 3: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._chart {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.paths.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.paths, fieldNumber: 2)
    }
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartSelectionArchive, rhs: TSCH_ChartSelectionArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._chart != rhs._chart {return false}
    if lhs.paths != rhs.paths {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartCDESelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartCDESelectionArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chart"),
    2: .standard(proto: "selection_type"),
    3: .standard(proto: "row_location"),
    4: .standard(proto: "row_length"),
    5: .standard(proto: "column_location"),
    6: .standard(proto: "column_length"),
  ]

  public var isInitialized: Bool {
    if let v = self._chart, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._chart)
      case 2: try decoder.decodeSingularInt32Field(value: &self._selectionType)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._rowLocation)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._rowLength)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._columnLocation)
      case 6: try decoder.decodeSingularUInt32Field(value: &self._columnLength)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._chart {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._selectionType {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._rowLocation {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._rowLength {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._columnLocation {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._columnLength {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartCDESelectionArchive, rhs: TSCH_ChartCDESelectionArchive) -> Bool {
    if lhs._chart != rhs._chart {return false}
    if lhs._selectionType != rhs._selectionType {return false}
    if lhs._rowLocation != rhs._rowLocation {return false}
    if lhs._rowLength != rhs._rowLength {return false}
    if lhs._columnLocation != rhs._columnLocation {return false}
    if lhs._columnLength != rhs._columnLength {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartUIState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartUIState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chart"),
    2: .standard(proto: "cde_last_row_selected"),
    3: .standard(proto: "cde_last_col_selected"),
    4: .standard(proto: "cde_last_row_count"),
    5: .standard(proto: "cde_last_col_count"),
    6: .standard(proto: "cde_use_full_keyboard"),
    7: .standard(proto: "multi_data_set_index"),
    8: .standard(proto: "is_valid_multi_data_set_index"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if let v = self._chart, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._chart)
      case 2: try decoder.decodeSingularInt32Field(value: &self._cdeLastRowSelected)
      case 3: try decoder.decodeSingularInt32Field(value: &self._cdeLastColSelected)
      case 4: try decoder.decodeSingularInt32Field(value: &self._cdeLastRowCount)
      case 5: try decoder.decodeSingularInt32Field(value: &self._cdeLastColCount)
      case 6: try decoder.decodeSingularBoolField(value: &self._cdeUseFullKeyboard)
      case 7: try decoder.decodeSingularInt32Field(value: &self._multiDataSetIndex)
      case 8: try decoder.decodeSingularBoolField(value: &self._isValidMultiDataSetIndex)
      case 10000..<536870912:
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: TSCH_ChartUIState.self, fieldNumber: fieldNumber)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._chart {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._cdeLastRowSelected {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._cdeLastColSelected {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._cdeLastRowCount {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._cdeLastColCount {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._cdeUseFullKeyboard {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._multiDataSetIndex {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._isValidMultiDataSetIndex {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 10000, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartUIState, rhs: TSCH_ChartUIState) -> Bool {
    if lhs._chart != rhs._chart {return false}
    if lhs._cdeLastRowSelected != rhs._cdeLastRowSelected {return false}
    if lhs._cdeLastColSelected != rhs._cdeLastColSelected {return false}
    if lhs._cdeLastRowCount != rhs._cdeLastRowCount {return false}
    if lhs._cdeLastColCount != rhs._cdeLastColCount {return false}
    if lhs._cdeUseFullKeyboard != rhs._cdeUseFullKeyboard {return false}
    if lhs._multiDataSetIndex != rhs._multiDataSetIndex {return false}
    if lhs._isValidMultiDataSetIndex != rhs._isValidMultiDataSetIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension TSCH_ChartUIStateMultiDataIndexUpgrade: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartUIStateMultiDataIndexUpgrade"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartUIStateMultiDataIndexUpgrade, rhs: TSCH_ChartUIStateMultiDataIndexUpgrade) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartFormatStructExtensions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartFormatStructExtensions"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartFormatStructExtensions, rhs: TSCH_ChartFormatStructExtensions) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartReferenceLineNonStyleItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartReferenceLineNonStyleItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "non_style"),
    2: .same(proto: "uuid"),
  ]

  public var isInitialized: Bool {
    if self._nonStyle == nil {return false}
    if self._uuid == nil {return false}
    if let v = self._nonStyle, !v.isInitialized {return false}
    if let v = self._uuid, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._nonStyle)
      case 2: try decoder.decodeSingularMessageField(value: &self._uuid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._nonStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._uuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartReferenceLineNonStyleItem, rhs: TSCH_ChartReferenceLineNonStyleItem) -> Bool {
    if lhs._nonStyle != rhs._nonStyle {return false}
    if lhs._uuid != rhs._uuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartAxisReferenceLineNonStylesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartAxisReferenceLineNonStylesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "axis_id"),
    2: .standard(proto: "reference_line_non_style_items"),
  ]

  public var isInitialized: Bool {
    if self._axisID == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.referenceLineNonStyleItems) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._axisID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.referenceLineNonStyleItems)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._axisID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.referenceLineNonStyleItems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.referenceLineNonStyleItems, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartAxisReferenceLineNonStylesArchive, rhs: TSCH_ChartAxisReferenceLineNonStylesArchive) -> Bool {
    if lhs._axisID != rhs._axisID {return false}
    if lhs.referenceLineNonStyleItems != rhs.referenceLineNonStyleItems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartAxisReferenceLineStylesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartAxisReferenceLineStylesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "axis_id"),
    2: .standard(proto: "reference_line_styles"),
  ]

  public var isInitialized: Bool {
    if self._axisID == nil {return false}
    if let v = self._referenceLineStyles, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._axisID)
      case 2: try decoder.decodeSingularMessageField(value: &self._referenceLineStyles)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._axisID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._referenceLineStyles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartAxisReferenceLineStylesArchive, rhs: TSCH_ChartAxisReferenceLineStylesArchive) -> Bool {
    if lhs._axisID != rhs._axisID {return false}
    if lhs._referenceLineStyles != rhs._referenceLineStyles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartReferenceLinesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartReferenceLinesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "reference_line_non_styles_map"),
    2: .standard(proto: "reference_line_styles_map"),
    3: .standard(proto: "theme_preset_reference_line_style"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.referenceLineNonStylesMap) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.referenceLineStylesMap) {return false}
    if let v = self._themePresetReferenceLineStyle, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.referenceLineNonStylesMap)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.referenceLineStylesMap)
      case 3: try decoder.decodeSingularMessageField(value: &self._themePresetReferenceLineStyle)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.referenceLineNonStylesMap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.referenceLineNonStylesMap, fieldNumber: 1)
    }
    if !self.referenceLineStylesMap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.referenceLineStylesMap, fieldNumber: 2)
    }
    if let v = self._themePresetReferenceLineStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartReferenceLinesArchive, rhs: TSCH_ChartReferenceLinesArchive) -> Bool {
    if lhs.referenceLineNonStylesMap != rhs.referenceLineNonStylesMap {return false}
    if lhs.referenceLineStylesMap != rhs.referenceLineStylesMap {return false}
    if lhs._themePresetReferenceLineStyle != rhs._themePresetReferenceLineStyle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartPresetReferenceLineStylesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartPresetReferenceLineStylesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "reference_line_styles"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.referenceLineStyles) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.referenceLineStyles)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.referenceLineStyles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.referenceLineStyles, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartPresetReferenceLineStylesArchive, rhs: TSCH_ChartPresetReferenceLineStylesArchive) -> Bool {
    if lhs.referenceLineStyles != rhs.referenceLineStyles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartAxisReferenceLineSparseNonStylesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartAxisReferenceLineSparseNonStylesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "axis_id"),
    2: .standard(proto: "reference_line_non_style_items"),
  ]

  public var isInitialized: Bool {
    if self._axisID == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.referenceLineNonStyleItems) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._axisID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.referenceLineNonStyleItems)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._axisID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.referenceLineNonStyleItems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.referenceLineNonStyleItems, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartAxisReferenceLineSparseNonStylesArchive, rhs: TSCH_ChartAxisReferenceLineSparseNonStylesArchive) -> Bool {
    if lhs._axisID != rhs._axisID {return false}
    if lhs.referenceLineNonStyleItems != rhs.referenceLineNonStyleItems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_PropertyValueStorageContainerReferenceLinesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PropertyValueStorageContainerReferenceLinesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "reference_line_non_styles_map"),
    2: .standard(proto: "reference_line_styles_map"),
    3: .standard(proto: "theme_preset_reference_line_style"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.referenceLineNonStylesMap) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.referenceLineStylesMap) {return false}
    if let v = self._themePresetReferenceLineStyle, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.referenceLineNonStylesMap)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.referenceLineStylesMap)
      case 3: try decoder.decodeSingularMessageField(value: &self._themePresetReferenceLineStyle)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.referenceLineNonStylesMap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.referenceLineNonStylesMap, fieldNumber: 1)
    }
    if !self.referenceLineStylesMap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.referenceLineStylesMap, fieldNumber: 2)
    }
    if let v = self._themePresetReferenceLineStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_PropertyValueStorageContainerReferenceLinesArchive, rhs: TSCH_PropertyValueStorageContainerReferenceLinesArchive) -> Bool {
    if lhs.referenceLineNonStylesMap != rhs.referenceLineNonStylesMap {return false}
    if lhs.referenceLineStylesMap != rhs.referenceLineStylesMap {return false}
    if lhs._themePresetReferenceLineStyle != rhs._themePresetReferenceLineStyle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
