// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TSTCommandArchives.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum TST_TableArea: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case body // = 1
  case headerRow // = 2
  case headerColumn // = 3
  case footerRow // = 4

  init() {
    self = .body
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .body
    case 2: self = .headerRow
    case 3: self = .headerColumn
    case 4: self = .footerRow
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .body: return 1
    case .headerRow: return 2
    case .headerColumn: return 3
    case .footerRow: return 4
    }
  }

}

#if swift(>=4.2)

extension TST_TableArea: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum TST_TableAreaTransition: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case headerRowToBody // = 1
  case bodyToHeaderRow // = 2
  case footerRowToBody // = 3
  case bodyToFooterRow // = 4
  case headerColumnToBody // = 5
  case bodyToHeaderColumn // = 6

  init() {
    self = .headerRowToBody
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .headerRowToBody
    case 2: self = .bodyToHeaderRow
    case 3: self = .footerRowToBody
    case 4: self = .bodyToFooterRow
    case 5: self = .headerColumnToBody
    case 6: self = .bodyToHeaderColumn
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .headerRowToBody: return 1
    case .bodyToHeaderRow: return 2
    case .footerRowToBody: return 3
    case .bodyToFooterRow: return 4
    case .headerColumnToBody: return 5
    case .bodyToHeaderColumn: return 6
    }
  }

}

#if swift(>=4.2)

extension TST_TableAreaTransition: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum TST_ColumnRowTypeEnum: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case columnRowTypeAnchor // = 0
  case columnRowTypeHeaderRow // = 1
  case columnRowTypeBodyRow // = 2
  case columnRowTypeFooterRow // = 3
  case columnRowTypeHeaderColumn // = 4
  case columnRowTypeBodyColumn // = 5

  init() {
    self = .columnRowTypeAnchor
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .columnRowTypeAnchor
    case 1: self = .columnRowTypeHeaderRow
    case 2: self = .columnRowTypeBodyRow
    case 3: self = .columnRowTypeFooterRow
    case 4: self = .columnRowTypeHeaderColumn
    case 5: self = .columnRowTypeBodyColumn
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .columnRowTypeAnchor: return 0
    case .columnRowTypeHeaderRow: return 1
    case .columnRowTypeBodyRow: return 2
    case .columnRowTypeFooterRow: return 3
    case .columnRowTypeHeaderColumn: return 4
    case .columnRowTypeBodyColumn: return 5
    }
  }

}

#if swift(>=4.2)

extension TST_ColumnRowTypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TST_TableCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var tableInfoIDPath: TSP_UUIDPath {
    get {return _tableInfoIDPath ?? TSP_UUIDPath()}
    set {_tableInfoIDPath = newValue}
  }
  /// Returns true if `tableInfoIDPath` has been explicitly set.
  var hasTableInfoIDPath: Bool {return self._tableInfoIDPath != nil}
  /// Clears the value of `tableInfoIDPath`. Subsequent reads from it will return its default value.
  mutating func clearTableInfoIDPath() {self._tableInfoIDPath = nil}

  var commandname: String {
    get {return _commandname ?? String()}
    set {_commandname = newValue}
  }
  /// Returns true if `commandname` has been explicitly set.
  var hasCommandname: Bool {return self._commandname != nil}
  /// Clears the value of `commandname`. Subsequent reads from it will return its default value.
  mutating func clearCommandname() {self._commandname = nil}

  var defaultCellStylesContainer: TSP_Reference {
    get {return _defaultCellStylesContainer ?? TSP_Reference()}
    set {_defaultCellStylesContainer = newValue}
  }
  /// Returns true if `defaultCellStylesContainer` has been explicitly set.
  var hasDefaultCellStylesContainer: Bool {return self._defaultCellStylesContainer != nil}
  /// Clears the value of `defaultCellStylesContainer`. Subsequent reads from it will return its default value.
  mutating func clearDefaultCellStylesContainer() {self._defaultCellStylesContainer = nil}

  var timestamp: Double {
    get {return _timestamp ?? 0}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  var randomSeedLo: UInt32 {
    get {return _randomSeedLo ?? 0}
    set {_randomSeedLo = newValue}
  }
  /// Returns true if `randomSeedLo` has been explicitly set.
  var hasRandomSeedLo: Bool {return self._randomSeedLo != nil}
  /// Clears the value of `randomSeedLo`. Subsequent reads from it will return its default value.
  mutating func clearRandomSeedLo() {self._randomSeedLo = nil}

  var randomSeedHi: UInt32 {
    get {return _randomSeedHi ?? 0}
    set {_randomSeedHi = newValue}
  }
  /// Returns true if `randomSeedHi` has been explicitly set.
  var hasRandomSeedHi: Bool {return self._randomSeedHi != nil}
  /// Clears the value of `randomSeedHi`. Subsequent reads from it will return its default value.
  mutating func clearRandomSeedHi() {self._randomSeedHi = nil}

  var isInverse: Bool {
    get {return _isInverse ?? false}
    set {_isInverse = newValue}
  }
  /// Returns true if `isInverse` has been explicitly set.
  var hasIsInverse: Bool {return self._isInverse != nil}
  /// Clears the value of `isInverse`. Subsequent reads from it will return its default value.
  mutating func clearIsInverse() {self._isInverse = nil}

  var oldTimestamp: Double {
    get {return _oldTimestamp ?? 0}
    set {_oldTimestamp = newValue}
  }
  /// Returns true if `oldTimestamp` has been explicitly set.
  var hasOldTimestamp: Bool {return self._oldTimestamp != nil}
  /// Clears the value of `oldTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearOldTimestamp() {self._oldTimestamp = nil}

  var oldRandomSeed: UInt64 {
    get {return _oldRandomSeed ?? 0}
    set {_oldRandomSeed = newValue}
  }
  /// Returns true if `oldRandomSeed` has been explicitly set.
  var hasOldRandomSeed: Bool {return self._oldRandomSeed != nil}
  /// Clears the value of `oldRandomSeed`. Subsequent reads from it will return its default value.
  mutating func clearOldRandomSeed() {self._oldRandomSeed = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _tableInfoIDPath: TSP_UUIDPath? = nil
  fileprivate var _commandname: String? = nil
  fileprivate var _defaultCellStylesContainer: TSP_Reference? = nil
  fileprivate var _timestamp: Double? = nil
  fileprivate var _randomSeedLo: UInt32? = nil
  fileprivate var _randomSeedHi: UInt32? = nil
  fileprivate var _isInverse: Bool? = nil
  fileprivate var _oldTimestamp: Double? = nil
  fileprivate var _oldRandomSeed: UInt64? = nil
}

struct TST_CommandApplyCellContentsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var cellDiffMap: TSP_Reference {
    get {return _cellDiffMap ?? TSP_Reference()}
    set {_cellDiffMap = newValue}
  }
  /// Returns true if `cellDiffMap` has been explicitly set.
  var hasCellDiffMap: Bool {return self._cellDiffMap != nil}
  /// Clears the value of `cellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearCellDiffMap() {self._cellDiffMap = nil}

  var rollbackCellDiffMap: TSP_Reference {
    get {return _rollbackCellDiffMap ?? TSP_Reference()}
    set {_rollbackCellDiffMap = newValue}
  }
  /// Returns true if `rollbackCellDiffMap` has been explicitly set.
  var hasRollbackCellDiffMap: Bool {return self._rollbackCellDiffMap != nil}
  /// Clears the value of `rollbackCellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearRollbackCellDiffMap() {self._rollbackCellDiffMap = nil}

  var customFormatKeys: [TSP_UUID] = []

  var actionString: String {
    get {return _actionString ?? String()}
    set {_actionString = newValue}
  }
  /// Returns true if `actionString` has been explicitly set.
  var hasActionString: Bool {return self._actionString != nil}
  /// Clears the value of `actionString`. Subsequent reads from it will return its default value.
  mutating func clearActionString() {self._actionString = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _cellDiffMap: TSP_Reference? = nil
  fileprivate var _rollbackCellDiffMap: TSP_Reference? = nil
  fileprivate var _actionString: String? = nil
}

struct TST_CommandApplyCellDiffMapArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var cellDiffMap: TSP_Reference {
    get {return _cellDiffMap ?? TSP_Reference()}
    set {_cellDiffMap = newValue}
  }
  /// Returns true if `cellDiffMap` has been explicitly set.
  var hasCellDiffMap: Bool {return self._cellDiffMap != nil}
  /// Clears the value of `cellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearCellDiffMap() {self._cellDiffMap = nil}

  var shouldAllowMergeFragments: Bool {
    get {return _shouldAllowMergeFragments ?? false}
    set {_shouldAllowMergeFragments = newValue}
  }
  /// Returns true if `shouldAllowMergeFragments` has been explicitly set.
  var hasShouldAllowMergeFragments: Bool {return self._shouldAllowMergeFragments != nil}
  /// Clears the value of `shouldAllowMergeFragments`. Subsequent reads from it will return its default value.
  mutating func clearShouldAllowMergeFragments() {self._shouldAllowMergeFragments = nil}

  var inverseCellDiffMap: TSP_Reference {
    get {return _inverseCellDiffMap ?? TSP_Reference()}
    set {_inverseCellDiffMap = newValue}
  }
  /// Returns true if `inverseCellDiffMap` has been explicitly set.
  var hasInverseCellDiffMap: Bool {return self._inverseCellDiffMap != nil}
  /// Clears the value of `inverseCellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearInverseCellDiffMap() {self._inverseCellDiffMap = nil}

  var customFormatKeys: [TSP_UUID] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _cellDiffMap: TSP_Reference? = nil
  fileprivate var _shouldAllowMergeFragments: Bool? = nil
  fileprivate var _inverseCellDiffMap: TSP_Reference? = nil
}

struct TST_CommandApplyCellMapArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var redoCellMap: TSP_Reference {
    get {return _redoCellMap ?? TSP_Reference()}
    set {_redoCellMap = newValue}
  }
  /// Returns true if `redoCellMap` has been explicitly set.
  var hasRedoCellMap: Bool {return self._redoCellMap != nil}
  /// Clears the value of `redoCellMap`. Subsequent reads from it will return its default value.
  mutating func clearRedoCellMap() {self._redoCellMap = nil}

  var undoCellMap: TSP_Reference {
    get {return _undoCellMap ?? TSP_Reference()}
    set {_undoCellMap = newValue}
  }
  /// Returns true if `undoCellMap` has been explicitly set.
  var hasUndoCellMap: Bool {return self._undoCellMap != nil}
  /// Clears the value of `undoCellMap`. Subsequent reads from it will return its default value.
  mutating func clearUndoCellMap() {self._undoCellMap = nil}

  var undoFormulaRewriteCommand: TSP_Reference {
    get {return _undoFormulaRewriteCommand ?? TSP_Reference()}
    set {_undoFormulaRewriteCommand = newValue}
  }
  /// Returns true if `undoFormulaRewriteCommand` has been explicitly set.
  var hasUndoFormulaRewriteCommand: Bool {return self._undoFormulaRewriteCommand != nil}
  /// Clears the value of `undoFormulaRewriteCommand`. Subsequent reads from it will return its default value.
  mutating func clearUndoFormulaRewriteCommand() {self._undoFormulaRewriteCommand = nil}

  var customFormatKeys: [TSP_UUID] = []

  var mergeOwnerRollbackIndex: UInt32 {
    get {return _mergeOwnerRollbackIndex ?? 0}
    set {_mergeOwnerRollbackIndex = newValue}
  }
  /// Returns true if `mergeOwnerRollbackIndex` has been explicitly set.
  var hasMergeOwnerRollbackIndex: Bool {return self._mergeOwnerRollbackIndex != nil}
  /// Clears the value of `mergeOwnerRollbackIndex`. Subsequent reads from it will return its default value.
  mutating func clearMergeOwnerRollbackIndex() {self._mergeOwnerRollbackIndex = nil}

  var isFromPaste: Bool {
    get {return _isFromPaste ?? false}
    set {_isFromPaste = newValue}
  }
  /// Returns true if `isFromPaste` has been explicitly set.
  var hasIsFromPaste: Bool {return self._isFromPaste != nil}
  /// Clears the value of `isFromPaste`. Subsequent reads from it will return its default value.
  mutating func clearIsFromPaste() {self._isFromPaste = nil}

  var formulaRewriteCommands: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _redoCellMap: TSP_Reference? = nil
  fileprivate var _undoCellMap: TSP_Reference? = nil
  fileprivate var _undoFormulaRewriteCommand: TSP_Reference? = nil
  fileprivate var _mergeOwnerRollbackIndex: UInt32? = nil
  fileprivate var _isFromPaste: Bool? = nil
}

struct TST_CommandApplyConcurrentCellMapArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var redoConcurrentCellMap: TSP_Reference {
    get {return _redoConcurrentCellMap ?? TSP_Reference()}
    set {_redoConcurrentCellMap = newValue}
  }
  /// Returns true if `redoConcurrentCellMap` has been explicitly set.
  var hasRedoConcurrentCellMap: Bool {return self._redoConcurrentCellMap != nil}
  /// Clears the value of `redoConcurrentCellMap`. Subsequent reads from it will return its default value.
  mutating func clearRedoConcurrentCellMap() {self._redoConcurrentCellMap = nil}

  var undoConcurrentCellMap: TSP_Reference {
    get {return _undoConcurrentCellMap ?? TSP_Reference()}
    set {_undoConcurrentCellMap = newValue}
  }
  /// Returns true if `undoConcurrentCellMap` has been explicitly set.
  var hasUndoConcurrentCellMap: Bool {return self._undoConcurrentCellMap != nil}
  /// Clears the value of `undoConcurrentCellMap`. Subsequent reads from it will return its default value.
  mutating func clearUndoConcurrentCellMap() {self._undoConcurrentCellMap = nil}

  var undoFormulaRewriteCommand: TSP_Reference {
    get {return _undoFormulaRewriteCommand ?? TSP_Reference()}
    set {_undoFormulaRewriteCommand = newValue}
  }
  /// Returns true if `undoFormulaRewriteCommand` has been explicitly set.
  var hasUndoFormulaRewriteCommand: Bool {return self._undoFormulaRewriteCommand != nil}
  /// Clears the value of `undoFormulaRewriteCommand`. Subsequent reads from it will return its default value.
  mutating func clearUndoFormulaRewriteCommand() {self._undoFormulaRewriteCommand = nil}

  var customFormatKeys: [TSP_UUID] = []

  var mergeOwnerRollbackIndex: UInt32 {
    get {return _mergeOwnerRollbackIndex ?? 0}
    set {_mergeOwnerRollbackIndex = newValue}
  }
  /// Returns true if `mergeOwnerRollbackIndex` has been explicitly set.
  var hasMergeOwnerRollbackIndex: Bool {return self._mergeOwnerRollbackIndex != nil}
  /// Clears the value of `mergeOwnerRollbackIndex`. Subsequent reads from it will return its default value.
  mutating func clearMergeOwnerRollbackIndex() {self._mergeOwnerRollbackIndex = nil}

  var isFromPaste: Bool {
    get {return _isFromPaste ?? false}
    set {_isFromPaste = newValue}
  }
  /// Returns true if `isFromPaste` has been explicitly set.
  var hasIsFromPaste: Bool {return self._isFromPaste != nil}
  /// Clears the value of `isFromPaste`. Subsequent reads from it will return its default value.
  mutating func clearIsFromPaste() {self._isFromPaste = nil}

  var formulaRewriteCommands: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _redoConcurrentCellMap: TSP_Reference? = nil
  fileprivate var _undoConcurrentCellMap: TSP_Reference? = nil
  fileprivate var _undoFormulaRewriteCommand: TSP_Reference? = nil
  fileprivate var _mergeOwnerRollbackIndex: UInt32? = nil
  fileprivate var _isFromPaste: Bool? = nil
}

struct TST_CommandChangeFreezeHeaderStateArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var direction: TST_TableDimensionArchive {
    get {return _direction ?? .dimensionRow}
    set {_direction = newValue}
  }
  /// Returns true if `direction` has been explicitly set.
  var hasDirection: Bool {return self._direction != nil}
  /// Clears the value of `direction`. Subsequent reads from it will return its default value.
  mutating func clearDirection() {self._direction = nil}

  var newFreezeState: Bool {
    get {return _newFreezeState ?? false}
    set {_newFreezeState = newValue}
  }
  /// Returns true if `newFreezeState` has been explicitly set.
  var hasNewFreezeState: Bool {return self._newFreezeState != nil}
  /// Clears the value of `newFreezeState`. Subsequent reads from it will return its default value.
  mutating func clearNewFreezeState() {self._newFreezeState = nil}

  var prevFreezeState: Bool {
    get {return _prevFreezeState ?? false}
    set {_prevFreezeState = newValue}
  }
  /// Returns true if `prevFreezeState` has been explicitly set.
  var hasPrevFreezeState: Bool {return self._prevFreezeState != nil}
  /// Clears the value of `prevFreezeState`. Subsequent reads from it will return its default value.
  mutating func clearPrevFreezeState() {self._prevFreezeState = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _direction: TST_TableDimensionArchive? = nil
  fileprivate var _newFreezeState: Bool? = nil
  fileprivate var _prevFreezeState: Bool? = nil
}

struct TST_CommandDeleteCellsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var updateBorderVisibility: Bool {
    get {return _updateBorderVisibility ?? false}
    set {_updateBorderVisibility = newValue}
  }
  /// Returns true if `updateBorderVisibility` has been explicitly set.
  var hasUpdateBorderVisibility: Bool {return self._updateBorderVisibility != nil}
  /// Clears the value of `updateBorderVisibility`. Subsequent reads from it will return its default value.
  mutating func clearUpdateBorderVisibility() {self._updateBorderVisibility = nil}

  var invalidateComments: Bool {
    get {return _invalidateComments ?? false}
    set {_invalidateComments = newValue}
  }
  /// Returns true if `invalidateComments` has been explicitly set.
  var hasInvalidateComments: Bool {return self._invalidateComments != nil}
  /// Clears the value of `invalidateComments`. Subsequent reads from it will return its default value.
  mutating func clearInvalidateComments() {self._invalidateComments = nil}

  var invalidateCommentsValid: Bool {
    get {return _invalidateCommentsValid ?? false}
    set {_invalidateCommentsValid = newValue}
  }
  /// Returns true if `invalidateCommentsValid` has been explicitly set.
  var hasInvalidateCommentsValid: Bool {return self._invalidateCommentsValid != nil}
  /// Clears the value of `invalidateCommentsValid`. Subsequent reads from it will return its default value.
  mutating func clearInvalidateCommentsValid() {self._invalidateCommentsValid = nil}

  var cellUidRegion: TST_CellUIDRegionArchive {
    get {return _cellUidRegion ?? TST_CellUIDRegionArchive()}
    set {_cellUidRegion = newValue}
  }
  /// Returns true if `cellUidRegion` has been explicitly set.
  var hasCellUidRegion: Bool {return self._cellUidRegion != nil}
  /// Clears the value of `cellUidRegion`. Subsequent reads from it will return its default value.
  mutating func clearCellUidRegion() {self._cellUidRegion = nil}

  var summaryCellUidList: TST_CellUIDListArchive {
    get {return _summaryCellUidList ?? TST_CellUIDListArchive()}
    set {_summaryCellUidList = newValue}
  }
  /// Returns true if `summaryCellUidList` has been explicitly set.
  var hasSummaryCellUidList: Bool {return self._summaryCellUidList != nil}
  /// Clears the value of `summaryCellUidList`. Subsequent reads from it will return its default value.
  mutating func clearSummaryCellUidList() {self._summaryCellUidList = nil}

  var inverseConcurrentCellMap: TSP_Reference {
    get {return _inverseConcurrentCellMap ?? TSP_Reference()}
    set {_inverseConcurrentCellMap = newValue}
  }
  /// Returns true if `inverseConcurrentCellMap` has been explicitly set.
  var hasInverseConcurrentCellMap: Bool {return self._inverseConcurrentCellMap != nil}
  /// Clears the value of `inverseConcurrentCellMap`. Subsequent reads from it will return its default value.
  mutating func clearInverseConcurrentCellMap() {self._inverseConcurrentCellMap = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _updateBorderVisibility: Bool? = nil
  fileprivate var _invalidateComments: Bool? = nil
  fileprivate var _invalidateCommentsValid: Bool? = nil
  fileprivate var _cellUidRegion: TST_CellUIDRegionArchive? = nil
  fileprivate var _summaryCellUidList: TST_CellUIDListArchive? = nil
  fileprivate var _inverseConcurrentCellMap: TSP_Reference? = nil
}

struct TST_CommandDeleteCellContentsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var cellUidList: TST_CellUIDListArchive {
    get {return _cellUidList ?? TST_CellUIDListArchive()}
    set {_cellUidList = newValue}
  }
  /// Returns true if `cellUidList` has been explicitly set.
  var hasCellUidList: Bool {return self._cellUidList != nil}
  /// Clears the value of `cellUidList`. Subsequent reads from it will return its default value.
  mutating func clearCellUidList() {self._cellUidList = nil}

  var inverseCellDiffMap: TSP_Reference {
    get {return _inverseCellDiffMap ?? TSP_Reference()}
    set {_inverseCellDiffMap = newValue}
  }
  /// Returns true if `inverseCellDiffMap` has been explicitly set.
  var hasInverseCellDiffMap: Bool {return self._inverseCellDiffMap != nil}
  /// Clears the value of `inverseCellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearInverseCellDiffMap() {self._inverseCellDiffMap = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _cellUidList: TST_CellUIDListArchive? = nil
  fileprivate var _inverseCellDiffMap: TSP_Reference? = nil
}

struct TST_CommandMutateCellFormatArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var cellUidList: TST_CellUIDListArchive {
    get {return _cellUidList ?? TST_CellUIDListArchive()}
    set {_cellUidList = newValue}
  }
  /// Returns true if `cellUidList` has been explicitly set.
  var hasCellUidList: Bool {return self._cellUidList != nil}
  /// Clears the value of `cellUidList`. Subsequent reads from it will return its default value.
  mutating func clearCellUidList() {self._cellUidList = nil}

  var inverseCellDiffMap: TSP_Reference {
    get {return _inverseCellDiffMap ?? TSP_Reference()}
    set {_inverseCellDiffMap = newValue}
  }
  /// Returns true if `inverseCellDiffMap` has been explicitly set.
  var hasInverseCellDiffMap: Bool {return self._inverseCellDiffMap != nil}
  /// Clears the value of `inverseCellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearInverseCellDiffMap() {self._inverseCellDiffMap = nil}

  var wholeFormatDiffMap: TSP_Reference {
    get {return _wholeFormatDiffMap ?? TSP_Reference()}
    set {_wholeFormatDiffMap = newValue}
  }
  /// Returns true if `wholeFormatDiffMap` has been explicitly set.
  var hasWholeFormatDiffMap: Bool {return self._wholeFormatDiffMap != nil}
  /// Clears the value of `wholeFormatDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearWholeFormatDiffMap() {self._wholeFormatDiffMap = nil}

  var intendedFormatType: UInt32 {
    get {return _intendedFormatType ?? 0}
    set {_intendedFormatType = newValue}
  }
  /// Returns true if `intendedFormatType` has been explicitly set.
  var hasIntendedFormatType: Bool {return self._intendedFormatType != nil}
  /// Clears the value of `intendedFormatType`. Subsequent reads from it will return its default value.
  mutating func clearIntendedFormatType() {self._intendedFormatType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _cellUidList: TST_CellUIDListArchive? = nil
  fileprivate var _inverseCellDiffMap: TSP_Reference? = nil
  fileprivate var _wholeFormatDiffMap: TSP_Reference? = nil
  fileprivate var _intendedFormatType: UInt32? = nil
}

struct TST_CommandSetAutomaticDurationUnitsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_CommandMutateCellFormatArchive {
    get {return _super ?? TST_CommandMutateCellFormatArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var automaticUnits: Bool {
    get {return _automaticUnits ?? false}
    set {_automaticUnits = newValue}
  }
  /// Returns true if `automaticUnits` has been explicitly set.
  var hasAutomaticUnits: Bool {return self._automaticUnits != nil}
  /// Clears the value of `automaticUnits`. Subsequent reads from it will return its default value.
  mutating func clearAutomaticUnits() {self._automaticUnits = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_CommandMutateCellFormatArchive? = nil
  fileprivate var _automaticUnits: Bool? = nil
}

struct TST_CommandSetDurationStyleArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_CommandMutateCellFormatArchive {
    get {return _super ?? TST_CommandMutateCellFormatArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var durationStyle: UInt32 {
    get {return _durationStyle ?? 0}
    set {_durationStyle = newValue}
  }
  /// Returns true if `durationStyle` has been explicitly set.
  var hasDurationStyle: Bool {return self._durationStyle != nil}
  /// Clears the value of `durationStyle`. Subsequent reads from it will return its default value.
  mutating func clearDurationStyle() {self._durationStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_CommandMutateCellFormatArchive? = nil
  fileprivate var _durationStyle: UInt32? = nil
}

struct TST_CommandSetDurationUnitSmallestLargestArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_CommandMutateCellFormatArchive {
    get {return _super ?? TST_CommandMutateCellFormatArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var smallestUnit: UInt32 {
    get {return _smallestUnit ?? 0}
    set {_smallestUnit = newValue}
  }
  /// Returns true if `smallestUnit` has been explicitly set.
  var hasSmallestUnit: Bool {return self._smallestUnit != nil}
  /// Clears the value of `smallestUnit`. Subsequent reads from it will return its default value.
  mutating func clearSmallestUnit() {self._smallestUnit = nil}

  var largestUnit: UInt32 {
    get {return _largestUnit ?? 0}
    set {_largestUnit = newValue}
  }
  /// Returns true if `largestUnit` has been explicitly set.
  var hasLargestUnit: Bool {return self._largestUnit != nil}
  /// Clears the value of `largestUnit`. Subsequent reads from it will return its default value.
  mutating func clearLargestUnit() {self._largestUnit = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_CommandMutateCellFormatArchive? = nil
  fileprivate var _smallestUnit: UInt32? = nil
  fileprivate var _largestUnit: UInt32? = nil
}

struct TST_CommandReplaceCustomFormatArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var undoDiffMap: TSP_Reference {
    get {return _undoDiffMap ?? TSP_Reference()}
    set {_undoDiffMap = newValue}
  }
  /// Returns true if `undoDiffMap` has been explicitly set.
  var hasUndoDiffMap: Bool {return self._undoDiffMap != nil}
  /// Clears the value of `undoDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearUndoDiffMap() {self._undoDiffMap = nil}

  var commitDiffMap: TSP_Reference {
    get {return _commitDiffMap ?? TSP_Reference()}
    set {_commitDiffMap = newValue}
  }
  /// Returns true if `commitDiffMap` has been explicitly set.
  var hasCommitDiffMap: Bool {return self._commitDiffMap != nil}
  /// Clears the value of `commitDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearCommitDiffMap() {self._commitDiffMap = nil}

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _undoDiffMap: TSP_Reference? = nil
  fileprivate var _commitDiffMap: TSP_Reference? = nil
  fileprivate var _super: TST_TableCommandArchive? = nil
}

struct TST_CommandMoveCellsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var dstTableInfoIDPath: TSP_UUIDPath {
    get {return _dstTableInfoIDPath ?? TSP_UUIDPath()}
    set {_dstTableInfoIDPath = newValue}
  }
  /// Returns true if `dstTableInfoIDPath` has been explicitly set.
  var hasDstTableInfoIDPath: Bool {return self._dstTableInfoIDPath != nil}
  /// Clears the value of `dstTableInfoIDPath`. Subsequent reads from it will return its default value.
  mutating func clearDstTableInfoIDPath() {self._dstTableInfoIDPath = nil}

  var srcUidRange: TSP_UUIDRectArchive {
    get {return _srcUidRange ?? TSP_UUIDRectArchive()}
    set {_srcUidRange = newValue}
  }
  /// Returns true if `srcUidRange` has been explicitly set.
  var hasSrcUidRange: Bool {return self._srcUidRange != nil}
  /// Clears the value of `srcUidRange`. Subsequent reads from it will return its default value.
  mutating func clearSrcUidRange() {self._srcUidRange = nil}

  var dstUidRange: TSP_UUIDRectArchive {
    get {return _dstUidRange ?? TSP_UUIDRectArchive()}
    set {_dstUidRange = newValue}
  }
  /// Returns true if `dstUidRange` has been explicitly set.
  var hasDstUidRange: Bool {return self._dstUidRange != nil}
  /// Clears the value of `dstUidRange`. Subsequent reads from it will return its default value.
  mutating func clearDstUidRange() {self._dstUidRange = nil}

  var tableDimension: TST_TableDimensionArchive {
    get {return _tableDimension ?? .dimensionRow}
    set {_tableDimension = newValue}
  }
  /// Returns true if `tableDimension` has been explicitly set.
  var hasTableDimension: Bool {return self._tableDimension != nil}
  /// Clears the value of `tableDimension`. Subsequent reads from it will return its default value.
  mutating func clearTableDimension() {self._tableDimension = nil}

  var srcCellMap: TSP_Reference {
    get {return _srcCellMap ?? TSP_Reference()}
    set {_srcCellMap = newValue}
  }
  /// Returns true if `srcCellMap` has been explicitly set.
  var hasSrcCellMap: Bool {return self._srcCellMap != nil}
  /// Clears the value of `srcCellMap`. Subsequent reads from it will return its default value.
  mutating func clearSrcCellMap() {self._srcCellMap = nil}

  var dstCellMap: TSP_Reference {
    get {return _dstCellMap ?? TSP_Reference()}
    set {_dstCellMap = newValue}
  }
  /// Returns true if `dstCellMap` has been explicitly set.
  var hasDstCellMap: Bool {return self._dstCellMap != nil}
  /// Clears the value of `dstCellMap`. Subsequent reads from it will return its default value.
  mutating func clearDstCellMap() {self._dstCellMap = nil}

  var dstCellStylesContainer: TSP_Reference {
    get {return _dstCellStylesContainer ?? TSP_Reference()}
    set {_dstCellStylesContainer = newValue}
  }
  /// Returns true if `dstCellStylesContainer` has been explicitly set.
  var hasDstCellStylesContainer: Bool {return self._dstCellStylesContainer != nil}
  /// Clears the value of `dstCellStylesContainer`. Subsequent reads from it will return its default value.
  mutating func clearDstCellStylesContainer() {self._dstCellStylesContainer = nil}

  var srcUndoCellMap: TSP_Reference {
    get {return _srcUndoCellMap ?? TSP_Reference()}
    set {_srcUndoCellMap = newValue}
  }
  /// Returns true if `srcUndoCellMap` has been explicitly set.
  var hasSrcUndoCellMap: Bool {return self._srcUndoCellMap != nil}
  /// Clears the value of `srcUndoCellMap`. Subsequent reads from it will return its default value.
  mutating func clearSrcUndoCellMap() {self._srcUndoCellMap = nil}

  var dstUndoCellMap: TSP_Reference {
    get {return _dstUndoCellMap ?? TSP_Reference()}
    set {_dstUndoCellMap = newValue}
  }
  /// Returns true if `dstUndoCellMap` has been explicitly set.
  var hasDstUndoCellMap: Bool {return self._dstUndoCellMap != nil}
  /// Clears the value of `dstUndoCellMap`. Subsequent reads from it will return its default value.
  mutating func clearDstUndoCellMap() {self._dstUndoCellMap = nil}

  var dstMergeOwnerRollbackIndex: UInt32 {
    get {return _dstMergeOwnerRollbackIndex ?? 0}
    set {_dstMergeOwnerRollbackIndex = newValue}
  }
  /// Returns true if `dstMergeOwnerRollbackIndex` has been explicitly set.
  var hasDstMergeOwnerRollbackIndex: Bool {return self._dstMergeOwnerRollbackIndex != nil}
  /// Clears the value of `dstMergeOwnerRollbackIndex`. Subsequent reads from it will return its default value.
  mutating func clearDstMergeOwnerRollbackIndex() {self._dstMergeOwnerRollbackIndex = nil}

  var formulaRewriteCommands: [TSP_Reference] = []

  var mergeActionToRestore: TST_MergeOperationArchive {
    get {return _mergeActionToRestore ?? TST_MergeOperationArchive()}
    set {_mergeActionToRestore = newValue}
  }
  /// Returns true if `mergeActionToRestore` has been explicitly set.
  var hasMergeActionToRestore: Bool {return self._mergeActionToRestore != nil}
  /// Clears the value of `mergeActionToRestore`. Subsequent reads from it will return its default value.
  mutating func clearMergeActionToRestore() {self._mergeActionToRestore = nil}

  var commentCellUidsToRestore: TST_CellUIDListArchive {
    get {return _commentCellUidsToRestore ?? TST_CellUIDListArchive()}
    set {_commentCellUidsToRestore = newValue}
  }
  /// Returns true if `commentCellUidsToRestore` has been explicitly set.
  var hasCommentCellUidsToRestore: Bool {return self._commentCellUidsToRestore != nil}
  /// Clears the value of `commentCellUidsToRestore`. Subsequent reads from it will return its default value.
  mutating func clearCommentCellUidsToRestore() {self._commentCellUidsToRestore = nil}

  var commentStoragesToRestore: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _dstTableInfoIDPath: TSP_UUIDPath? = nil
  fileprivate var _srcUidRange: TSP_UUIDRectArchive? = nil
  fileprivate var _dstUidRange: TSP_UUIDRectArchive? = nil
  fileprivate var _tableDimension: TST_TableDimensionArchive? = nil
  fileprivate var _srcCellMap: TSP_Reference? = nil
  fileprivate var _dstCellMap: TSP_Reference? = nil
  fileprivate var _dstCellStylesContainer: TSP_Reference? = nil
  fileprivate var _srcUndoCellMap: TSP_Reference? = nil
  fileprivate var _dstUndoCellMap: TSP_Reference? = nil
  fileprivate var _dstMergeOwnerRollbackIndex: UInt32? = nil
  fileprivate var _mergeActionToRestore: TST_MergeOperationArchive? = nil
  fileprivate var _commentCellUidsToRestore: TST_CellUIDListArchive? = nil
}

struct TST_ColumnRowMetadataArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var size: Double {
    get {return _size ?? 0}
    set {_size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  var hasSize: Bool {return self._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  mutating func clearSize() {self._size = nil}

  var hidingAction: UInt32 {
    get {return _hidingAction ?? 0}
    set {_hidingAction = newValue}
  }
  /// Returns true if `hidingAction` has been explicitly set.
  var hasHidingAction: Bool {return self._hidingAction != nil}
  /// Clears the value of `hidingAction`. Subsequent reads from it will return its default value.
  mutating func clearHidingAction() {self._hidingAction = nil}

  var cellStyle: TSP_Reference {
    get {return _cellStyle ?? TSP_Reference()}
    set {_cellStyle = newValue}
  }
  /// Returns true if `cellStyle` has been explicitly set.
  var hasCellStyle: Bool {return self._cellStyle != nil}
  /// Clears the value of `cellStyle`. Subsequent reads from it will return its default value.
  mutating func clearCellStyle() {self._cellStyle = nil}

  var textStyle: TSP_Reference {
    get {return _textStyle ?? TSP_Reference()}
    set {_textStyle = newValue}
  }
  /// Returns true if `textStyle` has been explicitly set.
  var hasTextStyle: Bool {return self._textStyle != nil}
  /// Clears the value of `textStyle`. Subsequent reads from it will return its default value.
  mutating func clearTextStyle() {self._textStyle = nil}

  var uuid: TSP_UUID {
    get {return _uuid ?? TSP_UUID()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _size: Double? = nil
  fileprivate var _hidingAction: UInt32? = nil
  fileprivate var _cellStyle: TSP_Reference? = nil
  fileprivate var _textStyle: TSP_Reference? = nil
  fileprivate var _uuid: TSP_UUID? = nil
}

struct TST_CommandInsertColumnsOrRowsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var bundle: TST_ColumnRowBundleArchive {
    get {return _bundle ?? TST_ColumnRowBundleArchive()}
    set {_bundle = newValue}
  }
  /// Returns true if `bundle` has been explicitly set.
  var hasBundle: Bool {return self._bundle != nil}
  /// Clears the value of `bundle`. Subsequent reads from it will return its default value.
  mutating func clearBundle() {self._bundle = nil}

  var cellMap: TSP_Reference {
    get {return _cellMap ?? TSP_Reference()}
    set {_cellMap = newValue}
  }
  /// Returns true if `cellMap` has been explicitly set.
  var hasCellMap: Bool {return self._cellMap != nil}
  /// Clears the value of `cellMap`. Subsequent reads from it will return its default value.
  mutating func clearCellMap() {self._cellMap = nil}

  var undoCommands: TSP_Reference {
    get {return _undoCommands ?? TSP_Reference()}
    set {_undoCommands = newValue}
  }
  /// Returns true if `undoCommands` has been explicitly set.
  var hasUndoCommands: Bool {return self._undoCommands != nil}
  /// Clears the value of `undoCommands`. Subsequent reads from it will return its default value.
  mutating func clearUndoCommands() {self._undoCommands = nil}

  var undoCellMap: TSP_Reference {
    get {return _undoCellMap ?? TSP_Reference()}
    set {_undoCellMap = newValue}
  }
  /// Returns true if `undoCellMap` has been explicitly set.
  var hasUndoCellMap: Bool {return self._undoCellMap != nil}
  /// Clears the value of `undoCellMap`. Subsequent reads from it will return its default value.
  mutating func clearUndoCellMap() {self._undoCellMap = nil}

  var sortOrder: TST_TableSortOrderUIDArchive {
    get {return _sortOrder ?? TST_TableSortOrderUIDArchive()}
    set {_sortOrder = newValue}
  }
  /// Returns true if `sortOrder` has been explicitly set.
  var hasSortOrder: Bool {return self._sortOrder != nil}
  /// Clears the value of `sortOrder`. Subsequent reads from it will return its default value.
  mutating func clearSortOrder() {self._sortOrder = nil}

  var filterSet: TSP_Reference {
    get {return _filterSet ?? TSP_Reference()}
    set {_filterSet = newValue}
  }
  /// Returns true if `filterSet` has been explicitly set.
  var hasFilterSet: Bool {return self._filterSet != nil}
  /// Clears the value of `filterSet`. Subsequent reads from it will return its default value.
  mutating func clearFilterSet() {self._filterSet = nil}

  var shouldEdgeExpandFormulaRanges: Bool {
    get {return _shouldEdgeExpandFormulaRanges ?? false}
    set {_shouldEdgeExpandFormulaRanges = newValue}
  }
  /// Returns true if `shouldEdgeExpandFormulaRanges` has been explicitly set.
  var hasShouldEdgeExpandFormulaRanges: Bool {return self._shouldEdgeExpandFormulaRanges != nil}
  /// Clears the value of `shouldEdgeExpandFormulaRanges`. Subsequent reads from it will return its default value.
  mutating func clearShouldEdgeExpandFormulaRanges() {self._shouldEdgeExpandFormulaRanges = nil}

  var wasCategorized: Bool {
    get {return _wasCategorized ?? false}
    set {_wasCategorized = newValue}
  }
  /// Returns true if `wasCategorized` has been explicitly set.
  var hasWasCategorized: Bool {return self._wasCategorized != nil}
  /// Clears the value of `wasCategorized`. Subsequent reads from it will return its default value.
  mutating func clearWasCategorized() {self._wasCategorized = nil}

  var undoOrder: [TSP_UUID] = []

  var srcRowColumnUid: TSP_UUID {
    get {return _srcRowColumnUid ?? TSP_UUID()}
    set {_srcRowColumnUid = newValue}
  }
  /// Returns true if `srcRowColumnUid` has been explicitly set.
  var hasSrcRowColumnUid: Bool {return self._srcRowColumnUid != nil}
  /// Clears the value of `srcRowColumnUid`. Subsequent reads from it will return its default value.
  mutating func clearSrcRowColumnUid() {self._srcRowColumnUid = nil}

  var oppRowColumnUid: TSP_UUID {
    get {return _oppRowColumnUid ?? TSP_UUID()}
    set {_oppRowColumnUid = newValue}
  }
  /// Returns true if `oppRowColumnUid` has been explicitly set.
  var hasOppRowColumnUid: Bool {return self._oppRowColumnUid != nil}
  /// Clears the value of `oppRowColumnUid`. Subsequent reads from it will return its default value.
  mutating func clearOppRowColumnUid() {self._oppRowColumnUid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _bundle: TST_ColumnRowBundleArchive? = nil
  fileprivate var _cellMap: TSP_Reference? = nil
  fileprivate var _undoCommands: TSP_Reference? = nil
  fileprivate var _undoCellMap: TSP_Reference? = nil
  fileprivate var _sortOrder: TST_TableSortOrderUIDArchive? = nil
  fileprivate var _filterSet: TSP_Reference? = nil
  fileprivate var _shouldEdgeExpandFormulaRanges: Bool? = nil
  fileprivate var _wasCategorized: Bool? = nil
  fileprivate var _srcRowColumnUid: TSP_UUID? = nil
  fileprivate var _oppRowColumnUid: TSP_UUID? = nil
}

struct TST_ColumnRowBundleArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isRow: Bool {
    get {return _isRow ?? false}
    set {_isRow = newValue}
  }
  /// Returns true if `isRow` has been explicitly set.
  var hasIsRow: Bool {return self._isRow != nil}
  /// Clears the value of `isRow`. Subsequent reads from it will return its default value.
  mutating func clearIsRow() {self._isRow = nil}

  var viewUidList: [TSP_UUID] = []

  var viewTypeList: [TST_ColumnRowTypeEnum] = []

  var baseUidList: [TSP_UUID] = []

  var baseTypeList: [TST_ColumnRowTypeEnum] = []

  var categoryOrderUidList: [TSP_UUID] = []

  var categoryOrderTypeList: [TST_ColumnRowTypeEnum] = []

  var metadataList: [TST_ColumnRowMetadataArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _isRow: Bool? = nil
}

struct TST_CommandRemoveColumnsOrRowsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var bundle: TST_ColumnRowBundleArchive {
    get {return _bundle ?? TST_ColumnRowBundleArchive()}
    set {_bundle = newValue}
  }
  /// Returns true if `bundle` has been explicitly set.
  var hasBundle: Bool {return self._bundle != nil}
  /// Clears the value of `bundle`. Subsequent reads from it will return its default value.
  mutating func clearBundle() {self._bundle = nil}

  var cellMap: TSP_Reference {
    get {return _cellMap ?? TSP_Reference()}
    set {_cellMap = newValue}
  }
  /// Returns true if `cellMap` has been explicitly set.
  var hasCellMap: Bool {return self._cellMap != nil}
  /// Clears the value of `cellMap`. Subsequent reads from it will return its default value.
  mutating func clearCellMap() {self._cellMap = nil}

  var undoCellMap: TSP_Reference {
    get {return _undoCellMap ?? TSP_Reference()}
    set {_undoCellMap = newValue}
  }
  /// Returns true if `undoCellMap` has been explicitly set.
  var hasUndoCellMap: Bool {return self._undoCellMap != nil}
  /// Clears the value of `undoCellMap`. Subsequent reads from it will return its default value.
  mutating func clearUndoCellMap() {self._undoCellMap = nil}

  var undoFilterSet: TSP_Reference {
    get {return _undoFilterSet ?? TSP_Reference()}
    set {_undoFilterSet = newValue}
  }
  /// Returns true if `undoFilterSet` has been explicitly set.
  var hasUndoFilterSet: Bool {return self._undoFilterSet != nil}
  /// Clears the value of `undoFilterSet`. Subsequent reads from it will return its default value.
  mutating func clearUndoFilterSet() {self._undoFilterSet = nil}

  var undoSortOrder: TST_TableSortOrderUIDArchive {
    get {return _undoSortOrder ?? TST_TableSortOrderUIDArchive()}
    set {_undoSortOrder = newValue}
  }
  /// Returns true if `undoSortOrder` has been explicitly set.
  var hasUndoSortOrder: Bool {return self._undoSortOrder != nil}
  /// Clears the value of `undoSortOrder`. Subsequent reads from it will return its default value.
  mutating func clearUndoSortOrder() {self._undoSortOrder = nil}

  var formulaRewriteCommandForUndo: TSP_Reference {
    get {return _formulaRewriteCommandForUndo ?? TSP_Reference()}
    set {_formulaRewriteCommandForUndo = newValue}
  }
  /// Returns true if `formulaRewriteCommandForUndo` has been explicitly set.
  var hasFormulaRewriteCommandForUndo: Bool {return self._formulaRewriteCommandForUndo != nil}
  /// Clears the value of `formulaRewriteCommandForUndo`. Subsequent reads from it will return its default value.
  mutating func clearFormulaRewriteCommandForUndo() {self._formulaRewriteCommandForUndo = nil}

  var inverseShouldEdgeExpandFormulaRanges: Bool {
    get {return _inverseShouldEdgeExpandFormulaRanges ?? false}
    set {_inverseShouldEdgeExpandFormulaRanges = newValue}
  }
  /// Returns true if `inverseShouldEdgeExpandFormulaRanges` has been explicitly set.
  var hasInverseShouldEdgeExpandFormulaRanges: Bool {return self._inverseShouldEdgeExpandFormulaRanges != nil}
  /// Clears the value of `inverseShouldEdgeExpandFormulaRanges`. Subsequent reads from it will return its default value.
  mutating func clearInverseShouldEdgeExpandFormulaRanges() {self._inverseShouldEdgeExpandFormulaRanges = nil}

  var undoOrder: [TSP_UUID] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _bundle: TST_ColumnRowBundleArchive? = nil
  fileprivate var _cellMap: TSP_Reference? = nil
  fileprivate var _undoCellMap: TSP_Reference? = nil
  fileprivate var _undoFilterSet: TSP_Reference? = nil
  fileprivate var _undoSortOrder: TST_TableSortOrderUIDArchive? = nil
  fileprivate var _formulaRewriteCommandForUndo: TSP_Reference? = nil
  fileprivate var _inverseShouldEdgeExpandFormulaRanges: Bool? = nil
}

struct TST_CommandRowColumnRangeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var uids: [TSP_UUID] = []

  var isRow: Bool {
    get {return _isRow ?? false}
    set {_isRow = newValue}
  }
  /// Returns true if `isRow` has been explicitly set.
  var hasIsRow: Bool {return self._isRow != nil}
  /// Clears the value of `isRow`. Subsequent reads from it will return its default value.
  mutating func clearIsRow() {self._isRow = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _isRow: Bool? = nil
}

struct TST_CommandResizeColumnOrRowArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_CommandRowColumnRangeArchive {
    get {return _super ?? TST_CommandRowColumnRangeArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var sizes: [Float] = []

  var sizesForUndo: [Float] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_CommandRowColumnRangeArchive? = nil
}

struct TST_CommandCategoryResizeColumnOrRowArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var categoryRowSizes: [Float] = []

  var categoryRowSizesForUndo: [Float] = []

  var categoryLabelRowSizes: [Float] = []

  var categoryLabelRowSizesForUndo: [Float] = []

  var categoryColumnSize: Double {
    get {return _categoryColumnSize ?? 0}
    set {_categoryColumnSize = newValue}
  }
  /// Returns true if `categoryColumnSize` has been explicitly set.
  var hasCategoryColumnSize: Bool {return self._categoryColumnSize != nil}
  /// Clears the value of `categoryColumnSize`. Subsequent reads from it will return its default value.
  mutating func clearCategoryColumnSize() {self._categoryColumnSize = nil}

  var categoryColumnSizeForUndo: Double {
    get {return _categoryColumnSizeForUndo ?? 0}
    set {_categoryColumnSizeForUndo = newValue}
  }
  /// Returns true if `categoryColumnSizeForUndo` has been explicitly set.
  var hasCategoryColumnSizeForUndo: Bool {return self._categoryColumnSizeForUndo != nil}
  /// Clears the value of `categoryColumnSizeForUndo`. Subsequent reads from it will return its default value.
  mutating func clearCategoryColumnSizeForUndo() {self._categoryColumnSizeForUndo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _categoryColumnSize: Double? = nil
  fileprivate var _categoryColumnSizeForUndo: Double? = nil
}

struct TST_CommandHideShowArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_CommandRowColumnRangeArchive {
    get {return _super ?? TST_CommandRowColumnRangeArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var hideShowAction: TST_HideShowActionArchive {
    get {return _hideShowAction ?? .hideShowActionHide}
    set {_hideShowAction = newValue}
  }
  /// Returns true if `hideShowAction` has been explicitly set.
  var hasHideShowAction: Bool {return self._hideShowAction != nil}
  /// Clears the value of `hideShowAction`. Subsequent reads from it will return its default value.
  mutating func clearHideShowAction() {self._hideShowAction = nil}

  var hidingAction: UInt32 {
    get {return _hidingAction ?? 0}
    set {_hidingAction = newValue}
  }
  /// Returns true if `hidingAction` has been explicitly set.
  var hasHidingAction: Bool {return self._hidingAction != nil}
  /// Clears the value of `hidingAction`. Subsequent reads from it will return its default value.
  mutating func clearHidingAction() {self._hidingAction = nil}

  var hideShowActionForUndo: [TST_HideShowActionArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_CommandRowColumnRangeArchive? = nil
  fileprivate var _hideShowAction: TST_HideShowActionArchive? = nil
  fileprivate var _hidingAction: UInt32? = nil
}

struct TST_CommandTextPreflightInsertCellArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var coalescedTextcommand: TSP_Reference {
    get {return _coalescedTextcommand ?? TSP_Reference()}
    set {_coalescedTextcommand = newValue}
  }
  /// Returns true if `coalescedTextcommand` has been explicitly set.
  var hasCoalescedTextcommand: Bool {return self._coalescedTextcommand != nil}
  /// Clears the value of `coalescedTextcommand`. Subsequent reads from it will return its default value.
  mutating func clearCoalescedTextcommand() {self._coalescedTextcommand = nil}

  var postflightcommand: TSP_Reference {
    get {return _postflightcommand ?? TSP_Reference()}
    set {_postflightcommand = newValue}
  }
  /// Returns true if `postflightcommand` has been explicitly set.
  var hasPostflightcommand: Bool {return self._postflightcommand != nil}
  /// Clears the value of `postflightcommand`. Subsequent reads from it will return its default value.
  mutating func clearPostflightcommand() {self._postflightcommand = nil}

  var groupedWithPostflight: Bool {
    get {return _groupedWithPostflight ?? false}
    set {_groupedWithPostflight = newValue}
  }
  /// Returns true if `groupedWithPostflight` has been explicitly set.
  var hasGroupedWithPostflight: Bool {return self._groupedWithPostflight != nil}
  /// Clears the value of `groupedWithPostflight`. Subsequent reads from it will return its default value.
  mutating func clearGroupedWithPostflight() {self._groupedWithPostflight = nil}

  var editingCell: TST_Cell {
    get {return _editingCell ?? TST_Cell()}
    set {_editingCell = newValue}
  }
  /// Returns true if `editingCell` has been explicitly set.
  var hasEditingCell: Bool {return self._editingCell != nil}
  /// Clears the value of `editingCell`. Subsequent reads from it will return its default value.
  mutating func clearEditingCell() {self._editingCell = nil}

  var editingStorage: TSP_Reference {
    get {return _editingStorage ?? TSP_Reference()}
    set {_editingStorage = newValue}
  }
  /// Returns true if `editingStorage` has been explicitly set.
  var hasEditingStorage: Bool {return self._editingStorage != nil}
  /// Clears the value of `editingStorage`. Subsequent reads from it will return its default value.
  mutating func clearEditingStorage() {self._editingStorage = nil}

  var lastColumnHitByTap: UInt32 {
    get {return _lastColumnHitByTap ?? 0}
    set {_lastColumnHitByTap = newValue}
  }
  /// Returns true if `lastColumnHitByTap` has been explicitly set.
  var hasLastColumnHitByTap: Bool {return self._lastColumnHitByTap != nil}
  /// Clears the value of `lastColumnHitByTap`. Subsequent reads from it will return its default value.
  mutating func clearLastColumnHitByTap() {self._lastColumnHitByTap = nil}

  var cellUid: TSP_UUIDCoordArchive {
    get {return _cellUid ?? TSP_UUIDCoordArchive()}
    set {_cellUid = newValue}
  }
  /// Returns true if `cellUid` has been explicitly set.
  var hasCellUid: Bool {return self._cellUid != nil}
  /// Clears the value of `cellUid`. Subsequent reads from it will return its default value.
  mutating func clearCellUid() {self._cellUid = nil}

  var archivedInitialSelectionPath: TSK_SelectionPathArchive {
    get {return _archivedInitialSelectionPath ?? TSK_SelectionPathArchive()}
    set {_archivedInitialSelectionPath = newValue}
  }
  /// Returns true if `archivedInitialSelectionPath` has been explicitly set.
  var hasArchivedInitialSelectionPath: Bool {return self._archivedInitialSelectionPath != nil}
  /// Clears the value of `archivedInitialSelectionPath`. Subsequent reads from it will return its default value.
  mutating func clearArchivedInitialSelectionPath() {self._archivedInitialSelectionPath = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _coalescedTextcommand: TSP_Reference? = nil
  fileprivate var _postflightcommand: TSP_Reference? = nil
  fileprivate var _groupedWithPostflight: Bool? = nil
  fileprivate var _editingCell: TST_Cell? = nil
  fileprivate var _editingStorage: TSP_Reference? = nil
  fileprivate var _lastColumnHitByTap: UInt32? = nil
  fileprivate var _cellUid: TSP_UUIDCoordArchive? = nil
  fileprivate var _archivedInitialSelectionPath: TSK_SelectionPathArchive? = nil
}

struct TST_CommandPostflightSetCellArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var childcommandundo: TSP_Reference {
    get {return _childcommandundo ?? TSP_Reference()}
    set {_childcommandundo = newValue}
  }
  /// Returns true if `childcommandundo` has been explicitly set.
  var hasChildcommandundo: Bool {return self._childcommandundo != nil}
  /// Clears the value of `childcommandundo`. Subsequent reads from it will return its default value.
  mutating func clearChildcommandundo() {self._childcommandundo = nil}

  var editingCell: TST_Cell {
    get {return _editingCell ?? TST_Cell()}
    set {_editingCell = newValue}
  }
  /// Returns true if `editingCell` has been explicitly set.
  var hasEditingCell: Bool {return self._editingCell != nil}
  /// Clears the value of `editingCell`. Subsequent reads from it will return its default value.
  mutating func clearEditingCell() {self._editingCell = nil}

  var newCell: TST_Cell {
    get {return _newCell ?? TST_Cell()}
    set {_newCell = newValue}
  }
  /// Returns true if `newCell` has been explicitly set.
  var hasNewCell: Bool {return self._newCell != nil}
  /// Clears the value of `newCell`. Subsequent reads from it will return its default value.
  mutating func clearNewCell() {self._newCell = nil}

  var editingStorage: TSP_Reference {
    get {return _editingStorage ?? TSP_Reference()}
    set {_editingStorage = newValue}
  }
  /// Returns true if `editingStorage` has been explicitly set.
  var hasEditingStorage: Bool {return self._editingStorage != nil}
  /// Clears the value of `editingStorage`. Subsequent reads from it will return its default value.
  mutating func clearEditingStorage() {self._editingStorage = nil}

  var lastColumnHitByTap: UInt32 {
    get {return _lastColumnHitByTap ?? 0}
    set {_lastColumnHitByTap = newValue}
  }
  /// Returns true if `lastColumnHitByTap` has been explicitly set.
  var hasLastColumnHitByTap: Bool {return self._lastColumnHitByTap != nil}
  /// Clears the value of `lastColumnHitByTap`. Subsequent reads from it will return its default value.
  mutating func clearLastColumnHitByTap() {self._lastColumnHitByTap = nil}

  var cellUid: TSP_UUIDCoordArchive {
    get {return _cellUid ?? TSP_UUIDCoordArchive()}
    set {_cellUid = newValue}
  }
  /// Returns true if `cellUid` has been explicitly set.
  var hasCellUid: Bool {return self._cellUid != nil}
  /// Clears the value of `cellUid`. Subsequent reads from it will return its default value.
  mutating func clearCellUid() {self._cellUid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _childcommandundo: TSP_Reference? = nil
  fileprivate var _editingCell: TST_Cell? = nil
  fileprivate var _newCell: TST_Cell? = nil
  fileprivate var _editingStorage: TSP_Reference? = nil
  fileprivate var _lastColumnHitByTap: UInt32? = nil
  fileprivate var _cellUid: TSP_UUIDCoordArchive? = nil
}

struct TST_CommandChangeTableAreaForColumnOrRowArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_CommandRowColumnRangeArchive {
    get {return _super ?? TST_CommandRowColumnRangeArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var tableAreaTransition: TST_TableAreaTransition {
    get {return _tableAreaTransition ?? .headerRowToBody}
    set {_tableAreaTransition = newValue}
  }
  /// Returns true if `tableAreaTransition` has been explicitly set.
  var hasTableAreaTransition: Bool {return self._tableAreaTransition != nil}
  /// Clears the value of `tableAreaTransition`. Subsequent reads from it will return its default value.
  mutating func clearTableAreaTransition() {self._tableAreaTransition = nil}

  var cellDiffMap: TSP_Reference {
    get {return _cellDiffMap ?? TSP_Reference()}
    set {_cellDiffMap = newValue}
  }
  /// Returns true if `cellDiffMap` has been explicitly set.
  var hasCellDiffMap: Bool {return self._cellDiffMap != nil}
  /// Clears the value of `cellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearCellDiffMap() {self._cellDiffMap = nil}

  var undoCellDiffMap: TSP_Reference {
    get {return _undoCellDiffMap ?? TSP_Reference()}
    set {_undoCellDiffMap = newValue}
  }
  /// Returns true if `undoCellDiffMap` has been explicitly set.
  var hasUndoCellDiffMap: Bool {return self._undoCellDiffMap != nil}
  /// Clears the value of `undoCellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearUndoCellDiffMap() {self._undoCellDiffMap = nil}

  var undoCommands: TSP_Reference {
    get {return _undoCommands ?? TSP_Reference()}
    set {_undoCommands = newValue}
  }
  /// Returns true if `undoCommands` has been explicitly set.
  var hasUndoCommands: Bool {return self._undoCommands != nil}
  /// Clears the value of `undoCommands`. Subsequent reads from it will return its default value.
  mutating func clearUndoCommands() {self._undoCommands = nil}

  var actionString: String {
    get {return _actionString ?? String()}
    set {_actionString = newValue}
  }
  /// Returns true if `actionString` has been explicitly set.
  var hasActionString: Bool {return self._actionString != nil}
  /// Clears the value of `actionString`. Subsequent reads from it will return its default value.
  mutating func clearActionString() {self._actionString = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_CommandRowColumnRangeArchive? = nil
  fileprivate var _tableAreaTransition: TST_TableAreaTransition? = nil
  fileprivate var _cellDiffMap: TSP_Reference? = nil
  fileprivate var _undoCellDiffMap: TSP_Reference? = nil
  fileprivate var _undoCommands: TSP_Reference? = nil
  fileprivate var _actionString: String? = nil
}

struct TST_CommandSetPencilAnnotationsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var annotations: [TSP_Reference] = []

  var formulas: [TSCE_FormulaArchive] = []

  var formulaIndexes: [UInt64] = []

  var inverseFormulas: [TSCE_FormulaArchive] = []

  var inverseFormulaIndexes: [UInt64] = []

  var rollbackIndex: UInt64 {
    get {return _rollbackIndex ?? 0}
    set {_rollbackIndex = newValue}
  }
  /// Returns true if `rollbackIndex` has been explicitly set.
  var hasRollbackIndex: Bool {return self._rollbackIndex != nil}
  /// Clears the value of `rollbackIndex`. Subsequent reads from it will return its default value.
  mutating func clearRollbackIndex() {self._rollbackIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _rollbackIndex: UInt64? = nil
}

struct TST_CommandSetTableNameArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var newtablename: String {
    get {return _newtablename ?? String()}
    set {_newtablename = newValue}
  }
  /// Returns true if `newtablename` has been explicitly set.
  var hasNewtablename: Bool {return self._newtablename != nil}
  /// Clears the value of `newtablename`. Subsequent reads from it will return its default value.
  mutating func clearNewtablename() {self._newtablename = nil}

  var oldtablename: String {
    get {return _oldtablename ?? String()}
    set {_oldtablename = newValue}
  }
  /// Returns true if `oldtablename` has been explicitly set.
  var hasOldtablename: Bool {return self._oldtablename != nil}
  /// Clears the value of `oldtablename`. Subsequent reads from it will return its default value.
  mutating func clearOldtablename() {self._oldtablename = nil}

  var newstyle: TSP_Reference {
    get {return _newstyle ?? TSP_Reference()}
    set {_newstyle = newValue}
  }
  /// Returns true if `newstyle` has been explicitly set.
  var hasNewstyle: Bool {return self._newstyle != nil}
  /// Clears the value of `newstyle`. Subsequent reads from it will return its default value.
  mutating func clearNewstyle() {self._newstyle = nil}

  var oldstyle: TSP_Reference {
    get {return _oldstyle ?? TSP_Reference()}
    set {_oldstyle = newValue}
  }
  /// Returns true if `oldstyle` has been explicitly set.
  var hasOldstyle: Bool {return self._oldstyle != nil}
  /// Clears the value of `oldstyle`. Subsequent reads from it will return its default value.
  mutating func clearOldstyle() {self._oldstyle = nil}

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldShapeStyle: TSP_Reference {
    get {return _oldShapeStyle ?? TSP_Reference()}
    set {_oldShapeStyle = newValue}
  }
  /// Returns true if `oldShapeStyle` has been explicitly set.
  var hasOldShapeStyle: Bool {return self._oldShapeStyle != nil}
  /// Clears the value of `oldShapeStyle`. Subsequent reads from it will return its default value.
  mutating func clearOldShapeStyle() {self._oldShapeStyle = nil}

  var newShapeStyle: TSP_Reference {
    get {return _newShapeStyle ?? TSP_Reference()}
    set {_newShapeStyle = newValue}
  }
  /// Returns true if `newShapeStyle` has been explicitly set.
  var hasNewShapeStyle: Bool {return self._newShapeStyle != nil}
  /// Clears the value of `newShapeStyle`. Subsequent reads from it will return its default value.
  mutating func clearNewShapeStyle() {self._newShapeStyle = nil}

  var oldTableNameBorderEnabled: Bool {
    get {return _oldTableNameBorderEnabled ?? false}
    set {_oldTableNameBorderEnabled = newValue}
  }
  /// Returns true if `oldTableNameBorderEnabled` has been explicitly set.
  var hasOldTableNameBorderEnabled: Bool {return self._oldTableNameBorderEnabled != nil}
  /// Clears the value of `oldTableNameBorderEnabled`. Subsequent reads from it will return its default value.
  mutating func clearOldTableNameBorderEnabled() {self._oldTableNameBorderEnabled = nil}

  var newTableNameBorderEnabled: Bool {
    get {return _newTableNameBorderEnabled ?? false}
    set {_newTableNameBorderEnabled = newValue}
  }
  /// Returns true if `newTableNameBorderEnabled` has been explicitly set.
  var hasNewTableNameBorderEnabled: Bool {return self._newTableNameBorderEnabled != nil}
  /// Clears the value of `newTableNameBorderEnabled`. Subsequent reads from it will return its default value.
  mutating func clearNewTableNameBorderEnabled() {self._newTableNameBorderEnabled = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _newtablename: String? = nil
  fileprivate var _oldtablename: String? = nil
  fileprivate var _newstyle: TSP_Reference? = nil
  fileprivate var _oldstyle: TSP_Reference? = nil
  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _oldShapeStyle: TSP_Reference? = nil
  fileprivate var _newShapeStyle: TSP_Reference? = nil
  fileprivate var _oldTableNameBorderEnabled: Bool? = nil
  fileprivate var _newTableNameBorderEnabled: Bool? = nil
}

struct TST_CommandSetTableNameEnabledArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var tableNameEnabled: Bool {
    get {return _tableNameEnabled ?? false}
    set {_tableNameEnabled = newValue}
  }
  /// Returns true if `tableNameEnabled` has been explicitly set.
  var hasTableNameEnabled: Bool {return self._tableNameEnabled != nil}
  /// Clears the value of `tableNameEnabled`. Subsequent reads from it will return its default value.
  mutating func clearTableNameEnabled() {self._tableNameEnabled = nil}

  var prevTableNameEnabled: Bool {
    get {return _prevTableNameEnabled ?? false}
    set {_prevTableNameEnabled = newValue}
  }
  /// Returns true if `prevTableNameEnabled` has been explicitly set.
  var hasPrevTableNameEnabled: Bool {return self._prevTableNameEnabled != nil}
  /// Clears the value of `prevTableNameEnabled`. Subsequent reads from it will return its default value.
  mutating func clearPrevTableNameEnabled() {self._prevTableNameEnabled = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _tableNameEnabled: Bool? = nil
  fileprivate var _prevTableNameEnabled: Bool? = nil
}

struct TST_CommandSetTableFontSizeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var isIncrease: Bool {
    get {return _isIncrease ?? false}
    set {_isIncrease = newValue}
  }
  /// Returns true if `isIncrease` has been explicitly set.
  var hasIsIncrease: Bool {return self._isIncrease != nil}
  /// Clears the value of `isIncrease`. Subsequent reads from it will return its default value.
  mutating func clearIsIncrease() {self._isIncrease = nil}

  var fontSizeDiff: Int32 {
    get {return _fontSizeDiff ?? 0}
    set {_fontSizeDiff = newValue}
  }
  /// Returns true if `fontSizeDiff` has been explicitly set.
  var hasFontSizeDiff: Bool {return self._fontSizeDiff != nil}
  /// Clears the value of `fontSizeDiff`. Subsequent reads from it will return its default value.
  mutating func clearFontSizeDiff() {self._fontSizeDiff = nil}

  var fontSizeList: [Double] = []

  var inverseFontSizeList: [Double] = []

  var cellDiffMap: TSP_Reference {
    get {return _cellDiffMap ?? TSP_Reference()}
    set {_cellDiffMap = newValue}
  }
  /// Returns true if `cellDiffMap` has been explicitly set.
  var hasCellDiffMap: Bool {return self._cellDiffMap != nil}
  /// Clears the value of `cellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearCellDiffMap() {self._cellDiffMap = nil}

  var inverseCellDiffMap: TSP_Reference {
    get {return _inverseCellDiffMap ?? TSP_Reference()}
    set {_inverseCellDiffMap = newValue}
  }
  /// Returns true if `inverseCellDiffMap` has been explicitly set.
  var hasInverseCellDiffMap: Bool {return self._inverseCellDiffMap != nil}
  /// Clears the value of `inverseCellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearInverseCellDiffMap() {self._inverseCellDiffMap = nil}

  var stylesContainerRefreshDone: Bool {
    get {return _stylesContainerRefreshDone ?? false}
    set {_stylesContainerRefreshDone = newValue}
  }
  /// Returns true if `stylesContainerRefreshDone` has been explicitly set.
  var hasStylesContainerRefreshDone: Bool {return self._stylesContainerRefreshDone != nil}
  /// Clears the value of `stylesContainerRefreshDone`. Subsequent reads from it will return its default value.
  mutating func clearStylesContainerRefreshDone() {self._stylesContainerRefreshDone = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _isIncrease: Bool? = nil
  fileprivate var _fontSizeDiff: Int32? = nil
  fileprivate var _cellDiffMap: TSP_Reference? = nil
  fileprivate var _inverseCellDiffMap: TSP_Reference? = nil
  fileprivate var _stylesContainerRefreshDone: Bool? = nil
}

struct TST_CommandSetTableFontNameArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var fontName: String {
    get {return _fontName ?? String()}
    set {_fontName = newValue}
  }
  /// Returns true if `fontName` has been explicitly set.
  var hasFontName: Bool {return self._fontName != nil}
  /// Clears the value of `fontName`. Subsequent reads from it will return its default value.
  mutating func clearFontName() {self._fontName = nil}

  var preserveFace: Bool {
    get {return _preserveFace ?? false}
    set {_preserveFace = newValue}
  }
  /// Returns true if `preserveFace` has been explicitly set.
  var hasPreserveFace: Bool {return self._preserveFace != nil}
  /// Clears the value of `preserveFace`. Subsequent reads from it will return its default value.
  mutating func clearPreserveFace() {self._preserveFace = nil}

  var previousFontName: String {
    get {return _previousFontName ?? String()}
    set {_previousFontName = newValue}
  }
  /// Returns true if `previousFontName` has been explicitly set.
  var hasPreviousFontName: Bool {return self._previousFontName != nil}
  /// Clears the value of `previousFontName`. Subsequent reads from it will return its default value.
  mutating func clearPreviousFontName() {self._previousFontName = nil}

  var previousTableStyle: TSP_Reference {
    get {return _previousTableStyle ?? TSP_Reference()}
    set {_previousTableStyle = newValue}
  }
  /// Returns true if `previousTableStyle` has been explicitly set.
  var hasPreviousTableStyle: Bool {return self._previousTableStyle != nil}
  /// Clears the value of `previousTableStyle`. Subsequent reads from it will return its default value.
  mutating func clearPreviousTableStyle() {self._previousTableStyle = nil}

  var previousTextStyles: [TSP_Reference] = []

  var cellDiffMap: TSP_Reference {
    get {return _cellDiffMap ?? TSP_Reference()}
    set {_cellDiffMap = newValue}
  }
  /// Returns true if `cellDiffMap` has been explicitly set.
  var hasCellDiffMap: Bool {return self._cellDiffMap != nil}
  /// Clears the value of `cellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearCellDiffMap() {self._cellDiffMap = nil}

  var inverseCellDiffMap: TSP_Reference {
    get {return _inverseCellDiffMap ?? TSP_Reference()}
    set {_inverseCellDiffMap = newValue}
  }
  /// Returns true if `inverseCellDiffMap` has been explicitly set.
  var hasInverseCellDiffMap: Bool {return self._inverseCellDiffMap != nil}
  /// Clears the value of `inverseCellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearInverseCellDiffMap() {self._inverseCellDiffMap = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _fontName: String? = nil
  fileprivate var _preserveFace: Bool? = nil
  fileprivate var _previousFontName: String? = nil
  fileprivate var _previousTableStyle: TSP_Reference? = nil
  fileprivate var _cellDiffMap: TSP_Reference? = nil
  fileprivate var _inverseCellDiffMap: TSP_Reference? = nil
}

struct TST_CommandSetTableNameHeightArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldTableNameHeight: Double {
    get {return _oldTableNameHeight ?? 0}
    set {_oldTableNameHeight = newValue}
  }
  /// Returns true if `oldTableNameHeight` has been explicitly set.
  var hasOldTableNameHeight: Bool {return self._oldTableNameHeight != nil}
  /// Clears the value of `oldTableNameHeight`. Subsequent reads from it will return its default value.
  mutating func clearOldTableNameHeight() {self._oldTableNameHeight = nil}

  var newTableNameHeight: Double {
    get {return _newTableNameHeight ?? 0}
    set {_newTableNameHeight = newValue}
  }
  /// Returns true if `newTableNameHeight` has been explicitly set.
  var hasNewTableNameHeight: Bool {return self._newTableNameHeight != nil}
  /// Clears the value of `newTableNameHeight`. Subsequent reads from it will return its default value.
  mutating func clearNewTableNameHeight() {self._newTableNameHeight = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _oldTableNameHeight: Double? = nil
  fileprivate var _newTableNameHeight: Double? = nil
}

struct TST_CommandSetNowArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
}

struct TST_CommandSetWasCutArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var fromTableUid: TSP_UUID {
    get {return _fromTableUid ?? TSP_UUID()}
    set {_fromTableUid = newValue}
  }
  /// Returns true if `fromTableUid` has been explicitly set.
  var hasFromTableUid: Bool {return self._fromTableUid != nil}
  /// Clears the value of `fromTableUid`. Subsequent reads from it will return its default value.
  mutating func clearFromTableUid() {self._fromTableUid = nil}

  var prevFromTableUid: TSP_UUID {
    get {return _prevFromTableUid ?? TSP_UUID()}
    set {_prevFromTableUid = newValue}
  }
  /// Returns true if `prevFromTableUid` has been explicitly set.
  var hasPrevFromTableUid: Bool {return self._prevFromTableUid != nil}
  /// Clears the value of `prevFromTableUid`. Subsequent reads from it will return its default value.
  mutating func clearPrevFromTableUid() {self._prevFromTableUid = nil}

  var wasCut: Bool {
    get {return _wasCut ?? false}
    set {_wasCut = newValue}
  }
  /// Returns true if `wasCut` has been explicitly set.
  var hasWasCut: Bool {return self._wasCut != nil}
  /// Clears the value of `wasCut`. Subsequent reads from it will return its default value.
  mutating func clearWasCut() {self._wasCut = nil}

  var prevWasCut: Bool {
    get {return _prevWasCut ?? false}
    set {_prevWasCut = newValue}
  }
  /// Returns true if `prevWasCut` has been explicitly set.
  var hasPrevWasCut: Bool {return self._prevWasCut != nil}
  /// Clears the value of `prevWasCut`. Subsequent reads from it will return its default value.
  mutating func clearPrevWasCut() {self._prevWasCut = nil}

  var fromGroupByUid: TSP_UUID {
    get {return _fromGroupByUid ?? TSP_UUID()}
    set {_fromGroupByUid = newValue}
  }
  /// Returns true if `fromGroupByUid` has been explicitly set.
  var hasFromGroupByUid: Bool {return self._fromGroupByUid != nil}
  /// Clears the value of `fromGroupByUid`. Subsequent reads from it will return its default value.
  mutating func clearFromGroupByUid() {self._fromGroupByUid = nil}

  var prevFromGroupByUid: TSP_UUID {
    get {return _prevFromGroupByUid ?? TSP_UUID()}
    set {_prevFromGroupByUid = newValue}
  }
  /// Returns true if `prevFromGroupByUid` has been explicitly set.
  var hasPrevFromGroupByUid: Bool {return self._prevFromGroupByUid != nil}
  /// Clears the value of `prevFromGroupByUid`. Subsequent reads from it will return its default value.
  mutating func clearPrevFromGroupByUid() {self._prevFromGroupByUid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _fromTableUid: TSP_UUID? = nil
  fileprivate var _prevFromTableUid: TSP_UUID? = nil
  fileprivate var _wasCut: Bool? = nil
  fileprivate var _prevWasCut: Bool? = nil
  fileprivate var _fromGroupByUid: TSP_UUID? = nil
  fileprivate var _prevFromGroupByUid: TSP_UUID? = nil
}

struct TST_CommandStyleCellsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var formatProperties: TSP_ReferenceDictionary {
    get {return _formatProperties ?? TSP_ReferenceDictionary()}
    set {_formatProperties = newValue}
  }
  /// Returns true if `formatProperties` has been explicitly set.
  var hasFormatProperties: Bool {return self._formatProperties != nil}
  /// Clears the value of `formatProperties`. Subsequent reads from it will return its default value.
  mutating func clearFormatProperties() {self._formatProperties = nil}

  var selection: TST_SelectionArchive {
    get {return _selection ?? TST_SelectionArchive()}
    set {_selection = newValue}
  }
  /// Returns true if `selection` has been explicitly set.
  var hasSelection: Bool {return self._selection != nil}
  /// Clears the value of `selection`. Subsequent reads from it will return its default value.
  mutating func clearSelection() {self._selection = nil}

  var undoCellMap: TSP_Reference {
    get {return _undoCellMap ?? TSP_Reference()}
    set {_undoCellMap = newValue}
  }
  /// Returns true if `undoCellMap` has been explicitly set.
  var hasUndoCellMap: Bool {return self._undoCellMap != nil}
  /// Clears the value of `undoCellMap`. Subsequent reads from it will return its default value.
  mutating func clearUndoCellMap() {self._undoCellMap = nil}

  var redoCellMap: TSP_Reference {
    get {return _redoCellMap ?? TSP_Reference()}
    set {_redoCellMap = newValue}
  }
  /// Returns true if `redoCellMap` has been explicitly set.
  var hasRedoCellMap: Bool {return self._redoCellMap != nil}
  /// Clears the value of `redoCellMap`. Subsequent reads from it will return its default value.
  mutating func clearRedoCellMap() {self._redoCellMap = nil}

  var textUndo: TSP_Reference {
    get {return _textUndo ?? TSP_Reference()}
    set {_textUndo = newValue}
  }
  /// Returns true if `textUndo` has been explicitly set.
  var hasTextUndo: Bool {return self._textUndo != nil}
  /// Clears the value of `textUndo`. Subsequent reads from it will return its default value.
  mutating func clearTextUndo() {self._textUndo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _formatProperties: TSP_ReferenceDictionary? = nil
  fileprivate var _selection: TST_SelectionArchive? = nil
  fileprivate var _undoCellMap: TSP_Reference? = nil
  fileprivate var _redoCellMap: TSP_Reference? = nil
  fileprivate var _textUndo: TSP_Reference? = nil
}

struct TST_CommandStyleTableArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var formatProperties: TSP_ReferenceDictionary {
    get {return _formatProperties ?? TSP_ReferenceDictionary()}
    set {_formatProperties = newValue}
  }
  /// Returns true if `formatProperties` has been explicitly set.
  var hasFormatProperties: Bool {return self._formatProperties != nil}
  /// Clears the value of `formatProperties`. Subsequent reads from it will return its default value.
  mutating func clearFormatProperties() {self._formatProperties = nil}

  var oldStyle: TST_TableStylePropertyChangeSetArchive {
    get {return _oldStyle ?? TST_TableStylePropertyChangeSetArchive()}
    set {_oldStyle = newValue}
  }
  /// Returns true if `oldStyle` has been explicitly set.
  var hasOldStyle: Bool {return self._oldStyle != nil}
  /// Clears the value of `oldStyle`. Subsequent reads from it will return its default value.
  mutating func clearOldStyle() {self._oldStyle = nil}

  var newStyle: TST_TableStylePropertyChangeSetArchive {
    get {return _newStyle ?? TST_TableStylePropertyChangeSetArchive()}
    set {_newStyle = newValue}
  }
  /// Returns true if `newStyle` has been explicitly set.
  var hasNewStyle: Bool {return self._newStyle != nil}
  /// Clears the value of `newStyle`. Subsequent reads from it will return its default value.
  mutating func clearNewStyle() {self._newStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _formatProperties: TSP_ReferenceDictionary? = nil
  fileprivate var _oldStyle: TST_TableStylePropertyChangeSetArchive? = nil
  fileprivate var _newStyle: TST_TableStylePropertyChangeSetArchive? = nil
}

struct TST_CommandSetRepeatingHeaderEnabledArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var repeatingHeaderEnabled: Bool {
    get {return _repeatingHeaderEnabled ?? false}
    set {_repeatingHeaderEnabled = newValue}
  }
  /// Returns true if `repeatingHeaderEnabled` has been explicitly set.
  var hasRepeatingHeaderEnabled: Bool {return self._repeatingHeaderEnabled != nil}
  /// Clears the value of `repeatingHeaderEnabled`. Subsequent reads from it will return its default value.
  mutating func clearRepeatingHeaderEnabled() {self._repeatingHeaderEnabled = nil}

  var direction: TST_TableDimensionArchive {
    get {return _direction ?? .dimensionRow}
    set {_direction = newValue}
  }
  /// Returns true if `direction` has been explicitly set.
  var hasDirection: Bool {return self._direction != nil}
  /// Clears the value of `direction`. Subsequent reads from it will return its default value.
  mutating func clearDirection() {self._direction = nil}

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var prevRepeatingHeaderEnabled: Bool {
    get {return _prevRepeatingHeaderEnabled ?? false}
    set {_prevRepeatingHeaderEnabled = newValue}
  }
  /// Returns true if `prevRepeatingHeaderEnabled` has been explicitly set.
  var hasPrevRepeatingHeaderEnabled: Bool {return self._prevRepeatingHeaderEnabled != nil}
  /// Clears the value of `prevRepeatingHeaderEnabled`. Subsequent reads from it will return its default value.
  mutating func clearPrevRepeatingHeaderEnabled() {self._prevRepeatingHeaderEnabled = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _repeatingHeaderEnabled: Bool? = nil
  fileprivate var _direction: TST_TableDimensionArchive? = nil
  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _prevRepeatingHeaderEnabled: Bool? = nil
}

struct TST_CommandSetFiltersEnabledArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var newFiltersEnabled: Bool {
    get {return _newFiltersEnabled ?? false}
    set {_newFiltersEnabled = newValue}
  }
  /// Returns true if `newFiltersEnabled` has been explicitly set.
  var hasNewFiltersEnabled: Bool {return self._newFiltersEnabled != nil}
  /// Clears the value of `newFiltersEnabled`. Subsequent reads from it will return its default value.
  mutating func clearNewFiltersEnabled() {self._newFiltersEnabled = nil}

  var oldFiltersEnabled: Bool {
    get {return _oldFiltersEnabled ?? false}
    set {_oldFiltersEnabled = newValue}
  }
  /// Returns true if `oldFiltersEnabled` has been explicitly set.
  var hasOldFiltersEnabled: Bool {return self._oldFiltersEnabled != nil}
  /// Clears the value of `oldFiltersEnabled`. Subsequent reads from it will return its default value.
  mutating func clearOldFiltersEnabled() {self._oldFiltersEnabled = nil}

  var rollbackUidList: [TSP_UUID] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _newFiltersEnabled: Bool? = nil
  fileprivate var _oldFiltersEnabled: Bool? = nil
}

struct TST_CommandAddTableStylePresetArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var presetIndex: Int32 {
    get {return _presetIndex ?? 0}
    set {_presetIndex = newValue}
  }
  /// Returns true if `presetIndex` has been explicitly set.
  var hasPresetIndex: Bool {return self._presetIndex != nil}
  /// Clears the value of `presetIndex`. Subsequent reads from it will return its default value.
  mutating func clearPresetIndex() {self._presetIndex = nil}

  var tableStyles: TSP_Reference {
    get {return _tableStyles ?? TSP_Reference()}
    set {_tableStyles = newValue}
  }
  /// Returns true if `tableStyles` has been explicitly set.
  var hasTableStyles: Bool {return self._tableStyles != nil}
  /// Clears the value of `tableStyles`. Subsequent reads from it will return its default value.
  mutating func clearTableStyles() {self._tableStyles = nil}

  var sendNotification: Bool {
    get {return _sendNotification ?? false}
    set {_sendNotification = newValue}
  }
  /// Returns true if `sendNotification` has been explicitly set.
  var hasSendNotification: Bool {return self._sendNotification != nil}
  /// Clears the value of `sendNotification`. Subsequent reads from it will return its default value.
  mutating func clearSendNotification() {self._sendNotification = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _presetIndex: Int32? = nil
  fileprivate var _tableStyles: TSP_Reference? = nil
  fileprivate var _sendNotification: Bool? = nil
}

struct TST_CommandRemoveTableStylePresetArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var theme: TSP_Reference {
    get {return _theme ?? TSP_Reference()}
    set {_theme = newValue}
  }
  /// Returns true if `theme` has been explicitly set.
  var hasTheme: Bool {return self._theme != nil}
  /// Clears the value of `theme`. Subsequent reads from it will return its default value.
  mutating func clearTheme() {self._theme = nil}

  var removedTableStyles: TSP_Reference {
    get {return _removedTableStyles ?? TSP_Reference()}
    set {_removedTableStyles = newValue}
  }
  /// Returns true if `removedTableStyles` has been explicitly set.
  var hasRemovedTableStyles: Bool {return self._removedTableStyles != nil}
  /// Clears the value of `removedTableStyles`. Subsequent reads from it will return its default value.
  mutating func clearRemovedTableStyles() {self._removedTableStyles = nil}

  var presetID: Int32 {
    get {return _presetID ?? 0}
    set {_presetID = newValue}
  }
  /// Returns true if `presetID` has been explicitly set.
  var hasPresetID: Bool {return self._presetID != nil}
  /// Clears the value of `presetID`. Subsequent reads from it will return its default value.
  mutating func clearPresetID() {self._presetID = nil}

  var presetIndexInTheme: Int32 {
    get {return _presetIndexInTheme ?? 0}
    set {_presetIndexInTheme = newValue}
  }
  /// Returns true if `presetIndexInTheme` has been explicitly set.
  var hasPresetIndexInTheme: Bool {return self._presetIndexInTheme != nil}
  /// Clears the value of `presetIndexInTheme`. Subsequent reads from it will return its default value.
  mutating func clearPresetIndexInTheme() {self._presetIndexInTheme = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _theme: TSP_Reference? = nil
  fileprivate var _removedTableStyles: TSP_Reference? = nil
  fileprivate var _presetID: Int32? = nil
  fileprivate var _presetIndexInTheme: Int32? = nil
}

struct TST_CommandReplaceTableStylePresetArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var theme: TSP_Reference {
    get {return _theme ?? TSP_Reference()}
    set {_theme = newValue}
  }
  /// Returns true if `theme` has been explicitly set.
  var hasTheme: Bool {return self._theme != nil}
  /// Clears the value of `theme`. Subsequent reads from it will return its default value.
  mutating func clearTheme() {self._theme = nil}

  var oldTableStyles: TSP_Reference {
    get {return _oldTableStyles ?? TSP_Reference()}
    set {_oldTableStyles = newValue}
  }
  /// Returns true if `oldTableStyles` has been explicitly set.
  var hasOldTableStyles: Bool {return self._oldTableStyles != nil}
  /// Clears the value of `oldTableStyles`. Subsequent reads from it will return its default value.
  mutating func clearOldTableStyles() {self._oldTableStyles = nil}

  var newTableStyles: TSP_Reference {
    get {return _newTableStyles ?? TSP_Reference()}
    set {_newTableStyles = newValue}
  }
  /// Returns true if `newTableStyles` has been explicitly set.
  var hasNewTableStyles: Bool {return self._newTableStyles != nil}
  /// Clears the value of `newTableStyles`. Subsequent reads from it will return its default value.
  mutating func clearNewTableStyles() {self._newTableStyles = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _theme: TSP_Reference? = nil
  fileprivate var _oldTableStyles: TSP_Reference? = nil
  fileprivate var _newTableStyles: TSP_Reference? = nil
}

struct TST_CommandApplyTableStylePresetArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var preset: TSP_Reference {
    get {return _preset ?? TSP_Reference()}
    set {_preset = newValue}
  }
  /// Returns true if `preset` has been explicitly set.
  var hasPreset: Bool {return self._preset != nil}
  /// Clears the value of `preset`. Subsequent reads from it will return its default value.
  mutating func clearPreset() {self._preset = nil}

  var styles: TSP_Reference {
    get {return _styles ?? TSP_Reference()}
    set {_styles = newValue}
  }
  /// Returns true if `styles` has been explicitly set.
  var hasStyles: Bool {return self._styles != nil}
  /// Clears the value of `styles`. Subsequent reads from it will return its default value.
  mutating func clearStyles() {self._styles = nil}

  var undoPreset: TSP_Reference {
    get {return _undoPreset ?? TSP_Reference()}
    set {_undoPreset = newValue}
  }
  /// Returns true if `undoPreset` has been explicitly set.
  var hasUndoPreset: Bool {return self._undoPreset != nil}
  /// Clears the value of `undoPreset`. Subsequent reads from it will return its default value.
  mutating func clearUndoPreset() {self._undoPreset = nil}

  var undoStyles: TSP_Reference {
    get {return _undoStyles ?? TSP_Reference()}
    set {_undoStyles = newValue}
  }
  /// Returns true if `undoStyles` has been explicitly set.
  var hasUndoStyles: Bool {return self._undoStyles != nil}
  /// Clears the value of `undoStyles`. Subsequent reads from it will return its default value.
  mutating func clearUndoStyles() {self._undoStyles = nil}

  var cellDiffMap: TSP_Reference {
    get {return _cellDiffMap ?? TSP_Reference()}
    set {_cellDiffMap = newValue}
  }
  /// Returns true if `cellDiffMap` has been explicitly set.
  var hasCellDiffMap: Bool {return self._cellDiffMap != nil}
  /// Clears the value of `cellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearCellDiffMap() {self._cellDiffMap = nil}

  var undoCellDiffMap: TSP_Reference {
    get {return _undoCellDiffMap ?? TSP_Reference()}
    set {_undoCellDiffMap = newValue}
  }
  /// Returns true if `undoCellDiffMap` has been explicitly set.
  var hasUndoCellDiffMap: Bool {return self._undoCellDiffMap != nil}
  /// Clears the value of `undoCellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearUndoCellDiffMap() {self._undoCellDiffMap = nil}

  var applyPresetOption: Int32 {
    get {return _applyPresetOption ?? 0}
    set {_applyPresetOption = newValue}
  }
  /// Returns true if `applyPresetOption` has been explicitly set.
  var hasApplyPresetOption: Bool {return self._applyPresetOption != nil}
  /// Clears the value of `applyPresetOption`. Subsequent reads from it will return its default value.
  mutating func clearApplyPresetOption() {self._applyPresetOption = nil}

  var tableClearsAllFlag: Bool {
    get {return _tableClearsAllFlag ?? false}
    set {_tableClearsAllFlag = newValue}
  }
  /// Returns true if `tableClearsAllFlag` has been explicitly set.
  var hasTableClearsAllFlag: Bool {return self._tableClearsAllFlag != nil}
  /// Clears the value of `tableClearsAllFlag`. Subsequent reads from it will return its default value.
  mutating func clearTableClearsAllFlag() {self._tableClearsAllFlag = nil}

  var undoTableClearsAllFlag: Bool {
    get {return _undoTableClearsAllFlag ?? false}
    set {_undoTableClearsAllFlag = newValue}
  }
  /// Returns true if `undoTableClearsAllFlag` has been explicitly set.
  var hasUndoTableClearsAllFlag: Bool {return self._undoTableClearsAllFlag != nil}
  /// Clears the value of `undoTableClearsAllFlag`. Subsequent reads from it will return its default value.
  mutating func clearUndoTableClearsAllFlag() {self._undoTableClearsAllFlag = nil}

  var rowColStyles: [TST_ColumnRowMetadataArchive] = []

  var undoRowColStyles: [TST_ColumnRowMetadataArchive] = []

  var changePropMapWrapper: TSP_Reference {
    get {return _changePropMapWrapper ?? TSP_Reference()}
    set {_changePropMapWrapper = newValue}
  }
  /// Returns true if `changePropMapWrapper` has been explicitly set.
  var hasChangePropMapWrapper: Bool {return self._changePropMapWrapper != nil}
  /// Clears the value of `changePropMapWrapper`. Subsequent reads from it will return its default value.
  mutating func clearChangePropMapWrapper() {self._changePropMapWrapper = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _preset: TSP_Reference? = nil
  fileprivate var _styles: TSP_Reference? = nil
  fileprivate var _undoPreset: TSP_Reference? = nil
  fileprivate var _undoStyles: TSP_Reference? = nil
  fileprivate var _cellDiffMap: TSP_Reference? = nil
  fileprivate var _undoCellDiffMap: TSP_Reference? = nil
  fileprivate var _applyPresetOption: Int32? = nil
  fileprivate var _tableClearsAllFlag: Bool? = nil
  fileprivate var _undoTableClearsAllFlag: Bool? = nil
  fileprivate var _changePropMapWrapper: TSP_Reference? = nil
}

struct TST_CommandSetBaseArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_CommandMutateCellFormatArchive {
    get {return _super ?? TST_CommandMutateCellFormatArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var base: UInt32 {
    get {return _base ?? 0}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_CommandMutateCellFormatArchive? = nil
  fileprivate var _base: UInt32? = nil
}

struct TST_CommandSetBasePlacesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_CommandMutateCellFormatArchive {
    get {return _super ?? TST_CommandMutateCellFormatArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var basePlaces: UInt32 {
    get {return _basePlaces ?? 0}
    set {_basePlaces = newValue}
  }
  /// Returns true if `basePlaces` has been explicitly set.
  var hasBasePlaces: Bool {return self._basePlaces != nil}
  /// Clears the value of `basePlaces`. Subsequent reads from it will return its default value.
  mutating func clearBasePlaces() {self._basePlaces = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_CommandMutateCellFormatArchive? = nil
  fileprivate var _basePlaces: UInt32? = nil
}

struct TST_CommandSetBaseUseMinusSignArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_CommandMutateCellFormatArchive {
    get {return _super ?? TST_CommandMutateCellFormatArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var baseUseMinusSign: Bool {
    get {return _baseUseMinusSign ?? false}
    set {_baseUseMinusSign = newValue}
  }
  /// Returns true if `baseUseMinusSign` has been explicitly set.
  var hasBaseUseMinusSign: Bool {return self._baseUseMinusSign != nil}
  /// Clears the value of `baseUseMinusSign`. Subsequent reads from it will return its default value.
  mutating func clearBaseUseMinusSign() {self._baseUseMinusSign = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_CommandMutateCellFormatArchive? = nil
  fileprivate var _baseUseMinusSign: Bool? = nil
}

struct TST_CommandSetCurrencyCodeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_CommandMutateCellFormatArchive {
    get {return _super ?? TST_CommandMutateCellFormatArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var currencyCode: String {
    get {return _currencyCode ?? String()}
    set {_currencyCode = newValue}
  }
  /// Returns true if `currencyCode` has been explicitly set.
  var hasCurrencyCode: Bool {return self._currencyCode != nil}
  /// Clears the value of `currencyCode`. Subsequent reads from it will return its default value.
  mutating func clearCurrencyCode() {self._currencyCode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_CommandMutateCellFormatArchive? = nil
  fileprivate var _currencyCode: String? = nil
}

struct TST_CommandSetFractionAccuracyArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_CommandMutateCellFormatArchive {
    get {return _super ?? TST_CommandMutateCellFormatArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var fractionAccuracy: UInt32 {
    get {return _fractionAccuracy ?? 0}
    set {_fractionAccuracy = newValue}
  }
  /// Returns true if `fractionAccuracy` has been explicitly set.
  var hasFractionAccuracy: Bool {return self._fractionAccuracy != nil}
  /// Clears the value of `fractionAccuracy`. Subsequent reads from it will return its default value.
  mutating func clearFractionAccuracy() {self._fractionAccuracy = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_CommandMutateCellFormatArchive? = nil
  fileprivate var _fractionAccuracy: UInt32? = nil
}

struct TST_CommandSetNegativeNumberStyleArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_CommandMutateCellFormatArchive {
    get {return _super ?? TST_CommandMutateCellFormatArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var negativeNumberStyle: UInt32 {
    get {return _negativeNumberStyle ?? 0}
    set {_negativeNumberStyle = newValue}
  }
  /// Returns true if `negativeNumberStyle` has been explicitly set.
  var hasNegativeNumberStyle: Bool {return self._negativeNumberStyle != nil}
  /// Clears the value of `negativeNumberStyle`. Subsequent reads from it will return its default value.
  mutating func clearNegativeNumberStyle() {self._negativeNumberStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_CommandMutateCellFormatArchive? = nil
  fileprivate var _negativeNumberStyle: UInt32? = nil
}

struct TST_CommandSetNumberOfDecimalPlacesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_CommandMutateCellFormatArchive {
    get {return _super ?? TST_CommandMutateCellFormatArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var decimalPlaces: UInt32 {
    get {return _decimalPlaces ?? 0}
    set {_decimalPlaces = newValue}
  }
  /// Returns true if `decimalPlaces` has been explicitly set.
  var hasDecimalPlaces: Bool {return self._decimalPlaces != nil}
  /// Clears the value of `decimalPlaces`. Subsequent reads from it will return its default value.
  mutating func clearDecimalPlaces() {self._decimalPlaces = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_CommandMutateCellFormatArchive? = nil
  fileprivate var _decimalPlaces: UInt32? = nil
}

struct TST_CommandSetDateTimeFormatArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_CommandMutateCellFormatArchive {
    get {return _super ?? TST_CommandMutateCellFormatArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var dateFormatString: String {
    get {return _dateFormatString ?? String()}
    set {_dateFormatString = newValue}
  }
  /// Returns true if `dateFormatString` has been explicitly set.
  var hasDateFormatString: Bool {return self._dateFormatString != nil}
  /// Clears the value of `dateFormatString`. Subsequent reads from it will return its default value.
  mutating func clearDateFormatString() {self._dateFormatString = nil}

  var timeFormatString: String {
    get {return _timeFormatString ?? String()}
    set {_timeFormatString = newValue}
  }
  /// Returns true if `timeFormatString` has been explicitly set.
  var hasTimeFormatString: Bool {return self._timeFormatString != nil}
  /// Clears the value of `timeFormatString`. Subsequent reads from it will return its default value.
  mutating func clearTimeFormatString() {self._timeFormatString = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_CommandMutateCellFormatArchive? = nil
  fileprivate var _dateFormatString: String? = nil
  fileprivate var _timeFormatString: String? = nil
}

struct TST_CommandSetShowThousandsSeparatorArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_CommandMutateCellFormatArchive {
    get {return _super ?? TST_CommandMutateCellFormatArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var showThousandsSeparator: Bool {
    get {return _showThousandsSeparator ?? false}
    set {_showThousandsSeparator = newValue}
  }
  /// Returns true if `showThousandsSeparator` has been explicitly set.
  var hasShowThousandsSeparator: Bool {return self._showThousandsSeparator != nil}
  /// Clears the value of `showThousandsSeparator`. Subsequent reads from it will return its default value.
  mutating func clearShowThousandsSeparator() {self._showThousandsSeparator = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_CommandMutateCellFormatArchive? = nil
  fileprivate var _showThousandsSeparator: Bool? = nil
}

struct TST_CommandSetUseAccountingStyleArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_CommandMutateCellFormatArchive {
    get {return _super ?? TST_CommandMutateCellFormatArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var useAccountingStyle: Bool {
    get {return _useAccountingStyle ?? false}
    set {_useAccountingStyle = newValue}
  }
  /// Returns true if `useAccountingStyle` has been explicitly set.
  var hasUseAccountingStyle: Bool {return self._useAccountingStyle != nil}
  /// Clears the value of `useAccountingStyle`. Subsequent reads from it will return its default value.
  mutating func clearUseAccountingStyle() {self._useAccountingStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_CommandMutateCellFormatArchive? = nil
  fileprivate var _useAccountingStyle: Bool? = nil
}

struct TST_CommandSetRangeControlMinMaxIncArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var minimum: Double {
    get {return _minimum ?? 0}
    set {_minimum = newValue}
  }
  /// Returns true if `minimum` has been explicitly set.
  var hasMinimum: Bool {return self._minimum != nil}
  /// Clears the value of `minimum`. Subsequent reads from it will return its default value.
  mutating func clearMinimum() {self._minimum = nil}

  var maximum: Double {
    get {return _maximum ?? 0}
    set {_maximum = newValue}
  }
  /// Returns true if `maximum` has been explicitly set.
  var hasMaximum: Bool {return self._maximum != nil}
  /// Clears the value of `maximum`. Subsequent reads from it will return its default value.
  mutating func clearMaximum() {self._maximum = nil}

  var increment: Double {
    get {return _increment ?? 0}
    set {_increment = newValue}
  }
  /// Returns true if `increment` has been explicitly set.
  var hasIncrement: Bool {return self._increment != nil}
  /// Clears the value of `increment`. Subsequent reads from it will return its default value.
  mutating func clearIncrement() {self._increment = nil}

  var cellDiffMap: TSP_Reference {
    get {return _cellDiffMap ?? TSP_Reference()}
    set {_cellDiffMap = newValue}
  }
  /// Returns true if `cellDiffMap` has been explicitly set.
  var hasCellDiffMap: Bool {return self._cellDiffMap != nil}
  /// Clears the value of `cellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearCellDiffMap() {self._cellDiffMap = nil}

  var cellUidList: TST_CellUIDListArchive {
    get {return _cellUidList ?? TST_CellUIDListArchive()}
    set {_cellUidList = newValue}
  }
  /// Returns true if `cellUidList` has been explicitly set.
  var hasCellUidList: Bool {return self._cellUidList != nil}
  /// Clears the value of `cellUidList`. Subsequent reads from it will return its default value.
  mutating func clearCellUidList() {self._cellUidList = nil}

  var inverseCellDiffMap: TSP_Reference {
    get {return _inverseCellDiffMap ?? TSP_Reference()}
    set {_inverseCellDiffMap = newValue}
  }
  /// Returns true if `inverseCellDiffMap` has been explicitly set.
  var hasInverseCellDiffMap: Bool {return self._inverseCellDiffMap != nil}
  /// Clears the value of `inverseCellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearInverseCellDiffMap() {self._inverseCellDiffMap = nil}

  var isFirstCommit: Bool {
    get {return _isFirstCommit ?? false}
    set {_isFirstCommit = newValue}
  }
  /// Returns true if `isFirstCommit` has been explicitly set.
  var hasIsFirstCommit: Bool {return self._isFirstCommit != nil}
  /// Clears the value of `isFirstCommit`. Subsequent reads from it will return its default value.
  mutating func clearIsFirstCommit() {self._isFirstCommit = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _minimum: Double? = nil
  fileprivate var _maximum: Double? = nil
  fileprivate var _increment: Double? = nil
  fileprivate var _cellDiffMap: TSP_Reference? = nil
  fileprivate var _cellUidList: TST_CellUIDListArchive? = nil
  fileprivate var _inverseCellDiffMap: TSP_Reference? = nil
  fileprivate var _isFirstCommit: Bool? = nil
}

struct TST_CommandMoveColumnsOrRowsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var destUid: TSP_UUID {
    get {return _destUid ?? TSP_UUID()}
    set {_destUid = newValue}
  }
  /// Returns true if `destUid` has been explicitly set.
  var hasDestUid: Bool {return self._destUid != nil}
  /// Clears the value of `destUid`. Subsequent reads from it will return its default value.
  mutating func clearDestUid() {self._destUid = nil}

  var before: Bool {
    get {return _before ?? false}
    set {_before = newValue}
  }
  /// Returns true if `before` has been explicitly set.
  var hasBefore: Bool {return self._before != nil}
  /// Clears the value of `before`. Subsequent reads from it will return its default value.
  mutating func clearBefore() {self._before = nil}

  var undoDestUid: TSP_UUID {
    get {return _undoDestUid ?? TSP_UUID()}
    set {_undoDestUid = newValue}
  }
  /// Returns true if `undoDestUid` has been explicitly set.
  var hasUndoDestUid: Bool {return self._undoDestUid != nil}
  /// Clears the value of `undoDestUid`. Subsequent reads from it will return its default value.
  mutating func clearUndoDestUid() {self._undoDestUid = nil}

  var undoBefore: Bool {
    get {return _undoBefore ?? false}
    set {_undoBefore = newValue}
  }
  /// Returns true if `undoBefore` has been explicitly set.
  var hasUndoBefore: Bool {return self._undoBefore != nil}
  /// Clears the value of `undoBefore`. Subsequent reads from it will return its default value.
  mutating func clearUndoBefore() {self._undoBefore = nil}

  var uids: [TSP_UUID] = []

  var direction: TST_TableDimensionArchive {
    get {return _direction ?? .dimensionRow}
    set {_direction = newValue}
  }
  /// Returns true if `direction` has been explicitly set.
  var hasDirection: Bool {return self._direction != nil}
  /// Clears the value of `direction`. Subsequent reads from it will return its default value.
  mutating func clearDirection() {self._direction = nil}

  var formulaRewriteCommand: TSP_Reference {
    get {return _formulaRewriteCommand ?? TSP_Reference()}
    set {_formulaRewriteCommand = newValue}
  }
  /// Returns true if `formulaRewriteCommand` has been explicitly set.
  var hasFormulaRewriteCommand: Bool {return self._formulaRewriteCommand != nil}
  /// Clears the value of `formulaRewriteCommand`. Subsequent reads from it will return its default value.
  mutating func clearFormulaRewriteCommand() {self._formulaRewriteCommand = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _destUid: TSP_UUID? = nil
  fileprivate var _before: Bool? = nil
  fileprivate var _undoDestUid: TSP_UUID? = nil
  fileprivate var _undoBefore: Bool? = nil
  fileprivate var _direction: TST_TableDimensionArchive? = nil
  fileprivate var _formulaRewriteCommand: TSP_Reference? = nil
}

struct TST_CommandSortArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var fromRowUids: [TSP_UUID] = []

  var toRowUids: [TSP_UUID] = []

  var formulaRewriteCommand: TSP_Reference {
    get {return _formulaRewriteCommand ?? TSP_Reference()}
    set {_formulaRewriteCommand = newValue}
  }
  /// Returns true if `formulaRewriteCommand` has been explicitly set.
  var hasFormulaRewriteCommand: Bool {return self._formulaRewriteCommand != nil}
  /// Clears the value of `formulaRewriteCommand`. Subsequent reads from it will return its default value.
  mutating func clearFormulaRewriteCommand() {self._formulaRewriteCommand = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _formulaRewriteCommand: TSP_Reference? = nil
}

struct TST_CommandRewriteFormulasForTransposeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var rewriteSpec: TSCE_FormulaRewriteSpecArchive {
    get {return _rewriteSpec ?? TSCE_FormulaRewriteSpecArchive()}
    set {_rewriteSpec = newValue}
  }
  /// Returns true if `rewriteSpec` has been explicitly set.
  var hasRewriteSpec: Bool {return self._rewriteSpec != nil}
  /// Clears the value of `rewriteSpec`. Subsequent reads from it will return its default value.
  mutating func clearRewriteSpec() {self._rewriteSpec = nil}

  var formulasToRewrite: TSCE_FormulasForUndoArchive {
    get {return _formulasToRewrite ?? TSCE_FormulasForUndoArchive()}
    set {_formulasToRewrite = newValue}
  }
  /// Returns true if `formulasToRewrite` has been explicitly set.
  var hasFormulasToRewrite: Bool {return self._formulasToRewrite != nil}
  /// Clears the value of `formulasToRewrite`. Subsequent reads from it will return its default value.
  mutating func clearFormulasToRewrite() {self._formulasToRewrite = nil}

  var warningsetMap: TST_ImportWarningSetByCellRefArchive {
    get {return _warningsetMap ?? TST_ImportWarningSetByCellRefArchive()}
    set {_warningsetMap = newValue}
  }
  /// Returns true if `warningsetMap` has been explicitly set.
  var hasWarningsetMap: Bool {return self._warningsetMap != nil}
  /// Clears the value of `warningsetMap`. Subsequent reads from it will return its default value.
  mutating func clearWarningsetMap() {self._warningsetMap = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _rewriteSpec: TSCE_FormulaRewriteSpecArchive? = nil
  fileprivate var _formulasToRewrite: TSCE_FormulasForUndoArchive? = nil
  fileprivate var _warningsetMap: TST_ImportWarningSetByCellRefArchive? = nil
}

struct TST_CommandRewriteTableFormulasForRewriteSpecArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var rewriteSpec: TSCE_FormulaRewriteSpecArchive {
    get {return _rewriteSpec ?? TSCE_FormulaRewriteSpecArchive()}
    set {_rewriteSpec = newValue}
  }
  /// Returns true if `rewriteSpec` has been explicitly set.
  var hasRewriteSpec: Bool {return self._rewriteSpec != nil}
  /// Clears the value of `rewriteSpec`. Subsequent reads from it will return its default value.
  mutating func clearRewriteSpec() {self._rewriteSpec = nil}

  var formulasToRewrite: TSCE_FormulasForUndoArchive {
    get {return _formulasToRewrite ?? TSCE_FormulasForUndoArchive()}
    set {_formulasToRewrite = newValue}
  }
  /// Returns true if `formulasToRewrite` has been explicitly set.
  var hasFormulasToRewrite: Bool {return self._formulasToRewrite != nil}
  /// Clears the value of `formulasToRewrite`. Subsequent reads from it will return its default value.
  mutating func clearFormulasToRewrite() {self._formulasToRewrite = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _rewriteSpec: TSCE_FormulaRewriteSpecArchive? = nil
  fileprivate var _formulasToRewrite: TSCE_FormulasForUndoArchive? = nil
}

struct TST_CommandRewriteMergeFormulasArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var rewriteSpec: TSCE_FormulaRewriteSpecArchive {
    get {return _rewriteSpec ?? TSCE_FormulaRewriteSpecArchive()}
    set {_rewriteSpec = newValue}
  }
  /// Returns true if `rewriteSpec` has been explicitly set.
  var hasRewriteSpec: Bool {return self._rewriteSpec != nil}
  /// Clears the value of `rewriteSpec`. Subsequent reads from it will return its default value.
  mutating func clearRewriteSpec() {self._rewriteSpec = nil}

  var formulasToRewrite: TSCE_FormulasForUndoArchive {
    get {return _formulasToRewrite ?? TSCE_FormulasForUndoArchive()}
    set {_formulasToRewrite = newValue}
  }
  /// Returns true if `formulasToRewrite` has been explicitly set.
  var hasFormulasToRewrite: Bool {return self._formulasToRewrite != nil}
  /// Clears the value of `formulasToRewrite`. Subsequent reads from it will return its default value.
  mutating func clearFormulasToRewrite() {self._formulasToRewrite = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _rewriteSpec: TSCE_FormulaRewriteSpecArchive? = nil
  fileprivate var _formulasToRewrite: TSCE_FormulasForUndoArchive? = nil
}

struct TST_CommandRewriteCategoryFormulasArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var rewriteSpec: TSCE_FormulaRewriteSpecArchive {
    get {return _rewriteSpec ?? TSCE_FormulaRewriteSpecArchive()}
    set {_rewriteSpec = newValue}
  }
  /// Returns true if `rewriteSpec` has been explicitly set.
  var hasRewriteSpec: Bool {return self._rewriteSpec != nil}
  /// Clears the value of `rewriteSpec`. Subsequent reads from it will return its default value.
  mutating func clearRewriteSpec() {self._rewriteSpec = nil}

  var formulasToRewrite: TSCE_FormulasForUndoArchive {
    get {return _formulasToRewrite ?? TSCE_FormulasForUndoArchive()}
    set {_formulasToRewrite = newValue}
  }
  /// Returns true if `formulasToRewrite` has been explicitly set.
  var hasFormulasToRewrite: Bool {return self._formulasToRewrite != nil}
  /// Clears the value of `formulasToRewrite`. Subsequent reads from it will return its default value.
  mutating func clearFormulasToRewrite() {self._formulasToRewrite = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _rewriteSpec: TSCE_FormulaRewriteSpecArchive? = nil
  fileprivate var _formulasToRewrite: TSCE_FormulasForUndoArchive? = nil
}

struct TST_CommandRewriteFilterFormulasForTableResizeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
}

struct TST_CommandRewriteFilterFormulasForRewriteSpecArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var filterSet: TSP_Reference {
    get {return _filterSet ?? TSP_Reference()}
    set {_filterSet = newValue}
  }
  /// Returns true if `filterSet` has been explicitly set.
  var hasFilterSet: Bool {return self._filterSet != nil}
  /// Clears the value of `filterSet`. Subsequent reads from it will return its default value.
  mutating func clearFilterSet() {self._filterSet = nil}

  var rewriteSpec: TSCE_FormulaRewriteSpecArchive {
    get {return _rewriteSpec ?? TSCE_FormulaRewriteSpecArchive()}
    set {_rewriteSpec = newValue}
  }
  /// Returns true if `rewriteSpec` has been explicitly set.
  var hasRewriteSpec: Bool {return self._rewriteSpec != nil}
  /// Clears the value of `rewriteSpec`. Subsequent reads from it will return its default value.
  mutating func clearRewriteSpec() {self._rewriteSpec = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _filterSet: TSP_Reference? = nil
  fileprivate var _rewriteSpec: TSCE_FormulaRewriteSpecArchive? = nil
}

struct TST_CommandRewriteConditionalStylesForRewriteSpecArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var rewriteSpec: TSCE_FormulaRewriteSpecArchive {
    get {return _rewriteSpec ?? TSCE_FormulaRewriteSpecArchive()}
    set {_rewriteSpec = newValue}
  }
  /// Returns true if `rewriteSpec` has been explicitly set.
  var hasRewriteSpec: Bool {return self._rewriteSpec != nil}
  /// Clears the value of `rewriteSpec`. Subsequent reads from it will return its default value.
  mutating func clearRewriteSpec() {self._rewriteSpec = nil}

  var formulasToRewrite: TSCE_FormulasForUndoArchive {
    get {return _formulasToRewrite ?? TSCE_FormulasForUndoArchive()}
    set {_formulasToRewrite = newValue}
  }
  /// Returns true if `formulasToRewrite` has been explicitly set.
  var hasFormulasToRewrite: Bool {return self._formulasToRewrite != nil}
  /// Clears the value of `formulasToRewrite`. Subsequent reads from it will return its default value.
  mutating func clearFormulasToRewrite() {self._formulasToRewrite = nil}

  var conditionalStyleSets: TSCE_ExpandedCellRefObjectMapArchive {
    get {return _conditionalStyleSets ?? TSCE_ExpandedCellRefObjectMapArchive()}
    set {_conditionalStyleSets = newValue}
  }
  /// Returns true if `conditionalStyleSets` has been explicitly set.
  var hasConditionalStyleSets: Bool {return self._conditionalStyleSets != nil}
  /// Clears the value of `conditionalStyleSets`. Subsequent reads from it will return its default value.
  mutating func clearConditionalStyleSets() {self._conditionalStyleSets = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _rewriteSpec: TSCE_FormulaRewriteSpecArchive? = nil
  fileprivate var _formulasToRewrite: TSCE_FormulasForUndoArchive? = nil
  fileprivate var _conditionalStyleSets: TSCE_ExpandedCellRefObjectMapArchive? = nil
}

struct TST_CommandMergeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var cellUidList: TST_CellUIDListArchive {
    get {return _cellUidList ?? TST_CellUIDListArchive()}
    set {_cellUidList = newValue}
  }
  /// Returns true if `cellUidList` has been explicitly set.
  var hasCellUidList: Bool {return self._cellUidList != nil}
  /// Clears the value of `cellUidList`. Subsequent reads from it will return its default value.
  mutating func clearCellUidList() {self._cellUidList = nil}

  var undoCellMap: TSP_Reference {
    get {return _undoCellMap ?? TSP_Reference()}
    set {_undoCellMap = newValue}
  }
  /// Returns true if `undoCellMap` has been explicitly set.
  var hasUndoCellMap: Bool {return self._undoCellMap != nil}
  /// Clears the value of `undoCellMap`. Subsequent reads from it will return its default value.
  mutating func clearUndoCellMap() {self._undoCellMap = nil}

  var undoFormulaRewriteCommand: TSP_Reference {
    get {return _undoFormulaRewriteCommand ?? TSP_Reference()}
    set {_undoFormulaRewriteCommand = newValue}
  }
  /// Returns true if `undoFormulaRewriteCommand` has been explicitly set.
  var hasUndoFormulaRewriteCommand: Bool {return self._undoFormulaRewriteCommand != nil}
  /// Clears the value of `undoFormulaRewriteCommand`. Subsequent reads from it will return its default value.
  mutating func clearUndoFormulaRewriteCommand() {self._undoFormulaRewriteCommand = nil}

  var mergeOwnerRollback: UInt32 {
    get {return _mergeOwnerRollback ?? 0}
    set {_mergeOwnerRollback = newValue}
  }
  /// Returns true if `mergeOwnerRollback` has been explicitly set.
  var hasMergeOwnerRollback: Bool {return self._mergeOwnerRollback != nil}
  /// Clears the value of `mergeOwnerRollback`. Subsequent reads from it will return its default value.
  mutating func clearMergeOwnerRollback() {self._mergeOwnerRollback = nil}

  var commitCellMap: TSP_Reference {
    get {return _commitCellMap ?? TSP_Reference()}
    set {_commitCellMap = newValue}
  }
  /// Returns true if `commitCellMap` has been explicitly set.
  var hasCommitCellMap: Bool {return self._commitCellMap != nil}
  /// Clears the value of `commitCellMap`. Subsequent reads from it will return its default value.
  mutating func clearCommitCellMap() {self._commitCellMap = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _cellUidList: TST_CellUIDListArchive? = nil
  fileprivate var _undoCellMap: TSP_Reference? = nil
  fileprivate var _undoFormulaRewriteCommand: TSP_Reference? = nil
  fileprivate var _mergeOwnerRollback: UInt32? = nil
  fileprivate var _commitCellMap: TSP_Reference? = nil
}

struct TST_CommandInverseMergeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_CommandApplyCellMapArchive {
    get {return _super ?? TST_CommandApplyCellMapArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var mergeSourceCellUid: TSP_UUIDCoordArchive {
    get {return _mergeSourceCellUid ?? TSP_UUIDCoordArchive()}
    set {_mergeSourceCellUid = newValue}
  }
  /// Returns true if `mergeSourceCellUid` has been explicitly set.
  var hasMergeSourceCellUid: Bool {return self._mergeSourceCellUid != nil}
  /// Clears the value of `mergeSourceCellUid`. Subsequent reads from it will return its default value.
  mutating func clearMergeSourceCellUid() {self._mergeSourceCellUid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_CommandApplyCellMapArchive? = nil
  fileprivate var _mergeSourceCellUid: TSP_UUIDCoordArchive? = nil
}

struct TST_CommandUnmergeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unmergeUidRanges: [TSP_UUIDRectArchive] = []

  var undoCellMap: TSP_Reference {
    get {return _undoCellMap ?? TSP_Reference()}
    set {_undoCellMap = newValue}
  }
  /// Returns true if `undoCellMap` has been explicitly set.
  var hasUndoCellMap: Bool {return self._undoCellMap != nil}
  /// Clears the value of `undoCellMap`. Subsequent reads from it will return its default value.
  mutating func clearUndoCellMap() {self._undoCellMap = nil}

  var undoFormulaRewriteCommand: TSP_Reference {
    get {return _undoFormulaRewriteCommand ?? TSP_Reference()}
    set {_undoFormulaRewriteCommand = newValue}
  }
  /// Returns true if `undoFormulaRewriteCommand` has been explicitly set.
  var hasUndoFormulaRewriteCommand: Bool {return self._undoFormulaRewriteCommand != nil}
  /// Clears the value of `undoFormulaRewriteCommand`. Subsequent reads from it will return its default value.
  mutating func clearUndoFormulaRewriteCommand() {self._undoFormulaRewriteCommand = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _undoCellMap: TSP_Reference? = nil
  fileprivate var _undoFormulaRewriteCommand: TSP_Reference? = nil
}

struct TST_CommandChooseTableIdRemapperArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var tableIDMapper: TST_MultiTableRemapperArchive {
    get {return _tableIDMapper ?? TST_MultiTableRemapperArchive()}
    set {_tableIDMapper = newValue}
  }
  /// Returns true if `tableIDMapper` has been explicitly set.
  var hasTableIDMapper: Bool {return self._tableIDMapper != nil}
  /// Clears the value of `tableIDMapper`. Subsequent reads from it will return its default value.
  mutating func clearTableIDMapper() {self._tableIDMapper = nil}

  var formulaRewriteCommandForUndo: TSP_Reference {
    get {return _formulaRewriteCommandForUndo ?? TSP_Reference()}
    set {_formulaRewriteCommandForUndo = newValue}
  }
  /// Returns true if `formulaRewriteCommandForUndo` has been explicitly set.
  var hasFormulaRewriteCommandForUndo: Bool {return self._formulaRewriteCommandForUndo != nil}
  /// Clears the value of `formulaRewriteCommandForUndo`. Subsequent reads from it will return its default value.
  mutating func clearFormulaRewriteCommandForUndo() {self._formulaRewriteCommandForUndo = nil}

  var applyAndClear: Bool {
    get {return _applyAndClear ?? false}
    set {_applyAndClear = newValue}
  }
  /// Returns true if `applyAndClear` has been explicitly set.
  var hasApplyAndClear: Bool {return self._applyAndClear != nil}
  /// Clears the value of `applyAndClear`. Subsequent reads from it will return its default value.
  mutating func clearApplyAndClear() {self._applyAndClear = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _tableIDMapper: TST_MultiTableRemapperArchive? = nil
  fileprivate var _formulaRewriteCommandForUndo: TSP_Reference? = nil
  fileprivate var _applyAndClear: Bool? = nil
}

struct TST_CommandCategorySetGroupingColumnsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _storage._super ?? TST_TableCommandArchive()}
    set {_uniqueStorage()._super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return _storage._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {_uniqueStorage()._super = nil}

  var newEnabledChanging: Int32 {
    get {return _storage._newEnabledChanging ?? 0}
    set {_uniqueStorage()._newEnabledChanging = newValue}
  }
  /// Returns true if `newEnabledChanging` has been explicitly set.
  var hasNewEnabledChanging: Bool {return _storage._newEnabledChanging != nil}
  /// Clears the value of `newEnabledChanging`. Subsequent reads from it will return its default value.
  mutating func clearNewEnabledChanging() {_uniqueStorage()._newEnabledChanging = nil}

  var oldEnabledChanging: Int32 {
    get {return _storage._oldEnabledChanging ?? 0}
    set {_uniqueStorage()._oldEnabledChanging = newValue}
  }
  /// Returns true if `oldEnabledChanging` has been explicitly set.
  var hasOldEnabledChanging: Bool {return _storage._oldEnabledChanging != nil}
  /// Clears the value of `oldEnabledChanging`. Subsequent reads from it will return its default value.
  mutating func clearOldEnabledChanging() {_uniqueStorage()._oldEnabledChanging = nil}

  var newGroupingColumns: TST_GroupColumnListArchive {
    get {return _storage._newGroupingColumns ?? TST_GroupColumnListArchive()}
    set {_uniqueStorage()._newGroupingColumns = newValue}
  }
  /// Returns true if `newGroupingColumns` has been explicitly set.
  var hasNewGroupingColumns: Bool {return _storage._newGroupingColumns != nil}
  /// Clears the value of `newGroupingColumns`. Subsequent reads from it will return its default value.
  mutating func clearNewGroupingColumns() {_uniqueStorage()._newGroupingColumns = nil}

  var oldGroupingColumns: TST_GroupColumnListArchive {
    get {return _storage._oldGroupingColumns ?? TST_GroupColumnListArchive()}
    set {_uniqueStorage()._oldGroupingColumns = newValue}
  }
  /// Returns true if `oldGroupingColumns` has been explicitly set.
  var hasOldGroupingColumns: Bool {return _storage._oldGroupingColumns != nil}
  /// Clears the value of `oldGroupingColumns`. Subsequent reads from it will return its default value.
  mutating func clearOldGroupingColumns() {_uniqueStorage()._oldGroupingColumns = nil}

  var restoreBaseOrder: Bool {
    get {return _storage._restoreBaseOrder ?? false}
    set {_uniqueStorage()._restoreBaseOrder = newValue}
  }
  /// Returns true if `restoreBaseOrder` has been explicitly set.
  var hasRestoreBaseOrder: Bool {return _storage._restoreBaseOrder != nil}
  /// Clears the value of `restoreBaseOrder`. Subsequent reads from it will return its default value.
  mutating func clearRestoreBaseOrder() {_uniqueStorage()._restoreBaseOrder = nil}

  var baseRowOrder: [TSP_UUID] {
    get {return _storage._baseRowOrder}
    set {_uniqueStorage()._baseRowOrder = newValue}
  }

  var undoRestoreBaseOrder: Bool {
    get {return _storage._undoRestoreBaseOrder ?? false}
    set {_uniqueStorage()._undoRestoreBaseOrder = newValue}
  }
  /// Returns true if `undoRestoreBaseOrder` has been explicitly set.
  var hasUndoRestoreBaseOrder: Bool {return _storage._undoRestoreBaseOrder != nil}
  /// Clears the value of `undoRestoreBaseOrder`. Subsequent reads from it will return its default value.
  mutating func clearUndoRestoreBaseOrder() {_uniqueStorage()._undoRestoreBaseOrder = nil}

  var undoBaseRowOrder: [TSP_UUID] {
    get {return _storage._undoBaseRowOrder}
    set {_uniqueStorage()._undoBaseRowOrder = newValue}
  }

  var restoreViewOrder: Bool {
    get {return _storage._restoreViewOrder ?? false}
    set {_uniqueStorage()._restoreViewOrder = newValue}
  }
  /// Returns true if `restoreViewOrder` has been explicitly set.
  var hasRestoreViewOrder: Bool {return _storage._restoreViewOrder != nil}
  /// Clears the value of `restoreViewOrder`. Subsequent reads from it will return its default value.
  mutating func clearRestoreViewOrder() {_uniqueStorage()._restoreViewOrder = nil}

  var viewRowOrder: [TSP_UUID] {
    get {return _storage._viewRowOrder}
    set {_uniqueStorage()._viewRowOrder = newValue}
  }

  var undoRestoreViewOrder: Bool {
    get {return _storage._undoRestoreViewOrder ?? false}
    set {_uniqueStorage()._undoRestoreViewOrder = newValue}
  }
  /// Returns true if `undoRestoreViewOrder` has been explicitly set.
  var hasUndoRestoreViewOrder: Bool {return _storage._undoRestoreViewOrder != nil}
  /// Clears the value of `undoRestoreViewOrder`. Subsequent reads from it will return its default value.
  mutating func clearUndoRestoreViewOrder() {_uniqueStorage()._undoRestoreViewOrder = nil}

  var undoViewRowOrder: [TSP_UUID] {
    get {return _storage._undoViewRowOrder}
    set {_uniqueStorage()._undoViewRowOrder = newValue}
  }

  var collapseState: [TSP_UUID] {
    get {return _storage._collapseState}
    set {_uniqueStorage()._collapseState = newValue}
  }

  var undoCollapseState: [TSP_UUID] {
    get {return _storage._undoCollapseState}
    set {_uniqueStorage()._undoCollapseState = newValue}
  }

  var summaryChangeState: TST_SummaryModelGroupByChangeStateArchive {
    get {return _storage._summaryChangeState ?? TST_SummaryModelGroupByChangeStateArchive()}
    set {_uniqueStorage()._summaryChangeState = newValue}
  }
  /// Returns true if `summaryChangeState` has been explicitly set.
  var hasSummaryChangeState: Bool {return _storage._summaryChangeState != nil}
  /// Clears the value of `summaryChangeState`. Subsequent reads from it will return its default value.
  mutating func clearSummaryChangeState() {_uniqueStorage()._summaryChangeState = nil}

  var undoSummaryChangeState: TST_SummaryModelGroupByChangeStateArchive {
    get {return _storage._undoSummaryChangeState ?? TST_SummaryModelGroupByChangeStateArchive()}
    set {_uniqueStorage()._undoSummaryChangeState = newValue}
  }
  /// Returns true if `undoSummaryChangeState` has been explicitly set.
  var hasUndoSummaryChangeState: Bool {return _storage._undoSummaryChangeState != nil}
  /// Clears the value of `undoSummaryChangeState`. Subsequent reads from it will return its default value.
  mutating func clearUndoSummaryChangeState() {_uniqueStorage()._undoSummaryChangeState = nil}

  var newColumnAggregates: TST_ColumnAggregateListArchive {
    get {return _storage._newColumnAggregates ?? TST_ColumnAggregateListArchive()}
    set {_uniqueStorage()._newColumnAggregates = newValue}
  }
  /// Returns true if `newColumnAggregates` has been explicitly set.
  var hasNewColumnAggregates: Bool {return _storage._newColumnAggregates != nil}
  /// Clears the value of `newColumnAggregates`. Subsequent reads from it will return its default value.
  mutating func clearNewColumnAggregates() {_uniqueStorage()._newColumnAggregates = nil}

  var oldColumnAggregates: TST_ColumnAggregateListArchive {
    get {return _storage._oldColumnAggregates ?? TST_ColumnAggregateListArchive()}
    set {_uniqueStorage()._oldColumnAggregates = newValue}
  }
  /// Returns true if `oldColumnAggregates` has been explicitly set.
  var hasOldColumnAggregates: Bool {return _storage._oldColumnAggregates != nil}
  /// Clears the value of `oldColumnAggregates`. Subsequent reads from it will return its default value.
  mutating func clearOldColumnAggregates() {_uniqueStorage()._oldColumnAggregates = nil}

  var undoSetEnabledRewriteCommand: TSP_Reference {
    get {return _storage._undoSetEnabledRewriteCommand ?? TSP_Reference()}
    set {_uniqueStorage()._undoSetEnabledRewriteCommand = newValue}
  }
  /// Returns true if `undoSetEnabledRewriteCommand` has been explicitly set.
  var hasUndoSetEnabledRewriteCommand: Bool {return _storage._undoSetEnabledRewriteCommand != nil}
  /// Clears the value of `undoSetEnabledRewriteCommand`. Subsequent reads from it will return its default value.
  mutating func clearUndoSetEnabledRewriteCommand() {_uniqueStorage()._undoSetEnabledRewriteCommand = nil}

  var undoSetColumnsRewriteCommand: TSP_Reference {
    get {return _storage._undoSetColumnsRewriteCommand ?? TSP_Reference()}
    set {_uniqueStorage()._undoSetColumnsRewriteCommand = newValue}
  }
  /// Returns true if `undoSetColumnsRewriteCommand` has been explicitly set.
  var hasUndoSetColumnsRewriteCommand: Bool {return _storage._undoSetColumnsRewriteCommand != nil}
  /// Clears the value of `undoSetColumnsRewriteCommand`. Subsequent reads from it will return its default value.
  mutating func clearUndoSetColumnsRewriteCommand() {_uniqueStorage()._undoSetColumnsRewriteCommand = nil}

  var forceRestoreAllStates: Bool {
    get {return _storage._forceRestoreAllStates ?? false}
    set {_uniqueStorage()._forceRestoreAllStates = newValue}
  }
  /// Returns true if `forceRestoreAllStates` has been explicitly set.
  var hasForceRestoreAllStates: Bool {return _storage._forceRestoreAllStates != nil}
  /// Clears the value of `forceRestoreAllStates`. Subsequent reads from it will return its default value.
  mutating func clearForceRestoreAllStates() {_uniqueStorage()._forceRestoreAllStates = nil}

  var cellDiffMap: TSP_Reference {
    get {return _storage._cellDiffMap ?? TSP_Reference()}
    set {_uniqueStorage()._cellDiffMap = newValue}
  }
  /// Returns true if `cellDiffMap` has been explicitly set.
  var hasCellDiffMap: Bool {return _storage._cellDiffMap != nil}
  /// Clears the value of `cellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearCellDiffMap() {_uniqueStorage()._cellDiffMap = nil}

  var undoCellDiffMap: TSP_Reference {
    get {return _storage._undoCellDiffMap ?? TSP_Reference()}
    set {_uniqueStorage()._undoCellDiffMap = newValue}
  }
  /// Returns true if `undoCellDiffMap` has been explicitly set.
  var hasUndoCellDiffMap: Bool {return _storage._undoCellDiffMap != nil}
  /// Clears the value of `undoCellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearUndoCellDiffMap() {_uniqueStorage()._undoCellDiffMap = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TST_FormulaEditingCommandGroupArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_ProgressiveCommandGroupArchive {
    get {return _super ?? TSK_ProgressiveCommandGroupArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var undoSelectionValid: Bool {
    get {return _undoSelectionValid ?? false}
    set {_undoSelectionValid = newValue}
  }
  /// Returns true if `undoSelectionValid` has been explicitly set.
  var hasUndoSelectionValid: Bool {return self._undoSelectionValid != nil}
  /// Clears the value of `undoSelectionValid`. Subsequent reads from it will return its default value.
  mutating func clearUndoSelectionValid() {self._undoSelectionValid = nil}

  var undoSelectionStart: UInt32 {
    get {return _undoSelectionStart ?? 0}
    set {_undoSelectionStart = newValue}
  }
  /// Returns true if `undoSelectionStart` has been explicitly set.
  var hasUndoSelectionStart: Bool {return self._undoSelectionStart != nil}
  /// Clears the value of `undoSelectionStart`. Subsequent reads from it will return its default value.
  mutating func clearUndoSelectionStart() {self._undoSelectionStart = nil}

  var undoSelectionLength: UInt32 {
    get {return _undoSelectionLength ?? 0}
    set {_undoSelectionLength = newValue}
  }
  /// Returns true if `undoSelectionLength` has been explicitly set.
  var hasUndoSelectionLength: Bool {return self._undoSelectionLength != nil}
  /// Clears the value of `undoSelectionLength`. Subsequent reads from it will return its default value.
  mutating func clearUndoSelectionLength() {self._undoSelectionLength = nil}

  var undoActiveToken: UInt32 {
    get {return _undoActiveToken ?? 0}
    set {_undoActiveToken = newValue}
  }
  /// Returns true if `undoActiveToken` has been explicitly set.
  var hasUndoActiveToken: Bool {return self._undoActiveToken != nil}
  /// Clears the value of `undoActiveToken`. Subsequent reads from it will return its default value.
  mutating func clearUndoActiveToken() {self._undoActiveToken = nil}

  var redoSelectionValid: Bool {
    get {return _redoSelectionValid ?? false}
    set {_redoSelectionValid = newValue}
  }
  /// Returns true if `redoSelectionValid` has been explicitly set.
  var hasRedoSelectionValid: Bool {return self._redoSelectionValid != nil}
  /// Clears the value of `redoSelectionValid`. Subsequent reads from it will return its default value.
  mutating func clearRedoSelectionValid() {self._redoSelectionValid = nil}

  var redoSelectionStart: UInt32 {
    get {return _redoSelectionStart ?? 0}
    set {_redoSelectionStart = newValue}
  }
  /// Returns true if `redoSelectionStart` has been explicitly set.
  var hasRedoSelectionStart: Bool {return self._redoSelectionStart != nil}
  /// Clears the value of `redoSelectionStart`. Subsequent reads from it will return its default value.
  mutating func clearRedoSelectionStart() {self._redoSelectionStart = nil}

  var redoSelectionLength: UInt32 {
    get {return _redoSelectionLength ?? 0}
    set {_redoSelectionLength = newValue}
  }
  /// Returns true if `redoSelectionLength` has been explicitly set.
  var hasRedoSelectionLength: Bool {return self._redoSelectionLength != nil}
  /// Clears the value of `redoSelectionLength`. Subsequent reads from it will return its default value.
  mutating func clearRedoSelectionLength() {self._redoSelectionLength = nil}

  var redoActiveToken: UInt32 {
    get {return _redoActiveToken ?? 0}
    set {_redoActiveToken = newValue}
  }
  /// Returns true if `redoActiveToken` has been explicitly set.
  var hasRedoActiveToken: Bool {return self._redoActiveToken != nil}
  /// Clears the value of `redoActiveToken`. Subsequent reads from it will return its default value.
  mutating func clearRedoActiveToken() {self._redoActiveToken = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_ProgressiveCommandGroupArchive? = nil
  fileprivate var _undoSelectionValid: Bool? = nil
  fileprivate var _undoSelectionStart: UInt32? = nil
  fileprivate var _undoSelectionLength: UInt32? = nil
  fileprivate var _undoActiveToken: UInt32? = nil
  fileprivate var _redoSelectionValid: Bool? = nil
  fileprivate var _redoSelectionStart: UInt32? = nil
  fileprivate var _redoSelectionLength: UInt32? = nil
  fileprivate var _redoActiveToken: UInt32? = nil
}

struct TST_FormulaEditingCommandSelectionBehaviorArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandSelectionBehaviorArchive {
    get {return _super ?? TSK_CommandSelectionBehaviorArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var undoActiveToken: UInt32 {
    get {return _undoActiveToken ?? 0}
    set {_undoActiveToken = newValue}
  }
  /// Returns true if `undoActiveToken` has been explicitly set.
  var hasUndoActiveToken: Bool {return self._undoActiveToken != nil}
  /// Clears the value of `undoActiveToken`. Subsequent reads from it will return its default value.
  mutating func clearUndoActiveToken() {self._undoActiveToken = nil}

  var redoActiveToken: UInt32 {
    get {return _redoActiveToken ?? 0}
    set {_redoActiveToken = newValue}
  }
  /// Returns true if `redoActiveToken` has been explicitly set.
  var hasRedoActiveToken: Bool {return self._redoActiveToken != nil}
  /// Clears the value of `redoActiveToken`. Subsequent reads from it will return its default value.
  mutating func clearRedoActiveToken() {self._redoActiveToken = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandSelectionBehaviorArchive? = nil
  fileprivate var _undoActiveToken: UInt32? = nil
  fileprivate var _redoActiveToken: UInt32? = nil
}

struct TST_TableCommandSelectionBehaviorArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandSelectionBehaviorArchive {
    get {return _super ?? TSK_CommandSelectionBehaviorArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var tableInfo: TSP_Reference {
    get {return _tableInfo ?? TSP_Reference()}
    set {_tableInfo = newValue}
  }
  /// Returns true if `tableInfo` has been explicitly set.
  var hasTableInfo: Bool {return self._tableInfo != nil}
  /// Clears the value of `tableInfo`. Subsequent reads from it will return its default value.
  mutating func clearTableInfo() {self._tableInfo = nil}

  var lastColumnUidHitByTap: TSP_UUID {
    get {return _lastColumnUidHitByTap ?? TSP_UUID()}
    set {_lastColumnUidHitByTap = newValue}
  }
  /// Returns true if `lastColumnUidHitByTap` has been explicitly set.
  var hasLastColumnUidHitByTap: Bool {return self._lastColumnUidHitByTap != nil}
  /// Clears the value of `lastColumnUidHitByTap`. Subsequent reads from it will return its default value.
  mutating func clearLastColumnUidHitByTap() {self._lastColumnUidHitByTap = nil}

  var invalidateComments: UInt32 {
    get {return _invalidateComments ?? 0}
    set {_invalidateComments = newValue}
  }
  /// Returns true if `invalidateComments` has been explicitly set.
  var hasInvalidateComments: Bool {return self._invalidateComments != nil}
  /// Clears the value of `invalidateComments`. Subsequent reads from it will return its default value.
  mutating func clearInvalidateComments() {self._invalidateComments = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandSelectionBehaviorArchive? = nil
  fileprivate var _tableInfo: TSP_Reference? = nil
  fileprivate var _lastColumnUidHitByTap: TSP_UUID? = nil
  fileprivate var _invalidateComments: UInt32? = nil
}

struct TST_CommandApplyCellCommentArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var cellUid: TSP_UUIDCoordArchive {
    get {return _cellUid ?? TSP_UUIDCoordArchive()}
    set {_cellUid = newValue}
  }
  /// Returns true if `cellUid` has been explicitly set.
  var hasCellUid: Bool {return self._cellUid != nil}
  /// Clears the value of `cellUid`. Subsequent reads from it will return its default value.
  mutating func clearCellUid() {self._cellUid = nil}

  var oldCommentStorage: TSP_Reference {
    get {return _oldCommentStorage ?? TSP_Reference()}
    set {_oldCommentStorage = newValue}
  }
  /// Returns true if `oldCommentStorage` has been explicitly set.
  var hasOldCommentStorage: Bool {return self._oldCommentStorage != nil}
  /// Clears the value of `oldCommentStorage`. Subsequent reads from it will return its default value.
  mutating func clearOldCommentStorage() {self._oldCommentStorage = nil}

  var newCommentStorage: TSP_Reference {
    get {return _newCommentStorage ?? TSP_Reference()}
    set {_newCommentStorage = newValue}
  }
  /// Returns true if `newCommentStorage` has been explicitly set.
  var hasNewCommentStorage: Bool {return self._newCommentStorage != nil}
  /// Clears the value of `newCommentStorage`. Subsequent reads from it will return its default value.
  mutating func clearNewCommentStorage() {self._newCommentStorage = nil}

  var forwardVariant: TSD_CommentCommandVariant {
    get {return _forwardVariant ?? .baseComment}
    set {_forwardVariant = newValue}
  }
  /// Returns true if `forwardVariant` has been explicitly set.
  var hasForwardVariant: Bool {return self._forwardVariant != nil}
  /// Clears the value of `forwardVariant`. Subsequent reads from it will return its default value.
  mutating func clearForwardVariant() {self._forwardVariant = nil}

  var inverseVariant: TSD_CommentCommandVariant {
    get {return _inverseVariant ?? .baseComment}
    set {_inverseVariant = newValue}
  }
  /// Returns true if `inverseVariant` has been explicitly set.
  var hasInverseVariant: Bool {return self._inverseVariant != nil}
  /// Clears the value of `inverseVariant`. Subsequent reads from it will return its default value.
  mutating func clearInverseVariant() {self._inverseVariant = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _cellUid: TSP_UUIDCoordArchive? = nil
  fileprivate var _oldCommentStorage: TSP_Reference? = nil
  fileprivate var _newCommentStorage: TSP_Reference? = nil
  fileprivate var _forwardVariant: TSD_CommentCommandVariant? = nil
  fileprivate var _inverseVariant: TSD_CommentCommandVariant? = nil
}

struct TST_CommandSetFormulaTokenizationArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var tokenization: Bool {
    get {return _tokenization ?? false}
    set {_tokenization = newValue}
  }
  /// Returns true if `tokenization` has been explicitly set.
  var hasTokenization: Bool {return self._tokenization != nil}
  /// Clears the value of `tokenization`. Subsequent reads from it will return its default value.
  mutating func clearTokenization() {self._tokenization = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _tokenization: Bool? = nil
}

struct TST_CommandSetFilterSetTypeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldFilterSetType: TST_FilterSetArchive.FilterSetType {
    get {return _oldFilterSetType ?? .filterSetArchiveTypeAll}
    set {_oldFilterSetType = newValue}
  }
  /// Returns true if `oldFilterSetType` has been explicitly set.
  var hasOldFilterSetType: Bool {return self._oldFilterSetType != nil}
  /// Clears the value of `oldFilterSetType`. Subsequent reads from it will return its default value.
  mutating func clearOldFilterSetType() {self._oldFilterSetType = nil}

  var newFilterSetType: TST_FilterSetArchive.FilterSetType {
    get {return _newFilterSetType ?? .filterSetArchiveTypeAll}
    set {_newFilterSetType = newValue}
  }
  /// Returns true if `newFilterSetType` has been explicitly set.
  var hasNewFilterSetType: Bool {return self._newFilterSetType != nil}
  /// Clears the value of `newFilterSetType`. Subsequent reads from it will return its default value.
  mutating func clearNewFilterSetType() {self._newFilterSetType = nil}

  var rollbackUidList: [TSP_UUID] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _oldFilterSetType: TST_FilterSetArchive.FilterSetType? = nil
  fileprivate var _newFilterSetType: TST_FilterSetArchive.FilterSetType? = nil
}

struct TST_CommandSetTextStyleArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var cellDiffMap: TSP_Reference {
    get {return _cellDiffMap ?? TSP_Reference()}
    set {_cellDiffMap = newValue}
  }
  /// Returns true if `cellDiffMap` has been explicitly set.
  var hasCellDiffMap: Bool {return self._cellDiffMap != nil}
  /// Clears the value of `cellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearCellDiffMap() {self._cellDiffMap = nil}

  var inverseCellDiffMap: TSP_Reference {
    get {return _inverseCellDiffMap ?? TSP_Reference()}
    set {_inverseCellDiffMap = newValue}
  }
  /// Returns true if `inverseCellDiffMap` has been explicitly set.
  var hasInverseCellDiffMap: Bool {return self._inverseCellDiffMap != nil}
  /// Clears the value of `inverseCellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearInverseCellDiffMap() {self._inverseCellDiffMap = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _cellDiffMap: TSP_Reference? = nil
  fileprivate var _inverseCellDiffMap: TSP_Reference? = nil
}

struct TST_CommandSetTextStylePropertiesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var cellDiffMap: TSP_Reference {
    get {return _cellDiffMap ?? TSP_Reference()}
    set {_cellDiffMap = newValue}
  }
  /// Returns true if `cellDiffMap` has been explicitly set.
  var hasCellDiffMap: Bool {return self._cellDiffMap != nil}
  /// Clears the value of `cellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearCellDiffMap() {self._cellDiffMap = nil}

  var cellWasRichText: [Bool] = []

  var inverseCellDiffMap: TSP_Reference {
    get {return _inverseCellDiffMap ?? TSP_Reference()}
    set {_inverseCellDiffMap = newValue}
  }
  /// Returns true if `inverseCellDiffMap` has been explicitly set.
  var hasInverseCellDiffMap: Bool {return self._inverseCellDiffMap != nil}
  /// Clears the value of `inverseCellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearInverseCellDiffMap() {self._inverseCellDiffMap = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _cellDiffMap: TSP_Reference? = nil
  fileprivate var _inverseCellDiffMap: TSP_Reference? = nil
}

struct TST_CommandJustForNotifyingArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var changeDescriptorType: UInt32 {
    get {return _changeDescriptorType ?? 0}
    set {_changeDescriptorType = newValue}
  }
  /// Returns true if `changeDescriptorType` has been explicitly set.
  var hasChangeDescriptorType: Bool {return self._changeDescriptorType != nil}
  /// Clears the value of `changeDescriptorType`. Subsequent reads from it will return its default value.
  mutating func clearChangeDescriptorType() {self._changeDescriptorType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _changeDescriptorType: UInt32? = nil
}

struct TST_CommandSetStorageLanguageArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storage: TSP_Reference {
    get {return _storage ?? TSP_Reference()}
    set {_storage = newValue}
  }
  /// Returns true if `storage` has been explicitly set.
  var hasStorage: Bool {return self._storage != nil}
  /// Clears the value of `storage`. Subsequent reads from it will return its default value.
  mutating func clearStorage() {self._storage = nil}

  var language: String {
    get {return _language ?? String()}
    set {_language = newValue}
  }
  /// Returns true if `language` has been explicitly set.
  var hasLanguage: Bool {return self._language != nil}
  /// Clears the value of `language`. Subsequent reads from it will return its default value.
  mutating func clearLanguage() {self._language = nil}

  var rangeLocation: UInt32 {
    get {return _rangeLocation ?? 0}
    set {_rangeLocation = newValue}
  }
  /// Returns true if `rangeLocation` has been explicitly set.
  var hasRangeLocation: Bool {return self._rangeLocation != nil}
  /// Clears the value of `rangeLocation`. Subsequent reads from it will return its default value.
  mutating func clearRangeLocation() {self._rangeLocation = nil}

  var rangeLength: UInt32 {
    get {return _rangeLength ?? 0}
    set {_rangeLength = newValue}
  }
  /// Returns true if `rangeLength` has been explicitly set.
  var hasRangeLength: Bool {return self._rangeLength != nil}
  /// Clears the value of `rangeLength`. Subsequent reads from it will return its default value.
  mutating func clearRangeLength() {self._rangeLength = nil}

  var undoTransaction: TSWP_UndoTransaction {
    get {return _undoTransaction ?? TSWP_UndoTransaction()}
    set {_undoTransaction = newValue}
  }
  /// Returns true if `undoTransaction` has been explicitly set.
  var hasUndoTransaction: Bool {return self._undoTransaction != nil}
  /// Clears the value of `undoTransaction`. Subsequent reads from it will return its default value.
  mutating func clearUndoTransaction() {self._undoTransaction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _storage: TSP_Reference? = nil
  fileprivate var _language: String? = nil
  fileprivate var _rangeLocation: UInt32? = nil
  fileprivate var _rangeLength: UInt32? = nil
  fileprivate var _undoTransaction: TSWP_UndoTransaction? = nil
}

struct TST_CommandSetSortOrderArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldSortOrder: TST_TableSortOrderArchive {
    get {return _oldSortOrder ?? TST_TableSortOrderArchive()}
    set {_oldSortOrder = newValue}
  }
  /// Returns true if `oldSortOrder` has been explicitly set.
  var hasOldSortOrder: Bool {return self._oldSortOrder != nil}
  /// Clears the value of `oldSortOrder`. Subsequent reads from it will return its default value.
  mutating func clearOldSortOrder() {self._oldSortOrder = nil}

  var newSortOrder: TST_TableSortOrderArchive {
    get {return _newSortOrder ?? TST_TableSortOrderArchive()}
    set {_newSortOrder = newValue}
  }
  /// Returns true if `newSortOrder` has been explicitly set.
  var hasNewSortOrder: Bool {return self._newSortOrder != nil}
  /// Clears the value of `newSortOrder`. Subsequent reads from it will return its default value.
  mutating func clearNewSortOrder() {self._newSortOrder = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _oldSortOrder: TST_TableSortOrderArchive? = nil
  fileprivate var _newSortOrder: TST_TableSortOrderArchive? = nil
}

struct TST_CommandRewriteSortOrderForTableResizeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldSortOrder: TST_TableSortOrderArchive {
    get {return _oldSortOrder ?? TST_TableSortOrderArchive()}
    set {_oldSortOrder = newValue}
  }
  /// Returns true if `oldSortOrder` has been explicitly set.
  var hasOldSortOrder: Bool {return self._oldSortOrder != nil}
  /// Clears the value of `oldSortOrder`. Subsequent reads from it will return its default value.
  mutating func clearOldSortOrder() {self._oldSortOrder = nil}

  var newSortOrder: TST_TableSortOrderArchive {
    get {return _newSortOrder ?? TST_TableSortOrderArchive()}
    set {_newSortOrder = newValue}
  }
  /// Returns true if `newSortOrder` has been explicitly set.
  var hasNewSortOrder: Bool {return self._newSortOrder != nil}
  /// Clears the value of `newSortOrder`. Subsequent reads from it will return its default value.
  mutating func clearNewSortOrder() {self._newSortOrder = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _oldSortOrder: TST_TableSortOrderArchive? = nil
  fileprivate var _newSortOrder: TST_TableSortOrderArchive? = nil
}

struct TST_CommandRewriteSortOrderForRewriteSpecArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var rewriteSpec: TSCE_FormulaRewriteSpecArchive {
    get {return _rewriteSpec ?? TSCE_FormulaRewriteSpecArchive()}
    set {_rewriteSpec = newValue}
  }
  /// Returns true if `rewriteSpec` has been explicitly set.
  var hasRewriteSpec: Bool {return self._rewriteSpec != nil}
  /// Clears the value of `rewriteSpec`. Subsequent reads from it will return its default value.
  mutating func clearRewriteSpec() {self._rewriteSpec = nil}

  var oldSortOrder: TST_TableSortOrderArchive {
    get {return _oldSortOrder ?? TST_TableSortOrderArchive()}
    set {_oldSortOrder = newValue}
  }
  /// Returns true if `oldSortOrder` has been explicitly set.
  var hasOldSortOrder: Bool {return self._oldSortOrder != nil}
  /// Clears the value of `oldSortOrder`. Subsequent reads from it will return its default value.
  mutating func clearOldSortOrder() {self._oldSortOrder = nil}

  var newSortOrder: TST_TableSortOrderArchive {
    get {return _newSortOrder ?? TST_TableSortOrderArchive()}
    set {_newSortOrder = newValue}
  }
  /// Returns true if `newSortOrder` has been explicitly set.
  var hasNewSortOrder: Bool {return self._newSortOrder != nil}
  /// Clears the value of `newSortOrder`. Subsequent reads from it will return its default value.
  mutating func clearNewSortOrder() {self._newSortOrder = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _rewriteSpec: TSCE_FormulaRewriteSpecArchive? = nil
  fileprivate var _oldSortOrder: TST_TableSortOrderArchive? = nil
  fileprivate var _newSortOrder: TST_TableSortOrderArchive? = nil
}

struct TST_CommandSetFilterSetArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var newFilterSet: TSP_Reference {
    get {return _newFilterSet ?? TSP_Reference()}
    set {_newFilterSet = newValue}
  }
  /// Returns true if `newFilterSet` has been explicitly set.
  var hasNewFilterSet: Bool {return self._newFilterSet != nil}
  /// Clears the value of `newFilterSet`. Subsequent reads from it will return its default value.
  mutating func clearNewFilterSet() {self._newFilterSet = nil}

  var oldFilterSet: TSP_Reference {
    get {return _oldFilterSet ?? TSP_Reference()}
    set {_oldFilterSet = newValue}
  }
  /// Returns true if `oldFilterSet` has been explicitly set.
  var hasOldFilterSet: Bool {return self._oldFilterSet != nil}
  /// Clears the value of `oldFilterSet`. Subsequent reads from it will return its default value.
  mutating func clearOldFilterSet() {self._oldFilterSet = nil}

  var rollbackUidList: [TSP_UUID] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _newFilterSet: TSP_Reference? = nil
  fileprivate var _oldFilterSet: TSP_Reference? = nil
}

struct TST_ColumnRowRestoreDataArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uidList: [TSP_UUID] = []

  var metadatas: [TST_ColumnRowMetadataArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TST_CommandTransposeTableArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var originalTableRange: TST_ExpandedCellRange {
    get {return _originalTableRange ?? TST_ExpandedCellRange()}
    set {_originalTableRange = newValue}
  }
  /// Returns true if `originalTableRange` has been explicitly set.
  var hasOriginalTableRange: Bool {return self._originalTableRange != nil}
  /// Clears the value of `originalTableRange`. Subsequent reads from it will return its default value.
  mutating func clearOriginalTableRange() {self._originalTableRange = nil}

  var originalCellMap: TSP_Reference {
    get {return _originalCellMap ?? TSP_Reference()}
    set {_originalCellMap = newValue}
  }
  /// Returns true if `originalCellMap` has been explicitly set.
  var hasOriginalCellMap: Bool {return self._originalCellMap != nil}
  /// Clears the value of `originalCellMap`. Subsequent reads from it will return its default value.
  mutating func clearOriginalCellMap() {self._originalCellMap = nil}

  var originalFooterRowCount: UInt32 {
    get {return _originalFooterRowCount ?? 0}
    set {_originalFooterRowCount = newValue}
  }
  /// Returns true if `originalFooterRowCount` has been explicitly set.
  var hasOriginalFooterRowCount: Bool {return self._originalFooterRowCount != nil}
  /// Clears the value of `originalFooterRowCount`. Subsequent reads from it will return its default value.
  mutating func clearOriginalFooterRowCount() {self._originalFooterRowCount = nil}

  var originalColumnWidths: [Float] = []

  var originalRowHeights: [Float] = []

  var ineligibleMergeList: [TST_CellRange] = []

  var transposedCellMap: TSP_Reference {
    get {return _transposedCellMap ?? TSP_Reference()}
    set {_transposedCellMap = newValue}
  }
  /// Returns true if `transposedCellMap` has been explicitly set.
  var hasTransposedCellMap: Bool {return self._transposedCellMap != nil}
  /// Clears the value of `transposedCellMap`. Subsequent reads from it will return its default value.
  mutating func clearTransposedCellMap() {self._transposedCellMap = nil}

  var undoFormulaRewriteCommand: TSP_Reference {
    get {return _undoFormulaRewriteCommand ?? TSP_Reference()}
    set {_undoFormulaRewriteCommand = newValue}
  }
  /// Returns true if `undoFormulaRewriteCommand` has been explicitly set.
  var hasUndoFormulaRewriteCommand: Bool {return self._undoFormulaRewriteCommand != nil}
  /// Clears the value of `undoFormulaRewriteCommand`. Subsequent reads from it will return its default value.
  mutating func clearUndoFormulaRewriteCommand() {self._undoFormulaRewriteCommand = nil}

  var richTextSubcommands: TSP_Reference {
    get {return _richTextSubcommands ?? TSP_Reference()}
    set {_richTextSubcommands = newValue}
  }
  /// Returns true if `richTextSubcommands` has been explicitly set.
  var hasRichTextSubcommands: Bool {return self._richTextSubcommands != nil}
  /// Clears the value of `richTextSubcommands`. Subsequent reads from it will return its default value.
  mutating func clearRichTextSubcommands() {self._richTextSubcommands = nil}

  var columnRestoreData: TST_ColumnRowRestoreDataArchive {
    get {return _columnRestoreData ?? TST_ColumnRowRestoreDataArchive()}
    set {_columnRestoreData = newValue}
  }
  /// Returns true if `columnRestoreData` has been explicitly set.
  var hasColumnRestoreData: Bool {return self._columnRestoreData != nil}
  /// Clears the value of `columnRestoreData`. Subsequent reads from it will return its default value.
  mutating func clearColumnRestoreData() {self._columnRestoreData = nil}

  var rowRestoreData: TST_ColumnRowRestoreDataArchive {
    get {return _rowRestoreData ?? TST_ColumnRowRestoreDataArchive()}
    set {_rowRestoreData = newValue}
  }
  /// Returns true if `rowRestoreData` has been explicitly set.
  var hasRowRestoreData: Bool {return self._rowRestoreData != nil}
  /// Clears the value of `rowRestoreData`. Subsequent reads from it will return its default value.
  mutating func clearRowRestoreData() {self._rowRestoreData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _originalTableRange: TST_ExpandedCellRange? = nil
  fileprivate var _originalCellMap: TSP_Reference? = nil
  fileprivate var _originalFooterRowCount: UInt32? = nil
  fileprivate var _transposedCellMap: TSP_Reference? = nil
  fileprivate var _undoFormulaRewriteCommand: TSP_Reference? = nil
  fileprivate var _richTextSubcommands: TSP_Reference? = nil
  fileprivate var _columnRestoreData: TST_ColumnRowRestoreDataArchive? = nil
  fileprivate var _rowRestoreData: TST_ColumnRowRestoreDataArchive? = nil
}

struct TST_CommandSetStructuredTextImportRecordArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var newImportRecord: TST_StructuredTextImportRecord {
    get {return _newImportRecord ?? TST_StructuredTextImportRecord()}
    set {_newImportRecord = newValue}
  }
  /// Returns true if `newImportRecord` has been explicitly set.
  var hasNewImportRecord: Bool {return self._newImportRecord != nil}
  /// Clears the value of `newImportRecord`. Subsequent reads from it will return its default value.
  mutating func clearNewImportRecord() {self._newImportRecord = nil}

  var oldImportRecord: TST_StructuredTextImportRecord {
    get {return _oldImportRecord ?? TST_StructuredTextImportRecord()}
    set {_oldImportRecord = newValue}
  }
  /// Returns true if `oldImportRecord` has been explicitly set.
  var hasOldImportRecord: Bool {return self._oldImportRecord != nil}
  /// Clears the value of `oldImportRecord`. Subsequent reads from it will return its default value.
  mutating func clearOldImportRecord() {self._oldImportRecord = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _newImportRecord: TST_StructuredTextImportRecord? = nil
  fileprivate var _oldImportRecord: TST_StructuredTextImportRecord? = nil
}

struct TST_CommandCategoryCollapseExpandGroupArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var isCollapsing: Bool {
    get {return _isCollapsing ?? false}
    set {_isCollapsing = newValue}
  }
  /// Returns true if `isCollapsing` has been explicitly set.
  var hasIsCollapsing: Bool {return self._isCollapsing != nil}
  /// Clears the value of `isCollapsing`. Subsequent reads from it will return its default value.
  mutating func clearIsCollapsing() {self._isCollapsing = nil}

  var groupingColumns: TST_GroupColumnListArchive {
    get {return _groupingColumns ?? TST_GroupColumnListArchive()}
    set {_groupingColumns = newValue}
  }
  /// Returns true if `groupingColumns` has been explicitly set.
  var hasGroupingColumns: Bool {return self._groupingColumns != nil}
  /// Clears the value of `groupingColumns`. Subsequent reads from it will return its default value.
  mutating func clearGroupingColumns() {self._groupingColumns = nil}

  var collapseState: TST_ExpandCollapseStateArchive {
    get {return _collapseState ?? TST_ExpandCollapseStateArchive()}
    set {_collapseState = newValue}
  }
  /// Returns true if `collapseState` has been explicitly set.
  var hasCollapseState: Bool {return self._collapseState != nil}
  /// Clears the value of `collapseState`. Subsequent reads from it will return its default value.
  mutating func clearCollapseState() {self._collapseState = nil}

  var undoCollapseState: TST_ExpandCollapseStateArchive {
    get {return _undoCollapseState ?? TST_ExpandCollapseStateArchive()}
    set {_undoCollapseState = newValue}
  }
  /// Returns true if `undoCollapseState` has been explicitly set.
  var hasUndoCollapseState: Bool {return self._undoCollapseState != nil}
  /// Clears the value of `undoCollapseState`. Subsequent reads from it will return its default value.
  mutating func clearUndoCollapseState() {self._undoCollapseState = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _isCollapsing: Bool? = nil
  fileprivate var _groupingColumns: TST_GroupColumnListArchive? = nil
  fileprivate var _collapseState: TST_ExpandCollapseStateArchive? = nil
  fileprivate var _undoCollapseState: TST_ExpandCollapseStateArchive? = nil
}

struct TST_CommandCategoryChangeSummaryAggregateType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var aggregateType: UInt32 {
    get {return _aggregateType ?? 0}
    set {_aggregateType = newValue}
  }
  /// Returns true if `aggregateType` has been explicitly set.
  var hasAggregateType: Bool {return self._aggregateType != nil}
  /// Clears the value of `aggregateType`. Subsequent reads from it will return its default value.
  mutating func clearAggregateType() {self._aggregateType = nil}

  var undoAggregateType: UInt32 {
    get {return _undoAggregateType ?? 0}
    set {_undoAggregateType = newValue}
  }
  /// Returns true if `undoAggregateType` has been explicitly set.
  var hasUndoAggregateType: Bool {return self._undoAggregateType != nil}
  /// Clears the value of `undoAggregateType`. Subsequent reads from it will return its default value.
  mutating func clearUndoAggregateType() {self._undoAggregateType = nil}

  var columnUid: TSP_UUID {
    get {return _columnUid ?? TSP_UUID()}
    set {_columnUid = newValue}
  }
  /// Returns true if `columnUid` has been explicitly set.
  var hasColumnUid: Bool {return self._columnUid != nil}
  /// Clears the value of `columnUid`. Subsequent reads from it will return its default value.
  mutating func clearColumnUid() {self._columnUid = nil}

  var groupLevel: Int32 {
    get {return _groupLevel ?? 0}
    set {_groupLevel = newValue}
  }
  /// Returns true if `groupLevel` has been explicitly set.
  var hasGroupLevel: Bool {return self._groupLevel != nil}
  /// Clears the value of `groupLevel`. Subsequent reads from it will return its default value.
  mutating func clearGroupLevel() {self._groupLevel = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _aggregateType: UInt32? = nil
  fileprivate var _undoAggregateType: UInt32? = nil
  fileprivate var _columnUid: TSP_UUID? = nil
  fileprivate var _groupLevel: Int32? = nil
}

struct TST_CommandCategorySetLabelRowVisibility {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var groupLevel: UInt32 {
    get {return _groupLevel ?? 0}
    set {_groupLevel = newValue}
  }
  /// Returns true if `groupLevel` has been explicitly set.
  var hasGroupLevel: Bool {return self._groupLevel != nil}
  /// Clears the value of `groupLevel`. Subsequent reads from it will return its default value.
  mutating func clearGroupLevel() {self._groupLevel = nil}

  var labelRowVisibility: UInt32 {
    get {return _labelRowVisibility ?? 0}
    set {_labelRowVisibility = newValue}
  }
  /// Returns true if `labelRowVisibility` has been explicitly set.
  var hasLabelRowVisibility: Bool {return self._labelRowVisibility != nil}
  /// Clears the value of `labelRowVisibility`. Subsequent reads from it will return its default value.
  mutating func clearLabelRowVisibility() {self._labelRowVisibility = nil}

  var undoLabelRowVisibility: UInt32 {
    get {return _undoLabelRowVisibility ?? 0}
    set {_undoLabelRowVisibility = newValue}
  }
  /// Returns true if `undoLabelRowVisibility` has been explicitly set.
  var hasUndoLabelRowVisibility: Bool {return self._undoLabelRowVisibility != nil}
  /// Clears the value of `undoLabelRowVisibility`. Subsequent reads from it will return its default value.
  mutating func clearUndoLabelRowVisibility() {self._undoLabelRowVisibility = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _groupLevel: UInt32? = nil
  fileprivate var _labelRowVisibility: UInt32? = nil
  fileprivate var _undoLabelRowVisibility: UInt32? = nil
}

struct TST_CommandCategoryWillChangeGroupValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var groupNodeUid: TSP_UUID {
    get {return _groupNodeUid ?? TSP_UUID()}
    set {_groupNodeUid = newValue}
  }
  /// Returns true if `groupNodeUid` has been explicitly set.
  var hasGroupNodeUid: Bool {return self._groupNodeUid != nil}
  /// Clears the value of `groupNodeUid`. Subsequent reads from it will return its default value.
  mutating func clearGroupNodeUid() {self._groupNodeUid = nil}

  var undoGroupNodeUid: TSP_UUID {
    get {return _undoGroupNodeUid ?? TSP_UUID()}
    set {_undoGroupNodeUid = newValue}
  }
  /// Returns true if `undoGroupNodeUid` has been explicitly set.
  var hasUndoGroupNodeUid: Bool {return self._undoGroupNodeUid != nil}
  /// Clears the value of `undoGroupNodeUid`. Subsequent reads from it will return its default value.
  mutating func clearUndoGroupNodeUid() {self._undoGroupNodeUid = nil}

  var groupValue: TSCE_CellValueArchive {
    get {return _groupValue ?? TSCE_CellValueArchive()}
    set {_groupValue = newValue}
  }
  /// Returns true if `groupValue` has been explicitly set.
  var hasGroupValue: Bool {return self._groupValue != nil}
  /// Clears the value of `groupValue`. Subsequent reads from it will return its default value.
  mutating func clearGroupValue() {self._groupValue = nil}

  var undoGroupValue: TSCE_CellValueArchive {
    get {return _undoGroupValue ?? TSCE_CellValueArchive()}
    set {_undoGroupValue = newValue}
  }
  /// Returns true if `undoGroupValue` has been explicitly set.
  var hasUndoGroupValue: Bool {return self._undoGroupValue != nil}
  /// Clears the value of `undoGroupValue`. Subsequent reads from it will return its default value.
  mutating func clearUndoGroupValue() {self._undoGroupValue = nil}

  var rewriteCommandForUndo: TSP_Reference {
    get {return _rewriteCommandForUndo ?? TSP_Reference()}
    set {_rewriteCommandForUndo = newValue}
  }
  /// Returns true if `rewriteCommandForUndo` has been explicitly set.
  var hasRewriteCommandForUndo: Bool {return self._rewriteCommandForUndo != nil}
  /// Clears the value of `rewriteCommandForUndo`. Subsequent reads from it will return its default value.
  mutating func clearRewriteCommandForUndo() {self._rewriteCommandForUndo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _groupNodeUid: TSP_UUID? = nil
  fileprivate var _undoGroupNodeUid: TSP_UUID? = nil
  fileprivate var _groupValue: TSCE_CellValueArchive? = nil
  fileprivate var _undoGroupValue: TSCE_CellValueArchive? = nil
  fileprivate var _rewriteCommandForUndo: TSP_Reference? = nil
}

struct TST_IdempotentSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var archivedSelection: TSP_Reference {
    get {return _archivedSelection ?? TSP_Reference()}
    set {_archivedSelection = newValue}
  }
  /// Returns true if `archivedSelection` has been explicitly set.
  var hasArchivedSelection: Bool {return self._archivedSelection != nil}
  /// Clears the value of `archivedSelection`. Subsequent reads from it will return its default value.
  mutating func clearArchivedSelection() {self._archivedSelection = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _archivedSelection: TSP_Reference? = nil
}

struct TST_WPSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableSubSelectionTransformerBaseArchive {
    get {return _super ?? TST_TableSubSelectionTransformerBaseArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var archivedSelection: TSP_Reference {
    get {return _archivedSelection ?? TSP_Reference()}
    set {_archivedSelection = newValue}
  }
  /// Returns true if `archivedSelection` has been explicitly set.
  var hasArchivedSelection: Bool {return self._archivedSelection != nil}
  /// Clears the value of `archivedSelection`. Subsequent reads from it will return its default value.
  mutating func clearArchivedSelection() {self._archivedSelection = nil}

  var originCellUid: TSP_UUIDCoordArchive {
    get {return _originCellUid ?? TSP_UUIDCoordArchive()}
    set {_originCellUid = newValue}
  }
  /// Returns true if `originCellUid` has been explicitly set.
  var hasOriginCellUid: Bool {return self._originCellUid != nil}
  /// Clears the value of `originCellUid`. Subsequent reads from it will return its default value.
  mutating func clearOriginCellUid() {self._originCellUid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableSubSelectionTransformerBaseArchive? = nil
  fileprivate var _archivedSelection: TSP_Reference? = nil
  fileprivate var _originCellUid: TSP_UUIDCoordArchive? = nil
}

struct TST_TableSubSelectionTransformerBaseArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tableInfoIDPath: TSP_UUIDPath {
    get {return _tableInfoIDPath ?? TSP_UUIDPath()}
    set {_tableInfoIDPath = newValue}
  }
  /// Returns true if `tableInfoIDPath` has been explicitly set.
  var hasTableInfoIDPath: Bool {return self._tableInfoIDPath != nil}
  /// Clears the value of `tableInfoIDPath`. Subsequent reads from it will return its default value.
  mutating func clearTableInfoIDPath() {self._tableInfoIDPath = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tableInfoIDPath: TSP_UUIDPath? = nil
}

struct TST_TableNameSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableSubSelectionTransformerBaseArchive {
    get {return _super ?? TST_TableSubSelectionTransformerBaseArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableSubSelectionTransformerBaseArchive? = nil
}

struct TST_ControlCellSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableSubSelectionTransformerBaseArchive {
    get {return _super ?? TST_TableSubSelectionTransformerBaseArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var cellUids: TST_CellUIDListArchive {
    get {return _cellUids ?? TST_CellUIDListArchive()}
    set {_cellUids = newValue}
  }
  /// Returns true if `cellUids` has been explicitly set.
  var hasCellUids: Bool {return self._cellUids != nil}
  /// Clears the value of `cellUids`. Subsequent reads from it will return its default value.
  mutating func clearCellUids() {self._cellUids = nil}

  var originCellUid: TSP_UUIDCoordArchive {
    get {return _originCellUid ?? TSP_UUIDCoordArchive()}
    set {_originCellUid = newValue}
  }
  /// Returns true if `originCellUid` has been explicitly set.
  var hasOriginCellUid: Bool {return self._originCellUid != nil}
  /// Clears the value of `originCellUid`. Subsequent reads from it will return its default value.
  mutating func clearOriginCellUid() {self._originCellUid = nil}

  var originCellID: TSCE_CellCoordinateArchive {
    get {return _originCellID ?? TSCE_CellCoordinateArchive()}
    set {_originCellID = newValue}
  }
  /// Returns true if `originCellID` has been explicitly set.
  var hasOriginCellID: Bool {return self._originCellID != nil}
  /// Clears the value of `originCellID`. Subsequent reads from it will return its default value.
  mutating func clearOriginCellID() {self._originCellID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableSubSelectionTransformerBaseArchive? = nil
  fileprivate var _cellUids: TST_CellUIDListArchive? = nil
  fileprivate var _originCellUid: TSP_UUIDCoordArchive? = nil
  fileprivate var _originCellID: TSCE_CellCoordinateArchive? = nil
}

struct TST_StockCellSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableSubSelectionTransformerBaseArchive {
    get {return _super ?? TST_TableSubSelectionTransformerBaseArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var cellUids: TST_CellUIDListArchive {
    get {return _cellUids ?? TST_CellUIDListArchive()}
    set {_cellUids = newValue}
  }
  /// Returns true if `cellUids` has been explicitly set.
  var hasCellUids: Bool {return self._cellUids != nil}
  /// Clears the value of `cellUids`. Subsequent reads from it will return its default value.
  mutating func clearCellUids() {self._cellUids = nil}

  var originCellUid: TSP_UUIDCoordArchive {
    get {return _originCellUid ?? TSP_UUIDCoordArchive()}
    set {_originCellUid = newValue}
  }
  /// Returns true if `originCellUid` has been explicitly set.
  var hasOriginCellUid: Bool {return self._originCellUid != nil}
  /// Clears the value of `originCellUid`. Subsequent reads from it will return its default value.
  mutating func clearOriginCellUid() {self._originCellUid = nil}

  var originCellID: TSCE_CellCoordinateArchive {
    get {return _originCellID ?? TSCE_CellCoordinateArchive()}
    set {_originCellID = newValue}
  }
  /// Returns true if `originCellID` has been explicitly set.
  var hasOriginCellID: Bool {return self._originCellID != nil}
  /// Clears the value of `originCellID`. Subsequent reads from it will return its default value.
  mutating func clearOriginCellID() {self._originCellID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableSubSelectionTransformerBaseArchive? = nil
  fileprivate var _cellUids: TST_CellUIDListArchive? = nil
  fileprivate var _originCellUid: TSP_UUIDCoordArchive? = nil
  fileprivate var _originCellID: TSCE_CellCoordinateArchive? = nil
}

struct TST_RegionSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableSubSelectionTransformerBaseArchive {
    get {return _super ?? TST_TableSubSelectionTransformerBaseArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var cellUids: TST_CellUIDListArchive {
    get {return _cellUids ?? TST_CellUIDListArchive()}
    set {_cellUids = newValue}
  }
  /// Returns true if `cellUids` has been explicitly set.
  var hasCellUids: Bool {return self._cellUids != nil}
  /// Clears the value of `cellUids`. Subsequent reads from it will return its default value.
  mutating func clearCellUids() {self._cellUids = nil}

  var originCellUid: TSP_UUIDCoordArchive {
    get {return _originCellUid ?? TSP_UUIDCoordArchive()}
    set {_originCellUid = newValue}
  }
  /// Returns true if `originCellUid` has been explicitly set.
  var hasOriginCellUid: Bool {return self._originCellUid != nil}
  /// Clears the value of `originCellUid`. Subsequent reads from it will return its default value.
  mutating func clearOriginCellUid() {self._originCellUid = nil}

  var anchorCellUid: TSP_UUIDCoordArchive {
    get {return _anchorCellUid ?? TSP_UUIDCoordArchive()}
    set {_anchorCellUid = newValue}
  }
  /// Returns true if `anchorCellUid` has been explicitly set.
  var hasAnchorCellUid: Bool {return self._anchorCellUid != nil}
  /// Clears the value of `anchorCellUid`. Subsequent reads from it will return its default value.
  mutating func clearAnchorCellUid() {self._anchorCellUid = nil}

  var cursorCellUid: TSP_UUIDCoordArchive {
    get {return _cursorCellUid ?? TSP_UUIDCoordArchive()}
    set {_cursorCellUid = newValue}
  }
  /// Returns true if `cursorCellUid` has been explicitly set.
  var hasCursorCellUid: Bool {return self._cursorCellUid != nil}
  /// Clears the value of `cursorCellUid`. Subsequent reads from it will return its default value.
  mutating func clearCursorCellUid() {self._cursorCellUid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableSubSelectionTransformerBaseArchive? = nil
  fileprivate var _cellUids: TST_CellUIDListArchive? = nil
  fileprivate var _originCellUid: TSP_UUIDCoordArchive? = nil
  fileprivate var _anchorCellUid: TSP_UUIDCoordArchive? = nil
  fileprivate var _cursorCellUid: TSP_UUIDCoordArchive? = nil
}

struct TST_StrokeSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableSubSelectionTransformerBaseArchive {
    get {return _super ?? TST_TableSubSelectionTransformerBaseArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var archivedSelection: TSP_Reference {
    get {return _archivedSelection ?? TSP_Reference()}
    set {_archivedSelection = newValue}
  }
  /// Returns true if `archivedSelection` has been explicitly set.
  var hasArchivedSelection: Bool {return self._archivedSelection != nil}
  /// Clears the value of `archivedSelection`. Subsequent reads from it will return its default value.
  mutating func clearArchivedSelection() {self._archivedSelection = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableSubSelectionTransformerBaseArchive? = nil
  fileprivate var _archivedSelection: TSP_Reference? = nil
}

struct TST_RowColumnSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableSubSelectionTransformerBaseArchive {
    get {return _super ?? TST_TableSubSelectionTransformerBaseArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var selectionType: TST_SelectionTypeArchive {
    get {return _selectionType ?? .deprecatedCellSelectionType}
    set {_selectionType = newValue}
  }
  /// Returns true if `selectionType` has been explicitly set.
  var hasSelectionType: Bool {return self._selectionType != nil}
  /// Clears the value of `selectionType`. Subsequent reads from it will return its default value.
  mutating func clearSelectionType() {self._selectionType = nil}

  var rowColUids: [TSP_UUID] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableSubSelectionTransformerBaseArchive? = nil
  fileprivate var _selectionType: TST_SelectionTypeArchive? = nil
}

struct TST_CommandCategoryMoveRowsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var actionType: UInt32 {
    get {return _actionType ?? 0}
    set {_actionType = newValue}
  }
  /// Returns true if `actionType` has been explicitly set.
  var hasActionType: Bool {return self._actionType != nil}
  /// Clears the value of `actionType`. Subsequent reads from it will return its default value.
  mutating func clearActionType() {self._actionType = nil}

  var categoryRowOrder: [TSP_UUID] = []

  var undoCategoryRowOrder: [TSP_UUID] = []

  var cellDiffMap: TSP_Reference {
    get {return _cellDiffMap ?? TSP_Reference()}
    set {_cellDiffMap = newValue}
  }
  /// Returns true if `cellDiffMap` has been explicitly set.
  var hasCellDiffMap: Bool {return self._cellDiffMap != nil}
  /// Clears the value of `cellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearCellDiffMap() {self._cellDiffMap = nil}

  var undoCellDiffMap: TSP_Reference {
    get {return _undoCellDiffMap ?? TSP_Reference()}
    set {_undoCellDiffMap = newValue}
  }
  /// Returns true if `undoCellDiffMap` has been explicitly set.
  var hasUndoCellDiffMap: Bool {return self._undoCellDiffMap != nil}
  /// Clears the value of `undoCellDiffMap`. Subsequent reads from it will return its default value.
  mutating func clearUndoCellDiffMap() {self._undoCellDiffMap = nil}

  var groupingColumns: TST_GroupColumnListArchive {
    get {return _groupingColumns ?? TST_GroupColumnListArchive()}
    set {_groupingColumns = newValue}
  }
  /// Returns true if `groupingColumns` has been explicitly set.
  var hasGroupingColumns: Bool {return self._groupingColumns != nil}
  /// Clears the value of `groupingColumns`. Subsequent reads from it will return its default value.
  mutating func clearGroupingColumns() {self._groupingColumns = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _actionType: UInt32? = nil
  fileprivate var _cellDiffMap: TSP_Reference? = nil
  fileprivate var _undoCellDiffMap: TSP_Reference? = nil
  fileprivate var _groupingColumns: TST_GroupColumnListArchive? = nil
}

struct TST_CommandRewriteHiddenStatesForGroupByChangeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var groupByChange: TSCE_GroupByChangeArchive {
    get {return _groupByChange ?? TSCE_GroupByChangeArchive()}
    set {_groupByChange = newValue}
  }
  /// Returns true if `groupByChange` has been explicitly set.
  var hasGroupByChange: Bool {return self._groupByChange != nil}
  /// Clears the value of `groupByChange`. Subsequent reads from it will return its default value.
  mutating func clearGroupByChange() {self._groupByChange = nil}

  var collapsedState: TST_ExpandCollapseStateArchive {
    get {return _collapsedState ?? TST_ExpandCollapseStateArchive()}
    set {_collapsedState = newValue}
  }
  /// Returns true if `collapsedState` has been explicitly set.
  var hasCollapsedState: Bool {return self._collapsedState != nil}
  /// Clears the value of `collapsedState`. Subsequent reads from it will return its default value.
  mutating func clearCollapsedState() {self._collapsedState = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _groupByChange: TSCE_GroupByChangeArchive? = nil
  fileprivate var _collapsedState: TST_ExpandCollapseStateArchive? = nil
}

struct TST_CommandRewritePencilAnnotationFormulasArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TST_TableCommandArchive {
    get {return _super ?? TST_TableCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var rewriteSpec: TSCE_FormulaRewriteSpecArchive {
    get {return _rewriteSpec ?? TSCE_FormulaRewriteSpecArchive()}
    set {_rewriteSpec = newValue}
  }
  /// Returns true if `rewriteSpec` has been explicitly set.
  var hasRewriteSpec: Bool {return self._rewriteSpec != nil}
  /// Clears the value of `rewriteSpec`. Subsequent reads from it will return its default value.
  mutating func clearRewriteSpec() {self._rewriteSpec = nil}

  var formulasToRewrite: TSCE_FormulasForUndoArchive {
    get {return _formulasToRewrite ?? TSCE_FormulasForUndoArchive()}
    set {_formulasToRewrite = newValue}
  }
  /// Returns true if `formulasToRewrite` has been explicitly set.
  var hasFormulasToRewrite: Bool {return self._formulasToRewrite != nil}
  /// Clears the value of `formulasToRewrite`. Subsequent reads from it will return its default value.
  mutating func clearFormulasToRewrite() {self._formulasToRewrite = nil}

  var annotationsForUndo: [TST_CommandRewritePencilAnnotationFormulasArchive.AnnotationPair] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct AnnotationPair {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var index: UInt64 {
      get {return _index ?? 0}
      set {_index = newValue}
    }
    /// Returns true if `index` has been explicitly set.
    var hasIndex: Bool {return self._index != nil}
    /// Clears the value of `index`. Subsequent reads from it will return its default value.
    mutating func clearIndex() {self._index = nil}

    var annotation: TSP_Reference {
      get {return _annotation ?? TSP_Reference()}
      set {_annotation = newValue}
    }
    /// Returns true if `annotation` has been explicitly set.
    var hasAnnotation: Bool {return self._annotation != nil}
    /// Clears the value of `annotation`. Subsequent reads from it will return its default value.
    mutating func clearAnnotation() {self._annotation = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _index: UInt64? = nil
    fileprivate var _annotation: TSP_Reference? = nil
  }

  init() {}

  fileprivate var _super: TST_TableCommandArchive? = nil
  fileprivate var _rewriteSpec: TSCE_FormulaRewriteSpecArchive? = nil
  fileprivate var _formulasToRewrite: TSCE_FormulasForUndoArchive? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TST"

extension TST_TableArea: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TableAreaBody"),
    2: .same(proto: "TableAreaHeaderRow"),
    3: .same(proto: "TableAreaHeaderColumn"),
    4: .same(proto: "TableAreaFooterRow"),
  ]
}

extension TST_TableAreaTransition: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TableAreaTransitionHeaderRowToBody"),
    2: .same(proto: "TableAreaTransitionBodyToHeaderRow"),
    3: .same(proto: "TableAreaTransitionFooterRowToBody"),
    4: .same(proto: "TableAreaTransitionBodyToFooterRow"),
    5: .same(proto: "TableAreaTransitionHeaderColumnToBody"),
    6: .same(proto: "TableAreaTransitionBodyToHeaderColumn"),
  ]
}

extension TST_ColumnRowTypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ColumnRowTypeAnchor"),
    1: .same(proto: "ColumnRowTypeHeaderRow"),
    2: .same(proto: "ColumnRowTypeBodyRow"),
    3: .same(proto: "ColumnRowTypeFooterRow"),
    4: .same(proto: "ColumnRowTypeHeaderColumn"),
    5: .same(proto: "ColumnRowTypeBodyColumn"),
  ]
}

extension TST_TableCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TableCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "table_info_id_path"),
    3: .same(proto: "commandname"),
    4: .standard(proto: "default_cell_styles_container"),
    5: .same(proto: "timestamp"),
    6: .standard(proto: "random_seed_lo"),
    7: .standard(proto: "random_seed_hi"),
    8: .standard(proto: "is_inverse"),
    9: .standard(proto: "old_timestamp"),
    10: .standard(proto: "old_random_seed"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._tableInfoIDPath == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._tableInfoIDPath, !v.isInitialized {return false}
    if let v = self._defaultCellStylesContainer, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._tableInfoIDPath)
      case 3: try decoder.decodeSingularStringField(value: &self._commandname)
      case 4: try decoder.decodeSingularMessageField(value: &self._defaultCellStylesContainer)
      case 5: try decoder.decodeSingularDoubleField(value: &self._timestamp)
      case 6: try decoder.decodeSingularUInt32Field(value: &self._randomSeedLo)
      case 7: try decoder.decodeSingularUInt32Field(value: &self._randomSeedHi)
      case 8: try decoder.decodeSingularBoolField(value: &self._isInverse)
      case 9: try decoder.decodeSingularDoubleField(value: &self._oldTimestamp)
      case 10: try decoder.decodeSingularUInt64Field(value: &self._oldRandomSeed)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._tableInfoIDPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._commandname {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._defaultCellStylesContainer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._timestamp {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    }
    if let v = self._randomSeedLo {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._randomSeedHi {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._isInverse {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._oldTimestamp {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 9)
    }
    if let v = self._oldRandomSeed {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_TableCommandArchive, rhs: TST_TableCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._tableInfoIDPath != rhs._tableInfoIDPath {return false}
    if lhs._commandname != rhs._commandname {return false}
    if lhs._defaultCellStylesContainer != rhs._defaultCellStylesContainer {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs._randomSeedLo != rhs._randomSeedLo {return false}
    if lhs._randomSeedHi != rhs._randomSeedHi {return false}
    if lhs._isInverse != rhs._isInverse {return false}
    if lhs._oldTimestamp != rhs._oldTimestamp {return false}
    if lhs._oldRandomSeed != rhs._oldRandomSeed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandApplyCellContentsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandApplyCellContentsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "cell_diff_map"),
    3: .standard(proto: "rollback_cell_diff_map"),
    4: .standard(proto: "custom_format_keys"),
    5: .standard(proto: "action_string"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._cellDiffMap == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._cellDiffMap, !v.isInitialized {return false}
    if let v = self._rollbackCellDiffMap, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.customFormatKeys) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._cellDiffMap)
      case 3: try decoder.decodeSingularMessageField(value: &self._rollbackCellDiffMap)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.customFormatKeys)
      case 5: try decoder.decodeSingularStringField(value: &self._actionString)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._cellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._rollbackCellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.customFormatKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.customFormatKeys, fieldNumber: 4)
    }
    if let v = self._actionString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandApplyCellContentsArchive, rhs: TST_CommandApplyCellContentsArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._cellDiffMap != rhs._cellDiffMap {return false}
    if lhs._rollbackCellDiffMap != rhs._rollbackCellDiffMap {return false}
    if lhs.customFormatKeys != rhs.customFormatKeys {return false}
    if lhs._actionString != rhs._actionString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandApplyCellDiffMapArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandApplyCellDiffMapArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "cell_diff_map"),
    3: .standard(proto: "should_allow_merge_fragments"),
    4: .standard(proto: "inverse_cell_diff_map"),
    5: .standard(proto: "custom_format_keys"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._cellDiffMap == nil {return false}
    if self._shouldAllowMergeFragments == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._cellDiffMap, !v.isInitialized {return false}
    if let v = self._inverseCellDiffMap, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.customFormatKeys) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._cellDiffMap)
      case 3: try decoder.decodeSingularBoolField(value: &self._shouldAllowMergeFragments)
      case 4: try decoder.decodeSingularMessageField(value: &self._inverseCellDiffMap)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.customFormatKeys)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._cellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._shouldAllowMergeFragments {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._inverseCellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.customFormatKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.customFormatKeys, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandApplyCellDiffMapArchive, rhs: TST_CommandApplyCellDiffMapArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._cellDiffMap != rhs._cellDiffMap {return false}
    if lhs._shouldAllowMergeFragments != rhs._shouldAllowMergeFragments {return false}
    if lhs._inverseCellDiffMap != rhs._inverseCellDiffMap {return false}
    if lhs.customFormatKeys != rhs.customFormatKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandApplyCellMapArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandApplyCellMapArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "redo_cell_map"),
    3: .standard(proto: "undo_cell_map"),
    4: .standard(proto: "undo_formula_rewrite_command"),
    5: .standard(proto: "custom_format_keys"),
    6: .standard(proto: "merge_owner_rollback_index"),
    7: .standard(proto: "is_from_paste"),
    8: .standard(proto: "formula_rewrite_commands"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._redoCellMap == nil {return false}
    if self._isFromPaste == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._redoCellMap, !v.isInitialized {return false}
    if let v = self._undoCellMap, !v.isInitialized {return false}
    if let v = self._undoFormulaRewriteCommand, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.customFormatKeys) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.formulaRewriteCommands) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._redoCellMap)
      case 3: try decoder.decodeSingularMessageField(value: &self._undoCellMap)
      case 4: try decoder.decodeSingularMessageField(value: &self._undoFormulaRewriteCommand)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.customFormatKeys)
      case 6: try decoder.decodeSingularUInt32Field(value: &self._mergeOwnerRollbackIndex)
      case 7: try decoder.decodeSingularBoolField(value: &self._isFromPaste)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.formulaRewriteCommands)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._redoCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._undoCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._undoFormulaRewriteCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.customFormatKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.customFormatKeys, fieldNumber: 5)
    }
    if let v = self._mergeOwnerRollbackIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._isFromPaste {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    if !self.formulaRewriteCommands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.formulaRewriteCommands, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandApplyCellMapArchive, rhs: TST_CommandApplyCellMapArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._redoCellMap != rhs._redoCellMap {return false}
    if lhs._undoCellMap != rhs._undoCellMap {return false}
    if lhs._undoFormulaRewriteCommand != rhs._undoFormulaRewriteCommand {return false}
    if lhs.customFormatKeys != rhs.customFormatKeys {return false}
    if lhs._mergeOwnerRollbackIndex != rhs._mergeOwnerRollbackIndex {return false}
    if lhs._isFromPaste != rhs._isFromPaste {return false}
    if lhs.formulaRewriteCommands != rhs.formulaRewriteCommands {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandApplyConcurrentCellMapArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandApplyConcurrentCellMapArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "redo_concurrent_cell_map"),
    3: .standard(proto: "undo_concurrent_cell_map"),
    4: .standard(proto: "undo_formula_rewrite_command"),
    5: .standard(proto: "custom_format_keys"),
    6: .standard(proto: "merge_owner_rollback_index"),
    7: .standard(proto: "is_from_paste"),
    8: .standard(proto: "formula_rewrite_commands"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._redoConcurrentCellMap == nil {return false}
    if self._isFromPaste == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._redoConcurrentCellMap, !v.isInitialized {return false}
    if let v = self._undoConcurrentCellMap, !v.isInitialized {return false}
    if let v = self._undoFormulaRewriteCommand, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.customFormatKeys) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.formulaRewriteCommands) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._redoConcurrentCellMap)
      case 3: try decoder.decodeSingularMessageField(value: &self._undoConcurrentCellMap)
      case 4: try decoder.decodeSingularMessageField(value: &self._undoFormulaRewriteCommand)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.customFormatKeys)
      case 6: try decoder.decodeSingularUInt32Field(value: &self._mergeOwnerRollbackIndex)
      case 7: try decoder.decodeSingularBoolField(value: &self._isFromPaste)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.formulaRewriteCommands)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._redoConcurrentCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._undoConcurrentCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._undoFormulaRewriteCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.customFormatKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.customFormatKeys, fieldNumber: 5)
    }
    if let v = self._mergeOwnerRollbackIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._isFromPaste {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    if !self.formulaRewriteCommands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.formulaRewriteCommands, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandApplyConcurrentCellMapArchive, rhs: TST_CommandApplyConcurrentCellMapArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._redoConcurrentCellMap != rhs._redoConcurrentCellMap {return false}
    if lhs._undoConcurrentCellMap != rhs._undoConcurrentCellMap {return false}
    if lhs._undoFormulaRewriteCommand != rhs._undoFormulaRewriteCommand {return false}
    if lhs.customFormatKeys != rhs.customFormatKeys {return false}
    if lhs._mergeOwnerRollbackIndex != rhs._mergeOwnerRollbackIndex {return false}
    if lhs._isFromPaste != rhs._isFromPaste {return false}
    if lhs.formulaRewriteCommands != rhs.formulaRewriteCommands {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandChangeFreezeHeaderStateArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandChangeFreezeHeaderStateArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "direction"),
    3: .standard(proto: "new_freeze_state"),
    4: .standard(proto: "prev_freeze_state"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._direction == nil {return false}
    if self._newFreezeState == nil {return false}
    if self._prevFreezeState == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularEnumField(value: &self._direction)
      case 3: try decoder.decodeSingularBoolField(value: &self._newFreezeState)
      case 4: try decoder.decodeSingularBoolField(value: &self._prevFreezeState)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._direction {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._newFreezeState {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._prevFreezeState {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandChangeFreezeHeaderStateArchive, rhs: TST_CommandChangeFreezeHeaderStateArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._direction != rhs._direction {return false}
    if lhs._newFreezeState != rhs._newFreezeState {return false}
    if lhs._prevFreezeState != rhs._prevFreezeState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandDeleteCellsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandDeleteCellsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    4: .standard(proto: "update_border_visibility"),
    5: .standard(proto: "invalidate_comments"),
    6: .standard(proto: "invalidate_comments_valid"),
    7: .standard(proto: "cell_uid_region"),
    8: .standard(proto: "summary_cell_uid_list"),
    9: .standard(proto: "inverse_concurrent_cell_map"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._cellUidRegion, !v.isInitialized {return false}
    if let v = self._summaryCellUidList, !v.isInitialized {return false}
    if let v = self._inverseConcurrentCellMap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 4: try decoder.decodeSingularBoolField(value: &self._updateBorderVisibility)
      case 5: try decoder.decodeSingularBoolField(value: &self._invalidateComments)
      case 6: try decoder.decodeSingularBoolField(value: &self._invalidateCommentsValid)
      case 7: try decoder.decodeSingularMessageField(value: &self._cellUidRegion)
      case 8: try decoder.decodeSingularMessageField(value: &self._summaryCellUidList)
      case 9: try decoder.decodeSingularMessageField(value: &self._inverseConcurrentCellMap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updateBorderVisibility {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._invalidateComments {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._invalidateCommentsValid {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._cellUidRegion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._summaryCellUidList {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._inverseConcurrentCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandDeleteCellsArchive, rhs: TST_CommandDeleteCellsArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._updateBorderVisibility != rhs._updateBorderVisibility {return false}
    if lhs._invalidateComments != rhs._invalidateComments {return false}
    if lhs._invalidateCommentsValid != rhs._invalidateCommentsValid {return false}
    if lhs._cellUidRegion != rhs._cellUidRegion {return false}
    if lhs._summaryCellUidList != rhs._summaryCellUidList {return false}
    if lhs._inverseConcurrentCellMap != rhs._inverseConcurrentCellMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandDeleteCellContentsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandDeleteCellContentsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "cell_uid_list"),
    3: .standard(proto: "inverse_cell_diff_map"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._cellUidList == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._cellUidList, !v.isInitialized {return false}
    if let v = self._inverseCellDiffMap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._cellUidList)
      case 3: try decoder.decodeSingularMessageField(value: &self._inverseCellDiffMap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._cellUidList {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._inverseCellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandDeleteCellContentsArchive, rhs: TST_CommandDeleteCellContentsArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._cellUidList != rhs._cellUidList {return false}
    if lhs._inverseCellDiffMap != rhs._inverseCellDiffMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandMutateCellFormatArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandMutateCellFormatArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "cell_uid_list"),
    3: .standard(proto: "inverse_cell_diff_map"),
    4: .standard(proto: "whole_format_diff_map"),
    5: .standard(proto: "intended_format_type"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._intendedFormatType == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._cellUidList, !v.isInitialized {return false}
    if let v = self._inverseCellDiffMap, !v.isInitialized {return false}
    if let v = self._wholeFormatDiffMap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._cellUidList)
      case 3: try decoder.decodeSingularMessageField(value: &self._inverseCellDiffMap)
      case 4: try decoder.decodeSingularMessageField(value: &self._wholeFormatDiffMap)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._intendedFormatType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._cellUidList {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._inverseCellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._wholeFormatDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._intendedFormatType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandMutateCellFormatArchive, rhs: TST_CommandMutateCellFormatArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._cellUidList != rhs._cellUidList {return false}
    if lhs._inverseCellDiffMap != rhs._inverseCellDiffMap {return false}
    if lhs._wholeFormatDiffMap != rhs._wholeFormatDiffMap {return false}
    if lhs._intendedFormatType != rhs._intendedFormatType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetAutomaticDurationUnitsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetAutomaticDurationUnitsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    4: .standard(proto: "automatic_units"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 4: try decoder.decodeSingularBoolField(value: &self._automaticUnits)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._automaticUnits {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetAutomaticDurationUnitsArchive, rhs: TST_CommandSetAutomaticDurationUnitsArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._automaticUnits != rhs._automaticUnits {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetDurationStyleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetDurationStyleArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "duration_style"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._durationStyle)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._durationStyle {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetDurationStyleArchive, rhs: TST_CommandSetDurationStyleArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._durationStyle != rhs._durationStyle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetDurationUnitSmallestLargestArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetDurationUnitSmallestLargestArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "smallest_unit"),
    3: .standard(proto: "largest_unit"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._smallestUnit)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._largestUnit)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._smallestUnit {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._largestUnit {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetDurationUnitSmallestLargestArchive, rhs: TST_CommandSetDurationUnitSmallestLargestArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._smallestUnit != rhs._smallestUnit {return false}
    if lhs._largestUnit != rhs._largestUnit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandReplaceCustomFormatArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandReplaceCustomFormatArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "undo_diff_map"),
    2: .standard(proto: "commit_diff_map"),
    6: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._undoDiffMap, !v.isInitialized {return false}
    if let v = self._commitDiffMap, !v.isInitialized {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._undoDiffMap)
      case 2: try decoder.decodeSingularMessageField(value: &self._commitDiffMap)
      case 6: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._undoDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._commitDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandReplaceCustomFormatArchive, rhs: TST_CommandReplaceCustomFormatArchive) -> Bool {
    if lhs._undoDiffMap != rhs._undoDiffMap {return false}
    if lhs._commitDiffMap != rhs._commitDiffMap {return false}
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandMoveCellsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandMoveCellsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "dst_table_info_id_path"),
    3: .standard(proto: "src_uid_range"),
    4: .standard(proto: "dst_uid_range"),
    5: .standard(proto: "table_dimension"),
    6: .standard(proto: "src_cell_map"),
    7: .standard(proto: "dst_cell_map"),
    8: .standard(proto: "dst_cell_styles_container"),
    9: .standard(proto: "src_undo_cell_map"),
    10: .standard(proto: "dst_undo_cell_map"),
    11: .standard(proto: "dst_merge_owner_rollback_index"),
    12: .standard(proto: "formula_rewrite_commands"),
    13: .standard(proto: "merge_action_to_restore"),
    14: .standard(proto: "comment_cell_uids_to_restore"),
    15: .standard(proto: "comment_storages_to_restore"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._dstTableInfoIDPath == nil {return false}
    if self._srcUidRange == nil {return false}
    if self._dstUidRange == nil {return false}
    if self._srcCellMap == nil {return false}
    if self._dstMergeOwnerRollbackIndex == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._dstTableInfoIDPath, !v.isInitialized {return false}
    if let v = self._srcUidRange, !v.isInitialized {return false}
    if let v = self._dstUidRange, !v.isInitialized {return false}
    if let v = self._srcCellMap, !v.isInitialized {return false}
    if let v = self._dstCellMap, !v.isInitialized {return false}
    if let v = self._dstCellStylesContainer, !v.isInitialized {return false}
    if let v = self._srcUndoCellMap, !v.isInitialized {return false}
    if let v = self._dstUndoCellMap, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.formulaRewriteCommands) {return false}
    if let v = self._mergeActionToRestore, !v.isInitialized {return false}
    if let v = self._commentCellUidsToRestore, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.commentStoragesToRestore) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._dstTableInfoIDPath)
      case 3: try decoder.decodeSingularMessageField(value: &self._srcUidRange)
      case 4: try decoder.decodeSingularMessageField(value: &self._dstUidRange)
      case 5: try decoder.decodeSingularEnumField(value: &self._tableDimension)
      case 6: try decoder.decodeSingularMessageField(value: &self._srcCellMap)
      case 7: try decoder.decodeSingularMessageField(value: &self._dstCellMap)
      case 8: try decoder.decodeSingularMessageField(value: &self._dstCellStylesContainer)
      case 9: try decoder.decodeSingularMessageField(value: &self._srcUndoCellMap)
      case 10: try decoder.decodeSingularMessageField(value: &self._dstUndoCellMap)
      case 11: try decoder.decodeSingularUInt32Field(value: &self._dstMergeOwnerRollbackIndex)
      case 12: try decoder.decodeRepeatedMessageField(value: &self.formulaRewriteCommands)
      case 13: try decoder.decodeSingularMessageField(value: &self._mergeActionToRestore)
      case 14: try decoder.decodeSingularMessageField(value: &self._commentCellUidsToRestore)
      case 15: try decoder.decodeRepeatedMessageField(value: &self.commentStoragesToRestore)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._dstTableInfoIDPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._srcUidRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._dstUidRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._tableDimension {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    }
    if let v = self._srcCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._dstCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._dstCellStylesContainer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._srcUndoCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._dstUndoCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._dstMergeOwnerRollbackIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
    }
    if !self.formulaRewriteCommands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.formulaRewriteCommands, fieldNumber: 12)
    }
    if let v = self._mergeActionToRestore {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }
    if let v = self._commentCellUidsToRestore {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }
    if !self.commentStoragesToRestore.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.commentStoragesToRestore, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandMoveCellsArchive, rhs: TST_CommandMoveCellsArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._dstTableInfoIDPath != rhs._dstTableInfoIDPath {return false}
    if lhs._srcUidRange != rhs._srcUidRange {return false}
    if lhs._dstUidRange != rhs._dstUidRange {return false}
    if lhs._tableDimension != rhs._tableDimension {return false}
    if lhs._srcCellMap != rhs._srcCellMap {return false}
    if lhs._dstCellMap != rhs._dstCellMap {return false}
    if lhs._dstCellStylesContainer != rhs._dstCellStylesContainer {return false}
    if lhs._srcUndoCellMap != rhs._srcUndoCellMap {return false}
    if lhs._dstUndoCellMap != rhs._dstUndoCellMap {return false}
    if lhs._dstMergeOwnerRollbackIndex != rhs._dstMergeOwnerRollbackIndex {return false}
    if lhs.formulaRewriteCommands != rhs.formulaRewriteCommands {return false}
    if lhs._mergeActionToRestore != rhs._mergeActionToRestore {return false}
    if lhs._commentCellUidsToRestore != rhs._commentCellUidsToRestore {return false}
    if lhs.commentStoragesToRestore != rhs.commentStoragesToRestore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_ColumnRowMetadataArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ColumnRowMetadataArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "size"),
    2: .standard(proto: "hiding_action"),
    3: .standard(proto: "cell_style"),
    4: .standard(proto: "text_style"),
    5: .same(proto: "uuid"),
  ]

  public var isInitialized: Bool {
    if self._size == nil {return false}
    if self._hidingAction == nil {return false}
    if let v = self._cellStyle, !v.isInitialized {return false}
    if let v = self._textStyle, !v.isInitialized {return false}
    if let v = self._uuid, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._size)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._hidingAction)
      case 3: try decoder.decodeSingularMessageField(value: &self._cellStyle)
      case 4: try decoder.decodeSingularMessageField(value: &self._textStyle)
      case 5: try decoder.decodeSingularMessageField(value: &self._uuid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._size {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    if let v = self._hidingAction {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._cellStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._textStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._uuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_ColumnRowMetadataArchive, rhs: TST_ColumnRowMetadataArchive) -> Bool {
    if lhs._size != rhs._size {return false}
    if lhs._hidingAction != rhs._hidingAction {return false}
    if lhs._cellStyle != rhs._cellStyle {return false}
    if lhs._textStyle != rhs._textStyle {return false}
    if lhs._uuid != rhs._uuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandInsertColumnsOrRowsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandInsertColumnsOrRowsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "bundle"),
    3: .standard(proto: "cell_map"),
    4: .standard(proto: "undo_commands"),
    5: .standard(proto: "undo_cell_map"),
    6: .standard(proto: "sort_order"),
    7: .standard(proto: "filter_set"),
    8: .standard(proto: "should_edge_expand_formula_ranges"),
    9: .standard(proto: "was_categorized"),
    10: .standard(proto: "undo_order"),
    11: .standard(proto: "src_row_column_uid"),
    12: .standard(proto: "opp_row_column_uid"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._bundle == nil {return false}
    if self._srcRowColumnUid == nil {return false}
    if self._oppRowColumnUid == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._bundle, !v.isInitialized {return false}
    if let v = self._cellMap, !v.isInitialized {return false}
    if let v = self._undoCommands, !v.isInitialized {return false}
    if let v = self._undoCellMap, !v.isInitialized {return false}
    if let v = self._sortOrder, !v.isInitialized {return false}
    if let v = self._filterSet, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.undoOrder) {return false}
    if let v = self._srcRowColumnUid, !v.isInitialized {return false}
    if let v = self._oppRowColumnUid, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._bundle)
      case 3: try decoder.decodeSingularMessageField(value: &self._cellMap)
      case 4: try decoder.decodeSingularMessageField(value: &self._undoCommands)
      case 5: try decoder.decodeSingularMessageField(value: &self._undoCellMap)
      case 6: try decoder.decodeSingularMessageField(value: &self._sortOrder)
      case 7: try decoder.decodeSingularMessageField(value: &self._filterSet)
      case 8: try decoder.decodeSingularBoolField(value: &self._shouldEdgeExpandFormulaRanges)
      case 9: try decoder.decodeSingularBoolField(value: &self._wasCategorized)
      case 10: try decoder.decodeRepeatedMessageField(value: &self.undoOrder)
      case 11: try decoder.decodeSingularMessageField(value: &self._srcRowColumnUid)
      case 12: try decoder.decodeSingularMessageField(value: &self._oppRowColumnUid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._bundle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._cellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._undoCommands {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._undoCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._sortOrder {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._filterSet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._shouldEdgeExpandFormulaRanges {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._wasCategorized {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    if !self.undoOrder.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.undoOrder, fieldNumber: 10)
    }
    if let v = self._srcRowColumnUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._oppRowColumnUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandInsertColumnsOrRowsArchive, rhs: TST_CommandInsertColumnsOrRowsArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._bundle != rhs._bundle {return false}
    if lhs._cellMap != rhs._cellMap {return false}
    if lhs._undoCommands != rhs._undoCommands {return false}
    if lhs._undoCellMap != rhs._undoCellMap {return false}
    if lhs._sortOrder != rhs._sortOrder {return false}
    if lhs._filterSet != rhs._filterSet {return false}
    if lhs._shouldEdgeExpandFormulaRanges != rhs._shouldEdgeExpandFormulaRanges {return false}
    if lhs._wasCategorized != rhs._wasCategorized {return false}
    if lhs.undoOrder != rhs.undoOrder {return false}
    if lhs._srcRowColumnUid != rhs._srcRowColumnUid {return false}
    if lhs._oppRowColumnUid != rhs._oppRowColumnUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_ColumnRowBundleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ColumnRowBundleArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_row"),
    2: .standard(proto: "view_uid_list"),
    3: .standard(proto: "view_type_list"),
    4: .standard(proto: "base_uid_list"),
    5: .standard(proto: "base_type_list"),
    6: .standard(proto: "category_order_uid_list"),
    7: .standard(proto: "category_order_type_list"),
    8: .standard(proto: "metadata_list"),
  ]

  public var isInitialized: Bool {
    if self._isRow == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.viewUidList) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.baseUidList) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.categoryOrderUidList) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.metadataList) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._isRow)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.viewUidList)
      case 3: try decoder.decodeRepeatedEnumField(value: &self.viewTypeList)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.baseUidList)
      case 5: try decoder.decodeRepeatedEnumField(value: &self.baseTypeList)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.categoryOrderUidList)
      case 7: try decoder.decodeRepeatedEnumField(value: &self.categoryOrderTypeList)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.metadataList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._isRow {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if !self.viewUidList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.viewUidList, fieldNumber: 2)
    }
    if !self.viewTypeList.isEmpty {
      try visitor.visitRepeatedEnumField(value: self.viewTypeList, fieldNumber: 3)
    }
    if !self.baseUidList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.baseUidList, fieldNumber: 4)
    }
    if !self.baseTypeList.isEmpty {
      try visitor.visitRepeatedEnumField(value: self.baseTypeList, fieldNumber: 5)
    }
    if !self.categoryOrderUidList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.categoryOrderUidList, fieldNumber: 6)
    }
    if !self.categoryOrderTypeList.isEmpty {
      try visitor.visitRepeatedEnumField(value: self.categoryOrderTypeList, fieldNumber: 7)
    }
    if !self.metadataList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.metadataList, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_ColumnRowBundleArchive, rhs: TST_ColumnRowBundleArchive) -> Bool {
    if lhs._isRow != rhs._isRow {return false}
    if lhs.viewUidList != rhs.viewUidList {return false}
    if lhs.viewTypeList != rhs.viewTypeList {return false}
    if lhs.baseUidList != rhs.baseUidList {return false}
    if lhs.baseTypeList != rhs.baseTypeList {return false}
    if lhs.categoryOrderUidList != rhs.categoryOrderUidList {return false}
    if lhs.categoryOrderTypeList != rhs.categoryOrderTypeList {return false}
    if lhs.metadataList != rhs.metadataList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandRemoveColumnsOrRowsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandRemoveColumnsOrRowsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "bundle"),
    3: .standard(proto: "cell_map"),
    4: .standard(proto: "undo_cell_map"),
    5: .standard(proto: "undo_filter_set"),
    6: .standard(proto: "undo_sort_order"),
    7: .standard(proto: "formula_rewrite_command_for_undo"),
    8: .standard(proto: "inverse_should_edge_expand_formula_ranges"),
    9: .standard(proto: "undo_order"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._bundle == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._bundle, !v.isInitialized {return false}
    if let v = self._cellMap, !v.isInitialized {return false}
    if let v = self._undoCellMap, !v.isInitialized {return false}
    if let v = self._undoFilterSet, !v.isInitialized {return false}
    if let v = self._undoSortOrder, !v.isInitialized {return false}
    if let v = self._formulaRewriteCommandForUndo, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.undoOrder) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._bundle)
      case 3: try decoder.decodeSingularMessageField(value: &self._cellMap)
      case 4: try decoder.decodeSingularMessageField(value: &self._undoCellMap)
      case 5: try decoder.decodeSingularMessageField(value: &self._undoFilterSet)
      case 6: try decoder.decodeSingularMessageField(value: &self._undoSortOrder)
      case 7: try decoder.decodeSingularMessageField(value: &self._formulaRewriteCommandForUndo)
      case 8: try decoder.decodeSingularBoolField(value: &self._inverseShouldEdgeExpandFormulaRanges)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.undoOrder)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._bundle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._cellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._undoCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._undoFilterSet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._undoSortOrder {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._formulaRewriteCommandForUndo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._inverseShouldEdgeExpandFormulaRanges {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if !self.undoOrder.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.undoOrder, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandRemoveColumnsOrRowsArchive, rhs: TST_CommandRemoveColumnsOrRowsArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._bundle != rhs._bundle {return false}
    if lhs._cellMap != rhs._cellMap {return false}
    if lhs._undoCellMap != rhs._undoCellMap {return false}
    if lhs._undoFilterSet != rhs._undoFilterSet {return false}
    if lhs._undoSortOrder != rhs._undoSortOrder {return false}
    if lhs._formulaRewriteCommandForUndo != rhs._formulaRewriteCommandForUndo {return false}
    if lhs._inverseShouldEdgeExpandFormulaRanges != rhs._inverseShouldEdgeExpandFormulaRanges {return false}
    if lhs.undoOrder != rhs.undoOrder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandRowColumnRangeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandRowColumnRangeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "uids"),
    3: .standard(proto: "is_row"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._isRow == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.uids) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.uids)
      case 3: try decoder.decodeSingularBoolField(value: &self._isRow)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.uids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.uids, fieldNumber: 2)
    }
    if let v = self._isRow {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandRowColumnRangeArchive, rhs: TST_CommandRowColumnRangeArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.uids != rhs.uids {return false}
    if lhs._isRow != rhs._isRow {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandResizeColumnOrRowArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandResizeColumnOrRowArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "sizes"),
    3: .standard(proto: "sizes_for_undo"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedFloatField(value: &self.sizes)
      case 3: try decoder.decodeRepeatedFloatField(value: &self.sizesForUndo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.sizes.isEmpty {
      try visitor.visitRepeatedFloatField(value: self.sizes, fieldNumber: 2)
    }
    if !self.sizesForUndo.isEmpty {
      try visitor.visitRepeatedFloatField(value: self.sizesForUndo, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandResizeColumnOrRowArchive, rhs: TST_CommandResizeColumnOrRowArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.sizes != rhs.sizes {return false}
    if lhs.sizesForUndo != rhs.sizesForUndo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandCategoryResizeColumnOrRowArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandCategoryResizeColumnOrRowArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "category_row_sizes"),
    3: .standard(proto: "category_row_sizes_for_undo"),
    4: .standard(proto: "category_label_row_sizes"),
    5: .standard(proto: "category_label_row_sizes_for_undo"),
    6: .standard(proto: "category_column_size"),
    7: .standard(proto: "category_column_size_for_undo"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedFloatField(value: &self.categoryRowSizes)
      case 3: try decoder.decodeRepeatedFloatField(value: &self.categoryRowSizesForUndo)
      case 4: try decoder.decodeRepeatedFloatField(value: &self.categoryLabelRowSizes)
      case 5: try decoder.decodeRepeatedFloatField(value: &self.categoryLabelRowSizesForUndo)
      case 6: try decoder.decodeSingularDoubleField(value: &self._categoryColumnSize)
      case 7: try decoder.decodeSingularDoubleField(value: &self._categoryColumnSizeForUndo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.categoryRowSizes.isEmpty {
      try visitor.visitRepeatedFloatField(value: self.categoryRowSizes, fieldNumber: 2)
    }
    if !self.categoryRowSizesForUndo.isEmpty {
      try visitor.visitRepeatedFloatField(value: self.categoryRowSizesForUndo, fieldNumber: 3)
    }
    if !self.categoryLabelRowSizes.isEmpty {
      try visitor.visitRepeatedFloatField(value: self.categoryLabelRowSizes, fieldNumber: 4)
    }
    if !self.categoryLabelRowSizesForUndo.isEmpty {
      try visitor.visitRepeatedFloatField(value: self.categoryLabelRowSizesForUndo, fieldNumber: 5)
    }
    if let v = self._categoryColumnSize {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    }
    if let v = self._categoryColumnSizeForUndo {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandCategoryResizeColumnOrRowArchive, rhs: TST_CommandCategoryResizeColumnOrRowArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.categoryRowSizes != rhs.categoryRowSizes {return false}
    if lhs.categoryRowSizesForUndo != rhs.categoryRowSizesForUndo {return false}
    if lhs.categoryLabelRowSizes != rhs.categoryLabelRowSizes {return false}
    if lhs.categoryLabelRowSizesForUndo != rhs.categoryLabelRowSizesForUndo {return false}
    if lhs._categoryColumnSize != rhs._categoryColumnSize {return false}
    if lhs._categoryColumnSizeForUndo != rhs._categoryColumnSizeForUndo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandHideShowArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandHideShowArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "hide_show_action"),
    3: .standard(proto: "hiding_action"),
    4: .standard(proto: "hide_show_action_for_undo"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._hideShowAction == nil {return false}
    if self._hidingAction == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularEnumField(value: &self._hideShowAction)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._hidingAction)
      case 4: try decoder.decodeRepeatedEnumField(value: &self.hideShowActionForUndo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._hideShowAction {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._hidingAction {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if !self.hideShowActionForUndo.isEmpty {
      try visitor.visitRepeatedEnumField(value: self.hideShowActionForUndo, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandHideShowArchive, rhs: TST_CommandHideShowArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._hideShowAction != rhs._hideShowAction {return false}
    if lhs._hidingAction != rhs._hidingAction {return false}
    if lhs.hideShowActionForUndo != rhs.hideShowActionForUndo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandTextPreflightInsertCellArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandTextPreflightInsertCellArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "super"),
    6: .standard(proto: "coalesced_textcommand"),
    8: .same(proto: "postflightcommand"),
    9: .standard(proto: "grouped_with_postflight"),
    10: .standard(proto: "editing_cell"),
    11: .standard(proto: "editing_storage"),
    12: .standard(proto: "last_column_hit_by_tap"),
    13: .standard(proto: "cell_uid"),
    14: .standard(proto: "archived_initial_selection_path"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._editingCell == nil {return false}
    if self._editingStorage == nil {return false}
    if self._cellUid == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._coalescedTextcommand, !v.isInitialized {return false}
    if let v = self._postflightcommand, !v.isInitialized {return false}
    if let v = self._editingCell, !v.isInitialized {return false}
    if let v = self._editingStorage, !v.isInitialized {return false}
    if let v = self._cellUid, !v.isInitialized {return false}
    if let v = self._archivedInitialSelectionPath, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeSingularMessageField(value: &self._super)
      case 6: try decoder.decodeSingularMessageField(value: &self._coalescedTextcommand)
      case 8: try decoder.decodeSingularMessageField(value: &self._postflightcommand)
      case 9: try decoder.decodeSingularBoolField(value: &self._groupedWithPostflight)
      case 10: try decoder.decodeSingularMessageField(value: &self._editingCell)
      case 11: try decoder.decodeSingularMessageField(value: &self._editingStorage)
      case 12: try decoder.decodeSingularUInt32Field(value: &self._lastColumnHitByTap)
      case 13: try decoder.decodeSingularMessageField(value: &self._cellUid)
      case 14: try decoder.decodeSingularMessageField(value: &self._archivedInitialSelectionPath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._coalescedTextcommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._postflightcommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._groupedWithPostflight {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    if let v = self._editingCell {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._editingStorage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._lastColumnHitByTap {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
    }
    if let v = self._cellUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }
    if let v = self._archivedInitialSelectionPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandTextPreflightInsertCellArchive, rhs: TST_CommandTextPreflightInsertCellArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._coalescedTextcommand != rhs._coalescedTextcommand {return false}
    if lhs._postflightcommand != rhs._postflightcommand {return false}
    if lhs._groupedWithPostflight != rhs._groupedWithPostflight {return false}
    if lhs._editingCell != rhs._editingCell {return false}
    if lhs._editingStorage != rhs._editingStorage {return false}
    if lhs._lastColumnHitByTap != rhs._lastColumnHitByTap {return false}
    if lhs._cellUid != rhs._cellUid {return false}
    if lhs._archivedInitialSelectionPath != rhs._archivedInitialSelectionPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandPostflightSetCellArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandPostflightSetCellArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "super"),
    4: .same(proto: "childcommandundo"),
    6: .standard(proto: "editing_cell"),
    7: .standard(proto: "new_cell"),
    8: .standard(proto: "editing_storage"),
    9: .standard(proto: "last_column_hit_by_tap"),
    10: .standard(proto: "cell_uid"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._editingCell == nil {return false}
    if self._newCell == nil {return false}
    if self._editingStorage == nil {return false}
    if self._cellUid == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._childcommandundo, !v.isInitialized {return false}
    if let v = self._editingCell, !v.isInitialized {return false}
    if let v = self._newCell, !v.isInitialized {return false}
    if let v = self._editingStorage, !v.isInitialized {return false}
    if let v = self._cellUid, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeSingularMessageField(value: &self._super)
      case 4: try decoder.decodeSingularMessageField(value: &self._childcommandundo)
      case 6: try decoder.decodeSingularMessageField(value: &self._editingCell)
      case 7: try decoder.decodeSingularMessageField(value: &self._newCell)
      case 8: try decoder.decodeSingularMessageField(value: &self._editingStorage)
      case 9: try decoder.decodeSingularUInt32Field(value: &self._lastColumnHitByTap)
      case 10: try decoder.decodeSingularMessageField(value: &self._cellUid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._childcommandundo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._editingCell {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._newCell {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._editingStorage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._lastColumnHitByTap {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
    }
    if let v = self._cellUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandPostflightSetCellArchive, rhs: TST_CommandPostflightSetCellArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._childcommandundo != rhs._childcommandundo {return false}
    if lhs._editingCell != rhs._editingCell {return false}
    if lhs._newCell != rhs._newCell {return false}
    if lhs._editingStorage != rhs._editingStorage {return false}
    if lhs._lastColumnHitByTap != rhs._lastColumnHitByTap {return false}
    if lhs._cellUid != rhs._cellUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandChangeTableAreaForColumnOrRowArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandChangeTableAreaForColumnOrRowArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "table_area_transition"),
    3: .standard(proto: "cell_diff_map"),
    4: .standard(proto: "undo_cell_diff_map"),
    5: .standard(proto: "undo_commands"),
    6: .standard(proto: "action_string"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._tableAreaTransition == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._cellDiffMap, !v.isInitialized {return false}
    if let v = self._undoCellDiffMap, !v.isInitialized {return false}
    if let v = self._undoCommands, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularEnumField(value: &self._tableAreaTransition)
      case 3: try decoder.decodeSingularMessageField(value: &self._cellDiffMap)
      case 4: try decoder.decodeSingularMessageField(value: &self._undoCellDiffMap)
      case 5: try decoder.decodeSingularMessageField(value: &self._undoCommands)
      case 6: try decoder.decodeSingularStringField(value: &self._actionString)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._tableAreaTransition {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._cellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._undoCellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._undoCommands {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._actionString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandChangeTableAreaForColumnOrRowArchive, rhs: TST_CommandChangeTableAreaForColumnOrRowArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._tableAreaTransition != rhs._tableAreaTransition {return false}
    if lhs._cellDiffMap != rhs._cellDiffMap {return false}
    if lhs._undoCellDiffMap != rhs._undoCellDiffMap {return false}
    if lhs._undoCommands != rhs._undoCommands {return false}
    if lhs._actionString != rhs._actionString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetPencilAnnotationsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetPencilAnnotationsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "annotations"),
    3: .same(proto: "formulas"),
    4: .standard(proto: "formula_indexes"),
    5: .standard(proto: "inverse_formulas"),
    6: .standard(proto: "inverse_formula_indexes"),
    7: .standard(proto: "rollback_index"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.annotations) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.formulas) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.inverseFormulas) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.annotations)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.formulas)
      case 4: try decoder.decodeRepeatedUInt64Field(value: &self.formulaIndexes)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.inverseFormulas)
      case 6: try decoder.decodeRepeatedUInt64Field(value: &self.inverseFormulaIndexes)
      case 7: try decoder.decodeSingularUInt64Field(value: &self._rollbackIndex)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.annotations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.annotations, fieldNumber: 2)
    }
    if !self.formulas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.formulas, fieldNumber: 3)
    }
    if !self.formulaIndexes.isEmpty {
      try visitor.visitRepeatedUInt64Field(value: self.formulaIndexes, fieldNumber: 4)
    }
    if !self.inverseFormulas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inverseFormulas, fieldNumber: 5)
    }
    if !self.inverseFormulaIndexes.isEmpty {
      try visitor.visitRepeatedUInt64Field(value: self.inverseFormulaIndexes, fieldNumber: 6)
    }
    if let v = self._rollbackIndex {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetPencilAnnotationsArchive, rhs: TST_CommandSetPencilAnnotationsArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.annotations != rhs.annotations {return false}
    if lhs.formulas != rhs.formulas {return false}
    if lhs.formulaIndexes != rhs.formulaIndexes {return false}
    if lhs.inverseFormulas != rhs.inverseFormulas {return false}
    if lhs.inverseFormulaIndexes != rhs.inverseFormulaIndexes {return false}
    if lhs._rollbackIndex != rhs._rollbackIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetTableNameArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetTableNameArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "newtablename"),
    2: .same(proto: "oldtablename"),
    3: .same(proto: "newstyle"),
    4: .same(proto: "oldstyle"),
    5: .same(proto: "super"),
    6: .standard(proto: "old_shape_style"),
    7: .standard(proto: "new_shape_style"),
    8: .standard(proto: "old_table_name_border_enabled"),
    9: .standard(proto: "new_table_name_border_enabled"),
  ]

  public var isInitialized: Bool {
    if self._newtablename == nil {return false}
    if self._super == nil {return false}
    if let v = self._newstyle, !v.isInitialized {return false}
    if let v = self._oldstyle, !v.isInitialized {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._oldShapeStyle, !v.isInitialized {return false}
    if let v = self._newShapeStyle, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._newtablename)
      case 2: try decoder.decodeSingularStringField(value: &self._oldtablename)
      case 3: try decoder.decodeSingularMessageField(value: &self._newstyle)
      case 4: try decoder.decodeSingularMessageField(value: &self._oldstyle)
      case 5: try decoder.decodeSingularMessageField(value: &self._super)
      case 6: try decoder.decodeSingularMessageField(value: &self._oldShapeStyle)
      case 7: try decoder.decodeSingularMessageField(value: &self._newShapeStyle)
      case 8: try decoder.decodeSingularBoolField(value: &self._oldTableNameBorderEnabled)
      case 9: try decoder.decodeSingularBoolField(value: &self._newTableNameBorderEnabled)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._newtablename {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._oldtablename {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._newstyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._oldstyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._oldShapeStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._newShapeStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._oldTableNameBorderEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._newTableNameBorderEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetTableNameArchive, rhs: TST_CommandSetTableNameArchive) -> Bool {
    if lhs._newtablename != rhs._newtablename {return false}
    if lhs._oldtablename != rhs._oldtablename {return false}
    if lhs._newstyle != rhs._newstyle {return false}
    if lhs._oldstyle != rhs._oldstyle {return false}
    if lhs._super != rhs._super {return false}
    if lhs._oldShapeStyle != rhs._oldShapeStyle {return false}
    if lhs._newShapeStyle != rhs._newShapeStyle {return false}
    if lhs._oldTableNameBorderEnabled != rhs._oldTableNameBorderEnabled {return false}
    if lhs._newTableNameBorderEnabled != rhs._newTableNameBorderEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetTableNameEnabledArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetTableNameEnabledArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "table_name_enabled"),
    3: .standard(proto: "prev_table_name_enabled"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._tableNameEnabled == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularBoolField(value: &self._tableNameEnabled)
      case 3: try decoder.decodeSingularBoolField(value: &self._prevTableNameEnabled)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._tableNameEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._prevTableNameEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetTableNameEnabledArchive, rhs: TST_CommandSetTableNameEnabledArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._tableNameEnabled != rhs._tableNameEnabled {return false}
    if lhs._prevTableNameEnabled != rhs._prevTableNameEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetTableFontSizeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetTableFontSizeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "is_increase"),
    3: .standard(proto: "font_size_diff"),
    4: .standard(proto: "font_size_list"),
    5: .standard(proto: "inverse_font_size_list"),
    6: .standard(proto: "cell_diff_map"),
    7: .standard(proto: "inverse_cell_diff_map"),
    8: .standard(proto: "styles_container_refresh_done"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._isIncrease == nil {return false}
    if self._fontSizeDiff == nil {return false}
    if self._stylesContainerRefreshDone == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._cellDiffMap, !v.isInitialized {return false}
    if let v = self._inverseCellDiffMap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularBoolField(value: &self._isIncrease)
      case 3: try decoder.decodeSingularInt32Field(value: &self._fontSizeDiff)
      case 4: try decoder.decodeRepeatedDoubleField(value: &self.fontSizeList)
      case 5: try decoder.decodeRepeatedDoubleField(value: &self.inverseFontSizeList)
      case 6: try decoder.decodeSingularMessageField(value: &self._cellDiffMap)
      case 7: try decoder.decodeSingularMessageField(value: &self._inverseCellDiffMap)
      case 8: try decoder.decodeSingularBoolField(value: &self._stylesContainerRefreshDone)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._isIncrease {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._fontSizeDiff {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if !self.fontSizeList.isEmpty {
      try visitor.visitRepeatedDoubleField(value: self.fontSizeList, fieldNumber: 4)
    }
    if !self.inverseFontSizeList.isEmpty {
      try visitor.visitRepeatedDoubleField(value: self.inverseFontSizeList, fieldNumber: 5)
    }
    if let v = self._cellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._inverseCellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._stylesContainerRefreshDone {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetTableFontSizeArchive, rhs: TST_CommandSetTableFontSizeArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._isIncrease != rhs._isIncrease {return false}
    if lhs._fontSizeDiff != rhs._fontSizeDiff {return false}
    if lhs.fontSizeList != rhs.fontSizeList {return false}
    if lhs.inverseFontSizeList != rhs.inverseFontSizeList {return false}
    if lhs._cellDiffMap != rhs._cellDiffMap {return false}
    if lhs._inverseCellDiffMap != rhs._inverseCellDiffMap {return false}
    if lhs._stylesContainerRefreshDone != rhs._stylesContainerRefreshDone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetTableFontNameArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetTableFontNameArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "font_name"),
    3: .standard(proto: "preserve_face"),
    4: .standard(proto: "previous_font_name"),
    5: .standard(proto: "previous_table_style"),
    6: .standard(proto: "previous_text_styles"),
    7: .standard(proto: "cell_diff_map"),
    8: .standard(proto: "inverse_cell_diff_map"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._fontName == nil {return false}
    if self._preserveFace == nil {return false}
    if self._cellDiffMap == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._previousTableStyle, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.previousTextStyles) {return false}
    if let v = self._cellDiffMap, !v.isInitialized {return false}
    if let v = self._inverseCellDiffMap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularStringField(value: &self._fontName)
      case 3: try decoder.decodeSingularBoolField(value: &self._preserveFace)
      case 4: try decoder.decodeSingularStringField(value: &self._previousFontName)
      case 5: try decoder.decodeSingularMessageField(value: &self._previousTableStyle)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.previousTextStyles)
      case 7: try decoder.decodeSingularMessageField(value: &self._cellDiffMap)
      case 8: try decoder.decodeSingularMessageField(value: &self._inverseCellDiffMap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._fontName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._preserveFace {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._previousFontName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._previousTableStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.previousTextStyles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.previousTextStyles, fieldNumber: 6)
    }
    if let v = self._cellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._inverseCellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetTableFontNameArchive, rhs: TST_CommandSetTableFontNameArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._fontName != rhs._fontName {return false}
    if lhs._preserveFace != rhs._preserveFace {return false}
    if lhs._previousFontName != rhs._previousFontName {return false}
    if lhs._previousTableStyle != rhs._previousTableStyle {return false}
    if lhs.previousTextStyles != rhs.previousTextStyles {return false}
    if lhs._cellDiffMap != rhs._cellDiffMap {return false}
    if lhs._inverseCellDiffMap != rhs._inverseCellDiffMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetTableNameHeightArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetTableNameHeightArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "old_table_name_height"),
    3: .standard(proto: "new_table_name_height"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._oldTableNameHeight == nil {return false}
    if self._newTableNameHeight == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularDoubleField(value: &self._oldTableNameHeight)
      case 3: try decoder.decodeSingularDoubleField(value: &self._newTableNameHeight)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldTableNameHeight {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    if let v = self._newTableNameHeight {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetTableNameHeightArchive, rhs: TST_CommandSetTableNameHeightArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldTableNameHeight != rhs._oldTableNameHeight {return false}
    if lhs._newTableNameHeight != rhs._newTableNameHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetNowArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetNowArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetNowArchive, rhs: TST_CommandSetNowArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetWasCutArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetWasCutArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "from_table_uid"),
    3: .standard(proto: "prev_from_table_uid"),
    4: .standard(proto: "was_cut"),
    5: .standard(proto: "prev_was_cut"),
    6: .standard(proto: "from_group_by_uid"),
    7: .standard(proto: "prev_from_group_by_uid"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._fromTableUid == nil {return false}
    if self._prevFromTableUid == nil {return false}
    if self._wasCut == nil {return false}
    if self._prevWasCut == nil {return false}
    if self._fromGroupByUid == nil {return false}
    if self._prevFromGroupByUid == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._fromTableUid, !v.isInitialized {return false}
    if let v = self._prevFromTableUid, !v.isInitialized {return false}
    if let v = self._fromGroupByUid, !v.isInitialized {return false}
    if let v = self._prevFromGroupByUid, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._fromTableUid)
      case 3: try decoder.decodeSingularMessageField(value: &self._prevFromTableUid)
      case 4: try decoder.decodeSingularBoolField(value: &self._wasCut)
      case 5: try decoder.decodeSingularBoolField(value: &self._prevWasCut)
      case 6: try decoder.decodeSingularMessageField(value: &self._fromGroupByUid)
      case 7: try decoder.decodeSingularMessageField(value: &self._prevFromGroupByUid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._fromTableUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._prevFromTableUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._wasCut {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._prevWasCut {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._fromGroupByUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._prevFromGroupByUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetWasCutArchive, rhs: TST_CommandSetWasCutArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._fromTableUid != rhs._fromTableUid {return false}
    if lhs._prevFromTableUid != rhs._prevFromTableUid {return false}
    if lhs._wasCut != rhs._wasCut {return false}
    if lhs._prevWasCut != rhs._prevWasCut {return false}
    if lhs._fromGroupByUid != rhs._fromGroupByUid {return false}
    if lhs._prevFromGroupByUid != rhs._prevFromGroupByUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandStyleCellsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandStyleCellsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "format_properties"),
    3: .same(proto: "selection"),
    4: .standard(proto: "undo_cell_map"),
    5: .standard(proto: "redo_cell_map"),
    6: .standard(proto: "text_undo"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._selection == nil {return false}
    if self._undoCellMap == nil {return false}
    if self._redoCellMap == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._formatProperties, !v.isInitialized {return false}
    if let v = self._selection, !v.isInitialized {return false}
    if let v = self._undoCellMap, !v.isInitialized {return false}
    if let v = self._redoCellMap, !v.isInitialized {return false}
    if let v = self._textUndo, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._formatProperties)
      case 3: try decoder.decodeSingularMessageField(value: &self._selection)
      case 4: try decoder.decodeSingularMessageField(value: &self._undoCellMap)
      case 5: try decoder.decodeSingularMessageField(value: &self._redoCellMap)
      case 6: try decoder.decodeSingularMessageField(value: &self._textUndo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._formatProperties {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._selection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._undoCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._redoCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._textUndo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandStyleCellsArchive, rhs: TST_CommandStyleCellsArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._formatProperties != rhs._formatProperties {return false}
    if lhs._selection != rhs._selection {return false}
    if lhs._undoCellMap != rhs._undoCellMap {return false}
    if lhs._redoCellMap != rhs._redoCellMap {return false}
    if lhs._textUndo != rhs._textUndo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandStyleTableArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandStyleTableArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "format_properties"),
    3: .standard(proto: "old_style"),
    4: .standard(proto: "new_style"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._formatProperties, !v.isInitialized {return false}
    if let v = self._oldStyle, !v.isInitialized {return false}
    if let v = self._newStyle, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._formatProperties)
      case 3: try decoder.decodeSingularMessageField(value: &self._oldStyle)
      case 4: try decoder.decodeSingularMessageField(value: &self._newStyle)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._formatProperties {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._oldStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._newStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandStyleTableArchive, rhs: TST_CommandStyleTableArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._formatProperties != rhs._formatProperties {return false}
    if lhs._oldStyle != rhs._oldStyle {return false}
    if lhs._newStyle != rhs._newStyle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetRepeatingHeaderEnabledArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetRepeatingHeaderEnabledArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "repeating_header_enabled"),
    2: .same(proto: "direction"),
    3: .same(proto: "super"),
    4: .standard(proto: "prev_repeating_header_enabled"),
  ]

  public var isInitialized: Bool {
    if self._repeatingHeaderEnabled == nil {return false}
    if self._direction == nil {return false}
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._repeatingHeaderEnabled)
      case 2: try decoder.decodeSingularEnumField(value: &self._direction)
      case 3: try decoder.decodeSingularMessageField(value: &self._super)
      case 4: try decoder.decodeSingularBoolField(value: &self._prevRepeatingHeaderEnabled)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._repeatingHeaderEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._direction {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._prevRepeatingHeaderEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetRepeatingHeaderEnabledArchive, rhs: TST_CommandSetRepeatingHeaderEnabledArchive) -> Bool {
    if lhs._repeatingHeaderEnabled != rhs._repeatingHeaderEnabled {return false}
    if lhs._direction != rhs._direction {return false}
    if lhs._super != rhs._super {return false}
    if lhs._prevRepeatingHeaderEnabled != rhs._prevRepeatingHeaderEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetFiltersEnabledArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetFiltersEnabledArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "new_filters_enabled"),
    3: .standard(proto: "old_filters_enabled"),
    4: .standard(proto: "rollback_uid_list"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._newFiltersEnabled == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.rollbackUidList) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularBoolField(value: &self._newFiltersEnabled)
      case 3: try decoder.decodeSingularBoolField(value: &self._oldFiltersEnabled)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.rollbackUidList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._newFiltersEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._oldFiltersEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if !self.rollbackUidList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rollbackUidList, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetFiltersEnabledArchive, rhs: TST_CommandSetFiltersEnabledArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._newFiltersEnabled != rhs._newFiltersEnabled {return false}
    if lhs._oldFiltersEnabled != rhs._oldFiltersEnabled {return false}
    if lhs.rollbackUidList != rhs.rollbackUidList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandAddTableStylePresetArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandAddTableStylePresetArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "preset_index"),
    3: .standard(proto: "table_styles"),
    4: .standard(proto: "send_notification"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._presetIndex == nil {return false}
    if self._tableStyles == nil {return false}
    if self._sendNotification == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._tableStyles, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularInt32Field(value: &self._presetIndex)
      case 3: try decoder.decodeSingularMessageField(value: &self._tableStyles)
      case 4: try decoder.decodeSingularBoolField(value: &self._sendNotification)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._presetIndex {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._tableStyles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._sendNotification {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandAddTableStylePresetArchive, rhs: TST_CommandAddTableStylePresetArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._presetIndex != rhs._presetIndex {return false}
    if lhs._tableStyles != rhs._tableStyles {return false}
    if lhs._sendNotification != rhs._sendNotification {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandRemoveTableStylePresetArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandRemoveTableStylePresetArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "theme"),
    3: .standard(proto: "removed_table_styles"),
    4: .standard(proto: "preset_id"),
    5: .standard(proto: "preset_index_in_theme"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._theme == nil {return false}
    if self._removedTableStyles == nil {return false}
    if self._presetID == nil {return false}
    if self._presetIndexInTheme == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._theme, !v.isInitialized {return false}
    if let v = self._removedTableStyles, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._theme)
      case 3: try decoder.decodeSingularMessageField(value: &self._removedTableStyles)
      case 4: try decoder.decodeSingularInt32Field(value: &self._presetID)
      case 5: try decoder.decodeSingularInt32Field(value: &self._presetIndexInTheme)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._theme {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._removedTableStyles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._presetID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._presetIndexInTheme {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandRemoveTableStylePresetArchive, rhs: TST_CommandRemoveTableStylePresetArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._theme != rhs._theme {return false}
    if lhs._removedTableStyles != rhs._removedTableStyles {return false}
    if lhs._presetID != rhs._presetID {return false}
    if lhs._presetIndexInTheme != rhs._presetIndexInTheme {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandReplaceTableStylePresetArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandReplaceTableStylePresetArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "theme"),
    3: .standard(proto: "old_table_styles"),
    4: .standard(proto: "new_table_styles"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._theme == nil {return false}
    if self._oldTableStyles == nil {return false}
    if self._newTableStyles == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._theme, !v.isInitialized {return false}
    if let v = self._oldTableStyles, !v.isInitialized {return false}
    if let v = self._newTableStyles, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._theme)
      case 3: try decoder.decodeSingularMessageField(value: &self._oldTableStyles)
      case 4: try decoder.decodeSingularMessageField(value: &self._newTableStyles)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._theme {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._oldTableStyles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._newTableStyles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandReplaceTableStylePresetArchive, rhs: TST_CommandReplaceTableStylePresetArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._theme != rhs._theme {return false}
    if lhs._oldTableStyles != rhs._oldTableStyles {return false}
    if lhs._newTableStyles != rhs._newTableStyles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandApplyTableStylePresetArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandApplyTableStylePresetArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "preset"),
    3: .same(proto: "styles"),
    4: .standard(proto: "undo_preset"),
    5: .standard(proto: "undo_styles"),
    6: .standard(proto: "cell_diff_map"),
    7: .standard(proto: "undo_cell_diff_map"),
    8: .standard(proto: "apply_preset_option"),
    11: .standard(proto: "table_clears_all_flag"),
    12: .standard(proto: "undo_table_clears_all_flag"),
    13: .standard(proto: "row_col_styles"),
    14: .standard(proto: "undo_row_col_styles"),
    15: .standard(proto: "change_prop_map_wrapper"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._applyPresetOption == nil {return false}
    if self._tableClearsAllFlag == nil {return false}
    if self._undoTableClearsAllFlag == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._preset, !v.isInitialized {return false}
    if let v = self._styles, !v.isInitialized {return false}
    if let v = self._undoPreset, !v.isInitialized {return false}
    if let v = self._undoStyles, !v.isInitialized {return false}
    if let v = self._cellDiffMap, !v.isInitialized {return false}
    if let v = self._undoCellDiffMap, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.rowColStyles) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.undoRowColStyles) {return false}
    if let v = self._changePropMapWrapper, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._preset)
      case 3: try decoder.decodeSingularMessageField(value: &self._styles)
      case 4: try decoder.decodeSingularMessageField(value: &self._undoPreset)
      case 5: try decoder.decodeSingularMessageField(value: &self._undoStyles)
      case 6: try decoder.decodeSingularMessageField(value: &self._cellDiffMap)
      case 7: try decoder.decodeSingularMessageField(value: &self._undoCellDiffMap)
      case 8: try decoder.decodeSingularInt32Field(value: &self._applyPresetOption)
      case 11: try decoder.decodeSingularBoolField(value: &self._tableClearsAllFlag)
      case 12: try decoder.decodeSingularBoolField(value: &self._undoTableClearsAllFlag)
      case 13: try decoder.decodeRepeatedMessageField(value: &self.rowColStyles)
      case 14: try decoder.decodeRepeatedMessageField(value: &self.undoRowColStyles)
      case 15: try decoder.decodeSingularMessageField(value: &self._changePropMapWrapper)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._preset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._styles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._undoPreset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._undoStyles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._cellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._undoCellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._applyPresetOption {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
    }
    if let v = self._tableClearsAllFlag {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    }
    if let v = self._undoTableClearsAllFlag {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
    }
    if !self.rowColStyles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rowColStyles, fieldNumber: 13)
    }
    if !self.undoRowColStyles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.undoRowColStyles, fieldNumber: 14)
    }
    if let v = self._changePropMapWrapper {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandApplyTableStylePresetArchive, rhs: TST_CommandApplyTableStylePresetArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._preset != rhs._preset {return false}
    if lhs._styles != rhs._styles {return false}
    if lhs._undoPreset != rhs._undoPreset {return false}
    if lhs._undoStyles != rhs._undoStyles {return false}
    if lhs._cellDiffMap != rhs._cellDiffMap {return false}
    if lhs._undoCellDiffMap != rhs._undoCellDiffMap {return false}
    if lhs._applyPresetOption != rhs._applyPresetOption {return false}
    if lhs._tableClearsAllFlag != rhs._tableClearsAllFlag {return false}
    if lhs._undoTableClearsAllFlag != rhs._undoTableClearsAllFlag {return false}
    if lhs.rowColStyles != rhs.rowColStyles {return false}
    if lhs.undoRowColStyles != rhs.undoRowColStyles {return false}
    if lhs._changePropMapWrapper != rhs._changePropMapWrapper {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetBaseArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetBaseArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "base"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._base == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._base)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._base {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetBaseArchive, rhs: TST_CommandSetBaseArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._base != rhs._base {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetBasePlacesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetBasePlacesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "base_places"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._basePlaces == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._basePlaces)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._basePlaces {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetBasePlacesArchive, rhs: TST_CommandSetBasePlacesArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._basePlaces != rhs._basePlaces {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetBaseUseMinusSignArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetBaseUseMinusSignArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "base_use_minus_sign"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._baseUseMinusSign == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularBoolField(value: &self._baseUseMinusSign)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._baseUseMinusSign {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetBaseUseMinusSignArchive, rhs: TST_CommandSetBaseUseMinusSignArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._baseUseMinusSign != rhs._baseUseMinusSign {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetCurrencyCodeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetCurrencyCodeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "currency_code"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._currencyCode == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularStringField(value: &self._currencyCode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._currencyCode {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetCurrencyCodeArchive, rhs: TST_CommandSetCurrencyCodeArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._currencyCode != rhs._currencyCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetFractionAccuracyArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetFractionAccuracyArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "fraction_accuracy"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._fractionAccuracy == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._fractionAccuracy)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._fractionAccuracy {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetFractionAccuracyArchive, rhs: TST_CommandSetFractionAccuracyArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._fractionAccuracy != rhs._fractionAccuracy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetNegativeNumberStyleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetNegativeNumberStyleArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "negative_number_style"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._negativeNumberStyle == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._negativeNumberStyle)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._negativeNumberStyle {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetNegativeNumberStyleArchive, rhs: TST_CommandSetNegativeNumberStyleArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._negativeNumberStyle != rhs._negativeNumberStyle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetNumberOfDecimalPlacesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetNumberOfDecimalPlacesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "decimal_places"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._decimalPlaces == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._decimalPlaces)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._decimalPlaces {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetNumberOfDecimalPlacesArchive, rhs: TST_CommandSetNumberOfDecimalPlacesArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._decimalPlaces != rhs._decimalPlaces {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetDateTimeFormatArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetDateTimeFormatArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "date_format_string"),
    3: .standard(proto: "time_format_string"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularStringField(value: &self._dateFormatString)
      case 3: try decoder.decodeSingularStringField(value: &self._timeFormatString)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._dateFormatString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._timeFormatString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetDateTimeFormatArchive, rhs: TST_CommandSetDateTimeFormatArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._dateFormatString != rhs._dateFormatString {return false}
    if lhs._timeFormatString != rhs._timeFormatString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetShowThousandsSeparatorArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetShowThousandsSeparatorArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "show_thousands_separator"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._showThousandsSeparator == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularBoolField(value: &self._showThousandsSeparator)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._showThousandsSeparator {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetShowThousandsSeparatorArchive, rhs: TST_CommandSetShowThousandsSeparatorArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._showThousandsSeparator != rhs._showThousandsSeparator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetUseAccountingStyleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetUseAccountingStyleArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "use_accounting_style"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._useAccountingStyle == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularBoolField(value: &self._useAccountingStyle)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._useAccountingStyle {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetUseAccountingStyleArchive, rhs: TST_CommandSetUseAccountingStyleArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._useAccountingStyle != rhs._useAccountingStyle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetRangeControlMinMaxIncArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetRangeControlMinMaxIncArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "minimum"),
    3: .same(proto: "maximum"),
    4: .same(proto: "increment"),
    5: .standard(proto: "cell_diff_map"),
    6: .standard(proto: "cell_uid_list"),
    7: .standard(proto: "inverse_cell_diff_map"),
    8: .standard(proto: "is_first_commit"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._isFirstCommit == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._cellDiffMap, !v.isInitialized {return false}
    if let v = self._cellUidList, !v.isInitialized {return false}
    if let v = self._inverseCellDiffMap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularDoubleField(value: &self._minimum)
      case 3: try decoder.decodeSingularDoubleField(value: &self._maximum)
      case 4: try decoder.decodeSingularDoubleField(value: &self._increment)
      case 5: try decoder.decodeSingularMessageField(value: &self._cellDiffMap)
      case 6: try decoder.decodeSingularMessageField(value: &self._cellUidList)
      case 7: try decoder.decodeSingularMessageField(value: &self._inverseCellDiffMap)
      case 8: try decoder.decodeSingularBoolField(value: &self._isFirstCommit)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._minimum {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    if let v = self._maximum {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }
    if let v = self._increment {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    }
    if let v = self._cellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._cellUidList {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._inverseCellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._isFirstCommit {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetRangeControlMinMaxIncArchive, rhs: TST_CommandSetRangeControlMinMaxIncArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._minimum != rhs._minimum {return false}
    if lhs._maximum != rhs._maximum {return false}
    if lhs._increment != rhs._increment {return false}
    if lhs._cellDiffMap != rhs._cellDiffMap {return false}
    if lhs._cellUidList != rhs._cellUidList {return false}
    if lhs._inverseCellDiffMap != rhs._inverseCellDiffMap {return false}
    if lhs._isFirstCommit != rhs._isFirstCommit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandMoveColumnsOrRowsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandMoveColumnsOrRowsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "dest_uid"),
    3: .same(proto: "before"),
    4: .standard(proto: "undo_dest_uid"),
    5: .standard(proto: "undo_before"),
    6: .same(proto: "uids"),
    7: .same(proto: "direction"),
    8: .standard(proto: "formula_rewrite_command"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._destUid == nil {return false}
    if self._before == nil {return false}
    if self._undoDestUid == nil {return false}
    if self._undoBefore == nil {return false}
    if self._direction == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._destUid, !v.isInitialized {return false}
    if let v = self._undoDestUid, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.uids) {return false}
    if let v = self._formulaRewriteCommand, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._destUid)
      case 3: try decoder.decodeSingularBoolField(value: &self._before)
      case 4: try decoder.decodeSingularMessageField(value: &self._undoDestUid)
      case 5: try decoder.decodeSingularBoolField(value: &self._undoBefore)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.uids)
      case 7: try decoder.decodeSingularEnumField(value: &self._direction)
      case 8: try decoder.decodeSingularMessageField(value: &self._formulaRewriteCommand)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._destUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._before {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._undoDestUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._undoBefore {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if !self.uids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.uids, fieldNumber: 6)
    }
    if let v = self._direction {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
    }
    if let v = self._formulaRewriteCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandMoveColumnsOrRowsArchive, rhs: TST_CommandMoveColumnsOrRowsArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._destUid != rhs._destUid {return false}
    if lhs._before != rhs._before {return false}
    if lhs._undoDestUid != rhs._undoDestUid {return false}
    if lhs._undoBefore != rhs._undoBefore {return false}
    if lhs.uids != rhs.uids {return false}
    if lhs._direction != rhs._direction {return false}
    if lhs._formulaRewriteCommand != rhs._formulaRewriteCommand {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSortArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSortArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "from_row_uids"),
    3: .standard(proto: "to_row_uids"),
    4: .standard(proto: "formula_rewrite_command"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.fromRowUids) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.toRowUids) {return false}
    if let v = self._formulaRewriteCommand, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.fromRowUids)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.toRowUids)
      case 4: try decoder.decodeSingularMessageField(value: &self._formulaRewriteCommand)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.fromRowUids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fromRowUids, fieldNumber: 2)
    }
    if !self.toRowUids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.toRowUids, fieldNumber: 3)
    }
    if let v = self._formulaRewriteCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSortArchive, rhs: TST_CommandSortArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.fromRowUids != rhs.fromRowUids {return false}
    if lhs.toRowUids != rhs.toRowUids {return false}
    if lhs._formulaRewriteCommand != rhs._formulaRewriteCommand {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandRewriteFormulasForTransposeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandRewriteFormulasForTransposeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "rewrite_spec"),
    3: .standard(proto: "formulas_to_rewrite"),
    4: .standard(proto: "warningset_map"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._rewriteSpec == nil {return false}
    if self._formulasToRewrite == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._rewriteSpec, !v.isInitialized {return false}
    if let v = self._formulasToRewrite, !v.isInitialized {return false}
    if let v = self._warningsetMap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._rewriteSpec)
      case 3: try decoder.decodeSingularMessageField(value: &self._formulasToRewrite)
      case 4: try decoder.decodeSingularMessageField(value: &self._warningsetMap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._rewriteSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._formulasToRewrite {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._warningsetMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandRewriteFormulasForTransposeArchive, rhs: TST_CommandRewriteFormulasForTransposeArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._rewriteSpec != rhs._rewriteSpec {return false}
    if lhs._formulasToRewrite != rhs._formulasToRewrite {return false}
    if lhs._warningsetMap != rhs._warningsetMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandRewriteTableFormulasForRewriteSpecArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandRewriteTableFormulasForRewriteSpecArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "rewrite_spec"),
    3: .standard(proto: "formulas_to_rewrite"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._rewriteSpec == nil {return false}
    if self._formulasToRewrite == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._rewriteSpec, !v.isInitialized {return false}
    if let v = self._formulasToRewrite, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._rewriteSpec)
      case 3: try decoder.decodeSingularMessageField(value: &self._formulasToRewrite)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._rewriteSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._formulasToRewrite {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandRewriteTableFormulasForRewriteSpecArchive, rhs: TST_CommandRewriteTableFormulasForRewriteSpecArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._rewriteSpec != rhs._rewriteSpec {return false}
    if lhs._formulasToRewrite != rhs._formulasToRewrite {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandRewriteMergeFormulasArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandRewriteMergeFormulasArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "rewrite_spec"),
    3: .standard(proto: "formulas_to_rewrite"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._rewriteSpec == nil {return false}
    if self._formulasToRewrite == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._rewriteSpec, !v.isInitialized {return false}
    if let v = self._formulasToRewrite, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._rewriteSpec)
      case 3: try decoder.decodeSingularMessageField(value: &self._formulasToRewrite)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._rewriteSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._formulasToRewrite {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandRewriteMergeFormulasArchive, rhs: TST_CommandRewriteMergeFormulasArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._rewriteSpec != rhs._rewriteSpec {return false}
    if lhs._formulasToRewrite != rhs._formulasToRewrite {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandRewriteCategoryFormulasArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandRewriteCategoryFormulasArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "rewrite_spec"),
    3: .standard(proto: "formulas_to_rewrite"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._rewriteSpec == nil {return false}
    if self._formulasToRewrite == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._rewriteSpec, !v.isInitialized {return false}
    if let v = self._formulasToRewrite, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._rewriteSpec)
      case 3: try decoder.decodeSingularMessageField(value: &self._formulasToRewrite)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._rewriteSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._formulasToRewrite {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandRewriteCategoryFormulasArchive, rhs: TST_CommandRewriteCategoryFormulasArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._rewriteSpec != rhs._rewriteSpec {return false}
    if lhs._formulasToRewrite != rhs._formulasToRewrite {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandRewriteFilterFormulasForTableResizeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandRewriteFilterFormulasForTableResizeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandRewriteFilterFormulasForTableResizeArchive, rhs: TST_CommandRewriteFilterFormulasForTableResizeArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandRewriteFilterFormulasForRewriteSpecArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandRewriteFilterFormulasForRewriteSpecArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "filter_set"),
    3: .standard(proto: "rewrite_spec"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._filterSet == nil {return false}
    if self._rewriteSpec == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._filterSet, !v.isInitialized {return false}
    if let v = self._rewriteSpec, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._filterSet)
      case 3: try decoder.decodeSingularMessageField(value: &self._rewriteSpec)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._filterSet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._rewriteSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandRewriteFilterFormulasForRewriteSpecArchive, rhs: TST_CommandRewriteFilterFormulasForRewriteSpecArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._filterSet != rhs._filterSet {return false}
    if lhs._rewriteSpec != rhs._rewriteSpec {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandRewriteConditionalStylesForRewriteSpecArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandRewriteConditionalStylesForRewriteSpecArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "rewrite_spec"),
    3: .standard(proto: "formulas_to_rewrite"),
    4: .standard(proto: "conditional_style_sets"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._rewriteSpec == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._rewriteSpec, !v.isInitialized {return false}
    if let v = self._formulasToRewrite, !v.isInitialized {return false}
    if let v = self._conditionalStyleSets, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._rewriteSpec)
      case 3: try decoder.decodeSingularMessageField(value: &self._formulasToRewrite)
      case 4: try decoder.decodeSingularMessageField(value: &self._conditionalStyleSets)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._rewriteSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._formulasToRewrite {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._conditionalStyleSets {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandRewriteConditionalStylesForRewriteSpecArchive, rhs: TST_CommandRewriteConditionalStylesForRewriteSpecArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._rewriteSpec != rhs._rewriteSpec {return false}
    if lhs._formulasToRewrite != rhs._formulasToRewrite {return false}
    if lhs._conditionalStyleSets != rhs._conditionalStyleSets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandMergeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandMergeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "cell_uid_list"),
    3: .standard(proto: "undo_cell_map"),
    4: .standard(proto: "undo_formula_rewrite_command"),
    5: .standard(proto: "merge_owner_rollback"),
    6: .standard(proto: "commit_cell_map"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._cellUidList == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._cellUidList, !v.isInitialized {return false}
    if let v = self._undoCellMap, !v.isInitialized {return false}
    if let v = self._undoFormulaRewriteCommand, !v.isInitialized {return false}
    if let v = self._commitCellMap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._cellUidList)
      case 3: try decoder.decodeSingularMessageField(value: &self._undoCellMap)
      case 4: try decoder.decodeSingularMessageField(value: &self._undoFormulaRewriteCommand)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._mergeOwnerRollback)
      case 6: try decoder.decodeSingularMessageField(value: &self._commitCellMap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._cellUidList {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._undoCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._undoFormulaRewriteCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._mergeOwnerRollback {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._commitCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandMergeArchive, rhs: TST_CommandMergeArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._cellUidList != rhs._cellUidList {return false}
    if lhs._undoCellMap != rhs._undoCellMap {return false}
    if lhs._undoFormulaRewriteCommand != rhs._undoFormulaRewriteCommand {return false}
    if lhs._mergeOwnerRollback != rhs._mergeOwnerRollback {return false}
    if lhs._commitCellMap != rhs._commitCellMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandInverseMergeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandInverseMergeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "merge_source_cell_uid"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._mergeSourceCellUid == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._mergeSourceCellUid, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._mergeSourceCellUid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._mergeSourceCellUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandInverseMergeArchive, rhs: TST_CommandInverseMergeArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._mergeSourceCellUid != rhs._mergeSourceCellUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandUnmergeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandUnmergeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "unmerge_uid_ranges"),
    3: .standard(proto: "undo_cell_map"),
    4: .standard(proto: "undo_formula_rewrite_command"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.unmergeUidRanges) {return false}
    if let v = self._undoCellMap, !v.isInitialized {return false}
    if let v = self._undoFormulaRewriteCommand, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.unmergeUidRanges)
      case 3: try decoder.decodeSingularMessageField(value: &self._undoCellMap)
      case 4: try decoder.decodeSingularMessageField(value: &self._undoFormulaRewriteCommand)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.unmergeUidRanges.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unmergeUidRanges, fieldNumber: 2)
    }
    if let v = self._undoCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._undoFormulaRewriteCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandUnmergeArchive, rhs: TST_CommandUnmergeArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unmergeUidRanges != rhs.unmergeUidRanges {return false}
    if lhs._undoCellMap != rhs._undoCellMap {return false}
    if lhs._undoFormulaRewriteCommand != rhs._undoFormulaRewriteCommand {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandChooseTableIdRemapperArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandChooseTableIdRemapperArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "table_id_mapper"),
    3: .standard(proto: "formula_rewrite_command_for_undo"),
    4: .standard(proto: "apply_and_clear"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._tableIDMapper == nil {return false}
    if self._applyAndClear == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._tableIDMapper, !v.isInitialized {return false}
    if let v = self._formulaRewriteCommandForUndo, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._tableIDMapper)
      case 3: try decoder.decodeSingularMessageField(value: &self._formulaRewriteCommandForUndo)
      case 4: try decoder.decodeSingularBoolField(value: &self._applyAndClear)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._tableIDMapper {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._formulaRewriteCommandForUndo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._applyAndClear {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandChooseTableIdRemapperArchive, rhs: TST_CommandChooseTableIdRemapperArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._tableIDMapper != rhs._tableIDMapper {return false}
    if lhs._formulaRewriteCommandForUndo != rhs._formulaRewriteCommandForUndo {return false}
    if lhs._applyAndClear != rhs._applyAndClear {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandCategorySetGroupingColumnsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandCategorySetGroupingColumnsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "new_enabled_changing"),
    3: .standard(proto: "old_enabled_changing"),
    4: .standard(proto: "new_grouping_columns"),
    5: .standard(proto: "old_grouping_columns"),
    6: .standard(proto: "restore_base_order"),
    7: .standard(proto: "base_row_order"),
    8: .standard(proto: "undo_restore_base_order"),
    9: .standard(proto: "undo_base_row_order"),
    10: .standard(proto: "restore_view_order"),
    11: .standard(proto: "view_row_order"),
    12: .standard(proto: "undo_restore_view_order"),
    13: .standard(proto: "undo_view_row_order"),
    14: .standard(proto: "collapse_state"),
    15: .standard(proto: "undo_collapse_state"),
    16: .standard(proto: "summary_change_state"),
    17: .standard(proto: "undo_summary_change_state"),
    18: .standard(proto: "new_column_aggregates"),
    19: .standard(proto: "old_column_aggregates"),
    20: .standard(proto: "undo_set_enabled_rewrite_command"),
    21: .standard(proto: "undo_set_columns_rewrite_command"),
    22: .standard(proto: "force_restore_all_states"),
    23: .standard(proto: "cell_diff_map"),
    24: .standard(proto: "undo_cell_diff_map"),
  ]

  fileprivate class _StorageClass {
    var _super: TST_TableCommandArchive? = nil
    var _newEnabledChanging: Int32? = nil
    var _oldEnabledChanging: Int32? = nil
    var _newGroupingColumns: TST_GroupColumnListArchive? = nil
    var _oldGroupingColumns: TST_GroupColumnListArchive? = nil
    var _restoreBaseOrder: Bool? = nil
    var _baseRowOrder: [TSP_UUID] = []
    var _undoRestoreBaseOrder: Bool? = nil
    var _undoBaseRowOrder: [TSP_UUID] = []
    var _restoreViewOrder: Bool? = nil
    var _viewRowOrder: [TSP_UUID] = []
    var _undoRestoreViewOrder: Bool? = nil
    var _undoViewRowOrder: [TSP_UUID] = []
    var _collapseState: [TSP_UUID] = []
    var _undoCollapseState: [TSP_UUID] = []
    var _summaryChangeState: TST_SummaryModelGroupByChangeStateArchive? = nil
    var _undoSummaryChangeState: TST_SummaryModelGroupByChangeStateArchive? = nil
    var _newColumnAggregates: TST_ColumnAggregateListArchive? = nil
    var _oldColumnAggregates: TST_ColumnAggregateListArchive? = nil
    var _undoSetEnabledRewriteCommand: TSP_Reference? = nil
    var _undoSetColumnsRewriteCommand: TSP_Reference? = nil
    var _forceRestoreAllStates: Bool? = nil
    var _cellDiffMap: TSP_Reference? = nil
    var _undoCellDiffMap: TSP_Reference? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _super = source._super
      _newEnabledChanging = source._newEnabledChanging
      _oldEnabledChanging = source._oldEnabledChanging
      _newGroupingColumns = source._newGroupingColumns
      _oldGroupingColumns = source._oldGroupingColumns
      _restoreBaseOrder = source._restoreBaseOrder
      _baseRowOrder = source._baseRowOrder
      _undoRestoreBaseOrder = source._undoRestoreBaseOrder
      _undoBaseRowOrder = source._undoBaseRowOrder
      _restoreViewOrder = source._restoreViewOrder
      _viewRowOrder = source._viewRowOrder
      _undoRestoreViewOrder = source._undoRestoreViewOrder
      _undoViewRowOrder = source._undoViewRowOrder
      _collapseState = source._collapseState
      _undoCollapseState = source._undoCollapseState
      _summaryChangeState = source._summaryChangeState
      _undoSummaryChangeState = source._undoSummaryChangeState
      _newColumnAggregates = source._newColumnAggregates
      _oldColumnAggregates = source._oldColumnAggregates
      _undoSetEnabledRewriteCommand = source._undoSetEnabledRewriteCommand
      _undoSetColumnsRewriteCommand = source._undoSetColumnsRewriteCommand
      _forceRestoreAllStates = source._forceRestoreAllStates
      _cellDiffMap = source._cellDiffMap
      _undoCellDiffMap = source._undoCellDiffMap
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._super == nil {return false}
      if _storage._newEnabledChanging == nil {return false}
      if _storage._oldEnabledChanging == nil {return false}
      if _storage._newGroupingColumns == nil {return false}
      if _storage._restoreBaseOrder == nil {return false}
      if _storage._undoRestoreBaseOrder == nil {return false}
      if _storage._restoreViewOrder == nil {return false}
      if _storage._undoRestoreViewOrder == nil {return false}
      if _storage._forceRestoreAllStates == nil {return false}
      if let v = _storage._super, !v.isInitialized {return false}
      if let v = _storage._newGroupingColumns, !v.isInitialized {return false}
      if let v = _storage._oldGroupingColumns, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._baseRowOrder) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._undoBaseRowOrder) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._viewRowOrder) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._undoViewRowOrder) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._collapseState) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._undoCollapseState) {return false}
      if let v = _storage._summaryChangeState, !v.isInitialized {return false}
      if let v = _storage._undoSummaryChangeState, !v.isInitialized {return false}
      if let v = _storage._newColumnAggregates, !v.isInitialized {return false}
      if let v = _storage._oldColumnAggregates, !v.isInitialized {return false}
      if let v = _storage._undoSetEnabledRewriteCommand, !v.isInitialized {return false}
      if let v = _storage._undoSetColumnsRewriteCommand, !v.isInitialized {return false}
      if let v = _storage._cellDiffMap, !v.isInitialized {return false}
      if let v = _storage._undoCellDiffMap, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._super)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._newEnabledChanging)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._oldEnabledChanging)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._newGroupingColumns)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._oldGroupingColumns)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._restoreBaseOrder)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._baseRowOrder)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._undoRestoreBaseOrder)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._undoBaseRowOrder)
        case 10: try decoder.decodeSingularBoolField(value: &_storage._restoreViewOrder)
        case 11: try decoder.decodeRepeatedMessageField(value: &_storage._viewRowOrder)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._undoRestoreViewOrder)
        case 13: try decoder.decodeRepeatedMessageField(value: &_storage._undoViewRowOrder)
        case 14: try decoder.decodeRepeatedMessageField(value: &_storage._collapseState)
        case 15: try decoder.decodeRepeatedMessageField(value: &_storage._undoCollapseState)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._summaryChangeState)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._undoSummaryChangeState)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._newColumnAggregates)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._oldColumnAggregates)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._undoSetEnabledRewriteCommand)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._undoSetColumnsRewriteCommand)
        case 22: try decoder.decodeSingularBoolField(value: &_storage._forceRestoreAllStates)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._cellDiffMap)
        case 24: try decoder.decodeSingularMessageField(value: &_storage._undoCellDiffMap)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._super {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._newEnabledChanging {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._oldEnabledChanging {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._newGroupingColumns {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._oldGroupingColumns {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._restoreBaseOrder {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      }
      if !_storage._baseRowOrder.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._baseRowOrder, fieldNumber: 7)
      }
      if let v = _storage._undoRestoreBaseOrder {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      }
      if !_storage._undoBaseRowOrder.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._undoBaseRowOrder, fieldNumber: 9)
      }
      if let v = _storage._restoreViewOrder {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      }
      if !_storage._viewRowOrder.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._viewRowOrder, fieldNumber: 11)
      }
      if let v = _storage._undoRestoreViewOrder {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      }
      if !_storage._undoViewRowOrder.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._undoViewRowOrder, fieldNumber: 13)
      }
      if !_storage._collapseState.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._collapseState, fieldNumber: 14)
      }
      if !_storage._undoCollapseState.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._undoCollapseState, fieldNumber: 15)
      }
      if let v = _storage._summaryChangeState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._undoSummaryChangeState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._newColumnAggregates {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._oldColumnAggregates {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._undoSetEnabledRewriteCommand {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._undoSetColumnsRewriteCommand {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._forceRestoreAllStates {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 22)
      }
      if let v = _storage._cellDiffMap {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if let v = _storage._undoCellDiffMap {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandCategorySetGroupingColumnsArchive, rhs: TST_CommandCategorySetGroupingColumnsArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._super != rhs_storage._super {return false}
        if _storage._newEnabledChanging != rhs_storage._newEnabledChanging {return false}
        if _storage._oldEnabledChanging != rhs_storage._oldEnabledChanging {return false}
        if _storage._newGroupingColumns != rhs_storage._newGroupingColumns {return false}
        if _storage._oldGroupingColumns != rhs_storage._oldGroupingColumns {return false}
        if _storage._restoreBaseOrder != rhs_storage._restoreBaseOrder {return false}
        if _storage._baseRowOrder != rhs_storage._baseRowOrder {return false}
        if _storage._undoRestoreBaseOrder != rhs_storage._undoRestoreBaseOrder {return false}
        if _storage._undoBaseRowOrder != rhs_storage._undoBaseRowOrder {return false}
        if _storage._restoreViewOrder != rhs_storage._restoreViewOrder {return false}
        if _storage._viewRowOrder != rhs_storage._viewRowOrder {return false}
        if _storage._undoRestoreViewOrder != rhs_storage._undoRestoreViewOrder {return false}
        if _storage._undoViewRowOrder != rhs_storage._undoViewRowOrder {return false}
        if _storage._collapseState != rhs_storage._collapseState {return false}
        if _storage._undoCollapseState != rhs_storage._undoCollapseState {return false}
        if _storage._summaryChangeState != rhs_storage._summaryChangeState {return false}
        if _storage._undoSummaryChangeState != rhs_storage._undoSummaryChangeState {return false}
        if _storage._newColumnAggregates != rhs_storage._newColumnAggregates {return false}
        if _storage._oldColumnAggregates != rhs_storage._oldColumnAggregates {return false}
        if _storage._undoSetEnabledRewriteCommand != rhs_storage._undoSetEnabledRewriteCommand {return false}
        if _storage._undoSetColumnsRewriteCommand != rhs_storage._undoSetColumnsRewriteCommand {return false}
        if _storage._forceRestoreAllStates != rhs_storage._forceRestoreAllStates {return false}
        if _storage._cellDiffMap != rhs_storage._cellDiffMap {return false}
        if _storage._undoCellDiffMap != rhs_storage._undoCellDiffMap {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_FormulaEditingCommandGroupArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FormulaEditingCommandGroupArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "undoSelectionValid"),
    3: .same(proto: "undoSelectionStart"),
    4: .same(proto: "undoSelectionLength"),
    5: .same(proto: "undoActiveToken"),
    6: .same(proto: "redoSelectionValid"),
    7: .same(proto: "redoSelectionStart"),
    8: .same(proto: "redoSelectionLength"),
    9: .same(proto: "redoActiveToken"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._undoSelectionValid == nil {return false}
    if self._undoSelectionStart == nil {return false}
    if self._undoSelectionLength == nil {return false}
    if self._undoActiveToken == nil {return false}
    if self._redoSelectionValid == nil {return false}
    if self._redoSelectionStart == nil {return false}
    if self._redoSelectionLength == nil {return false}
    if self._redoActiveToken == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularBoolField(value: &self._undoSelectionValid)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._undoSelectionStart)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._undoSelectionLength)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._undoActiveToken)
      case 6: try decoder.decodeSingularBoolField(value: &self._redoSelectionValid)
      case 7: try decoder.decodeSingularUInt32Field(value: &self._redoSelectionStart)
      case 8: try decoder.decodeSingularUInt32Field(value: &self._redoSelectionLength)
      case 9: try decoder.decodeSingularUInt32Field(value: &self._redoActiveToken)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._undoSelectionValid {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._undoSelectionStart {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._undoSelectionLength {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._undoActiveToken {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._redoSelectionValid {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._redoSelectionStart {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._redoSelectionLength {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    }
    if let v = self._redoActiveToken {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_FormulaEditingCommandGroupArchive, rhs: TST_FormulaEditingCommandGroupArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._undoSelectionValid != rhs._undoSelectionValid {return false}
    if lhs._undoSelectionStart != rhs._undoSelectionStart {return false}
    if lhs._undoSelectionLength != rhs._undoSelectionLength {return false}
    if lhs._undoActiveToken != rhs._undoActiveToken {return false}
    if lhs._redoSelectionValid != rhs._redoSelectionValid {return false}
    if lhs._redoSelectionStart != rhs._redoSelectionStart {return false}
    if lhs._redoSelectionLength != rhs._redoSelectionLength {return false}
    if lhs._redoActiveToken != rhs._redoActiveToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_FormulaEditingCommandSelectionBehaviorArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FormulaEditingCommandSelectionBehaviorArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "undoActiveToken"),
    3: .same(proto: "redoActiveToken"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._undoActiveToken)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._redoActiveToken)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._undoActiveToken {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._redoActiveToken {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_FormulaEditingCommandSelectionBehaviorArchive, rhs: TST_FormulaEditingCommandSelectionBehaviorArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._undoActiveToken != rhs._undoActiveToken {return false}
    if lhs._redoActiveToken != rhs._redoActiveToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_TableCommandSelectionBehaviorArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TableCommandSelectionBehaviorArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "table_info"),
    3: .standard(proto: "last_column_uid_hit_by_tap"),
    4: .standard(proto: "invalidate_comments"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._tableInfo, !v.isInitialized {return false}
    if let v = self._lastColumnUidHitByTap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._tableInfo)
      case 3: try decoder.decodeSingularMessageField(value: &self._lastColumnUidHitByTap)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._invalidateComments)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._tableInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._lastColumnUidHitByTap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._invalidateComments {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_TableCommandSelectionBehaviorArchive, rhs: TST_TableCommandSelectionBehaviorArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._tableInfo != rhs._tableInfo {return false}
    if lhs._lastColumnUidHitByTap != rhs._lastColumnUidHitByTap {return false}
    if lhs._invalidateComments != rhs._invalidateComments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandApplyCellCommentArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandApplyCellCommentArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "cell_uid"),
    3: .standard(proto: "old_comment_storage"),
    4: .standard(proto: "new_comment_storage"),
    5: .standard(proto: "forward_variant"),
    6: .standard(proto: "inverse_variant"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._cellUid == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._cellUid, !v.isInitialized {return false}
    if let v = self._oldCommentStorage, !v.isInitialized {return false}
    if let v = self._newCommentStorage, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._cellUid)
      case 3: try decoder.decodeSingularMessageField(value: &self._oldCommentStorage)
      case 4: try decoder.decodeSingularMessageField(value: &self._newCommentStorage)
      case 5: try decoder.decodeSingularEnumField(value: &self._forwardVariant)
      case 6: try decoder.decodeSingularEnumField(value: &self._inverseVariant)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._cellUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._oldCommentStorage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._newCommentStorage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._forwardVariant {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    }
    if let v = self._inverseVariant {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandApplyCellCommentArchive, rhs: TST_CommandApplyCellCommentArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._cellUid != rhs._cellUid {return false}
    if lhs._oldCommentStorage != rhs._oldCommentStorage {return false}
    if lhs._newCommentStorage != rhs._newCommentStorage {return false}
    if lhs._forwardVariant != rhs._forwardVariant {return false}
    if lhs._inverseVariant != rhs._inverseVariant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetFormulaTokenizationArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetFormulaTokenizationArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "tokenization"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._tokenization == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularBoolField(value: &self._tokenization)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._tokenization {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetFormulaTokenizationArchive, rhs: TST_CommandSetFormulaTokenizationArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._tokenization != rhs._tokenization {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetFilterSetTypeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetFilterSetTypeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "old_filter_set_type"),
    3: .standard(proto: "new_filter_set_type"),
    4: .standard(proto: "rollback_uid_list"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._newFilterSetType == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.rollbackUidList) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularEnumField(value: &self._oldFilterSetType)
      case 3: try decoder.decodeSingularEnumField(value: &self._newFilterSetType)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.rollbackUidList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldFilterSetType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._newFilterSetType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if !self.rollbackUidList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rollbackUidList, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetFilterSetTypeArchive, rhs: TST_CommandSetFilterSetTypeArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldFilterSetType != rhs._oldFilterSetType {return false}
    if lhs._newFilterSetType != rhs._newFilterSetType {return false}
    if lhs.rollbackUidList != rhs.rollbackUidList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetTextStyleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetTextStyleArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "cell_diff_map"),
    3: .standard(proto: "inverse_cell_diff_map"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._cellDiffMap == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._cellDiffMap, !v.isInitialized {return false}
    if let v = self._inverseCellDiffMap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._cellDiffMap)
      case 3: try decoder.decodeSingularMessageField(value: &self._inverseCellDiffMap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._cellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._inverseCellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetTextStyleArchive, rhs: TST_CommandSetTextStyleArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._cellDiffMap != rhs._cellDiffMap {return false}
    if lhs._inverseCellDiffMap != rhs._inverseCellDiffMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetTextStylePropertiesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetTextStylePropertiesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "cell_diff_map"),
    3: .standard(proto: "cell_was_rich_text"),
    4: .standard(proto: "inverse_cell_diff_map"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._cellDiffMap == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._cellDiffMap, !v.isInitialized {return false}
    if let v = self._inverseCellDiffMap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._cellDiffMap)
      case 3: try decoder.decodeRepeatedBoolField(value: &self.cellWasRichText)
      case 4: try decoder.decodeSingularMessageField(value: &self._inverseCellDiffMap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._cellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.cellWasRichText.isEmpty {
      try visitor.visitRepeatedBoolField(value: self.cellWasRichText, fieldNumber: 3)
    }
    if let v = self._inverseCellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetTextStylePropertiesArchive, rhs: TST_CommandSetTextStylePropertiesArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._cellDiffMap != rhs._cellDiffMap {return false}
    if lhs.cellWasRichText != rhs.cellWasRichText {return false}
    if lhs._inverseCellDiffMap != rhs._inverseCellDiffMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandJustForNotifyingArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandJustForNotifyingArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "change_descriptor_type"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._changeDescriptorType == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._changeDescriptorType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._changeDescriptorType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandJustForNotifyingArchive, rhs: TST_CommandJustForNotifyingArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._changeDescriptorType != rhs._changeDescriptorType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetStorageLanguageArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetStorageLanguageArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "storage"),
    3: .same(proto: "language"),
    4: .standard(proto: "range_location"),
    5: .standard(proto: "range_length"),
    6: .standard(proto: "undo_transaction"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._storage == nil {return false}
    if self._language == nil {return false}
    if self._rangeLocation == nil {return false}
    if self._rangeLength == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storage, !v.isInitialized {return false}
    if let v = self._undoTransaction, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storage)
      case 3: try decoder.decodeSingularStringField(value: &self._language)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._rangeLocation)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._rangeLength)
      case 6: try decoder.decodeSingularMessageField(value: &self._undoTransaction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._language {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._rangeLocation {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._rangeLength {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._undoTransaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetStorageLanguageArchive, rhs: TST_CommandSetStorageLanguageArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storage != rhs._storage {return false}
    if lhs._language != rhs._language {return false}
    if lhs._rangeLocation != rhs._rangeLocation {return false}
    if lhs._rangeLength != rhs._rangeLength {return false}
    if lhs._undoTransaction != rhs._undoTransaction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetSortOrderArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetSortOrderArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "old_sort_order"),
    3: .standard(proto: "new_sort_order"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._oldSortOrder, !v.isInitialized {return false}
    if let v = self._newSortOrder, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._oldSortOrder)
      case 3: try decoder.decodeSingularMessageField(value: &self._newSortOrder)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldSortOrder {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._newSortOrder {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetSortOrderArchive, rhs: TST_CommandSetSortOrderArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldSortOrder != rhs._oldSortOrder {return false}
    if lhs._newSortOrder != rhs._newSortOrder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandRewriteSortOrderForTableResizeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandRewriteSortOrderForTableResizeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "old_sort_order"),
    3: .standard(proto: "new_sort_order"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._oldSortOrder, !v.isInitialized {return false}
    if let v = self._newSortOrder, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._oldSortOrder)
      case 3: try decoder.decodeSingularMessageField(value: &self._newSortOrder)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldSortOrder {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._newSortOrder {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandRewriteSortOrderForTableResizeArchive, rhs: TST_CommandRewriteSortOrderForTableResizeArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldSortOrder != rhs._oldSortOrder {return false}
    if lhs._newSortOrder != rhs._newSortOrder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandRewriteSortOrderForRewriteSpecArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandRewriteSortOrderForRewriteSpecArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "rewrite_spec"),
    3: .standard(proto: "old_sort_order"),
    4: .standard(proto: "new_sort_order"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._rewriteSpec == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._rewriteSpec, !v.isInitialized {return false}
    if let v = self._oldSortOrder, !v.isInitialized {return false}
    if let v = self._newSortOrder, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._rewriteSpec)
      case 3: try decoder.decodeSingularMessageField(value: &self._oldSortOrder)
      case 4: try decoder.decodeSingularMessageField(value: &self._newSortOrder)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._rewriteSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._oldSortOrder {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._newSortOrder {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandRewriteSortOrderForRewriteSpecArchive, rhs: TST_CommandRewriteSortOrderForRewriteSpecArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._rewriteSpec != rhs._rewriteSpec {return false}
    if lhs._oldSortOrder != rhs._oldSortOrder {return false}
    if lhs._newSortOrder != rhs._newSortOrder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetFilterSetArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetFilterSetArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "new_filter_set"),
    3: .standard(proto: "old_filter_set"),
    4: .standard(proto: "rollback_uid_list"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._newFilterSet == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._newFilterSet, !v.isInitialized {return false}
    if let v = self._oldFilterSet, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.rollbackUidList) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._newFilterSet)
      case 3: try decoder.decodeSingularMessageField(value: &self._oldFilterSet)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.rollbackUidList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._newFilterSet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._oldFilterSet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.rollbackUidList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rollbackUidList, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetFilterSetArchive, rhs: TST_CommandSetFilterSetArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._newFilterSet != rhs._newFilterSet {return false}
    if lhs._oldFilterSet != rhs._oldFilterSet {return false}
    if lhs.rollbackUidList != rhs.rollbackUidList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_ColumnRowRestoreDataArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ColumnRowRestoreDataArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "uid_list"),
    2: .same(proto: "metadatas"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.uidList) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.metadatas) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.uidList)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.metadatas)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uidList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.uidList, fieldNumber: 1)
    }
    if !self.metadatas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.metadatas, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_ColumnRowRestoreDataArchive, rhs: TST_ColumnRowRestoreDataArchive) -> Bool {
    if lhs.uidList != rhs.uidList {return false}
    if lhs.metadatas != rhs.metadatas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandTransposeTableArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandTransposeTableArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "original_table_range"),
    3: .standard(proto: "original_cell_map"),
    4: .standard(proto: "original_footer_row_count"),
    5: .standard(proto: "original_column_widths"),
    6: .standard(proto: "original_row_heights"),
    7: .standard(proto: "ineligible_merge_list"),
    8: .standard(proto: "transposed_cell_map"),
    9: .standard(proto: "undo_formula_rewrite_command"),
    10: .standard(proto: "rich_text_subcommands"),
    11: .standard(proto: "column_restore_data"),
    12: .standard(proto: "row_restore_data"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._originalTableRange == nil {return false}
    if self._originalCellMap == nil {return false}
    if self._originalFooterRowCount == nil {return false}
    if self._transposedCellMap == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._originalTableRange, !v.isInitialized {return false}
    if let v = self._originalCellMap, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.ineligibleMergeList) {return false}
    if let v = self._transposedCellMap, !v.isInitialized {return false}
    if let v = self._undoFormulaRewriteCommand, !v.isInitialized {return false}
    if let v = self._richTextSubcommands, !v.isInitialized {return false}
    if let v = self._columnRestoreData, !v.isInitialized {return false}
    if let v = self._rowRestoreData, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._originalTableRange)
      case 3: try decoder.decodeSingularMessageField(value: &self._originalCellMap)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._originalFooterRowCount)
      case 5: try decoder.decodeRepeatedFloatField(value: &self.originalColumnWidths)
      case 6: try decoder.decodeRepeatedFloatField(value: &self.originalRowHeights)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.ineligibleMergeList)
      case 8: try decoder.decodeSingularMessageField(value: &self._transposedCellMap)
      case 9: try decoder.decodeSingularMessageField(value: &self._undoFormulaRewriteCommand)
      case 10: try decoder.decodeSingularMessageField(value: &self._richTextSubcommands)
      case 11: try decoder.decodeSingularMessageField(value: &self._columnRestoreData)
      case 12: try decoder.decodeSingularMessageField(value: &self._rowRestoreData)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._originalTableRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._originalCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._originalFooterRowCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if !self.originalColumnWidths.isEmpty {
      try visitor.visitRepeatedFloatField(value: self.originalColumnWidths, fieldNumber: 5)
    }
    if !self.originalRowHeights.isEmpty {
      try visitor.visitRepeatedFloatField(value: self.originalRowHeights, fieldNumber: 6)
    }
    if !self.ineligibleMergeList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ineligibleMergeList, fieldNumber: 7)
    }
    if let v = self._transposedCellMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._undoFormulaRewriteCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._richTextSubcommands {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._columnRestoreData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._rowRestoreData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandTransposeTableArchive, rhs: TST_CommandTransposeTableArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._originalTableRange != rhs._originalTableRange {return false}
    if lhs._originalCellMap != rhs._originalCellMap {return false}
    if lhs._originalFooterRowCount != rhs._originalFooterRowCount {return false}
    if lhs.originalColumnWidths != rhs.originalColumnWidths {return false}
    if lhs.originalRowHeights != rhs.originalRowHeights {return false}
    if lhs.ineligibleMergeList != rhs.ineligibleMergeList {return false}
    if lhs._transposedCellMap != rhs._transposedCellMap {return false}
    if lhs._undoFormulaRewriteCommand != rhs._undoFormulaRewriteCommand {return false}
    if lhs._richTextSubcommands != rhs._richTextSubcommands {return false}
    if lhs._columnRestoreData != rhs._columnRestoreData {return false}
    if lhs._rowRestoreData != rhs._rowRestoreData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandSetStructuredTextImportRecordArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetStructuredTextImportRecordArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "new_import_record"),
    3: .standard(proto: "old_import_record"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._newImportRecord, !v.isInitialized {return false}
    if let v = self._oldImportRecord, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._newImportRecord)
      case 3: try decoder.decodeSingularMessageField(value: &self._oldImportRecord)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._newImportRecord {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._oldImportRecord {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandSetStructuredTextImportRecordArchive, rhs: TST_CommandSetStructuredTextImportRecordArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._newImportRecord != rhs._newImportRecord {return false}
    if lhs._oldImportRecord != rhs._oldImportRecord {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandCategoryCollapseExpandGroupArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandCategoryCollapseExpandGroupArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "is_collapsing"),
    3: .standard(proto: "grouping_columns"),
    4: .standard(proto: "collapse_state"),
    5: .standard(proto: "undo_collapse_state"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._isCollapsing == nil {return false}
    if self._groupingColumns == nil {return false}
    if self._collapseState == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._groupingColumns, !v.isInitialized {return false}
    if let v = self._collapseState, !v.isInitialized {return false}
    if let v = self._undoCollapseState, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularBoolField(value: &self._isCollapsing)
      case 3: try decoder.decodeSingularMessageField(value: &self._groupingColumns)
      case 4: try decoder.decodeSingularMessageField(value: &self._collapseState)
      case 5: try decoder.decodeSingularMessageField(value: &self._undoCollapseState)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._isCollapsing {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._groupingColumns {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._collapseState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._undoCollapseState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandCategoryCollapseExpandGroupArchive, rhs: TST_CommandCategoryCollapseExpandGroupArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._isCollapsing != rhs._isCollapsing {return false}
    if lhs._groupingColumns != rhs._groupingColumns {return false}
    if lhs._collapseState != rhs._collapseState {return false}
    if lhs._undoCollapseState != rhs._undoCollapseState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandCategoryChangeSummaryAggregateType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandCategoryChangeSummaryAggregateType"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "aggregate_type"),
    3: .standard(proto: "undo_aggregate_type"),
    4: .standard(proto: "column_uid"),
    5: .standard(proto: "group_level"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._aggregateType == nil {return false}
    if self._undoAggregateType == nil {return false}
    if self._columnUid == nil {return false}
    if self._groupLevel == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._columnUid, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._aggregateType)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._undoAggregateType)
      case 4: try decoder.decodeSingularMessageField(value: &self._columnUid)
      case 5: try decoder.decodeSingularSInt32Field(value: &self._groupLevel)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._aggregateType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._undoAggregateType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._columnUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._groupLevel {
      try visitor.visitSingularSInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandCategoryChangeSummaryAggregateType, rhs: TST_CommandCategoryChangeSummaryAggregateType) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._aggregateType != rhs._aggregateType {return false}
    if lhs._undoAggregateType != rhs._undoAggregateType {return false}
    if lhs._columnUid != rhs._columnUid {return false}
    if lhs._groupLevel != rhs._groupLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandCategorySetLabelRowVisibility: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandCategorySetLabelRowVisibility"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "group_level"),
    3: .standard(proto: "label_row_visibility"),
    4: .standard(proto: "undo_label_row_visibility"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._groupLevel == nil {return false}
    if self._labelRowVisibility == nil {return false}
    if self._undoLabelRowVisibility == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._groupLevel)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._labelRowVisibility)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._undoLabelRowVisibility)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._groupLevel {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._labelRowVisibility {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._undoLabelRowVisibility {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandCategorySetLabelRowVisibility, rhs: TST_CommandCategorySetLabelRowVisibility) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._groupLevel != rhs._groupLevel {return false}
    if lhs._labelRowVisibility != rhs._labelRowVisibility {return false}
    if lhs._undoLabelRowVisibility != rhs._undoLabelRowVisibility {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandCategoryWillChangeGroupValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandCategoryWillChangeGroupValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "group_node_uid"),
    3: .standard(proto: "undo_group_node_uid"),
    4: .standard(proto: "group_value"),
    5: .standard(proto: "undo_group_value"),
    6: .standard(proto: "rewrite_command_for_undo"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._groupNodeUid == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._groupNodeUid, !v.isInitialized {return false}
    if let v = self._undoGroupNodeUid, !v.isInitialized {return false}
    if let v = self._groupValue, !v.isInitialized {return false}
    if let v = self._undoGroupValue, !v.isInitialized {return false}
    if let v = self._rewriteCommandForUndo, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._groupNodeUid)
      case 3: try decoder.decodeSingularMessageField(value: &self._undoGroupNodeUid)
      case 4: try decoder.decodeSingularMessageField(value: &self._groupValue)
      case 5: try decoder.decodeSingularMessageField(value: &self._undoGroupValue)
      case 6: try decoder.decodeSingularMessageField(value: &self._rewriteCommandForUndo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._groupNodeUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._undoGroupNodeUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._groupValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._undoGroupValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._rewriteCommandForUndo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandCategoryWillChangeGroupValue, rhs: TST_CommandCategoryWillChangeGroupValue) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._groupNodeUid != rhs._groupNodeUid {return false}
    if lhs._undoGroupNodeUid != rhs._undoGroupNodeUid {return false}
    if lhs._groupValue != rhs._groupValue {return false}
    if lhs._undoGroupValue != rhs._undoGroupValue {return false}
    if lhs._rewriteCommandForUndo != rhs._rewriteCommandForUndo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_IdempotentSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IdempotentSelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "archived_selection"),
  ]

  public var isInitialized: Bool {
    if self._archivedSelection == nil {return false}
    if let v = self._archivedSelection, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._archivedSelection)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._archivedSelection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_IdempotentSelectionTransformerArchive, rhs: TST_IdempotentSelectionTransformerArchive) -> Bool {
    if lhs._archivedSelection != rhs._archivedSelection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_WPSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WPSelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "archived_selection"),
    3: .standard(proto: "origin_cell_uid"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._archivedSelection == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._archivedSelection, !v.isInitialized {return false}
    if let v = self._originCellUid, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._archivedSelection)
      case 3: try decoder.decodeSingularMessageField(value: &self._originCellUid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._archivedSelection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._originCellUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_WPSelectionTransformerArchive, rhs: TST_WPSelectionTransformerArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._archivedSelection != rhs._archivedSelection {return false}
    if lhs._originCellUid != rhs._originCellUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_TableSubSelectionTransformerBaseArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TableSubSelectionTransformerBaseArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "table_info_id_path"),
  ]

  public var isInitialized: Bool {
    if self._tableInfoIDPath == nil {return false}
    if let v = self._tableInfoIDPath, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._tableInfoIDPath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._tableInfoIDPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_TableSubSelectionTransformerBaseArchive, rhs: TST_TableSubSelectionTransformerBaseArchive) -> Bool {
    if lhs._tableInfoIDPath != rhs._tableInfoIDPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_TableNameSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TableNameSelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_TableNameSelectionTransformerArchive, rhs: TST_TableNameSelectionTransformerArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_ControlCellSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ControlCellSelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "cell_uids"),
    3: .standard(proto: "origin_cell_uid"),
    4: .standard(proto: "origin_cell_id"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._originCellID == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._cellUids, !v.isInitialized {return false}
    if let v = self._originCellUid, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._cellUids)
      case 3: try decoder.decodeSingularMessageField(value: &self._originCellUid)
      case 4: try decoder.decodeSingularMessageField(value: &self._originCellID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._cellUids {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._originCellUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._originCellID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_ControlCellSelectionTransformerArchive, rhs: TST_ControlCellSelectionTransformerArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._cellUids != rhs._cellUids {return false}
    if lhs._originCellUid != rhs._originCellUid {return false}
    if lhs._originCellID != rhs._originCellID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_StockCellSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StockCellSelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "cell_uids"),
    3: .standard(proto: "origin_cell_uid"),
    4: .standard(proto: "origin_cell_id"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._originCellID == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._cellUids, !v.isInitialized {return false}
    if let v = self._originCellUid, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._cellUids)
      case 3: try decoder.decodeSingularMessageField(value: &self._originCellUid)
      case 4: try decoder.decodeSingularMessageField(value: &self._originCellID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._cellUids {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._originCellUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._originCellID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_StockCellSelectionTransformerArchive, rhs: TST_StockCellSelectionTransformerArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._cellUids != rhs._cellUids {return false}
    if lhs._originCellUid != rhs._originCellUid {return false}
    if lhs._originCellID != rhs._originCellID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_RegionSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RegionSelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "cell_uids"),
    3: .standard(proto: "origin_cell_uid"),
    4: .standard(proto: "anchor_cell_uid"),
    5: .standard(proto: "cursor_cell_uid"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._anchorCellUid == nil {return false}
    if self._cursorCellUid == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._cellUids, !v.isInitialized {return false}
    if let v = self._originCellUid, !v.isInitialized {return false}
    if let v = self._anchorCellUid, !v.isInitialized {return false}
    if let v = self._cursorCellUid, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._cellUids)
      case 3: try decoder.decodeSingularMessageField(value: &self._originCellUid)
      case 4: try decoder.decodeSingularMessageField(value: &self._anchorCellUid)
      case 5: try decoder.decodeSingularMessageField(value: &self._cursorCellUid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._cellUids {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._originCellUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._anchorCellUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._cursorCellUid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_RegionSelectionTransformerArchive, rhs: TST_RegionSelectionTransformerArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._cellUids != rhs._cellUids {return false}
    if lhs._originCellUid != rhs._originCellUid {return false}
    if lhs._anchorCellUid != rhs._anchorCellUid {return false}
    if lhs._cursorCellUid != rhs._cursorCellUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_StrokeSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StrokeSelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "archived_selection"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._archivedSelection == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._archivedSelection, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._archivedSelection)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._archivedSelection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_StrokeSelectionTransformerArchive, rhs: TST_StrokeSelectionTransformerArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._archivedSelection != rhs._archivedSelection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_RowColumnSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RowColumnSelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "selection_type"),
    3: .standard(proto: "row_col_uids"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._selectionType == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.rowColUids) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularEnumField(value: &self._selectionType)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.rowColUids)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._selectionType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if !self.rowColUids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rowColUids, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_RowColumnSelectionTransformerArchive, rhs: TST_RowColumnSelectionTransformerArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._selectionType != rhs._selectionType {return false}
    if lhs.rowColUids != rhs.rowColUids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandCategoryMoveRowsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandCategoryMoveRowsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "action_type"),
    3: .standard(proto: "category_row_order"),
    4: .standard(proto: "undo_category_row_order"),
    5: .standard(proto: "cell_diff_map"),
    6: .standard(proto: "undo_cell_diff_map"),
    7: .standard(proto: "grouping_columns"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._actionType == nil {return false}
    if self._cellDiffMap == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.categoryRowOrder) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.undoCategoryRowOrder) {return false}
    if let v = self._cellDiffMap, !v.isInitialized {return false}
    if let v = self._undoCellDiffMap, !v.isInitialized {return false}
    if let v = self._groupingColumns, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._actionType)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.categoryRowOrder)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.undoCategoryRowOrder)
      case 5: try decoder.decodeSingularMessageField(value: &self._cellDiffMap)
      case 6: try decoder.decodeSingularMessageField(value: &self._undoCellDiffMap)
      case 7: try decoder.decodeSingularMessageField(value: &self._groupingColumns)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._actionType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if !self.categoryRowOrder.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.categoryRowOrder, fieldNumber: 3)
    }
    if !self.undoCategoryRowOrder.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.undoCategoryRowOrder, fieldNumber: 4)
    }
    if let v = self._cellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._undoCellDiffMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._groupingColumns {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandCategoryMoveRowsArchive, rhs: TST_CommandCategoryMoveRowsArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._actionType != rhs._actionType {return false}
    if lhs.categoryRowOrder != rhs.categoryRowOrder {return false}
    if lhs.undoCategoryRowOrder != rhs.undoCategoryRowOrder {return false}
    if lhs._cellDiffMap != rhs._cellDiffMap {return false}
    if lhs._undoCellDiffMap != rhs._undoCellDiffMap {return false}
    if lhs._groupingColumns != rhs._groupingColumns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandRewriteHiddenStatesForGroupByChangeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandRewriteHiddenStatesForGroupByChangeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "group_by_change"),
    3: .standard(proto: "collapsed_state"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._groupByChange == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._groupByChange, !v.isInitialized {return false}
    if let v = self._collapsedState, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._groupByChange)
      case 3: try decoder.decodeSingularMessageField(value: &self._collapsedState)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._groupByChange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._collapsedState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandRewriteHiddenStatesForGroupByChangeArchive, rhs: TST_CommandRewriteHiddenStatesForGroupByChangeArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._groupByChange != rhs._groupByChange {return false}
    if lhs._collapsedState != rhs._collapsedState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandRewritePencilAnnotationFormulasArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandRewritePencilAnnotationFormulasArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "rewrite_spec"),
    3: .standard(proto: "formulas_to_rewrite"),
    4: .standard(proto: "annotations_for_undo"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._rewriteSpec == nil {return false}
    if self._formulasToRewrite == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._rewriteSpec, !v.isInitialized {return false}
    if let v = self._formulasToRewrite, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.annotationsForUndo) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._rewriteSpec)
      case 3: try decoder.decodeSingularMessageField(value: &self._formulasToRewrite)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.annotationsForUndo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._rewriteSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._formulasToRewrite {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.annotationsForUndo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.annotationsForUndo, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandRewritePencilAnnotationFormulasArchive, rhs: TST_CommandRewritePencilAnnotationFormulasArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._rewriteSpec != rhs._rewriteSpec {return false}
    if lhs._formulasToRewrite != rhs._formulasToRewrite {return false}
    if lhs.annotationsForUndo != rhs.annotationsForUndo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CommandRewritePencilAnnotationFormulasArchive.AnnotationPair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TST_CommandRewritePencilAnnotationFormulasArchive.protoMessageName + ".AnnotationPair"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "annotation"),
  ]

  public var isInitialized: Bool {
    if self._index == nil {return false}
    if self._annotation == nil {return false}
    if let v = self._annotation, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._index)
      case 2: try decoder.decodeSingularMessageField(value: &self._annotation)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._index {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._annotation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CommandRewritePencilAnnotationFormulasArchive.AnnotationPair, rhs: TST_CommandRewritePencilAnnotationFormulasArchive.AnnotationPair) -> Bool {
    if lhs._index != rhs._index {return false}
    if lhs._annotation != rhs._annotation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
