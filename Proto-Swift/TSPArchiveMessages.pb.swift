// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TSPArchiveMessages.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct TSP_ArchiveInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identifier: UInt64 {
    get {return _identifier ?? 0}
    set {_identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return self._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {self._identifier = nil}

  var messageInfos: [TSP_MessageInfo] = []

  var shouldMerge: Bool {
    get {return _shouldMerge ?? false}
    set {_shouldMerge = newValue}
  }
  /// Returns true if `shouldMerge` has been explicitly set.
  var hasShouldMerge: Bool {return self._shouldMerge != nil}
  /// Clears the value of `shouldMerge`. Subsequent reads from it will return its default value.
  mutating func clearShouldMerge() {self._shouldMerge = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _identifier: UInt64? = nil
  fileprivate var _shouldMerge: Bool? = nil
}

struct TSP_MessageInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: UInt32 {
    get {return _type ?? 0}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var version: [UInt32] = []

  var length: UInt32 {
    get {return _length ?? 0}
    set {_length = newValue}
  }
  /// Returns true if `length` has been explicitly set.
  var hasLength: Bool {return self._length != nil}
  /// Clears the value of `length`. Subsequent reads from it will return its default value.
  mutating func clearLength() {self._length = nil}

  var fieldInfos: [TSP_FieldInfo] = []

  var objectReferences: [UInt64] = []

  var dataReferences: [UInt64] = []

  var baseMessageIndex: UInt32 {
    get {return _baseMessageIndex ?? 0}
    set {_baseMessageIndex = newValue}
  }
  /// Returns true if `baseMessageIndex` has been explicitly set.
  var hasBaseMessageIndex: Bool {return self._baseMessageIndex != nil}
  /// Clears the value of `baseMessageIndex`. Subsequent reads from it will return its default value.
  mutating func clearBaseMessageIndex() {self._baseMessageIndex = nil}

  var diffMergeVersion: [UInt32] = []

  var diffFieldPath: TSP_FieldPath {
    get {return _diffFieldPath ?? TSP_FieldPath()}
    set {_diffFieldPath = newValue}
  }
  /// Returns true if `diffFieldPath` has been explicitly set.
  var hasDiffFieldPath: Bool {return self._diffFieldPath != nil}
  /// Clears the value of `diffFieldPath`. Subsequent reads from it will return its default value.
  mutating func clearDiffFieldPath() {self._diffFieldPath = nil}

  var fieldsToRemove: [TSP_FieldPath] = []

  var diffReadVersion: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _type: UInt32? = nil
  fileprivate var _length: UInt32? = nil
  fileprivate var _baseMessageIndex: UInt32? = nil
  fileprivate var _diffFieldPath: TSP_FieldPath? = nil
}

struct TSP_FieldInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var path: TSP_FieldPath {
    get {return _path ?? TSP_FieldPath()}
    set {_path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  var hasPath: Bool {return self._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  mutating func clearPath() {self._path = nil}

  var type: TSP_FieldInfo.TypeEnum {
    get {return _type ?? .value}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var unknownFieldRule: TSP_FieldInfo.UnknownFieldRule {
    get {return _unknownFieldRule ?? .ignoreAndPreserveUntilModified}
    set {_unknownFieldRule = newValue}
  }
  /// Returns true if `unknownFieldRule` has been explicitly set.
  var hasUnknownFieldRule: Bool {return self._unknownFieldRule != nil}
  /// Clears the value of `unknownFieldRule`. Subsequent reads from it will return its default value.
  mutating func clearUnknownFieldRule() {self._unknownFieldRule = nil}

  var objectReferences: [UInt64] = []

  var dataReferences: [UInt64] = []

  var knownFieldRule: TSP_FieldInfo.KnownFieldRule {
    get {return _knownFieldRule ?? .none}
    set {_knownFieldRule = newValue}
  }
  /// Returns true if `knownFieldRule` has been explicitly set.
  var hasKnownFieldRule: Bool {return self._knownFieldRule != nil}
  /// Clears the value of `knownFieldRule`. Subsequent reads from it will return its default value.
  mutating func clearKnownFieldRule() {self._knownFieldRule = nil}

  var knownFieldVersion: [UInt32] = []

  var knownFieldFeatureIdentifier: String {
    get {return _knownFieldFeatureIdentifier ?? String()}
    set {_knownFieldFeatureIdentifier = newValue}
  }
  /// Returns true if `knownFieldFeatureIdentifier` has been explicitly set.
  var hasKnownFieldFeatureIdentifier: Bool {return self._knownFieldFeatureIdentifier != nil}
  /// Clears the value of `knownFieldFeatureIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearKnownFieldFeatureIdentifier() {self._knownFieldFeatureIdentifier = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case value // = 0
    case objectReference // = 1
    case dataReference // = 2
    case message // = 3

    init() {
      self = .value
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .value
      case 1: self = .objectReference
      case 2: self = .dataReference
      case 3: self = .message
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .value: return 0
      case .objectReference: return 1
      case .dataReference: return 2
      case .message: return 3
      }
    }

  }

  enum UnknownFieldRule: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ignoreAndPreserveUntilModified // = 0
    case ignoreAndPreserve // = 1
    case mustUnderstand // = 2
    case notSupported // = -1

    init() {
      self = .ignoreAndPreserveUntilModified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case -1: self = .notSupported
      case 0: self = .ignoreAndPreserveUntilModified
      case 1: self = .ignoreAndPreserve
      case 2: self = .mustUnderstand
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .notSupported: return -1
      case .ignoreAndPreserveUntilModified: return 0
      case .ignoreAndPreserve: return 1
      case .mustUnderstand: return 2
      }
    }

  }

  enum KnownFieldRule: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case none // = 0
    case preserveNewerValueUntilModified // = 1
    case preserveNewerValue // = 2

    init() {
      self = .none
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .preserveNewerValueUntilModified
      case 2: self = .preserveNewerValue
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .none: return 0
      case .preserveNewerValueUntilModified: return 1
      case .preserveNewerValue: return 2
      }
    }

  }

  init() {}

  fileprivate var _path: TSP_FieldPath? = nil
  fileprivate var _type: TSP_FieldInfo.TypeEnum? = nil
  fileprivate var _unknownFieldRule: TSP_FieldInfo.UnknownFieldRule? = nil
  fileprivate var _knownFieldRule: TSP_FieldInfo.KnownFieldRule? = nil
  fileprivate var _knownFieldFeatureIdentifier: String? = nil
}

#if swift(>=4.2)

extension TSP_FieldInfo.TypeEnum: CaseIterable {
  // Support synthesized by the compiler.
}

extension TSP_FieldInfo.UnknownFieldRule: CaseIterable {
  // Support synthesized by the compiler.
}

extension TSP_FieldInfo.KnownFieldRule: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSP_FieldPath {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var path: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSP_ComponentInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identifier: UInt64 {
    get {return _storage._identifier ?? 0}
    set {_uniqueStorage()._identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return _storage._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {_uniqueStorage()._identifier = nil}

  var preferredLocator: String {
    get {return _storage._preferredLocator ?? String()}
    set {_uniqueStorage()._preferredLocator = newValue}
  }
  /// Returns true if `preferredLocator` has been explicitly set.
  var hasPreferredLocator: Bool {return _storage._preferredLocator != nil}
  /// Clears the value of `preferredLocator`. Subsequent reads from it will return its default value.
  mutating func clearPreferredLocator() {_uniqueStorage()._preferredLocator = nil}

  var locator: String {
    get {return _storage._locator ?? String()}
    set {_uniqueStorage()._locator = newValue}
  }
  /// Returns true if `locator` has been explicitly set.
  var hasLocator: Bool {return _storage._locator != nil}
  /// Clears the value of `locator`. Subsequent reads from it will return its default value.
  mutating func clearLocator() {_uniqueStorage()._locator = nil}

  var documentReadVersion: [UInt32] {
    get {return _storage._documentReadVersion}
    set {_uniqueStorage()._documentReadVersion = newValue}
  }

  var documentWriteVersion: [UInt32] {
    get {return _storage._documentWriteVersion}
    set {_uniqueStorage()._documentWriteVersion = newValue}
  }

  var externalReferences: [TSP_ComponentExternalReference] {
    get {return _storage._externalReferences}
    set {_uniqueStorage()._externalReferences = newValue}
  }

  var dataReferences: [TSP_ComponentDataReference] {
    get {return _storage._dataReferences}
    set {_uniqueStorage()._dataReferences = newValue}
  }

  var isStoredOutsideObjectArchive: Bool {
    get {return _storage._isStoredOutsideObjectArchive ?? false}
    set {_uniqueStorage()._isStoredOutsideObjectArchive = newValue}
  }
  /// Returns true if `isStoredOutsideObjectArchive` has been explicitly set.
  var hasIsStoredOutsideObjectArchive: Bool {return _storage._isStoredOutsideObjectArchive != nil}
  /// Clears the value of `isStoredOutsideObjectArchive`. Subsequent reads from it will return its default value.
  mutating func clearIsStoredOutsideObjectArchive() {_uniqueStorage()._isStoredOutsideObjectArchive = nil}

  var objectUuidMapEntries: [TSP_ObjectUUIDMapEntry] {
    get {return _storage._objectUuidMapEntries}
    set {_uniqueStorage()._objectUuidMapEntries = newValue}
  }

  var saveToken: UInt64 {
    get {return _storage._saveToken ?? 0}
    set {_uniqueStorage()._saveToken = newValue}
  }
  /// Returns true if `saveToken` has been explicitly set.
  var hasSaveToken: Bool {return _storage._saveToken != nil}
  /// Clears the value of `saveToken`. Subsequent reads from it will return its default value.
  mutating func clearSaveToken() {_uniqueStorage()._saveToken = nil}

  var featureInfos: [TSP_FeatureInfo] {
    get {return _storage._featureInfos}
    set {_uniqueStorage()._featureInfos = newValue}
  }

  var componentReadVersion: [UInt32] {
    get {return _storage._componentReadVersion}
    set {_uniqueStorage()._componentReadVersion = newValue}
  }

  var componentRequiredVersion: [UInt32] {
    get {return _storage._componentRequiredVersion}
    set {_uniqueStorage()._componentRequiredVersion = newValue}
  }

  var compressionAlgorithm: UInt32 {
    get {return _storage._compressionAlgorithm ?? 0}
    set {_uniqueStorage()._compressionAlgorithm = newValue}
  }
  /// Returns true if `compressionAlgorithm` has been explicitly set.
  var hasCompressionAlgorithm: Bool {return _storage._compressionAlgorithm != nil}
  /// Clears the value of `compressionAlgorithm`. Subsequent reads from it will return its default value.
  mutating func clearCompressionAlgorithm() {_uniqueStorage()._compressionAlgorithm = nil}

  var canBeDropped: Bool {
    get {return _storage._canBeDropped ?? false}
    set {_uniqueStorage()._canBeDropped = newValue}
  }
  /// Returns true if `canBeDropped` has been explicitly set.
  var hasCanBeDropped: Bool {return _storage._canBeDropped != nil}
  /// Clears the value of `canBeDropped`. Subsequent reads from it will return its default value.
  mutating func clearCanBeDropped() {_uniqueStorage()._canBeDropped = nil}

  var versionedExternalReferences: [TSP_ComponentExternalReference] {
    get {return _storage._versionedExternalReferences}
    set {_uniqueStorage()._versionedExternalReferences = newValue}
  }

  var isWasteful: Bool {
    get {return _storage._isWasteful ?? false}
    set {_uniqueStorage()._isWasteful = newValue}
  }
  /// Returns true if `isWasteful` has been explicitly set.
  var hasIsWasteful: Bool {return _storage._isWasteful != nil}
  /// Clears the value of `isWasteful`. Subsequent reads from it will return its default value.
  mutating func clearIsWasteful() {_uniqueStorage()._isWasteful = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSP_ComponentExternalReference {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var componentIdentifier: UInt64 {
    get {return _componentIdentifier ?? 0}
    set {_componentIdentifier = newValue}
  }
  /// Returns true if `componentIdentifier` has been explicitly set.
  var hasComponentIdentifier: Bool {return self._componentIdentifier != nil}
  /// Clears the value of `componentIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearComponentIdentifier() {self._componentIdentifier = nil}

  var objectIdentifier: UInt64 {
    get {return _objectIdentifier ?? 0}
    set {_objectIdentifier = newValue}
  }
  /// Returns true if `objectIdentifier` has been explicitly set.
  var hasObjectIdentifier: Bool {return self._objectIdentifier != nil}
  /// Clears the value of `objectIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearObjectIdentifier() {self._objectIdentifier = nil}

  var isWeak: Bool {
    get {return _isWeak ?? false}
    set {_isWeak = newValue}
  }
  /// Returns true if `isWeak` has been explicitly set.
  var hasIsWeak: Bool {return self._isWeak != nil}
  /// Clears the value of `isWeak`. Subsequent reads from it will return its default value.
  mutating func clearIsWeak() {self._isWeak = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _componentIdentifier: UInt64? = nil
  fileprivate var _objectIdentifier: UInt64? = nil
  fileprivate var _isWeak: Bool? = nil
}

struct TSP_ComponentDataReference {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataIdentifier: UInt64 {
    get {return _dataIdentifier ?? 0}
    set {_dataIdentifier = newValue}
  }
  /// Returns true if `dataIdentifier` has been explicitly set.
  var hasDataIdentifier: Bool {return self._dataIdentifier != nil}
  /// Clears the value of `dataIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearDataIdentifier() {self._dataIdentifier = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dataIdentifier: UInt64? = nil
}

struct TSP_ObjectUUIDMapEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identifier: UInt64 {
    get {return _identifier ?? 0}
    set {_identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return self._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {self._identifier = nil}

  var uuid: TSP_UUID {
    get {return _uuid ?? TSP_UUID()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _identifier: UInt64? = nil
  fileprivate var _uuid: TSP_UUID? = nil
}

struct TSP_FeatureInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identifier: String {
    get {return _identifier ?? String()}
    set {_identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return self._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {self._identifier = nil}

  var readVersion: [UInt32] = []

  var writeVersion: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _identifier: String? = nil
}

struct TSP_PackageMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lastObjectIdentifier: UInt64 {
    get {return _lastObjectIdentifier ?? 0}
    set {_lastObjectIdentifier = newValue}
  }
  /// Returns true if `lastObjectIdentifier` has been explicitly set.
  var hasLastObjectIdentifier: Bool {return self._lastObjectIdentifier != nil}
  /// Clears the value of `lastObjectIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearLastObjectIdentifier() {self._lastObjectIdentifier = nil}

  var revision: TSP_DocumentRevision {
    get {return _revision ?? TSP_DocumentRevision()}
    set {_revision = newValue}
  }
  /// Returns true if `revision` has been explicitly set.
  var hasRevision: Bool {return self._revision != nil}
  /// Clears the value of `revision`. Subsequent reads from it will return its default value.
  mutating func clearRevision() {self._revision = nil}

  var components: [TSP_ComponentInfo] = []

  var datas: [TSP_DataInfo] = []

  var readVersion: [UInt32] = []

  var writeVersion: [UInt32] = []

  var fileFormatVersion: [UInt32] = []

  var saveToken: UInt64 {
    get {return _saveToken ?? 0}
    set {_saveToken = newValue}
  }
  /// Returns true if `saveToken` has been explicitly set.
  var hasSaveToken: Bool {return self._saveToken != nil}
  /// Clears the value of `saveToken`. Subsequent reads from it will return its default value.
  mutating func clearSaveToken() {self._saveToken = nil}

  var preferredPackageType: TSP_PackageMetadata.PackageType {
    get {return _preferredPackageType ?? .default}
    set {_preferredPackageType = newValue}
  }
  /// Returns true if `preferredPackageType` has been explicitly set.
  var hasPreferredPackageType: Bool {return self._preferredPackageType != nil}
  /// Clears the value of `preferredPackageType`. Subsequent reads from it will return its default value.
  mutating func clearPreferredPackageType() {self._preferredPackageType = nil}

  var dataMetadataMap: TSP_Reference {
    get {return _dataMetadataMap ?? TSP_Reference()}
    set {_dataMetadataMap = newValue}
  }
  /// Returns true if `dataMetadataMap` has been explicitly set.
  var hasDataMetadataMap: Bool {return self._dataMetadataMap != nil}
  /// Clears the value of `dataMetadataMap`. Subsequent reads from it will return its default value.
  mutating func clearDataMetadataMap() {self._dataMetadataMap = nil}

  var versionedComponents: [TSP_ComponentInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PackageType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case `default` // = 0
    case directory // = 1
    case singleFile // = 2

    init() {
      self = .default
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .default
      case 1: self = .directory
      case 2: self = .singleFile
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .default: return 0
      case .directory: return 1
      case .singleFile: return 2
      }
    }

  }

  init() {}

  fileprivate var _lastObjectIdentifier: UInt64? = nil
  fileprivate var _revision: TSP_DocumentRevision? = nil
  fileprivate var _saveToken: UInt64? = nil
  fileprivate var _preferredPackageType: TSP_PackageMetadata.PackageType? = nil
  fileprivate var _dataMetadataMap: TSP_Reference? = nil
}

#if swift(>=4.2)

extension TSP_PackageMetadata.PackageType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSP_DocumentRevision {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sequence32: Int32 {
    get {return _sequence32 ?? 0}
    set {_sequence32 = newValue}
  }
  /// Returns true if `sequence32` has been explicitly set.
  var hasSequence32: Bool {return self._sequence32 != nil}
  /// Clears the value of `sequence32`. Subsequent reads from it will return its default value.
  mutating func clearSequence32() {self._sequence32 = nil}

  var identifier: String {
    get {return _identifier ?? String()}
    set {_identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return self._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {self._identifier = nil}

  var sequence64: UInt64 {
    get {return _sequence64 ?? 0}
    set {_sequence64 = newValue}
  }
  /// Returns true if `sequence64` has been explicitly set.
  var hasSequence64: Bool {return self._sequence64 != nil}
  /// Clears the value of `sequence64`. Subsequent reads from it will return its default value.
  mutating func clearSequence64() {self._sequence64 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sequence32: Int32? = nil
  fileprivate var _identifier: String? = nil
  fileprivate var _sequence64: UInt64? = nil
}

struct TSP_PasteboardMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: [UInt32] = []

  var appName: String {
    get {return _appName ?? String()}
    set {_appName = newValue}
  }
  /// Returns true if `appName` has been explicitly set.
  var hasAppName: Bool {return self._appName != nil}
  /// Clears the value of `appName`. Subsequent reads from it will return its default value.
  mutating func clearAppName() {self._appName = nil}

  var datas: [TSP_DataInfo] = []

  var sourceDocumentUuid: TSP_UUID {
    get {return _sourceDocumentUuid ?? TSP_UUID()}
    set {_sourceDocumentUuid = newValue}
  }
  /// Returns true if `sourceDocumentUuid` has been explicitly set.
  var hasSourceDocumentUuid: Bool {return self._sourceDocumentUuid != nil}
  /// Clears the value of `sourceDocumentUuid`. Subsequent reads from it will return its default value.
  mutating func clearSourceDocumentUuid() {self._sourceDocumentUuid = nil}

  var dataMetadataMap: TSP_Reference {
    get {return _dataMetadataMap ?? TSP_Reference()}
    set {_dataMetadataMap = newValue}
  }
  /// Returns true if `dataMetadataMap` has been explicitly set.
  var hasDataMetadataMap: Bool {return self._dataMetadataMap != nil}
  /// Clears the value of `dataMetadataMap`. Subsequent reads from it will return its default value.
  mutating func clearDataMetadataMap() {self._dataMetadataMap = nil}

  var readVersion: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _appName: String? = nil
  fileprivate var _sourceDocumentUuid: TSP_UUID? = nil
  fileprivate var _dataMetadataMap: TSP_Reference? = nil
}

struct TSP_DataInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identifier: UInt64 {
    get {return _identifier ?? 0}
    set {_identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return self._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {self._identifier = nil}

  var digest: Data {
    get {return _digest ?? SwiftProtobuf.Internal.emptyData}
    set {_digest = newValue}
  }
  /// Returns true if `digest` has been explicitly set.
  var hasDigest: Bool {return self._digest != nil}
  /// Clears the value of `digest`. Subsequent reads from it will return its default value.
  mutating func clearDigest() {self._digest = nil}

  var preferredFileName: String {
    get {return _preferredFileName ?? String()}
    set {_preferredFileName = newValue}
  }
  /// Returns true if `preferredFileName` has been explicitly set.
  var hasPreferredFileName: Bool {return self._preferredFileName != nil}
  /// Clears the value of `preferredFileName`. Subsequent reads from it will return its default value.
  mutating func clearPreferredFileName() {self._preferredFileName = nil}

  var fileName: String {
    get {return _fileName ?? String()}
    set {_fileName = newValue}
  }
  /// Returns true if `fileName` has been explicitly set.
  var hasFileName: Bool {return self._fileName != nil}
  /// Clears the value of `fileName`. Subsequent reads from it will return its default value.
  mutating func clearFileName() {self._fileName = nil}

  var documentResourceLocator: String {
    get {return _documentResourceLocator ?? String()}
    set {_documentResourceLocator = newValue}
  }
  /// Returns true if `documentResourceLocator` has been explicitly set.
  var hasDocumentResourceLocator: Bool {return self._documentResourceLocator != nil}
  /// Clears the value of `documentResourceLocator`. Subsequent reads from it will return its default value.
  mutating func clearDocumentResourceLocator() {self._documentResourceLocator = nil}

  var sourceBookmarkData: Data {
    get {return _sourceBookmarkData ?? SwiftProtobuf.Internal.emptyData}
    set {_sourceBookmarkData = newValue}
  }
  /// Returns true if `sourceBookmarkData` has been explicitly set.
  var hasSourceBookmarkData: Bool {return self._sourceBookmarkData != nil}
  /// Clears the value of `sourceBookmarkData`. Subsequent reads from it will return its default value.
  mutating func clearSourceBookmarkData() {self._sourceBookmarkData = nil}

  var remoteURL: String {
    get {return _remoteURL ?? String()}
    set {_remoteURL = newValue}
  }
  /// Returns true if `remoteURL` has been explicitly set.
  var hasRemoteURL: Bool {return self._remoteURL != nil}
  /// Clears the value of `remoteURL`. Subsequent reads from it will return its default value.
  mutating func clearRemoteURL() {self._remoteURL = nil}

  var canDownload: Bool {
    get {return _canDownload ?? false}
    set {_canDownload = newValue}
  }
  /// Returns true if `canDownload` has been explicitly set.
  var hasCanDownload: Bool {return self._canDownload != nil}
  /// Clears the value of `canDownload`. Subsequent reads from it will return its default value.
  mutating func clearCanDownload() {self._canDownload = nil}

  var downloadPriority: TSP_DataInfo.DownloadPriority {
    get {return _downloadPriority ?? .default}
    set {_downloadPriority = newValue}
  }
  /// Returns true if `downloadPriority` has been explicitly set.
  var hasDownloadPriority: Bool {return self._downloadPriority != nil}
  /// Clears the value of `downloadPriority`. Subsequent reads from it will return its default value.
  mutating func clearDownloadPriority() {self._downloadPriority = nil}

  var attributes: TSP_DataAttributes {
    get {return _attributes ?? TSP_DataAttributes()}
    set {_attributes = newValue}
  }
  /// Returns true if `attributes` has been explicitly set.
  var hasAttributes: Bool {return self._attributes != nil}
  /// Clears the value of `attributes`. Subsequent reads from it will return its default value.
  mutating func clearAttributes() {self._attributes = nil}

  var encryptionInfo: TSP_EncryptionInfo {
    get {return _encryptionInfo ?? TSP_EncryptionInfo()}
    set {_encryptionInfo = newValue}
  }
  /// Returns true if `encryptionInfo` has been explicitly set.
  var hasEncryptionInfo: Bool {return self._encryptionInfo != nil}
  /// Clears the value of `encryptionInfo`. Subsequent reads from it will return its default value.
  mutating func clearEncryptionInfo() {self._encryptionInfo = nil}

  var pasteboardExternalFilePath: String {
    get {return _pasteboardExternalFilePath ?? String()}
    set {_pasteboardExternalFilePath = newValue}
  }
  /// Returns true if `pasteboardExternalFilePath` has been explicitly set.
  var hasPasteboardExternalFilePath: Bool {return self._pasteboardExternalFilePath != nil}
  /// Clears the value of `pasteboardExternalFilePath`. Subsequent reads from it will return its default value.
  mutating func clearPasteboardExternalFilePath() {self._pasteboardExternalFilePath = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum DownloadPriority: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case high // = 0
    case `default` // = 1

    init() {
      self = .high
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .high
      case 1: self = .default
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .high: return 0
      case .default: return 1
      }
    }

  }

  init() {}

  fileprivate var _identifier: UInt64? = nil
  fileprivate var _digest: Data? = nil
  fileprivate var _preferredFileName: String? = nil
  fileprivate var _fileName: String? = nil
  fileprivate var _documentResourceLocator: String? = nil
  fileprivate var _sourceBookmarkData: Data? = nil
  fileprivate var _remoteURL: String? = nil
  fileprivate var _canDownload: Bool? = nil
  fileprivate var _downloadPriority: TSP_DataInfo.DownloadPriority? = nil
  fileprivate var _attributes: TSP_DataAttributes? = nil
  fileprivate var _encryptionInfo: TSP_EncryptionInfo? = nil
  fileprivate var _pasteboardExternalFilePath: String? = nil
}

#if swift(>=4.2)

extension TSP_DataInfo.DownloadPriority: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSP_DataMetadataMap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataMetadataEntries: [TSP_DataMetadataMap.DataMetadataMapEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct DataMetadataMapEntry {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var dataIdentifier: UInt64 {
      get {return _dataIdentifier ?? 0}
      set {_dataIdentifier = newValue}
    }
    /// Returns true if `dataIdentifier` has been explicitly set.
    var hasDataIdentifier: Bool {return self._dataIdentifier != nil}
    /// Clears the value of `dataIdentifier`. Subsequent reads from it will return its default value.
    mutating func clearDataIdentifier() {self._dataIdentifier = nil}

    var dataMetadata: TSP_Reference {
      get {return _dataMetadata ?? TSP_Reference()}
      set {_dataMetadata = newValue}
    }
    /// Returns true if `dataMetadata` has been explicitly set.
    var hasDataMetadata: Bool {return self._dataMetadata != nil}
    /// Clears the value of `dataMetadata`. Subsequent reads from it will return its default value.
    mutating func clearDataMetadata() {self._dataMetadata = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _dataIdentifier: UInt64? = nil
    fileprivate var _dataMetadata: TSP_Reference? = nil
  }

  init() {}
}

struct TSP_DataMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fallbackColor: TSP_Color {
    get {return _fallbackColor ?? TSP_Color()}
    set {_fallbackColor = newValue}
  }
  /// Returns true if `fallbackColor` has been explicitly set.
  var hasFallbackColor: Bool {return self._fallbackColor != nil}
  /// Clears the value of `fallbackColor`. Subsequent reads from it will return its default value.
  mutating func clearFallbackColor() {self._fallbackColor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fallbackColor: TSP_Color? = nil
}

struct TSP_EncryptionInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var decodedLength: UInt64 {
    get {return _decodedLength ?? 0}
    set {_decodedLength = newValue}
  }
  /// Returns true if `decodedLength` has been explicitly set.
  var hasDecodedLength: Bool {return self._decodedLength != nil}
  /// Clears the value of `decodedLength`. Subsequent reads from it will return its default value.
  mutating func clearDecodedLength() {self._decodedLength = nil}

  var preferredBlockSize: UInt64 {
    get {return _preferredBlockSize ?? 0}
    set {_preferredBlockSize = newValue}
  }
  /// Returns true if `preferredBlockSize` has been explicitly set.
  var hasPreferredBlockSize: Bool {return self._preferredBlockSize != nil}
  /// Clears the value of `preferredBlockSize`. Subsequent reads from it will return its default value.
  mutating func clearPreferredBlockSize() {self._preferredBlockSize = nil}

  var blockInfos: [TSP_EncryptionBlockInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _decodedLength: UInt64? = nil
  fileprivate var _preferredBlockSize: UInt64? = nil
}

struct TSP_EncryptionBlockInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var encodedLength: UInt64 {
    get {return _encodedLength ?? 0}
    set {_encodedLength = newValue}
  }
  /// Returns true if `encodedLength` has been explicitly set.
  var hasEncodedLength: Bool {return self._encodedLength != nil}
  /// Clears the value of `encodedLength`. Subsequent reads from it will return its default value.
  mutating func clearEncodedLength() {self._encodedLength = nil}

  var decodedLength: UInt64 {
    get {return _decodedLength ?? 0}
    set {_decodedLength = newValue}
  }
  /// Returns true if `decodedLength` has been explicitly set.
  var hasDecodedLength: Bool {return self._decodedLength != nil}
  /// Clears the value of `decodedLength`. Subsequent reads from it will return its default value.
  mutating func clearDecodedLength() {self._decodedLength = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _encodedLength: UInt64? = nil
  fileprivate var _decodedLength: UInt64? = nil
}

struct TSP_ViewStateMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: [UInt32] = []

  var versionUuid: TSP_UUID {
    get {return _versionUuid ?? TSP_UUID()}
    set {_versionUuid = newValue}
  }
  /// Returns true if `versionUuid` has been explicitly set.
  var hasVersionUuid: Bool {return self._versionUuid != nil}
  /// Clears the value of `versionUuid`. Subsequent reads from it will return its default value.
  mutating func clearVersionUuid() {self._versionUuid = nil}

  var component: TSP_ComponentInfo {
    get {return _component ?? TSP_ComponentInfo()}
    set {_component = newValue}
  }
  /// Returns true if `component` has been explicitly set.
  var hasComponent: Bool {return self._component != nil}
  /// Clears the value of `component`. Subsequent reads from it will return its default value.
  mutating func clearComponent() {self._component = nil}

  var externalObjectUuidMapEntries: [TSP_ObjectUUIDMapEntry] = []

  var readVersion: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _versionUuid: TSP_UUID? = nil
  fileprivate var _component: TSP_ComponentInfo? = nil
}

struct TSP_ObjectSerializationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: [UInt32] = []

  var sourceDocumentUuid: TSP_UUID {
    get {return _sourceDocumentUuid ?? TSP_UUID()}
    set {_sourceDocumentUuid = newValue}
  }
  /// Returns true if `sourceDocumentUuid` has been explicitly set.
  var hasSourceDocumentUuid: Bool {return self._sourceDocumentUuid != nil}
  /// Clears the value of `sourceDocumentUuid`. Subsequent reads from it will return its default value.
  mutating func clearSourceDocumentUuid() {self._sourceDocumentUuid = nil}

  var versionUuid: TSP_UUID {
    get {return _versionUuid ?? TSP_UUID()}
    set {_versionUuid = newValue}
  }
  /// Returns true if `versionUuid` has been explicitly set.
  var hasVersionUuid: Bool {return self._versionUuid != nil}
  /// Clears the value of `versionUuid`. Subsequent reads from it will return its default value.
  mutating func clearVersionUuid() {self._versionUuid = nil}

  var component: TSP_ComponentInfo {
    get {return _component ?? TSP_ComponentInfo()}
    set {_component = newValue}
  }
  /// Returns true if `component` has been explicitly set.
  var hasComponent: Bool {return self._component != nil}
  /// Clears the value of `component`. Subsequent reads from it will return its default value.
  mutating func clearComponent() {self._component = nil}

  var datas: [TSP_DataInfo] = []

  var externalObjectUuidMapEntries: [TSP_ObjectUUIDMapEntry] = []

  var dataMetadataMap: TSP_Reference {
    get {return _dataMetadataMap ?? TSP_Reference()}
    set {_dataMetadataMap = newValue}
  }
  /// Returns true if `dataMetadataMap` has been explicitly set.
  var hasDataMetadataMap: Bool {return self._dataMetadataMap != nil}
  /// Clears the value of `dataMetadataMap`. Subsequent reads from it will return its default value.
  mutating func clearDataMetadataMap() {self._dataMetadataMap = nil}

  var readVersion: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sourceDocumentUuid: TSP_UUID? = nil
  fileprivate var _versionUuid: TSP_UUID? = nil
  fileprivate var _component: TSP_ComponentInfo? = nil
  fileprivate var _dataMetadataMap: TSP_Reference? = nil
}

struct TSP_ObjectSerializationDirectory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entries: [TSP_ObjectSerializationDirectory.Entry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Entry {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var locator: String {
      get {return _locator ?? String()}
      set {_locator = newValue}
    }
    /// Returns true if `locator` has been explicitly set.
    var hasLocator: Bool {return self._locator != nil}
    /// Clears the value of `locator`. Subsequent reads from it will return its default value.
    mutating func clearLocator() {self._locator = nil}

    var offset: UInt64 {
      get {return _offset ?? 0}
      set {_offset = newValue}
    }
    /// Returns true if `offset` has been explicitly set.
    var hasOffset: Bool {return self._offset != nil}
    /// Clears the value of `offset`. Subsequent reads from it will return its default value.
    mutating func clearOffset() {self._offset = nil}

    var size: UInt64 {
      get {return _size ?? 0}
      set {_size = newValue}
    }
    /// Returns true if `size` has been explicitly set.
    var hasSize: Bool {return self._size != nil}
    /// Clears the value of `size`. Subsequent reads from it will return its default value.
    mutating func clearSize() {self._size = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _locator: String? = nil
    fileprivate var _offset: UInt64? = nil
    fileprivate var _size: UInt64? = nil
  }

  init() {}
}

struct TSP_DocumentMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isInCollaborationMode: Bool {
    get {return _isInCollaborationMode ?? false}
    set {_isInCollaborationMode = newValue}
  }
  /// Returns true if `isInCollaborationMode` has been explicitly set.
  var hasIsInCollaborationMode: Bool {return self._isInCollaborationMode != nil}
  /// Clears the value of `isInCollaborationMode`. Subsequent reads from it will return its default value.
  mutating func clearIsInCollaborationMode() {self._isInCollaborationMode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _isInCollaborationMode: Bool? = nil
}

struct TSP_SupportMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isInCollaborationMode: Bool {
    get {return _isInCollaborationMode ?? false}
    set {_isInCollaborationMode = newValue}
  }
  /// Returns true if `isInCollaborationMode` has been explicitly set.
  var hasIsInCollaborationMode: Bool {return self._isInCollaborationMode != nil}
  /// Clears the value of `isInCollaborationMode`. Subsequent reads from it will return its default value.
  mutating func clearIsInCollaborationMode() {self._isInCollaborationMode = nil}

  var acknowledgedServerData: [TSP_DataReference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _isInCollaborationMode: Bool? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TSP"

extension TSP_ArchiveInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ArchiveInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .standard(proto: "message_infos"),
    3: .standard(proto: "should_merge"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.messageInfos) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._identifier)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.messageInfos)
      case 3: try decoder.decodeSingularBoolField(value: &self._shouldMerge)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._identifier {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if !self.messageInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messageInfos, fieldNumber: 2)
    }
    if let v = self._shouldMerge {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_ArchiveInfo, rhs: TSP_ArchiveInfo) -> Bool {
    if lhs._identifier != rhs._identifier {return false}
    if lhs.messageInfos != rhs.messageInfos {return false}
    if lhs._shouldMerge != rhs._shouldMerge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_MessageInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MessageInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "version"),
    3: .same(proto: "length"),
    4: .standard(proto: "field_infos"),
    5: .standard(proto: "object_references"),
    6: .standard(proto: "data_references"),
    7: .standard(proto: "base_message_index"),
    8: .standard(proto: "diff_merge_version"),
    9: .standard(proto: "diff_field_path"),
    10: .standard(proto: "fields_to_remove"),
    11: .standard(proto: "diff_read_version"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if self._length == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.fieldInfos) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._type)
      case 2: try decoder.decodeRepeatedUInt32Field(value: &self.version)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._length)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.fieldInfos)
      case 5: try decoder.decodeRepeatedUInt64Field(value: &self.objectReferences)
      case 6: try decoder.decodeRepeatedUInt64Field(value: &self.dataReferences)
      case 7: try decoder.decodeSingularUInt32Field(value: &self._baseMessageIndex)
      case 8: try decoder.decodeRepeatedUInt32Field(value: &self.diffMergeVersion)
      case 9: try decoder.decodeSingularMessageField(value: &self._diffFieldPath)
      case 10: try decoder.decodeRepeatedMessageField(value: &self.fieldsToRemove)
      case 11: try decoder.decodeRepeatedUInt32Field(value: &self.diffReadVersion)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.version, fieldNumber: 2)
    }
    if let v = self._length {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if !self.fieldInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fieldInfos, fieldNumber: 4)
    }
    if !self.objectReferences.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.objectReferences, fieldNumber: 5)
    }
    if !self.dataReferences.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.dataReferences, fieldNumber: 6)
    }
    if let v = self._baseMessageIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if !self.diffMergeVersion.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.diffMergeVersion, fieldNumber: 8)
    }
    if let v = self._diffFieldPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if !self.fieldsToRemove.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fieldsToRemove, fieldNumber: 10)
    }
    if !self.diffReadVersion.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.diffReadVersion, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_MessageInfo, rhs: TSP_MessageInfo) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs.version != rhs.version {return false}
    if lhs._length != rhs._length {return false}
    if lhs.fieldInfos != rhs.fieldInfos {return false}
    if lhs.objectReferences != rhs.objectReferences {return false}
    if lhs.dataReferences != rhs.dataReferences {return false}
    if lhs._baseMessageIndex != rhs._baseMessageIndex {return false}
    if lhs.diffMergeVersion != rhs.diffMergeVersion {return false}
    if lhs._diffFieldPath != rhs._diffFieldPath {return false}
    if lhs.fieldsToRemove != rhs.fieldsToRemove {return false}
    if lhs.diffReadVersion != rhs.diffReadVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_FieldInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FieldInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "type"),
    3: .standard(proto: "unknown_field_rule"),
    4: .standard(proto: "object_references"),
    5: .standard(proto: "data_references"),
    6: .standard(proto: "known_field_rule"),
    7: .standard(proto: "known_field_version"),
    8: .standard(proto: "known_field_feature_identifier"),
  ]

  public var isInitialized: Bool {
    if self._path == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._path)
      case 2: try decoder.decodeSingularEnumField(value: &self._type)
      case 3: try decoder.decodeSingularEnumField(value: &self._unknownFieldRule)
      case 4: try decoder.decodeRepeatedUInt64Field(value: &self.objectReferences)
      case 5: try decoder.decodeRepeatedUInt64Field(value: &self.dataReferences)
      case 6: try decoder.decodeSingularEnumField(value: &self._knownFieldRule)
      case 7: try decoder.decodeRepeatedUInt32Field(value: &self.knownFieldVersion)
      case 8: try decoder.decodeSingularStringField(value: &self._knownFieldFeatureIdentifier)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._path {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._unknownFieldRule {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if !self.objectReferences.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.objectReferences, fieldNumber: 4)
    }
    if !self.dataReferences.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.dataReferences, fieldNumber: 5)
    }
    if let v = self._knownFieldRule {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    }
    if !self.knownFieldVersion.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.knownFieldVersion, fieldNumber: 7)
    }
    if let v = self._knownFieldFeatureIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_FieldInfo, rhs: TSP_FieldInfo) -> Bool {
    if lhs._path != rhs._path {return false}
    if lhs._type != rhs._type {return false}
    if lhs._unknownFieldRule != rhs._unknownFieldRule {return false}
    if lhs.objectReferences != rhs.objectReferences {return false}
    if lhs.dataReferences != rhs.dataReferences {return false}
    if lhs._knownFieldRule != rhs._knownFieldRule {return false}
    if lhs.knownFieldVersion != rhs.knownFieldVersion {return false}
    if lhs._knownFieldFeatureIdentifier != rhs._knownFieldFeatureIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_FieldInfo.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Value"),
    1: .same(proto: "ObjectReference"),
    2: .same(proto: "DataReference"),
    3: .same(proto: "Message"),
  ]
}

extension TSP_FieldInfo.UnknownFieldRule: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -1: .same(proto: "NotSupported"),
    0: .same(proto: "IgnoreAndPreserveUntilModified"),
    1: .same(proto: "IgnoreAndPreserve"),
    2: .same(proto: "MustUnderstand"),
  ]
}

extension TSP_FieldInfo.KnownFieldRule: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "None"),
    1: .same(proto: "PreserveNewerValueUntilModified"),
    2: .same(proto: "PreserveNewerValue"),
  ]
}

extension TSP_FieldPath: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FieldPath"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt32Field(value: &self.path)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.path, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_FieldPath, rhs: TSP_FieldPath) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_ComponentInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ComponentInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .standard(proto: "preferred_locator"),
    3: .same(proto: "locator"),
    4: .standard(proto: "document_read_version"),
    5: .standard(proto: "document_write_version"),
    6: .standard(proto: "external_references"),
    7: .standard(proto: "data_references"),
    10: .standard(proto: "is_stored_outside_object_archive"),
    11: .standard(proto: "object_uuid_map_entries"),
    12: .standard(proto: "save_token"),
    13: .standard(proto: "feature_infos"),
    14: .standard(proto: "component_read_version"),
    15: .standard(proto: "component_required_version"),
    16: .standard(proto: "compression_algorithm"),
    17: .standard(proto: "can_be_dropped"),
    18: .standard(proto: "versioned_external_references"),
    19: .standard(proto: "is_wasteful"),
  ]

  fileprivate class _StorageClass {
    var _identifier: UInt64? = nil
    var _preferredLocator: String? = nil
    var _locator: String? = nil
    var _documentReadVersion: [UInt32] = []
    var _documentWriteVersion: [UInt32] = []
    var _externalReferences: [TSP_ComponentExternalReference] = []
    var _dataReferences: [TSP_ComponentDataReference] = []
    var _isStoredOutsideObjectArchive: Bool? = nil
    var _objectUuidMapEntries: [TSP_ObjectUUIDMapEntry] = []
    var _saveToken: UInt64? = nil
    var _featureInfos: [TSP_FeatureInfo] = []
    var _componentReadVersion: [UInt32] = []
    var _componentRequiredVersion: [UInt32] = []
    var _compressionAlgorithm: UInt32? = nil
    var _canBeDropped: Bool? = nil
    var _versionedExternalReferences: [TSP_ComponentExternalReference] = []
    var _isWasteful: Bool? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _identifier = source._identifier
      _preferredLocator = source._preferredLocator
      _locator = source._locator
      _documentReadVersion = source._documentReadVersion
      _documentWriteVersion = source._documentWriteVersion
      _externalReferences = source._externalReferences
      _dataReferences = source._dataReferences
      _isStoredOutsideObjectArchive = source._isStoredOutsideObjectArchive
      _objectUuidMapEntries = source._objectUuidMapEntries
      _saveToken = source._saveToken
      _featureInfos = source._featureInfos
      _componentReadVersion = source._componentReadVersion
      _componentRequiredVersion = source._componentRequiredVersion
      _compressionAlgorithm = source._compressionAlgorithm
      _canBeDropped = source._canBeDropped
      _versionedExternalReferences = source._versionedExternalReferences
      _isWasteful = source._isWasteful
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._identifier == nil {return false}
      if _storage._preferredLocator == nil {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._externalReferences) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._dataReferences) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._objectUuidMapEntries) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._featureInfos) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._versionedExternalReferences) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._identifier)
        case 2: try decoder.decodeSingularStringField(value: &_storage._preferredLocator)
        case 3: try decoder.decodeSingularStringField(value: &_storage._locator)
        case 4: try decoder.decodeRepeatedUInt32Field(value: &_storage._documentReadVersion)
        case 5: try decoder.decodeRepeatedUInt32Field(value: &_storage._documentWriteVersion)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._externalReferences)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._dataReferences)
        case 10: try decoder.decodeSingularBoolField(value: &_storage._isStoredOutsideObjectArchive)
        case 11: try decoder.decodeRepeatedMessageField(value: &_storage._objectUuidMapEntries)
        case 12: try decoder.decodeSingularUInt64Field(value: &_storage._saveToken)
        case 13: try decoder.decodeRepeatedMessageField(value: &_storage._featureInfos)
        case 14: try decoder.decodeRepeatedUInt32Field(value: &_storage._componentReadVersion)
        case 15: try decoder.decodeRepeatedUInt32Field(value: &_storage._componentRequiredVersion)
        case 16: try decoder.decodeSingularUInt32Field(value: &_storage._compressionAlgorithm)
        case 17: try decoder.decodeSingularBoolField(value: &_storage._canBeDropped)
        case 18: try decoder.decodeRepeatedMessageField(value: &_storage._versionedExternalReferences)
        case 19: try decoder.decodeSingularBoolField(value: &_storage._isWasteful)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._identifier {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._preferredLocator {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._locator {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if !_storage._documentReadVersion.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._documentReadVersion, fieldNumber: 4)
      }
      if !_storage._documentWriteVersion.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._documentWriteVersion, fieldNumber: 5)
      }
      if !_storage._externalReferences.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._externalReferences, fieldNumber: 6)
      }
      if !_storage._dataReferences.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._dataReferences, fieldNumber: 7)
      }
      if let v = _storage._isStoredOutsideObjectArchive {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      }
      if !_storage._objectUuidMapEntries.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._objectUuidMapEntries, fieldNumber: 11)
      }
      if let v = _storage._saveToken {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 12)
      }
      if !_storage._featureInfos.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._featureInfos, fieldNumber: 13)
      }
      if !_storage._componentReadVersion.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._componentReadVersion, fieldNumber: 14)
      }
      if !_storage._componentRequiredVersion.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._componentRequiredVersion, fieldNumber: 15)
      }
      if let v = _storage._compressionAlgorithm {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 16)
      }
      if let v = _storage._canBeDropped {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      }
      if !_storage._versionedExternalReferences.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._versionedExternalReferences, fieldNumber: 18)
      }
      if let v = _storage._isWasteful {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_ComponentInfo, rhs: TSP_ComponentInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._identifier != rhs_storage._identifier {return false}
        if _storage._preferredLocator != rhs_storage._preferredLocator {return false}
        if _storage._locator != rhs_storage._locator {return false}
        if _storage._documentReadVersion != rhs_storage._documentReadVersion {return false}
        if _storage._documentWriteVersion != rhs_storage._documentWriteVersion {return false}
        if _storage._externalReferences != rhs_storage._externalReferences {return false}
        if _storage._dataReferences != rhs_storage._dataReferences {return false}
        if _storage._isStoredOutsideObjectArchive != rhs_storage._isStoredOutsideObjectArchive {return false}
        if _storage._objectUuidMapEntries != rhs_storage._objectUuidMapEntries {return false}
        if _storage._saveToken != rhs_storage._saveToken {return false}
        if _storage._featureInfos != rhs_storage._featureInfos {return false}
        if _storage._componentReadVersion != rhs_storage._componentReadVersion {return false}
        if _storage._componentRequiredVersion != rhs_storage._componentRequiredVersion {return false}
        if _storage._compressionAlgorithm != rhs_storage._compressionAlgorithm {return false}
        if _storage._canBeDropped != rhs_storage._canBeDropped {return false}
        if _storage._versionedExternalReferences != rhs_storage._versionedExternalReferences {return false}
        if _storage._isWasteful != rhs_storage._isWasteful {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_ComponentExternalReference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ComponentExternalReference"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "component_identifier"),
    2: .standard(proto: "object_identifier"),
    3: .standard(proto: "is_weak"),
  ]

  public var isInitialized: Bool {
    if self._componentIdentifier == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._componentIdentifier)
      case 2: try decoder.decodeSingularUInt64Field(value: &self._objectIdentifier)
      case 3: try decoder.decodeSingularBoolField(value: &self._isWeak)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._componentIdentifier {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._objectIdentifier {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }
    if let v = self._isWeak {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_ComponentExternalReference, rhs: TSP_ComponentExternalReference) -> Bool {
    if lhs._componentIdentifier != rhs._componentIdentifier {return false}
    if lhs._objectIdentifier != rhs._objectIdentifier {return false}
    if lhs._isWeak != rhs._isWeak {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_ComponentDataReference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ComponentDataReference"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "data_identifier"),
  ]

  public var isInitialized: Bool {
    if self._dataIdentifier == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._dataIdentifier)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._dataIdentifier {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_ComponentDataReference, rhs: TSP_ComponentDataReference) -> Bool {
    if lhs._dataIdentifier != rhs._dataIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_ObjectUUIDMapEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ObjectUUIDMapEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .same(proto: "uuid"),
  ]

  public var isInitialized: Bool {
    if self._identifier == nil {return false}
    if self._uuid == nil {return false}
    if let v = self._uuid, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._identifier)
      case 2: try decoder.decodeSingularMessageField(value: &self._uuid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._identifier {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._uuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_ObjectUUIDMapEntry, rhs: TSP_ObjectUUIDMapEntry) -> Bool {
    if lhs._identifier != rhs._identifier {return false}
    if lhs._uuid != rhs._uuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_FeatureInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeatureInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .standard(proto: "read_version"),
    3: .standard(proto: "write_version"),
  ]

  public var isInitialized: Bool {
    if self._identifier == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._identifier)
      case 2: try decoder.decodeRepeatedUInt32Field(value: &self.readVersion)
      case 3: try decoder.decodeRepeatedUInt32Field(value: &self.writeVersion)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._identifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.readVersion.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.readVersion, fieldNumber: 2)
    }
    if !self.writeVersion.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.writeVersion, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_FeatureInfo, rhs: TSP_FeatureInfo) -> Bool {
    if lhs._identifier != rhs._identifier {return false}
    if lhs.readVersion != rhs.readVersion {return false}
    if lhs.writeVersion != rhs.writeVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_PackageMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PackageMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_object_identifier"),
    2: .same(proto: "revision"),
    3: .same(proto: "components"),
    4: .same(proto: "datas"),
    5: .standard(proto: "read_version"),
    6: .standard(proto: "write_version"),
    7: .standard(proto: "file_format_version"),
    8: .standard(proto: "save_token"),
    9: .standard(proto: "preferred_package_type"),
    10: .standard(proto: "data_metadata_map"),
    11: .standard(proto: "versioned_components"),
  ]

  public var isInitialized: Bool {
    if self._lastObjectIdentifier == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.components) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.datas) {return false}
    if let v = self._dataMetadataMap, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.versionedComponents) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._lastObjectIdentifier)
      case 2: try decoder.decodeSingularMessageField(value: &self._revision)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.components)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.datas)
      case 5: try decoder.decodeRepeatedUInt32Field(value: &self.readVersion)
      case 6: try decoder.decodeRepeatedUInt32Field(value: &self.writeVersion)
      case 7: try decoder.decodeRepeatedUInt32Field(value: &self.fileFormatVersion)
      case 8: try decoder.decodeSingularUInt64Field(value: &self._saveToken)
      case 9: try decoder.decodeSingularEnumField(value: &self._preferredPackageType)
      case 10: try decoder.decodeSingularMessageField(value: &self._dataMetadataMap)
      case 11: try decoder.decodeRepeatedMessageField(value: &self.versionedComponents)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._lastObjectIdentifier {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._revision {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.components.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.components, fieldNumber: 3)
    }
    if !self.datas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.datas, fieldNumber: 4)
    }
    if !self.readVersion.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.readVersion, fieldNumber: 5)
    }
    if !self.writeVersion.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.writeVersion, fieldNumber: 6)
    }
    if !self.fileFormatVersion.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.fileFormatVersion, fieldNumber: 7)
    }
    if let v = self._saveToken {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 8)
    }
    if let v = self._preferredPackageType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
    }
    if let v = self._dataMetadataMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if !self.versionedComponents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.versionedComponents, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_PackageMetadata, rhs: TSP_PackageMetadata) -> Bool {
    if lhs._lastObjectIdentifier != rhs._lastObjectIdentifier {return false}
    if lhs._revision != rhs._revision {return false}
    if lhs.components != rhs.components {return false}
    if lhs.datas != rhs.datas {return false}
    if lhs.readVersion != rhs.readVersion {return false}
    if lhs.writeVersion != rhs.writeVersion {return false}
    if lhs.fileFormatVersion != rhs.fileFormatVersion {return false}
    if lhs._saveToken != rhs._saveToken {return false}
    if lhs._preferredPackageType != rhs._preferredPackageType {return false}
    if lhs._dataMetadataMap != rhs._dataMetadataMap {return false}
    if lhs.versionedComponents != rhs.versionedComponents {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_PackageMetadata.PackageType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Default"),
    1: .same(proto: "Directory"),
    2: .same(proto: "SingleFile"),
  ]
}

extension TSP_DocumentRevision: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DocumentRevision"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "sequence_32"),
    2: .same(proto: "identifier"),
    1: .standard(proto: "sequence_64"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._sequence64)
      case 2: try decoder.decodeSingularStringField(value: &self._identifier)
      case 3: try decoder.decodeSingularInt32Field(value: &self._sequence32)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sequence64 {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._identifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._sequence32 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_DocumentRevision, rhs: TSP_DocumentRevision) -> Bool {
    if lhs._sequence32 != rhs._sequence32 {return false}
    if lhs._identifier != rhs._identifier {return false}
    if lhs._sequence64 != rhs._sequence64 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_PasteboardMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PasteboardMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .standard(proto: "app_name"),
    3: .same(proto: "datas"),
    5: .standard(proto: "source_document_uuid"),
    6: .standard(proto: "data_metadata_map"),
    7: .standard(proto: "read_version"),
  ]

  public var isInitialized: Bool {
    if self._appName == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.datas) {return false}
    if let v = self._sourceDocumentUuid, !v.isInitialized {return false}
    if let v = self._dataMetadataMap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt32Field(value: &self.version)
      case 2: try decoder.decodeSingularStringField(value: &self._appName)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.datas)
      case 5: try decoder.decodeSingularMessageField(value: &self._sourceDocumentUuid)
      case 6: try decoder.decodeSingularMessageField(value: &self._dataMetadataMap)
      case 7: try decoder.decodeRepeatedUInt32Field(value: &self.readVersion)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.version.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.version, fieldNumber: 1)
    }
    if let v = self._appName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if !self.datas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.datas, fieldNumber: 3)
    }
    if let v = self._sourceDocumentUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._dataMetadataMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.readVersion.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.readVersion, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_PasteboardMetadata, rhs: TSP_PasteboardMetadata) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs._appName != rhs._appName {return false}
    if lhs.datas != rhs.datas {return false}
    if lhs._sourceDocumentUuid != rhs._sourceDocumentUuid {return false}
    if lhs._dataMetadataMap != rhs._dataMetadataMap {return false}
    if lhs.readVersion != rhs.readVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_DataInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .same(proto: "digest"),
    3: .standard(proto: "preferred_file_name"),
    4: .standard(proto: "file_name"),
    5: .standard(proto: "document_resource_locator"),
    6: .standard(proto: "source_bookmark_data"),
    7: .standard(proto: "remote_url"),
    8: .standard(proto: "can_download"),
    9: .standard(proto: "download_priority"),
    10: .same(proto: "attributes"),
    11: .standard(proto: "encryption_info"),
    99: .standard(proto: "pasteboard_external_file_path"),
  ]

  public var isInitialized: Bool {
    if self._identifier == nil {return false}
    if self._digest == nil {return false}
    if self._preferredFileName == nil {return false}
    if let v = self._attributes, !v.isInitialized {return false}
    if let v = self._encryptionInfo, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._identifier)
      case 2: try decoder.decodeSingularBytesField(value: &self._digest)
      case 3: try decoder.decodeSingularStringField(value: &self._preferredFileName)
      case 4: try decoder.decodeSingularStringField(value: &self._fileName)
      case 5: try decoder.decodeSingularStringField(value: &self._documentResourceLocator)
      case 6: try decoder.decodeSingularBytesField(value: &self._sourceBookmarkData)
      case 7: try decoder.decodeSingularStringField(value: &self._remoteURL)
      case 8: try decoder.decodeSingularBoolField(value: &self._canDownload)
      case 9: try decoder.decodeSingularEnumField(value: &self._downloadPriority)
      case 10: try decoder.decodeSingularMessageField(value: &self._attributes)
      case 11: try decoder.decodeSingularMessageField(value: &self._encryptionInfo)
      case 99: try decoder.decodeSingularStringField(value: &self._pasteboardExternalFilePath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._identifier {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._digest {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    if let v = self._preferredFileName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._fileName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._documentResourceLocator {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._sourceBookmarkData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
    }
    if let v = self._remoteURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    if let v = self._canDownload {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._downloadPriority {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
    }
    if let v = self._attributes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._encryptionInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._pasteboardExternalFilePath {
      try visitor.visitSingularStringField(value: v, fieldNumber: 99)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_DataInfo, rhs: TSP_DataInfo) -> Bool {
    if lhs._identifier != rhs._identifier {return false}
    if lhs._digest != rhs._digest {return false}
    if lhs._preferredFileName != rhs._preferredFileName {return false}
    if lhs._fileName != rhs._fileName {return false}
    if lhs._documentResourceLocator != rhs._documentResourceLocator {return false}
    if lhs._sourceBookmarkData != rhs._sourceBookmarkData {return false}
    if lhs._remoteURL != rhs._remoteURL {return false}
    if lhs._canDownload != rhs._canDownload {return false}
    if lhs._downloadPriority != rhs._downloadPriority {return false}
    if lhs._attributes != rhs._attributes {return false}
    if lhs._encryptionInfo != rhs._encryptionInfo {return false}
    if lhs._pasteboardExternalFilePath != rhs._pasteboardExternalFilePath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_DataInfo.DownloadPriority: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "High"),
    1: .same(proto: "Default"),
  ]
}

extension TSP_DataMetadataMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataMetadataMap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "data_metadata_entries"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.dataMetadataEntries) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.dataMetadataEntries)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dataMetadataEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataMetadataEntries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_DataMetadataMap, rhs: TSP_DataMetadataMap) -> Bool {
    if lhs.dataMetadataEntries != rhs.dataMetadataEntries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_DataMetadataMap.DataMetadataMapEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSP_DataMetadataMap.protoMessageName + ".DataMetadataMapEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "data_identifier"),
    2: .standard(proto: "data_metadata"),
  ]

  public var isInitialized: Bool {
    if self._dataIdentifier == nil {return false}
    if self._dataMetadata == nil {return false}
    if let v = self._dataMetadata, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._dataIdentifier)
      case 2: try decoder.decodeSingularMessageField(value: &self._dataMetadata)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._dataIdentifier {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._dataMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_DataMetadataMap.DataMetadataMapEntry, rhs: TSP_DataMetadataMap.DataMetadataMapEntry) -> Bool {
    if lhs._dataIdentifier != rhs._dataIdentifier {return false}
    if lhs._dataMetadata != rhs._dataMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_DataMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fallback_color"),
  ]

  public var isInitialized: Bool {
    if let v = self._fallbackColor, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._fallbackColor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._fallbackColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_DataMetadata, rhs: TSP_DataMetadata) -> Bool {
    if lhs._fallbackColor != rhs._fallbackColor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_EncryptionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EncryptionInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "decoded_length"),
    2: .standard(proto: "preferred_block_size"),
    3: .standard(proto: "block_infos"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.blockInfos) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._decodedLength)
      case 2: try decoder.decodeSingularUInt64Field(value: &self._preferredBlockSize)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.blockInfos)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._decodedLength {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._preferredBlockSize {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }
    if !self.blockInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blockInfos, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_EncryptionInfo, rhs: TSP_EncryptionInfo) -> Bool {
    if lhs._decodedLength != rhs._decodedLength {return false}
    if lhs._preferredBlockSize != rhs._preferredBlockSize {return false}
    if lhs.blockInfos != rhs.blockInfos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_EncryptionBlockInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EncryptionBlockInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "encoded_length"),
    2: .standard(proto: "decoded_length"),
  ]

  public var isInitialized: Bool {
    if self._encodedLength == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._encodedLength)
      case 2: try decoder.decodeSingularUInt64Field(value: &self._decodedLength)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._encodedLength {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._decodedLength {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_EncryptionBlockInfo, rhs: TSP_EncryptionBlockInfo) -> Bool {
    if lhs._encodedLength != rhs._encodedLength {return false}
    if lhs._decodedLength != rhs._decodedLength {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_ViewStateMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ViewStateMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    4: .standard(proto: "version_uuid"),
    3: .same(proto: "component"),
    5: .standard(proto: "external_object_uuid_map_entries"),
    6: .standard(proto: "read_version"),
  ]

  public var isInitialized: Bool {
    if self._component == nil {return false}
    if let v = self._versionUuid, !v.isInitialized {return false}
    if let v = self._component, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.externalObjectUuidMapEntries) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt32Field(value: &self.version)
      case 3: try decoder.decodeSingularMessageField(value: &self._component)
      case 4: try decoder.decodeSingularMessageField(value: &self._versionUuid)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.externalObjectUuidMapEntries)
      case 6: try decoder.decodeRepeatedUInt32Field(value: &self.readVersion)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.version.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.version, fieldNumber: 1)
    }
    if let v = self._component {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._versionUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.externalObjectUuidMapEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.externalObjectUuidMapEntries, fieldNumber: 5)
    }
    if !self.readVersion.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.readVersion, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_ViewStateMetadata, rhs: TSP_ViewStateMetadata) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs._versionUuid != rhs._versionUuid {return false}
    if lhs._component != rhs._component {return false}
    if lhs.externalObjectUuidMapEntries != rhs.externalObjectUuidMapEntries {return false}
    if lhs.readVersion != rhs.readVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_ObjectSerializationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ObjectSerializationMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .standard(proto: "source_document_uuid"),
    3: .standard(proto: "version_uuid"),
    4: .same(proto: "component"),
    5: .same(proto: "datas"),
    6: .standard(proto: "external_object_uuid_map_entries"),
    7: .standard(proto: "data_metadata_map"),
    8: .standard(proto: "read_version"),
  ]

  public var isInitialized: Bool {
    if self._component == nil {return false}
    if let v = self._sourceDocumentUuid, !v.isInitialized {return false}
    if let v = self._versionUuid, !v.isInitialized {return false}
    if let v = self._component, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.datas) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.externalObjectUuidMapEntries) {return false}
    if let v = self._dataMetadataMap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt32Field(value: &self.version)
      case 2: try decoder.decodeSingularMessageField(value: &self._sourceDocumentUuid)
      case 3: try decoder.decodeSingularMessageField(value: &self._versionUuid)
      case 4: try decoder.decodeSingularMessageField(value: &self._component)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.datas)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.externalObjectUuidMapEntries)
      case 7: try decoder.decodeSingularMessageField(value: &self._dataMetadataMap)
      case 8: try decoder.decodeRepeatedUInt32Field(value: &self.readVersion)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.version.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.version, fieldNumber: 1)
    }
    if let v = self._sourceDocumentUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._versionUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._component {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.datas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.datas, fieldNumber: 5)
    }
    if !self.externalObjectUuidMapEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.externalObjectUuidMapEntries, fieldNumber: 6)
    }
    if let v = self._dataMetadataMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if !self.readVersion.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.readVersion, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_ObjectSerializationMetadata, rhs: TSP_ObjectSerializationMetadata) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs._sourceDocumentUuid != rhs._sourceDocumentUuid {return false}
    if lhs._versionUuid != rhs._versionUuid {return false}
    if lhs._component != rhs._component {return false}
    if lhs.datas != rhs.datas {return false}
    if lhs.externalObjectUuidMapEntries != rhs.externalObjectUuidMapEntries {return false}
    if lhs._dataMetadataMap != rhs._dataMetadataMap {return false}
    if lhs.readVersion != rhs.readVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_ObjectSerializationDirectory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ObjectSerializationDirectory"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.entries) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.entries)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_ObjectSerializationDirectory, rhs: TSP_ObjectSerializationDirectory) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_ObjectSerializationDirectory.Entry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSP_ObjectSerializationDirectory.protoMessageName + ".Entry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "locator"),
    2: .same(proto: "offset"),
    3: .same(proto: "size"),
  ]

  public var isInitialized: Bool {
    if self._locator == nil {return false}
    if self._offset == nil {return false}
    if self._size == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._locator)
      case 2: try decoder.decodeSingularUInt64Field(value: &self._offset)
      case 3: try decoder.decodeSingularUInt64Field(value: &self._size)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._locator {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._offset {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }
    if let v = self._size {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_ObjectSerializationDirectory.Entry, rhs: TSP_ObjectSerializationDirectory.Entry) -> Bool {
    if lhs._locator != rhs._locator {return false}
    if lhs._offset != rhs._offset {return false}
    if lhs._size != rhs._size {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_DocumentMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DocumentMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_in_collaboration_mode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._isInCollaborationMode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._isInCollaborationMode {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_DocumentMetadata, rhs: TSP_DocumentMetadata) -> Bool {
    if lhs._isInCollaborationMode != rhs._isInCollaborationMode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_SupportMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SupportMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_in_collaboration_mode"),
    2: .standard(proto: "acknowledged_server_data"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.acknowledgedServerData) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._isInCollaborationMode)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.acknowledgedServerData)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._isInCollaborationMode {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if !self.acknowledgedServerData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.acknowledgedServerData, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_SupportMetadata, rhs: TSP_SupportMetadata) -> Bool {
    if lhs._isInCollaborationMode != rhs._isInCollaborationMode {return false}
    if lhs.acknowledgedServerData != rhs.acknowledgedServerData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
