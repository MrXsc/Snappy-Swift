// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TSKArchives.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum TSK_StructuredTextImportType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case importTypeUnknown // = 0
  case importTypeDelimited // = 1
  case importTypeFixedwidth // = 2

  init() {
    self = .importTypeUnknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .importTypeUnknown
    case 1: self = .importTypeDelimited
    case 2: self = .importTypeFixedwidth
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .importTypeUnknown: return 0
    case .importTypeDelimited: return 1
    case .importTypeFixedwidth: return 2
    }
  }

}

#if swift(>=4.2)

extension TSK_StructuredTextImportType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSK_TreeNode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var children: [TSP_Reference] = []

  var object: TSP_Reference {
    get {return _object ?? TSP_Reference()}
    set {_object = newValue}
  }
  /// Returns true if `object` has been explicitly set.
  var hasObject: Bool {return self._object != nil}
  /// Clears the value of `object`. Subsequent reads from it will return its default value.
  mutating func clearObject() {self._object = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _object: TSP_Reference? = nil
}

struct TSK_CommandHistory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var undoCount: UInt32 {
    get {return _undoCount ?? 0}
    set {_undoCount = newValue}
  }
  /// Returns true if `undoCount` has been explicitly set.
  var hasUndoCount: Bool {return self._undoCount != nil}
  /// Clears the value of `undoCount`. Subsequent reads from it will return its default value.
  mutating func clearUndoCount() {self._undoCount = nil}

  var commands: [TSP_Reference] = []

  var markedRedoCommands: [TSP_Reference] = []

  var pendingPreflightCommand: TSP_Reference {
    get {return _pendingPreflightCommand ?? TSP_Reference()}
    set {_pendingPreflightCommand = newValue}
  }
  /// Returns true if `pendingPreflightCommand` has been explicitly set.
  var hasPendingPreflightCommand: Bool {return self._pendingPreflightCommand != nil}
  /// Clears the value of `pendingPreflightCommand`. Subsequent reads from it will return its default value.
  mutating func clearPendingPreflightCommand() {self._pendingPreflightCommand = nil}

  var selectionBehaviorEntries: [TSK_CommandHistory.SelectionBehaviorEntry] = []

  var fixedRadar13365177: Bool {
    get {return _fixedRadar13365177 ?? false}
    set {_fixedRadar13365177 = newValue}
  }
  /// Returns true if `fixedRadar13365177` has been explicitly set.
  var hasFixedRadar13365177: Bool {return self._fixedRadar13365177 != nil}
  /// Clears the value of `fixedRadar13365177`. Subsequent reads from it will return its default value.
  mutating func clearFixedRadar13365177() {self._fixedRadar13365177 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct SelectionBehaviorEntry {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var command: TSP_Reference {
      get {return _command ?? TSP_Reference()}
      set {_command = newValue}
    }
    /// Returns true if `command` has been explicitly set.
    var hasCommand: Bool {return self._command != nil}
    /// Clears the value of `command`. Subsequent reads from it will return its default value.
    mutating func clearCommand() {self._command = nil}

    var commandSelectionBehavior: TSP_Reference {
      get {return _commandSelectionBehavior ?? TSP_Reference()}
      set {_commandSelectionBehavior = newValue}
    }
    /// Returns true if `commandSelectionBehavior` has been explicitly set.
    var hasCommandSelectionBehavior: Bool {return self._commandSelectionBehavior != nil}
    /// Clears the value of `commandSelectionBehavior`. Subsequent reads from it will return its default value.
    mutating func clearCommandSelectionBehavior() {self._commandSelectionBehavior = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _command: TSP_Reference? = nil
    fileprivate var _commandSelectionBehavior: TSP_Reference? = nil
  }

  init() {}

  fileprivate var _undoCount: UInt32? = nil
  fileprivate var _pendingPreflightCommand: TSP_Reference? = nil
  fileprivate var _fixedRadar13365177: Bool? = nil
}

struct TSK_CollaborationCommandHistory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var undoItems: [TSK_CollaborationCommandHistoryItem] = []

  var redoItems: [TSK_CollaborationCommandHistoryItem] = []

  var localIdentifier: TSP_UUID {
    get {return _localIdentifier ?? TSP_UUID()}
    set {_localIdentifier = newValue}
  }
  /// Returns true if `localIdentifier` has been explicitly set.
  var hasLocalIdentifier: Bool {return self._localIdentifier != nil}
  /// Clears the value of `localIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearLocalIdentifier() {self._localIdentifier = nil}

  var undoTransformerEntries: [TSP_Reference] = []

  var redoTransformerEntries: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _localIdentifier: TSP_UUID? = nil
}

struct TSK_CollaborationCommandHistoryItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var command: TSP_Reference {
    get {return _command ?? TSP_Reference()}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  mutating func clearCommand() {self._command = nil}

  var actionString: String {
    get {return _actionString ?? String()}
    set {_actionString = newValue}
  }
  /// Returns true if `actionString` has been explicitly set.
  var hasActionString: Bool {return self._actionString != nil}
  /// Clears the value of `actionString`. Subsequent reads from it will return its default value.
  mutating func clearActionString() {self._actionString = nil}

  var selectionBehavior: TSP_Reference {
    get {return _selectionBehavior ?? TSP_Reference()}
    set {_selectionBehavior = newValue}
  }
  /// Returns true if `selectionBehavior` has been explicitly set.
  var hasSelectionBehavior: Bool {return self._selectionBehavior != nil}
  /// Clears the value of `selectionBehavior`. Subsequent reads from it will return its default value.
  mutating func clearSelectionBehavior() {self._selectionBehavior = nil}

  var coalescingGroup: TSP_Reference {
    get {return _coalescingGroup ?? TSP_Reference()}
    set {_coalescingGroup = newValue}
  }
  /// Returns true if `coalescingGroup` has been explicitly set.
  var hasCoalescingGroup: Bool {return self._coalescingGroup != nil}
  /// Clears the value of `coalescingGroup`. Subsequent reads from it will return its default value.
  mutating func clearCoalescingGroup() {self._coalescingGroup = nil}

  var revisionSequence: UInt64 {
    get {return _revisionSequence ?? 0}
    set {_revisionSequence = newValue}
  }
  /// Returns true if `revisionSequence` has been explicitly set.
  var hasRevisionSequence: Bool {return self._revisionSequence != nil}
  /// Clears the value of `revisionSequence`. Subsequent reads from it will return its default value.
  mutating func clearRevisionSequence() {self._revisionSequence = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _command: TSP_Reference? = nil
  fileprivate var _actionString: String? = nil
  fileprivate var _selectionBehavior: TSP_Reference? = nil
  fileprivate var _coalescingGroup: TSP_Reference? = nil
  fileprivate var _revisionSequence: UInt64? = nil
}

struct TSK_CollaborationCommandHistoryCoalescingGroup {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var nodes: [TSP_Reference] = []

  var didCoalesceAllCommands: Bool {
    get {return _didCoalesceAllCommands ?? false}
    set {_didCoalesceAllCommands = newValue}
  }
  /// Returns true if `didCoalesceAllCommands` has been explicitly set.
  var hasDidCoalesceAllCommands: Bool {return self._didCoalesceAllCommands != nil}
  /// Clears the value of `didCoalesceAllCommands`. Subsequent reads from it will return its default value.
  mutating func clearDidCoalesceAllCommands() {self._didCoalesceAllCommands = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _didCoalesceAllCommands: Bool? = nil
}

struct TSK_CollaborationCommandHistoryCoalescingGroupNode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var command: TSP_Reference {
    get {return _command ?? TSP_Reference()}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  mutating func clearCommand() {self._command = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _command: TSP_Reference? = nil
}

struct TSK_CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var coalescingGroup: TSP_Reference {
    get {return _coalescingGroup ?? TSP_Reference()}
    set {_coalescingGroup = newValue}
  }
  /// Returns true if `coalescingGroup` has been explicitly set.
  var hasCoalescingGroup: Bool {return self._coalescingGroup != nil}
  /// Clears the value of `coalescingGroup`. Subsequent reads from it will return its default value.
  mutating func clearCoalescingGroup() {self._coalescingGroup = nil}

  var node: TSP_Reference {
    get {return _node ?? TSP_Reference()}
    set {_node = newValue}
  }
  /// Returns true if `node` has been explicitly set.
  var hasNode: Bool {return self._node != nil}
  /// Clears the value of `node`. Subsequent reads from it will return its default value.
  mutating func clearNode() {self._node = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _coalescingGroup: TSP_Reference? = nil
  fileprivate var _node: TSP_Reference? = nil
}

struct TSK_DocumentArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var localeIdentifier: String {
    get {return _localeIdentifier ?? String()}
    set {_localeIdentifier = newValue}
  }
  /// Returns true if `localeIdentifier` has been explicitly set.
  var hasLocaleIdentifier: Bool {return self._localeIdentifier != nil}
  /// Clears the value of `localeIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearLocaleIdentifier() {self._localeIdentifier = nil}

  var annotationAuthorStorage: TSP_Reference {
    get {return _annotationAuthorStorage ?? TSP_Reference()}
    set {_annotationAuthorStorage = newValue}
  }
  /// Returns true if `annotationAuthorStorage` has been explicitly set.
  var hasAnnotationAuthorStorage: Bool {return self._annotationAuthorStorage != nil}
  /// Clears the value of `annotationAuthorStorage`. Subsequent reads from it will return its default value.
  mutating func clearAnnotationAuthorStorage() {self._annotationAuthorStorage = nil}

  var activityLogEntries: [TSP_Reference] = []

  var creationLocaleIdentifier: String {
    get {return _creationLocaleIdentifier ?? String()}
    set {_creationLocaleIdentifier = newValue}
  }
  /// Returns true if `creationLocaleIdentifier` has been explicitly set.
  var hasCreationLocaleIdentifier: Bool {return self._creationLocaleIdentifier != nil}
  /// Clears the value of `creationLocaleIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCreationLocaleIdentifier() {self._creationLocaleIdentifier = nil}

  var preventImageConversionOnOpen: Bool {
    get {return _preventImageConversionOnOpen ?? false}
    set {_preventImageConversionOnOpen = newValue}
  }
  /// Returns true if `preventImageConversionOnOpen` has been explicitly set.
  var hasPreventImageConversionOnOpen: Bool {return self._preventImageConversionOnOpen != nil}
  /// Clears the value of `preventImageConversionOnOpen`. Subsequent reads from it will return its default value.
  mutating func clearPreventImageConversionOnOpen() {self._preventImageConversionOnOpen = nil}

  var hasFloatingLocale_p: Bool {
    get {return _hasFloatingLocale_p ?? false}
    set {_hasFloatingLocale_p = newValue}
  }
  /// Returns true if `hasFloatingLocale_p` has been explicitly set.
  var hasHasFloatingLocale_p: Bool {return self._hasFloatingLocale_p != nil}
  /// Clears the value of `hasFloatingLocale_p`. Subsequent reads from it will return its default value.
  mutating func clearHasFloatingLocale_p() {self._hasFloatingLocale_p = nil}

  var hasUserDefinedLocale_p: Bool {
    get {return _hasUserDefinedLocale_p ?? false}
    set {_hasUserDefinedLocale_p = newValue}
  }
  /// Returns true if `hasUserDefinedLocale_p` has been explicitly set.
  var hasHasUserDefinedLocale_p: Bool {return self._hasUserDefinedLocale_p != nil}
  /// Clears the value of `hasUserDefinedLocale_p`. Subsequent reads from it will return its default value.
  mutating func clearHasUserDefinedLocale_p() {self._hasUserDefinedLocale_p = nil}

  var collaborationOperationHistory: TSP_Reference {
    get {return _collaborationOperationHistory ?? TSP_Reference()}
    set {_collaborationOperationHistory = newValue}
  }
  /// Returns true if `collaborationOperationHistory` has been explicitly set.
  var hasCollaborationOperationHistory: Bool {return self._collaborationOperationHistory != nil}
  /// Clears the value of `collaborationOperationHistory`. Subsequent reads from it will return its default value.
  mutating func clearCollaborationOperationHistory() {self._collaborationOperationHistory = nil}

  var shouldMeasureNegativelyTrackedTextCorrectly: Bool {
    get {return _shouldMeasureNegativelyTrackedTextCorrectly ?? false}
    set {_shouldMeasureNegativelyTrackedTextCorrectly = newValue}
  }
  /// Returns true if `shouldMeasureNegativelyTrackedTextCorrectly` has been explicitly set.
  var hasShouldMeasureNegativelyTrackedTextCorrectly: Bool {return self._shouldMeasureNegativelyTrackedTextCorrectly != nil}
  /// Clears the value of `shouldMeasureNegativelyTrackedTextCorrectly`. Subsequent reads from it will return its default value.
  mutating func clearShouldMeasureNegativelyTrackedTextCorrectly() {self._shouldMeasureNegativelyTrackedTextCorrectly = nil}

  var useOptimizedTextVerticalAlignment: Bool {
    get {return _useOptimizedTextVerticalAlignment ?? false}
    set {_useOptimizedTextVerticalAlignment = newValue}
  }
  /// Returns true if `useOptimizedTextVerticalAlignment` has been explicitly set.
  var hasUseOptimizedTextVerticalAlignment: Bool {return self._useOptimizedTextVerticalAlignment != nil}
  /// Clears the value of `useOptimizedTextVerticalAlignment`. Subsequent reads from it will return its default value.
  mutating func clearUseOptimizedTextVerticalAlignment() {self._useOptimizedTextVerticalAlignment = nil}

  var formattingSymbols: TSK_FormattingSymbolsArchive {
    get {return _formattingSymbols ?? TSK_FormattingSymbolsArchive()}
    set {_formattingSymbols = newValue}
  }
  /// Returns true if `formattingSymbols` has been explicitly set.
  var hasFormattingSymbols: Bool {return self._formattingSymbols != nil}
  /// Clears the value of `formattingSymbols`. Subsequent reads from it will return its default value.
  mutating func clearFormattingSymbols() {self._formattingSymbols = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _localeIdentifier: String? = nil
  fileprivate var _annotationAuthorStorage: TSP_Reference? = nil
  fileprivate var _creationLocaleIdentifier: String? = nil
  fileprivate var _preventImageConversionOnOpen: Bool? = nil
  fileprivate var _hasFloatingLocale_p: Bool? = nil
  fileprivate var _hasUserDefinedLocale_p: Bool? = nil
  fileprivate var _collaborationOperationHistory: TSP_Reference? = nil
  fileprivate var _shouldMeasureNegativelyTrackedTextCorrectly: Bool? = nil
  fileprivate var _useOptimizedTextVerticalAlignment: Bool? = nil
  fileprivate var _formattingSymbols: TSK_FormattingSymbolsArchive? = nil
}

struct TSK_FormattingSymbolsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: String {
    get {return _storage._version ?? String()}
    set {_uniqueStorage()._version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {_uniqueStorage()._version = nil}

  var calendar: String {
    get {return _storage._calendar ?? String()}
    set {_uniqueStorage()._calendar = newValue}
  }
  /// Returns true if `calendar` has been explicitly set.
  var hasCalendar: Bool {return _storage._calendar != nil}
  /// Clears the value of `calendar`. Subsequent reads from it will return its default value.
  mutating func clearCalendar() {_uniqueStorage()._calendar = nil}

  var numberingSystem: String {
    get {return _storage._numberingSystem ?? String()}
    set {_uniqueStorage()._numberingSystem = newValue}
  }
  /// Returns true if `numberingSystem` has been explicitly set.
  var hasNumberingSystem: Bool {return _storage._numberingSystem != nil}
  /// Clears the value of `numberingSystem`. Subsequent reads from it will return its default value.
  mutating func clearNumberingSystem() {_uniqueStorage()._numberingSystem = nil}

  var months: [String] {
    get {return _storage._months}
    set {_uniqueStorage()._months = newValue}
  }

  var standaloneMonths: [String] {
    get {return _storage._standaloneMonths}
    set {_uniqueStorage()._standaloneMonths = newValue}
  }

  var shortMonths: [String] {
    get {return _storage._shortMonths}
    set {_uniqueStorage()._shortMonths = newValue}
  }

  var standaloneShortMonths: [String] {
    get {return _storage._standaloneShortMonths}
    set {_uniqueStorage()._standaloneShortMonths = newValue}
  }

  var weekdays: [String] {
    get {return _storage._weekdays}
    set {_uniqueStorage()._weekdays = newValue}
  }

  var standaloneWeekdays: [String] {
    get {return _storage._standaloneWeekdays}
    set {_uniqueStorage()._standaloneWeekdays = newValue}
  }

  var shortWeekdays: [String] {
    get {return _storage._shortWeekdays}
    set {_uniqueStorage()._shortWeekdays = newValue}
  }

  var standaloneShortWeekdays: [String] {
    get {return _storage._standaloneShortWeekdays}
    set {_uniqueStorage()._standaloneShortWeekdays = newValue}
  }

  var amSymbol: String {
    get {return _storage._amSymbol ?? String()}
    set {_uniqueStorage()._amSymbol = newValue}
  }
  /// Returns true if `amSymbol` has been explicitly set.
  var hasAmSymbol: Bool {return _storage._amSymbol != nil}
  /// Clears the value of `amSymbol`. Subsequent reads from it will return its default value.
  mutating func clearAmSymbol() {_uniqueStorage()._amSymbol = nil}

  var pmSymbol: String {
    get {return _storage._pmSymbol ?? String()}
    set {_uniqueStorage()._pmSymbol = newValue}
  }
  /// Returns true if `pmSymbol` has been explicitly set.
  var hasPmSymbol: Bool {return _storage._pmSymbol != nil}
  /// Clears the value of `pmSymbol`. Subsequent reads from it will return its default value.
  mutating func clearPmSymbol() {_uniqueStorage()._pmSymbol = nil}

  var tinyMonths: [String] {
    get {return _storage._tinyMonths}
    set {_uniqueStorage()._tinyMonths = newValue}
  }

  var standaloneTinyMonths: [String] {
    get {return _storage._standaloneTinyMonths}
    set {_uniqueStorage()._standaloneTinyMonths = newValue}
  }

  var tinyWeekdays: [String] {
    get {return _storage._tinyWeekdays}
    set {_uniqueStorage()._tinyWeekdays = newValue}
  }

  var standaloneTinyWeekdays: [String] {
    get {return _storage._standaloneTinyWeekdays}
    set {_uniqueStorage()._standaloneTinyWeekdays = newValue}
  }

  var quarters: [String] {
    get {return _storage._quarters}
    set {_uniqueStorage()._quarters = newValue}
  }

  var standaloneQuarters: [String] {
    get {return _storage._standaloneQuarters}
    set {_uniqueStorage()._standaloneQuarters = newValue}
  }

  var shortQuarters: [String] {
    get {return _storage._shortQuarters}
    set {_uniqueStorage()._shortQuarters = newValue}
  }

  var standaloneShortQuarters: [String] {
    get {return _storage._standaloneShortQuarters}
    set {_uniqueStorage()._standaloneShortQuarters = newValue}
  }

  var eras: [String] {
    get {return _storage._eras}
    set {_uniqueStorage()._eras = newValue}
  }

  var longEras: [String] {
    get {return _storage._longEras}
    set {_uniqueStorage()._longEras = newValue}
  }

  var shortDatePattern: String {
    get {return _storage._shortDatePattern ?? String()}
    set {_uniqueStorage()._shortDatePattern = newValue}
  }
  /// Returns true if `shortDatePattern` has been explicitly set.
  var hasShortDatePattern: Bool {return _storage._shortDatePattern != nil}
  /// Clears the value of `shortDatePattern`. Subsequent reads from it will return its default value.
  mutating func clearShortDatePattern() {_uniqueStorage()._shortDatePattern = nil}

  var mediumDatePattern: String {
    get {return _storage._mediumDatePattern ?? String()}
    set {_uniqueStorage()._mediumDatePattern = newValue}
  }
  /// Returns true if `mediumDatePattern` has been explicitly set.
  var hasMediumDatePattern: Bool {return _storage._mediumDatePattern != nil}
  /// Clears the value of `mediumDatePattern`. Subsequent reads from it will return its default value.
  mutating func clearMediumDatePattern() {_uniqueStorage()._mediumDatePattern = nil}

  var longDatePattern: String {
    get {return _storage._longDatePattern ?? String()}
    set {_uniqueStorage()._longDatePattern = newValue}
  }
  /// Returns true if `longDatePattern` has been explicitly set.
  var hasLongDatePattern: Bool {return _storage._longDatePattern != nil}
  /// Clears the value of `longDatePattern`. Subsequent reads from it will return its default value.
  mutating func clearLongDatePattern() {_uniqueStorage()._longDatePattern = nil}

  var fullDatePattern: String {
    get {return _storage._fullDatePattern ?? String()}
    set {_uniqueStorage()._fullDatePattern = newValue}
  }
  /// Returns true if `fullDatePattern` has been explicitly set.
  var hasFullDatePattern: Bool {return _storage._fullDatePattern != nil}
  /// Clears the value of `fullDatePattern`. Subsequent reads from it will return its default value.
  mutating func clearFullDatePattern() {_uniqueStorage()._fullDatePattern = nil}

  var shortTimePattern: String {
    get {return _storage._shortTimePattern ?? String()}
    set {_uniqueStorage()._shortTimePattern = newValue}
  }
  /// Returns true if `shortTimePattern` has been explicitly set.
  var hasShortTimePattern: Bool {return _storage._shortTimePattern != nil}
  /// Clears the value of `shortTimePattern`. Subsequent reads from it will return its default value.
  mutating func clearShortTimePattern() {_uniqueStorage()._shortTimePattern = nil}

  var mediumTimePattern: String {
    get {return _storage._mediumTimePattern ?? String()}
    set {_uniqueStorage()._mediumTimePattern = newValue}
  }
  /// Returns true if `mediumTimePattern` has been explicitly set.
  var hasMediumTimePattern: Bool {return _storage._mediumTimePattern != nil}
  /// Clears the value of `mediumTimePattern`. Subsequent reads from it will return its default value.
  mutating func clearMediumTimePattern() {_uniqueStorage()._mediumTimePattern = nil}

  var longTimePattern: String {
    get {return _storage._longTimePattern ?? String()}
    set {_uniqueStorage()._longTimePattern = newValue}
  }
  /// Returns true if `longTimePattern` has been explicitly set.
  var hasLongTimePattern: Bool {return _storage._longTimePattern != nil}
  /// Clears the value of `longTimePattern`. Subsequent reads from it will return its default value.
  mutating func clearLongTimePattern() {_uniqueStorage()._longTimePattern = nil}

  var fullTimePattern: String {
    get {return _storage._fullTimePattern ?? String()}
    set {_uniqueStorage()._fullTimePattern = newValue}
  }
  /// Returns true if `fullTimePattern` has been explicitly set.
  var hasFullTimePattern: Bool {return _storage._fullTimePattern != nil}
  /// Clears the value of `fullTimePattern`. Subsequent reads from it will return its default value.
  mutating func clearFullTimePattern() {_uniqueStorage()._fullTimePattern = nil}

  var decimalSeparator: String {
    get {return _storage._decimalSeparator ?? String()}
    set {_uniqueStorage()._decimalSeparator = newValue}
  }
  /// Returns true if `decimalSeparator` has been explicitly set.
  var hasDecimalSeparator: Bool {return _storage._decimalSeparator != nil}
  /// Clears the value of `decimalSeparator`. Subsequent reads from it will return its default value.
  mutating func clearDecimalSeparator() {_uniqueStorage()._decimalSeparator = nil}

  var groupingSeparator: String {
    get {return _storage._groupingSeparator ?? String()}
    set {_uniqueStorage()._groupingSeparator = newValue}
  }
  /// Returns true if `groupingSeparator` has been explicitly set.
  var hasGroupingSeparator: Bool {return _storage._groupingSeparator != nil}
  /// Clears the value of `groupingSeparator`. Subsequent reads from it will return its default value.
  mutating func clearGroupingSeparator() {_uniqueStorage()._groupingSeparator = nil}

  var currencyDecimalSeparator: String {
    get {return _storage._currencyDecimalSeparator ?? String()}
    set {_uniqueStorage()._currencyDecimalSeparator = newValue}
  }
  /// Returns true if `currencyDecimalSeparator` has been explicitly set.
  var hasCurrencyDecimalSeparator: Bool {return _storage._currencyDecimalSeparator != nil}
  /// Clears the value of `currencyDecimalSeparator`. Subsequent reads from it will return its default value.
  mutating func clearCurrencyDecimalSeparator() {_uniqueStorage()._currencyDecimalSeparator = nil}

  var currencyGroupingSeparator: String {
    get {return _storage._currencyGroupingSeparator ?? String()}
    set {_uniqueStorage()._currencyGroupingSeparator = newValue}
  }
  /// Returns true if `currencyGroupingSeparator` has been explicitly set.
  var hasCurrencyGroupingSeparator: Bool {return _storage._currencyGroupingSeparator != nil}
  /// Clears the value of `currencyGroupingSeparator`. Subsequent reads from it will return its default value.
  mutating func clearCurrencyGroupingSeparator() {_uniqueStorage()._currencyGroupingSeparator = nil}

  var plusSign: String {
    get {return _storage._plusSign ?? String()}
    set {_uniqueStorage()._plusSign = newValue}
  }
  /// Returns true if `plusSign` has been explicitly set.
  var hasPlusSign: Bool {return _storage._plusSign != nil}
  /// Clears the value of `plusSign`. Subsequent reads from it will return its default value.
  mutating func clearPlusSign() {_uniqueStorage()._plusSign = nil}

  var minusSign: String {
    get {return _storage._minusSign ?? String()}
    set {_uniqueStorage()._minusSign = newValue}
  }
  /// Returns true if `minusSign` has been explicitly set.
  var hasMinusSign: Bool {return _storage._minusSign != nil}
  /// Clears the value of `minusSign`. Subsequent reads from it will return its default value.
  mutating func clearMinusSign() {_uniqueStorage()._minusSign = nil}

  var exponentialSymbol: String {
    get {return _storage._exponentialSymbol ?? String()}
    set {_uniqueStorage()._exponentialSymbol = newValue}
  }
  /// Returns true if `exponentialSymbol` has been explicitly set.
  var hasExponentialSymbol: Bool {return _storage._exponentialSymbol != nil}
  /// Clears the value of `exponentialSymbol`. Subsequent reads from it will return its default value.
  mutating func clearExponentialSymbol() {_uniqueStorage()._exponentialSymbol = nil}

  var percentSymbol: String {
    get {return _storage._percentSymbol ?? String()}
    set {_uniqueStorage()._percentSymbol = newValue}
  }
  /// Returns true if `percentSymbol` has been explicitly set.
  var hasPercentSymbol: Bool {return _storage._percentSymbol != nil}
  /// Clears the value of `percentSymbol`. Subsequent reads from it will return its default value.
  mutating func clearPercentSymbol() {_uniqueStorage()._percentSymbol = nil}

  var perMilleSymbol: String {
    get {return _storage._perMilleSymbol ?? String()}
    set {_uniqueStorage()._perMilleSymbol = newValue}
  }
  /// Returns true if `perMilleSymbol` has been explicitly set.
  var hasPerMilleSymbol: Bool {return _storage._perMilleSymbol != nil}
  /// Clears the value of `perMilleSymbol`. Subsequent reads from it will return its default value.
  mutating func clearPerMilleSymbol() {_uniqueStorage()._perMilleSymbol = nil}

  var infinitySymbol: String {
    get {return _storage._infinitySymbol ?? String()}
    set {_uniqueStorage()._infinitySymbol = newValue}
  }
  /// Returns true if `infinitySymbol` has been explicitly set.
  var hasInfinitySymbol: Bool {return _storage._infinitySymbol != nil}
  /// Clears the value of `infinitySymbol`. Subsequent reads from it will return its default value.
  mutating func clearInfinitySymbol() {_uniqueStorage()._infinitySymbol = nil}

  var nanSymbol: String {
    get {return _storage._nanSymbol ?? String()}
    set {_uniqueStorage()._nanSymbol = newValue}
  }
  /// Returns true if `nanSymbol` has been explicitly set.
  var hasNanSymbol: Bool {return _storage._nanSymbol != nil}
  /// Clears the value of `nanSymbol`. Subsequent reads from it will return its default value.
  mutating func clearNanSymbol() {_uniqueStorage()._nanSymbol = nil}

  var decimalPattern: String {
    get {return _storage._decimalPattern ?? String()}
    set {_uniqueStorage()._decimalPattern = newValue}
  }
  /// Returns true if `decimalPattern` has been explicitly set.
  var hasDecimalPattern: Bool {return _storage._decimalPattern != nil}
  /// Clears the value of `decimalPattern`. Subsequent reads from it will return its default value.
  mutating func clearDecimalPattern() {_uniqueStorage()._decimalPattern = nil}

  var scientificPattern: String {
    get {return _storage._scientificPattern ?? String()}
    set {_uniqueStorage()._scientificPattern = newValue}
  }
  /// Returns true if `scientificPattern` has been explicitly set.
  var hasScientificPattern: Bool {return _storage._scientificPattern != nil}
  /// Clears the value of `scientificPattern`. Subsequent reads from it will return its default value.
  mutating func clearScientificPattern() {_uniqueStorage()._scientificPattern = nil}

  var percentPattern: String {
    get {return _storage._percentPattern ?? String()}
    set {_uniqueStorage()._percentPattern = newValue}
  }
  /// Returns true if `percentPattern` has been explicitly set.
  var hasPercentPattern: Bool {return _storage._percentPattern != nil}
  /// Clears the value of `percentPattern`. Subsequent reads from it will return its default value.
  mutating func clearPercentPattern() {_uniqueStorage()._percentPattern = nil}

  var currencyPattern: String {
    get {return _storage._currencyPattern ?? String()}
    set {_uniqueStorage()._currencyPattern = newValue}
  }
  /// Returns true if `currencyPattern` has been explicitly set.
  var hasCurrencyPattern: Bool {return _storage._currencyPattern != nil}
  /// Clears the value of `currencyPattern`. Subsequent reads from it will return its default value.
  mutating func clearCurrencyPattern() {_uniqueStorage()._currencyPattern = nil}

  var currencyCode: String {
    get {return _storage._currencyCode ?? String()}
    set {_uniqueStorage()._currencyCode = newValue}
  }
  /// Returns true if `currencyCode` has been explicitly set.
  var hasCurrencyCode: Bool {return _storage._currencyCode != nil}
  /// Clears the value of `currencyCode`. Subsequent reads from it will return its default value.
  mutating func clearCurrencyCode() {_uniqueStorage()._currencyCode = nil}

  var currencySymbols: [TSK_FormattingSymbolsArchive.CurrencySymbol] {
    get {return _storage._currencySymbols}
    set {_uniqueStorage()._currencySymbols = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct CurrencySymbol {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var code: String {
      get {return _code ?? String()}
      set {_code = newValue}
    }
    /// Returns true if `code` has been explicitly set.
    var hasCode: Bool {return self._code != nil}
    /// Clears the value of `code`. Subsequent reads from it will return its default value.
    mutating func clearCode() {self._code = nil}

    var symbol: String {
      get {return _symbol ?? String()}
      set {_symbol = newValue}
    }
    /// Returns true if `symbol` has been explicitly set.
    var hasSymbol: Bool {return self._symbol != nil}
    /// Clears the value of `symbol`. Subsequent reads from it will return its default value.
    mutating func clearSymbol() {self._symbol = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _code: String? = nil
    fileprivate var _symbol: String? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSK_DocumentSupportCollaborationState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var collaborationCommandHistory: TSP_Reference {
    get {return _collaborationCommandHistory ?? TSP_Reference()}
    set {_collaborationCommandHistory = newValue}
  }
  /// Returns true if `collaborationCommandHistory` has been explicitly set.
  var hasCollaborationCommandHistory: Bool {return self._collaborationCommandHistory != nil}
  /// Clears the value of `collaborationCommandHistory`. Subsequent reads from it will return its default value.
  mutating func clearCollaborationCommandHistory() {self._collaborationCommandHistory = nil}

  var collaborationSessionState: TSP_Reference {
    get {return _collaborationSessionState ?? TSP_Reference()}
    set {_collaborationSessionState = newValue}
  }
  /// Returns true if `collaborationSessionState` has been explicitly set.
  var hasCollaborationSessionState: Bool {return self._collaborationSessionState != nil}
  /// Clears the value of `collaborationSessionState`. Subsequent reads from it will return its default value.
  mutating func clearCollaborationSessionState() {self._collaborationSessionState = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _collaborationCommandHistory: TSP_Reference? = nil
  fileprivate var _collaborationSessionState: TSP_Reference? = nil
}

struct TSK_DocumentSupportArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var commandHistory: TSP_Reference {
    get {return _commandHistory ?? TSP_Reference()}
    set {_commandHistory = newValue}
  }
  /// Returns true if `commandHistory` has been explicitly set.
  var hasCommandHistory: Bool {return self._commandHistory != nil}
  /// Clears the value of `commandHistory`. Subsequent reads from it will return its default value.
  mutating func clearCommandHistory() {self._commandHistory = nil}

  var undoCount: UInt32 {
    get {return _undoCount ?? 0}
    set {_undoCount = newValue}
  }
  /// Returns true if `undoCount` has been explicitly set.
  var hasUndoCount: Bool {return self._undoCount != nil}
  /// Clears the value of `undoCount`. Subsequent reads from it will return its default value.
  mutating func clearUndoCount() {self._undoCount = nil}

  var redoCount: UInt32 {
    get {return _redoCount ?? 0}
    set {_redoCount = newValue}
  }
  /// Returns true if `redoCount` has been explicitly set.
  var hasRedoCount: Bool {return self._redoCount != nil}
  /// Clears the value of `redoCount`. Subsequent reads from it will return its default value.
  mutating func clearRedoCount() {self._redoCount = nil}

  var undoActionString: String {
    get {return _undoActionString ?? String()}
    set {_undoActionString = newValue}
  }
  /// Returns true if `undoActionString` has been explicitly set.
  var hasUndoActionString: Bool {return self._undoActionString != nil}
  /// Clears the value of `undoActionString`. Subsequent reads from it will return its default value.
  mutating func clearUndoActionString() {self._undoActionString = nil}

  var redoActionString: String {
    get {return _redoActionString ?? String()}
    set {_redoActionString = newValue}
  }
  /// Returns true if `redoActionString` has been explicitly set.
  var hasRedoActionString: Bool {return self._redoActionString != nil}
  /// Clears the value of `redoActionString`. Subsequent reads from it will return its default value.
  mutating func clearRedoActionString() {self._redoActionString = nil}

  var webState: TSP_Reference {
    get {return _webState ?? TSP_Reference()}
    set {_webState = newValue}
  }
  /// Returns true if `webState` has been explicitly set.
  var hasWebState: Bool {return self._webState != nil}
  /// Clears the value of `webState`. Subsequent reads from it will return its default value.
  mutating func clearWebState() {self._webState = nil}

  var isInCollaborationMode: Bool {
    get {return _isInCollaborationMode ?? false}
    set {_isInCollaborationMode = newValue}
  }
  /// Returns true if `isInCollaborationMode` has been explicitly set.
  var hasIsInCollaborationMode: Bool {return self._isInCollaborationMode != nil}
  /// Clears the value of `isInCollaborationMode`. Subsequent reads from it will return its default value.
  mutating func clearIsInCollaborationMode() {self._isInCollaborationMode = nil}

  var actionStringLocalization: String {
    get {return _actionStringLocalization ?? String()}
    set {_actionStringLocalization = newValue}
  }
  /// Returns true if `actionStringLocalization` has been explicitly set.
  var hasActionStringLocalization: Bool {return self._actionStringLocalization != nil}
  /// Clears the value of `actionStringLocalization`. Subsequent reads from it will return its default value.
  mutating func clearActionStringLocalization() {self._actionStringLocalization = nil}

  var collaborationState: TSP_Reference {
    get {return _collaborationState ?? TSP_Reference()}
    set {_collaborationState = newValue}
  }
  /// Returns true if `collaborationState` has been explicitly set.
  var hasCollaborationState: Bool {return self._collaborationState != nil}
  /// Clears the value of `collaborationState`. Subsequent reads from it will return its default value.
  mutating func clearCollaborationState() {self._collaborationState = nil}

  var commandSelectionBehaviorHistory: TSP_Reference {
    get {return _commandSelectionBehaviorHistory ?? TSP_Reference()}
    set {_commandSelectionBehaviorHistory = newValue}
  }
  /// Returns true if `commandSelectionBehaviorHistory` has been explicitly set.
  var hasCommandSelectionBehaviorHistory: Bool {return self._commandSelectionBehaviorHistory != nil}
  /// Clears the value of `commandSelectionBehaviorHistory`. Subsequent reads from it will return its default value.
  mutating func clearCommandSelectionBehaviorHistory() {self._commandSelectionBehaviorHistory = nil}

  var viewState: TSP_Reference {
    get {return _viewState ?? TSP_Reference()}
    set {_viewState = newValue}
  }
  /// Returns true if `viewState` has been explicitly set.
  var hasViewState: Bool {return self._viewState != nil}
  /// Clears the value of `viewState`. Subsequent reads from it will return its default value.
  mutating func clearViewState() {self._viewState = nil}

  var collaborationCommandHistory: TSP_Reference {
    get {return _collaborationCommandHistory ?? TSP_Reference()}
    set {_collaborationCommandHistory = newValue}
  }
  /// Returns true if `collaborationCommandHistory` has been explicitly set.
  var hasCollaborationCommandHistory: Bool {return self._collaborationCommandHistory != nil}
  /// Clears the value of `collaborationCommandHistory`. Subsequent reads from it will return its default value.
  mutating func clearCollaborationCommandHistory() {self._collaborationCommandHistory = nil}

  var collaborationSessionState: TSP_Reference {
    get {return _collaborationSessionState ?? TSP_Reference()}
    set {_collaborationSessionState = newValue}
  }
  /// Returns true if `collaborationSessionState` has been explicitly set.
  var hasCollaborationSessionState: Bool {return self._collaborationSessionState != nil}
  /// Clears the value of `collaborationSessionState`. Subsequent reads from it will return its default value.
  mutating func clearCollaborationSessionState() {self._collaborationSessionState = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _commandHistory: TSP_Reference? = nil
  fileprivate var _undoCount: UInt32? = nil
  fileprivate var _redoCount: UInt32? = nil
  fileprivate var _undoActionString: String? = nil
  fileprivate var _redoActionString: String? = nil
  fileprivate var _webState: TSP_Reference? = nil
  fileprivate var _isInCollaborationMode: Bool? = nil
  fileprivate var _actionStringLocalization: String? = nil
  fileprivate var _collaborationState: TSP_Reference? = nil
  fileprivate var _commandSelectionBehaviorHistory: TSP_Reference? = nil
  fileprivate var _viewState: TSP_Reference? = nil
  fileprivate var _collaborationCommandHistory: TSP_Reference? = nil
  fileprivate var _collaborationSessionState: TSP_Reference? = nil
}

struct TSK_ViewStateArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var viewStateRoot: TSP_Reference {
    get {return _viewStateRoot ?? TSP_Reference()}
    set {_viewStateRoot = newValue}
  }
  /// Returns true if `viewStateRoot` has been explicitly set.
  var hasViewStateRoot: Bool {return self._viewStateRoot != nil}
  /// Clears the value of `viewStateRoot`. Subsequent reads from it will return its default value.
  mutating func clearViewStateRoot() {self._viewStateRoot = nil}

  var documentRevisionSequence: Int32 {
    get {return _documentRevisionSequence ?? 0}
    set {_documentRevisionSequence = newValue}
  }
  /// Returns true if `documentRevisionSequence` has been explicitly set.
  var hasDocumentRevisionSequence: Bool {return self._documentRevisionSequence != nil}
  /// Clears the value of `documentRevisionSequence`. Subsequent reads from it will return its default value.
  mutating func clearDocumentRevisionSequence() {self._documentRevisionSequence = nil}

  var documentRevisionIdentifier: String {
    get {return _documentRevisionIdentifier ?? String()}
    set {_documentRevisionIdentifier = newValue}
  }
  /// Returns true if `documentRevisionIdentifier` has been explicitly set.
  var hasDocumentRevisionIdentifier: Bool {return self._documentRevisionIdentifier != nil}
  /// Clears the value of `documentRevisionIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearDocumentRevisionIdentifier() {self._documentRevisionIdentifier = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _viewStateRoot: TSP_Reference? = nil
  fileprivate var _documentRevisionSequence: Int32? = nil
  fileprivate var _documentRevisionIdentifier: String? = nil
}

struct TSK_CommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var undoRedoState: TSP_Reference {
    get {return _undoRedoState ?? TSP_Reference()}
    set {_undoRedoState = newValue}
  }
  /// Returns true if `undoRedoState` has been explicitly set.
  var hasUndoRedoState: Bool {return self._undoRedoState != nil}
  /// Clears the value of `undoRedoState`. Subsequent reads from it will return its default value.
  mutating func clearUndoRedoState() {self._undoRedoState = nil}

  var undoCollection: TSP_Reference {
    get {return _undoCollection ?? TSP_Reference()}
    set {_undoCollection = newValue}
  }
  /// Returns true if `undoCollection` has been explicitly set.
  var hasUndoCollection: Bool {return self._undoCollection != nil}
  /// Clears the value of `undoCollection`. Subsequent reads from it will return its default value.
  mutating func clearUndoCollection() {self._undoCollection = nil}

  var shadowedByTransform: Bool {
    get {return _shadowedByTransform ?? false}
    set {_shadowedByTransform = newValue}
  }
  /// Returns true if `shadowedByTransform` has been explicitly set.
  var hasShadowedByTransform: Bool {return self._shadowedByTransform != nil}
  /// Clears the value of `shadowedByTransform`. Subsequent reads from it will return its default value.
  mutating func clearShadowedByTransform() {self._shadowedByTransform = nil}

  var shadowedByCommit: Bool {
    get {return _shadowedByCommit ?? false}
    set {_shadowedByCommit = newValue}
  }
  /// Returns true if `shadowedByCommit` has been explicitly set.
  var hasShadowedByCommit: Bool {return self._shadowedByCommit != nil}
  /// Clears the value of `shadowedByCommit`. Subsequent reads from it will return its default value.
  mutating func clearShadowedByCommit() {self._shadowedByCommit = nil}

  var remote: Bool {
    get {return _remote ?? false}
    set {_remote = newValue}
  }
  /// Returns true if `remote` has been explicitly set.
  var hasRemote: Bool {return self._remote != nil}
  /// Clears the value of `remote`. Subsequent reads from it will return its default value.
  mutating func clearRemote() {self._remote = nil}

  var shouldHoldUntilGroupCommit: Bool {
    get {return _shouldHoldUntilGroupCommit ?? false}
    set {_shouldHoldUntilGroupCommit = newValue}
  }
  /// Returns true if `shouldHoldUntilGroupCommit` has been explicitly set.
  var hasShouldHoldUntilGroupCommit: Bool {return self._shouldHoldUntilGroupCommit != nil}
  /// Clears the value of `shouldHoldUntilGroupCommit`. Subsequent reads from it will return its default value.
  mutating func clearShouldHoldUntilGroupCommit() {self._shouldHoldUntilGroupCommit = nil}

  var serverOriginated: Bool {
    get {return _serverOriginated ?? false}
    set {_serverOriginated = newValue}
  }
  /// Returns true if `serverOriginated` has been explicitly set.
  var hasServerOriginated: Bool {return self._serverOriginated != nil}
  /// Clears the value of `serverOriginated`. Subsequent reads from it will return its default value.
  mutating func clearServerOriginated() {self._serverOriginated = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _undoRedoState: TSP_Reference? = nil
  fileprivate var _undoCollection: TSP_Reference? = nil
  fileprivate var _shadowedByTransform: Bool? = nil
  fileprivate var _shadowedByCommit: Bool? = nil
  fileprivate var _remote: Bool? = nil
  fileprivate var _shouldHoldUntilGroupCommit: Bool? = nil
  fileprivate var _serverOriginated: Bool? = nil
}

struct TSK_CommandGroupArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var commands: [TSP_Reference] = []

  var processResults: TSP_IndexSet {
    get {return _processResults ?? TSP_IndexSet()}
    set {_processResults = newValue}
  }
  /// Returns true if `processResults` has been explicitly set.
  var hasProcessResults: Bool {return self._processResults != nil}
  /// Clears the value of `processResults`. Subsequent reads from it will return its default value.
  mutating func clearProcessResults() {self._processResults = nil}

  var actionString: String {
    get {return _actionString ?? String()}
    set {_actionString = newValue}
  }
  /// Returns true if `actionString` has been explicitly set.
  var hasActionString: Bool {return self._actionString != nil}
  /// Clears the value of `actionString`. Subsequent reads from it will return its default value.
  mutating func clearActionString() {self._actionString = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _processResults: TSP_IndexSet? = nil
  fileprivate var _actionString: String? = nil
}

struct TSK_InducedCommandCollectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var inducingCommand: TSP_Reference {
    get {return _inducingCommand ?? TSP_Reference()}
    set {_inducingCommand = newValue}
  }
  /// Returns true if `inducingCommand` has been explicitly set.
  var hasInducingCommand: Bool {return self._inducingCommand != nil}
  /// Clears the value of `inducingCommand`. Subsequent reads from it will return its default value.
  mutating func clearInducingCommand() {self._inducingCommand = nil}

  var inducedCommands: [TSP_Reference] = []

  var indexesOfProcessedInducedCommands: TSP_IndexSet {
    get {return _indexesOfProcessedInducedCommands ?? TSP_IndexSet()}
    set {_indexesOfProcessedInducedCommands = newValue}
  }
  /// Returns true if `indexesOfProcessedInducedCommands` has been explicitly set.
  var hasIndexesOfProcessedInducedCommands: Bool {return self._indexesOfProcessedInducedCommands != nil}
  /// Clears the value of `indexesOfProcessedInducedCommands`. Subsequent reads from it will return its default value.
  mutating func clearIndexesOfProcessedInducedCommands() {self._indexesOfProcessedInducedCommands = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _inducingCommand: TSP_Reference? = nil
  fileprivate var _indexesOfProcessedInducedCommands: TSP_IndexSet? = nil
}

struct TSK_PropagatedCommandCollectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var propagatableCommand: TSP_Reference {
    get {return _propagatableCommand ?? TSP_Reference()}
    set {_propagatableCommand = newValue}
  }
  /// Returns true if `propagatableCommand` has been explicitly set.
  var hasPropagatableCommand: Bool {return self._propagatableCommand != nil}
  /// Clears the value of `propagatableCommand`. Subsequent reads from it will return its default value.
  mutating func clearPropagatableCommand() {self._propagatableCommand = nil}

  var propagatableCommandProcessResult: Bool {
    get {return _propagatableCommandProcessResult ?? false}
    set {_propagatableCommandProcessResult = newValue}
  }
  /// Returns true if `propagatableCommandProcessResult` has been explicitly set.
  var hasPropagatableCommandProcessResult: Bool {return self._propagatableCommandProcessResult != nil}
  /// Clears the value of `propagatableCommandProcessResult`. Subsequent reads from it will return its default value.
  mutating func clearPropagatableCommandProcessResult() {self._propagatableCommandProcessResult = nil}

  var propagatingCommand: TSP_Reference {
    get {return _propagatingCommand ?? TSP_Reference()}
    set {_propagatingCommand = newValue}
  }
  /// Returns true if `propagatingCommand` has been explicitly set.
  var hasPropagatingCommand: Bool {return self._propagatingCommand != nil}
  /// Clears the value of `propagatingCommand`. Subsequent reads from it will return its default value.
  mutating func clearPropagatingCommand() {self._propagatingCommand = nil}

  var propagatingCommandProcessResult: Bool {
    get {return _propagatingCommandProcessResult ?? false}
    set {_propagatingCommandProcessResult = newValue}
  }
  /// Returns true if `propagatingCommandProcessResult` has been explicitly set.
  var hasPropagatingCommandProcessResult: Bool {return self._propagatingCommandProcessResult != nil}
  /// Clears the value of `propagatingCommandProcessResult`. Subsequent reads from it will return its default value.
  mutating func clearPropagatingCommandProcessResult() {self._propagatingCommandProcessResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _propagatableCommand: TSP_Reference? = nil
  fileprivate var _propagatableCommandProcessResult: Bool? = nil
  fileprivate var _propagatingCommand: TSP_Reference? = nil
  fileprivate var _propagatingCommandProcessResult: Bool? = nil
}

struct TSK_FinalCommandPairArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var command: TSP_Reference {
    get {return _command ?? TSP_Reference()}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  mutating func clearCommand() {self._command = nil}

  var commandProcessResult: Bool {
    get {return _commandProcessResult ?? false}
    set {_commandProcessResult = newValue}
  }
  /// Returns true if `commandProcessResult` has been explicitly set.
  var hasCommandProcessResult: Bool {return self._commandProcessResult != nil}
  /// Clears the value of `commandProcessResult`. Subsequent reads from it will return its default value.
  mutating func clearCommandProcessResult() {self._commandProcessResult = nil}

  var finalCommand: TSP_Reference {
    get {return _finalCommand ?? TSP_Reference()}
    set {_finalCommand = newValue}
  }
  /// Returns true if `finalCommand` has been explicitly set.
  var hasFinalCommand: Bool {return self._finalCommand != nil}
  /// Clears the value of `finalCommand`. Subsequent reads from it will return its default value.
  mutating func clearFinalCommand() {self._finalCommand = nil}

  var finalCommandProcessResult: Bool {
    get {return _finalCommandProcessResult ?? false}
    set {_finalCommandProcessResult = newValue}
  }
  /// Returns true if `finalCommandProcessResult` has been explicitly set.
  var hasFinalCommandProcessResult: Bool {return self._finalCommandProcessResult != nil}
  /// Clears the value of `finalCommandProcessResult`. Subsequent reads from it will return its default value.
  mutating func clearFinalCommandProcessResult() {self._finalCommandProcessResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _command: TSP_Reference? = nil
  fileprivate var _commandProcessResult: Bool? = nil
  fileprivate var _finalCommand: TSP_Reference? = nil
  fileprivate var _finalCommandProcessResult: Bool? = nil
}

struct TSK_CommandContainerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var commands: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSK_ShuffleMappingArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var startIndex: UInt32 {
    get {return _startIndex ?? 0}
    set {_startIndex = newValue}
  }
  /// Returns true if `startIndex` has been explicitly set.
  var hasStartIndex: Bool {return self._startIndex != nil}
  /// Clears the value of `startIndex`. Subsequent reads from it will return its default value.
  mutating func clearStartIndex() {self._startIndex = nil}

  var endIndex: UInt32 {
    get {return _endIndex ?? 0}
    set {_endIndex = newValue}
  }
  /// Returns true if `endIndex` has been explicitly set.
  var hasEndIndex: Bool {return self._endIndex != nil}
  /// Clears the value of `endIndex`. Subsequent reads from it will return its default value.
  mutating func clearEndIndex() {self._endIndex = nil}

  var entries: [TSK_ShuffleMappingArchive.Entry] = []

  var isVertical: Bool {
    get {return _isVertical ?? true}
    set {_isVertical = newValue}
  }
  /// Returns true if `isVertical` has been explicitly set.
  var hasIsVertical: Bool {return self._isVertical != nil}
  /// Clears the value of `isVertical`. Subsequent reads from it will return its default value.
  mutating func clearIsVertical() {self._isVertical = nil}

  var isMoveOperation: Bool {
    get {return _isMoveOperation ?? false}
    set {_isMoveOperation = newValue}
  }
  /// Returns true if `isMoveOperation` has been explicitly set.
  var hasIsMoveOperation: Bool {return self._isMoveOperation != nil}
  /// Clears the value of `isMoveOperation`. Subsequent reads from it will return its default value.
  mutating func clearIsMoveOperation() {self._isMoveOperation = nil}

  var firstMovedIndex: UInt32 {
    get {return _firstMovedIndex ?? 0}
    set {_firstMovedIndex = newValue}
  }
  /// Returns true if `firstMovedIndex` has been explicitly set.
  var hasFirstMovedIndex: Bool {return self._firstMovedIndex != nil}
  /// Clears the value of `firstMovedIndex`. Subsequent reads from it will return its default value.
  mutating func clearFirstMovedIndex() {self._firstMovedIndex = nil}

  var destinationIndexForMove: UInt32 {
    get {return _destinationIndexForMove ?? 0}
    set {_destinationIndexForMove = newValue}
  }
  /// Returns true if `destinationIndexForMove` has been explicitly set.
  var hasDestinationIndexForMove: Bool {return self._destinationIndexForMove != nil}
  /// Clears the value of `destinationIndexForMove`. Subsequent reads from it will return its default value.
  mutating func clearDestinationIndexForMove() {self._destinationIndexForMove = nil}

  var numberOfIndexesMoved: UInt32 {
    get {return _numberOfIndexesMoved ?? 0}
    set {_numberOfIndexesMoved = newValue}
  }
  /// Returns true if `numberOfIndexesMoved` has been explicitly set.
  var hasNumberOfIndexesMoved: Bool {return self._numberOfIndexesMoved != nil}
  /// Clears the value of `numberOfIndexesMoved`. Subsequent reads from it will return its default value.
  mutating func clearNumberOfIndexesMoved() {self._numberOfIndexesMoved = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Entry {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var from: UInt32 {
      get {return _from ?? 0}
      set {_from = newValue}
    }
    /// Returns true if `from` has been explicitly set.
    var hasFrom: Bool {return self._from != nil}
    /// Clears the value of `from`. Subsequent reads from it will return its default value.
    mutating func clearFrom() {self._from = nil}

    var to: UInt32 {
      get {return _to ?? 0}
      set {_to = newValue}
    }
    /// Returns true if `to` has been explicitly set.
    var hasTo: Bool {return self._to != nil}
    /// Clears the value of `to`. Subsequent reads from it will return its default value.
    mutating func clearTo() {self._to = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _from: UInt32? = nil
    fileprivate var _to: UInt32? = nil
  }

  init() {}

  fileprivate var _startIndex: UInt32? = nil
  fileprivate var _endIndex: UInt32? = nil
  fileprivate var _isVertical: Bool? = nil
  fileprivate var _isMoveOperation: Bool? = nil
  fileprivate var _firstMovedIndex: UInt32? = nil
  fileprivate var _destinationIndexForMove: UInt32? = nil
  fileprivate var _numberOfIndexesMoved: UInt32? = nil
}

struct TSK_ProgressiveCommandGroupArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandGroupArchive {
    get {return _super ?? TSK_CommandGroupArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandGroupArchive? = nil
}

struct TSK_FormatStructArchive: SwiftProtobuf.ExtensibleMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var formatType: UInt32 {
    get {return _storage._formatType ?? 0}
    set {_uniqueStorage()._formatType = newValue}
  }
  /// Returns true if `formatType` has been explicitly set.
  var hasFormatType: Bool {return _storage._formatType != nil}
  /// Clears the value of `formatType`. Subsequent reads from it will return its default value.
  mutating func clearFormatType() {_uniqueStorage()._formatType = nil}

  var decimalPlaces: UInt32 {
    get {return _storage._decimalPlaces ?? 0}
    set {_uniqueStorage()._decimalPlaces = newValue}
  }
  /// Returns true if `decimalPlaces` has been explicitly set.
  var hasDecimalPlaces: Bool {return _storage._decimalPlaces != nil}
  /// Clears the value of `decimalPlaces`. Subsequent reads from it will return its default value.
  mutating func clearDecimalPlaces() {_uniqueStorage()._decimalPlaces = nil}

  var currencyCode: String {
    get {return _storage._currencyCode ?? String()}
    set {_uniqueStorage()._currencyCode = newValue}
  }
  /// Returns true if `currencyCode` has been explicitly set.
  var hasCurrencyCode: Bool {return _storage._currencyCode != nil}
  /// Clears the value of `currencyCode`. Subsequent reads from it will return its default value.
  mutating func clearCurrencyCode() {_uniqueStorage()._currencyCode = nil}

  var negativeStyle: UInt32 {
    get {return _storage._negativeStyle ?? 0}
    set {_uniqueStorage()._negativeStyle = newValue}
  }
  /// Returns true if `negativeStyle` has been explicitly set.
  var hasNegativeStyle: Bool {return _storage._negativeStyle != nil}
  /// Clears the value of `negativeStyle`. Subsequent reads from it will return its default value.
  mutating func clearNegativeStyle() {_uniqueStorage()._negativeStyle = nil}

  var showThousandsSeparator: Bool {
    get {return _storage._showThousandsSeparator ?? false}
    set {_uniqueStorage()._showThousandsSeparator = newValue}
  }
  /// Returns true if `showThousandsSeparator` has been explicitly set.
  var hasShowThousandsSeparator: Bool {return _storage._showThousandsSeparator != nil}
  /// Clears the value of `showThousandsSeparator`. Subsequent reads from it will return its default value.
  mutating func clearShowThousandsSeparator() {_uniqueStorage()._showThousandsSeparator = nil}

  var useAccountingStyle: Bool {
    get {return _storage._useAccountingStyle ?? false}
    set {_uniqueStorage()._useAccountingStyle = newValue}
  }
  /// Returns true if `useAccountingStyle` has been explicitly set.
  var hasUseAccountingStyle: Bool {return _storage._useAccountingStyle != nil}
  /// Clears the value of `useAccountingStyle`. Subsequent reads from it will return its default value.
  mutating func clearUseAccountingStyle() {_uniqueStorage()._useAccountingStyle = nil}

  var durationStyle: UInt32 {
    get {return _storage._durationStyle ?? 0}
    set {_uniqueStorage()._durationStyle = newValue}
  }
  /// Returns true if `durationStyle` has been explicitly set.
  var hasDurationStyle: Bool {return _storage._durationStyle != nil}
  /// Clears the value of `durationStyle`. Subsequent reads from it will return its default value.
  mutating func clearDurationStyle() {_uniqueStorage()._durationStyle = nil}

  var base: UInt32 {
    get {return _storage._base ?? 0}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_uniqueStorage()._base = nil}

  var basePlaces: UInt32 {
    get {return _storage._basePlaces ?? 0}
    set {_uniqueStorage()._basePlaces = newValue}
  }
  /// Returns true if `basePlaces` has been explicitly set.
  var hasBasePlaces: Bool {return _storage._basePlaces != nil}
  /// Clears the value of `basePlaces`. Subsequent reads from it will return its default value.
  mutating func clearBasePlaces() {_uniqueStorage()._basePlaces = nil}

  var baseUseMinusSign: Bool {
    get {return _storage._baseUseMinusSign ?? false}
    set {_uniqueStorage()._baseUseMinusSign = newValue}
  }
  /// Returns true if `baseUseMinusSign` has been explicitly set.
  var hasBaseUseMinusSign: Bool {return _storage._baseUseMinusSign != nil}
  /// Clears the value of `baseUseMinusSign`. Subsequent reads from it will return its default value.
  mutating func clearBaseUseMinusSign() {_uniqueStorage()._baseUseMinusSign = nil}

  var fractionAccuracy: UInt32 {
    get {return _storage._fractionAccuracy ?? 0}
    set {_uniqueStorage()._fractionAccuracy = newValue}
  }
  /// Returns true if `fractionAccuracy` has been explicitly set.
  var hasFractionAccuracy: Bool {return _storage._fractionAccuracy != nil}
  /// Clears the value of `fractionAccuracy`. Subsequent reads from it will return its default value.
  mutating func clearFractionAccuracy() {_uniqueStorage()._fractionAccuracy = nil}

  var suppressDateFormat: Bool {
    get {return _storage._suppressDateFormat ?? false}
    set {_uniqueStorage()._suppressDateFormat = newValue}
  }
  /// Returns true if `suppressDateFormat` has been explicitly set.
  var hasSuppressDateFormat: Bool {return _storage._suppressDateFormat != nil}
  /// Clears the value of `suppressDateFormat`. Subsequent reads from it will return its default value.
  mutating func clearSuppressDateFormat() {_uniqueStorage()._suppressDateFormat = nil}

  var suppressTimeFormat: Bool {
    get {return _storage._suppressTimeFormat ?? false}
    set {_uniqueStorage()._suppressTimeFormat = newValue}
  }
  /// Returns true if `suppressTimeFormat` has been explicitly set.
  var hasSuppressTimeFormat: Bool {return _storage._suppressTimeFormat != nil}
  /// Clears the value of `suppressTimeFormat`. Subsequent reads from it will return its default value.
  mutating func clearSuppressTimeFormat() {_uniqueStorage()._suppressTimeFormat = nil}

  var dateTimeFormat: String {
    get {return _storage._dateTimeFormat ?? String()}
    set {_uniqueStorage()._dateTimeFormat = newValue}
  }
  /// Returns true if `dateTimeFormat` has been explicitly set.
  var hasDateTimeFormat: Bool {return _storage._dateTimeFormat != nil}
  /// Clears the value of `dateTimeFormat`. Subsequent reads from it will return its default value.
  mutating func clearDateTimeFormat() {_uniqueStorage()._dateTimeFormat = nil}

  var durationUnitLargest: UInt32 {
    get {return _storage._durationUnitLargest ?? 0}
    set {_uniqueStorage()._durationUnitLargest = newValue}
  }
  /// Returns true if `durationUnitLargest` has been explicitly set.
  var hasDurationUnitLargest: Bool {return _storage._durationUnitLargest != nil}
  /// Clears the value of `durationUnitLargest`. Subsequent reads from it will return its default value.
  mutating func clearDurationUnitLargest() {_uniqueStorage()._durationUnitLargest = nil}

  var durationUnitSmallest: UInt32 {
    get {return _storage._durationUnitSmallest ?? 0}
    set {_uniqueStorage()._durationUnitSmallest = newValue}
  }
  /// Returns true if `durationUnitSmallest` has been explicitly set.
  var hasDurationUnitSmallest: Bool {return _storage._durationUnitSmallest != nil}
  /// Clears the value of `durationUnitSmallest`. Subsequent reads from it will return its default value.
  mutating func clearDurationUnitSmallest() {_uniqueStorage()._durationUnitSmallest = nil}

  var customID: UInt32 {
    get {return _storage._customID ?? 0}
    set {_uniqueStorage()._customID = newValue}
  }
  /// Returns true if `customID` has been explicitly set.
  var hasCustomID: Bool {return _storage._customID != nil}
  /// Clears the value of `customID`. Subsequent reads from it will return its default value.
  mutating func clearCustomID() {_uniqueStorage()._customID = nil}

  var customFormatString: String {
    get {return _storage._customFormatString ?? String()}
    set {_uniqueStorage()._customFormatString = newValue}
  }
  /// Returns true if `customFormatString` has been explicitly set.
  var hasCustomFormatString: Bool {return _storage._customFormatString != nil}
  /// Clears the value of `customFormatString`. Subsequent reads from it will return its default value.
  mutating func clearCustomFormatString() {_uniqueStorage()._customFormatString = nil}

  var scaleFactor: Double {
    get {return _storage._scaleFactor ?? 0}
    set {_uniqueStorage()._scaleFactor = newValue}
  }
  /// Returns true if `scaleFactor` has been explicitly set.
  var hasScaleFactor: Bool {return _storage._scaleFactor != nil}
  /// Clears the value of `scaleFactor`. Subsequent reads from it will return its default value.
  mutating func clearScaleFactor() {_uniqueStorage()._scaleFactor = nil}

  var requiresFractionReplacement: Bool {
    get {return _storage._requiresFractionReplacement ?? false}
    set {_uniqueStorage()._requiresFractionReplacement = newValue}
  }
  /// Returns true if `requiresFractionReplacement` has been explicitly set.
  var hasRequiresFractionReplacement: Bool {return _storage._requiresFractionReplacement != nil}
  /// Clears the value of `requiresFractionReplacement`. Subsequent reads from it will return its default value.
  mutating func clearRequiresFractionReplacement() {_uniqueStorage()._requiresFractionReplacement = nil}

  var controlMinimum: Double {
    get {return _storage._controlMinimum ?? 0}
    set {_uniqueStorage()._controlMinimum = newValue}
  }
  /// Returns true if `controlMinimum` has been explicitly set.
  var hasControlMinimum: Bool {return _storage._controlMinimum != nil}
  /// Clears the value of `controlMinimum`. Subsequent reads from it will return its default value.
  mutating func clearControlMinimum() {_uniqueStorage()._controlMinimum = nil}

  var controlMaximum: Double {
    get {return _storage._controlMaximum ?? 0}
    set {_uniqueStorage()._controlMaximum = newValue}
  }
  /// Returns true if `controlMaximum` has been explicitly set.
  var hasControlMaximum: Bool {return _storage._controlMaximum != nil}
  /// Clears the value of `controlMaximum`. Subsequent reads from it will return its default value.
  mutating func clearControlMaximum() {_uniqueStorage()._controlMaximum = nil}

  var controlIncrement: Double {
    get {return _storage._controlIncrement ?? 0}
    set {_uniqueStorage()._controlIncrement = newValue}
  }
  /// Returns true if `controlIncrement` has been explicitly set.
  var hasControlIncrement: Bool {return _storage._controlIncrement != nil}
  /// Clears the value of `controlIncrement`. Subsequent reads from it will return its default value.
  mutating func clearControlIncrement() {_uniqueStorage()._controlIncrement = nil}

  var controlFormatType: UInt32 {
    get {return _storage._controlFormatType ?? 0}
    set {_uniqueStorage()._controlFormatType = newValue}
  }
  /// Returns true if `controlFormatType` has been explicitly set.
  var hasControlFormatType: Bool {return _storage._controlFormatType != nil}
  /// Clears the value of `controlFormatType`. Subsequent reads from it will return its default value.
  mutating func clearControlFormatType() {_uniqueStorage()._controlFormatType = nil}

  var sliderOrientation: UInt32 {
    get {return _storage._sliderOrientation ?? 0}
    set {_uniqueStorage()._sliderOrientation = newValue}
  }
  /// Returns true if `sliderOrientation` has been explicitly set.
  var hasSliderOrientation: Bool {return _storage._sliderOrientation != nil}
  /// Clears the value of `sliderOrientation`. Subsequent reads from it will return its default value.
  mutating func clearSliderOrientation() {_uniqueStorage()._sliderOrientation = nil}

  var sliderPosition: UInt32 {
    get {return _storage._sliderPosition ?? 0}
    set {_uniqueStorage()._sliderPosition = newValue}
  }
  /// Returns true if `sliderPosition` has been explicitly set.
  var hasSliderPosition: Bool {return _storage._sliderPosition != nil}
  /// Clears the value of `sliderPosition`. Subsequent reads from it will return its default value.
  mutating func clearSliderPosition() {_uniqueStorage()._sliderPosition = nil}

  var decimalWidth: UInt32 {
    get {return _storage._decimalWidth ?? 0}
    set {_uniqueStorage()._decimalWidth = newValue}
  }
  /// Returns true if `decimalWidth` has been explicitly set.
  var hasDecimalWidth: Bool {return _storage._decimalWidth != nil}
  /// Clears the value of `decimalWidth`. Subsequent reads from it will return its default value.
  mutating func clearDecimalWidth() {_uniqueStorage()._decimalWidth = nil}

  var minIntegerWidth: UInt32 {
    get {return _storage._minIntegerWidth ?? 0}
    set {_uniqueStorage()._minIntegerWidth = newValue}
  }
  /// Returns true if `minIntegerWidth` has been explicitly set.
  var hasMinIntegerWidth: Bool {return _storage._minIntegerWidth != nil}
  /// Clears the value of `minIntegerWidth`. Subsequent reads from it will return its default value.
  mutating func clearMinIntegerWidth() {_uniqueStorage()._minIntegerWidth = nil}

  var numNonspaceIntegerDigits: UInt32 {
    get {return _storage._numNonspaceIntegerDigits ?? 0}
    set {_uniqueStorage()._numNonspaceIntegerDigits = newValue}
  }
  /// Returns true if `numNonspaceIntegerDigits` has been explicitly set.
  var hasNumNonspaceIntegerDigits: Bool {return _storage._numNonspaceIntegerDigits != nil}
  /// Clears the value of `numNonspaceIntegerDigits`. Subsequent reads from it will return its default value.
  mutating func clearNumNonspaceIntegerDigits() {_uniqueStorage()._numNonspaceIntegerDigits = nil}

  var numNonspaceDecimalDigits: UInt32 {
    get {return _storage._numNonspaceDecimalDigits ?? 0}
    set {_uniqueStorage()._numNonspaceDecimalDigits = newValue}
  }
  /// Returns true if `numNonspaceDecimalDigits` has been explicitly set.
  var hasNumNonspaceDecimalDigits: Bool {return _storage._numNonspaceDecimalDigits != nil}
  /// Clears the value of `numNonspaceDecimalDigits`. Subsequent reads from it will return its default value.
  mutating func clearNumNonspaceDecimalDigits() {_uniqueStorage()._numNonspaceDecimalDigits = nil}

  var indexFromRightLastInteger: UInt32 {
    get {return _storage._indexFromRightLastInteger ?? 0}
    set {_uniqueStorage()._indexFromRightLastInteger = newValue}
  }
  /// Returns true if `indexFromRightLastInteger` has been explicitly set.
  var hasIndexFromRightLastInteger: Bool {return _storage._indexFromRightLastInteger != nil}
  /// Clears the value of `indexFromRightLastInteger`. Subsequent reads from it will return its default value.
  mutating func clearIndexFromRightLastInteger() {_uniqueStorage()._indexFromRightLastInteger = nil}

  var interstitialStrings: [String] {
    get {return _storage._interstitialStrings}
    set {_uniqueStorage()._interstitialStrings = newValue}
  }

  var intersStrInsertionIndexes: TSP_IndexSet {
    get {return _storage._intersStrInsertionIndexes ?? TSP_IndexSet()}
    set {_uniqueStorage()._intersStrInsertionIndexes = newValue}
  }
  /// Returns true if `intersStrInsertionIndexes` has been explicitly set.
  var hasIntersStrInsertionIndexes: Bool {return _storage._intersStrInsertionIndexes != nil}
  /// Clears the value of `intersStrInsertionIndexes`. Subsequent reads from it will return its default value.
  mutating func clearIntersStrInsertionIndexes() {_uniqueStorage()._intersStrInsertionIndexes = nil}

  var numHashDecimalDigits: UInt32 {
    get {return _storage._numHashDecimalDigits ?? 0}
    set {_uniqueStorage()._numHashDecimalDigits = newValue}
  }
  /// Returns true if `numHashDecimalDigits` has been explicitly set.
  var hasNumHashDecimalDigits: Bool {return _storage._numHashDecimalDigits != nil}
  /// Clears the value of `numHashDecimalDigits`. Subsequent reads from it will return its default value.
  mutating func clearNumHashDecimalDigits() {_uniqueStorage()._numHashDecimalDigits = nil}

  var totalNumDecimalDigits: UInt32 {
    get {return _storage._totalNumDecimalDigits ?? 0}
    set {_uniqueStorage()._totalNumDecimalDigits = newValue}
  }
  /// Returns true if `totalNumDecimalDigits` has been explicitly set.
  var hasTotalNumDecimalDigits: Bool {return _storage._totalNumDecimalDigits != nil}
  /// Clears the value of `totalNumDecimalDigits`. Subsequent reads from it will return its default value.
  mutating func clearTotalNumDecimalDigits() {_uniqueStorage()._totalNumDecimalDigits = nil}

  var isComplex: Bool {
    get {return _storage._isComplex ?? false}
    set {_uniqueStorage()._isComplex = newValue}
  }
  /// Returns true if `isComplex` has been explicitly set.
  var hasIsComplex: Bool {return _storage._isComplex != nil}
  /// Clears the value of `isComplex`. Subsequent reads from it will return its default value.
  mutating func clearIsComplex() {_uniqueStorage()._isComplex = nil}

  var containsIntegerToken: Bool {
    get {return _storage._containsIntegerToken ?? false}
    set {_uniqueStorage()._containsIntegerToken = newValue}
  }
  /// Returns true if `containsIntegerToken` has been explicitly set.
  var hasContainsIntegerToken: Bool {return _storage._containsIntegerToken != nil}
  /// Clears the value of `containsIntegerToken`. Subsequent reads from it will return its default value.
  mutating func clearContainsIntegerToken() {_uniqueStorage()._containsIntegerToken = nil}

  var multipleChoiceListInitialValue: UInt32 {
    get {return _storage._multipleChoiceListInitialValue ?? 0}
    set {_uniqueStorage()._multipleChoiceListInitialValue = newValue}
  }
  /// Returns true if `multipleChoiceListInitialValue` has been explicitly set.
  var hasMultipleChoiceListInitialValue: Bool {return _storage._multipleChoiceListInitialValue != nil}
  /// Clears the value of `multipleChoiceListInitialValue`. Subsequent reads from it will return its default value.
  mutating func clearMultipleChoiceListInitialValue() {_uniqueStorage()._multipleChoiceListInitialValue = nil}

  var multipleChoiceListID: UInt32 {
    get {return _storage._multipleChoiceListID ?? 0}
    set {_uniqueStorage()._multipleChoiceListID = newValue}
  }
  /// Returns true if `multipleChoiceListID` has been explicitly set.
  var hasMultipleChoiceListID: Bool {return _storage._multipleChoiceListID != nil}
  /// Clears the value of `multipleChoiceListID`. Subsequent reads from it will return its default value.
  mutating func clearMultipleChoiceListID() {_uniqueStorage()._multipleChoiceListID = nil}

  var useAutomaticDurationUnits: Bool {
    get {return _storage._useAutomaticDurationUnits ?? false}
    set {_uniqueStorage()._useAutomaticDurationUnits = newValue}
  }
  /// Returns true if `useAutomaticDurationUnits` has been explicitly set.
  var hasUseAutomaticDurationUnits: Bool {return _storage._useAutomaticDurationUnits != nil}
  /// Clears the value of `useAutomaticDurationUnits`. Subsequent reads from it will return its default value.
  mutating func clearUseAutomaticDurationUnits() {_uniqueStorage()._useAutomaticDurationUnits = nil}

  var customUid: TSP_UUID {
    get {return _storage._customUid ?? TSP_UUID()}
    set {_uniqueStorage()._customUid = newValue}
  }
  /// Returns true if `customUid` has been explicitly set.
  var hasCustomUid: Bool {return _storage._customUid != nil}
  /// Clears the value of `customUid`. Subsequent reads from it will return its default value.
  mutating func clearCustomUid() {_uniqueStorage()._customUid = nil}

  var customFormat: TSK_CustomFormatArchive {
    get {return _storage._customFormat ?? TSK_CustomFormatArchive()}
    set {_uniqueStorage()._customFormat = newValue}
  }
  /// Returns true if `customFormat` has been explicitly set.
  var hasCustomFormat: Bool {return _storage._customFormat != nil}
  /// Clears the value of `customFormat`. Subsequent reads from it will return its default value.
  mutating func clearCustomFormat() {_uniqueStorage()._customFormat = nil}

  var usesPlusSign: Bool {
    get {return _storage._usesPlusSign ?? false}
    set {_uniqueStorage()._usesPlusSign = newValue}
  }
  /// Returns true if `usesPlusSign` has been explicitly set.
  var hasUsesPlusSign: Bool {return _storage._usesPlusSign != nil}
  /// Clears the value of `usesPlusSign`. Subsequent reads from it will return its default value.
  mutating func clearUsesPlusSign() {_uniqueStorage()._usesPlusSign = nil}

  var boolTrueString: String {
    get {return _storage._boolTrueString ?? String()}
    set {_uniqueStorage()._boolTrueString = newValue}
  }
  /// Returns true if `boolTrueString` has been explicitly set.
  var hasBoolTrueString: Bool {return _storage._boolTrueString != nil}
  /// Clears the value of `boolTrueString`. Subsequent reads from it will return its default value.
  mutating func clearBoolTrueString() {_uniqueStorage()._boolTrueString = nil}

  var boolFalseString: String {
    get {return _storage._boolFalseString ?? String()}
    set {_uniqueStorage()._boolFalseString = newValue}
  }
  /// Returns true if `boolFalseString` has been explicitly set.
  var hasBoolFalseString: Bool {return _storage._boolFalseString != nil}
  /// Clears the value of `boolFalseString`. Subsequent reads from it will return its default value.
  mutating func clearBoolFalseString() {_uniqueStorage()._boolFalseString = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSK_CustomFormatArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  var formatTypePreBnc: UInt32 {
    get {return _storage._formatTypePreBnc ?? 0}
    set {_uniqueStorage()._formatTypePreBnc = newValue}
  }
  /// Returns true if `formatTypePreBnc` has been explicitly set.
  var hasFormatTypePreBnc: Bool {return _storage._formatTypePreBnc != nil}
  /// Clears the value of `formatTypePreBnc`. Subsequent reads from it will return its default value.
  mutating func clearFormatTypePreBnc() {_uniqueStorage()._formatTypePreBnc = nil}

  var defaultFormat: TSK_FormatStructArchive {
    get {return _storage._defaultFormat ?? TSK_FormatStructArchive()}
    set {_uniqueStorage()._defaultFormat = newValue}
  }
  /// Returns true if `defaultFormat` has been explicitly set.
  var hasDefaultFormat: Bool {return _storage._defaultFormat != nil}
  /// Clears the value of `defaultFormat`. Subsequent reads from it will return its default value.
  mutating func clearDefaultFormat() {_uniqueStorage()._defaultFormat = nil}

  var conditions: [TSK_CustomFormatArchive.Condition] {
    get {return _storage._conditions}
    set {_uniqueStorage()._conditions = newValue}
  }

  var formatType: UInt32 {
    get {return _storage._formatType ?? 0}
    set {_uniqueStorage()._formatType = newValue}
  }
  /// Returns true if `formatType` has been explicitly set.
  var hasFormatType: Bool {return _storage._formatType != nil}
  /// Clears the value of `formatType`. Subsequent reads from it will return its default value.
  mutating func clearFormatType() {_uniqueStorage()._formatType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Condition {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var conditionType: UInt32 {
      get {return _conditionType ?? 0}
      set {_conditionType = newValue}
    }
    /// Returns true if `conditionType` has been explicitly set.
    var hasConditionType: Bool {return self._conditionType != nil}
    /// Clears the value of `conditionType`. Subsequent reads from it will return its default value.
    mutating func clearConditionType() {self._conditionType = nil}

    var conditionValue: Float {
      get {return _conditionValue ?? 0}
      set {_conditionValue = newValue}
    }
    /// Returns true if `conditionValue` has been explicitly set.
    var hasConditionValue: Bool {return self._conditionValue != nil}
    /// Clears the value of `conditionValue`. Subsequent reads from it will return its default value.
    mutating func clearConditionValue() {self._conditionValue = nil}

    var conditionFormat: TSK_FormatStructArchive {
      get {return _conditionFormat ?? TSK_FormatStructArchive()}
      set {_conditionFormat = newValue}
    }
    /// Returns true if `conditionFormat` has been explicitly set.
    var hasConditionFormat: Bool {return self._conditionFormat != nil}
    /// Clears the value of `conditionFormat`. Subsequent reads from it will return its default value.
    mutating func clearConditionFormat() {self._conditionFormat = nil}

    var conditionValueDbl: Double {
      get {return _conditionValueDbl ?? 0}
      set {_conditionValueDbl = newValue}
    }
    /// Returns true if `conditionValueDbl` has been explicitly set.
    var hasConditionValueDbl: Bool {return self._conditionValueDbl != nil}
    /// Clears the value of `conditionValueDbl`. Subsequent reads from it will return its default value.
    mutating func clearConditionValueDbl() {self._conditionValueDbl = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _conditionType: UInt32? = nil
    fileprivate var _conditionValue: Float? = nil
    fileprivate var _conditionFormat: TSK_FormatStructArchive? = nil
    fileprivate var _conditionValueDbl: Double? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSK_CustomFormatListArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuids: [TSP_UUID] = []

  var customFormats: [TSK_CustomFormatArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSK_AnnotationAuthorArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var color: TSP_Color {
    get {return _color ?? TSP_Color()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {self._color = nil}

  var publicID: String {
    get {return _publicID ?? String()}
    set {_publicID = newValue}
  }
  /// Returns true if `publicID` has been explicitly set.
  var hasPublicID: Bool {return self._publicID != nil}
  /// Clears the value of `publicID`. Subsequent reads from it will return its default value.
  mutating func clearPublicID() {self._publicID = nil}

  var isPublicAuthor: Bool {
    get {return _isPublicAuthor ?? false}
    set {_isPublicAuthor = newValue}
  }
  /// Returns true if `isPublicAuthor` has been explicitly set.
  var hasIsPublicAuthor: Bool {return self._isPublicAuthor != nil}
  /// Clears the value of `isPublicAuthor`. Subsequent reads from it will return its default value.
  mutating func clearIsPublicAuthor() {self._isPublicAuthor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _color: TSP_Color? = nil
  fileprivate var _publicID: String? = nil
  fileprivate var _isPublicAuthor: Bool? = nil
}

struct TSK_DeprecatedChangeAuthorArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var changeColor: TSP_Color {
    get {return _changeColor ?? TSP_Color()}
    set {_changeColor = newValue}
  }
  /// Returns true if `changeColor` has been explicitly set.
  var hasChangeColor: Bool {return self._changeColor != nil}
  /// Clears the value of `changeColor`. Subsequent reads from it will return its default value.
  mutating func clearChangeColor() {self._changeColor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _changeColor: TSP_Color? = nil
}

struct TSK_AnnotationAuthorStorageArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var annotationAuthor: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSK_SetAnnotationAuthorColorCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var annotationAuthor: TSP_Reference {
    get {return _annotationAuthor ?? TSP_Reference()}
    set {_annotationAuthor = newValue}
  }
  /// Returns true if `annotationAuthor` has been explicitly set.
  var hasAnnotationAuthor: Bool {return self._annotationAuthor != nil}
  /// Clears the value of `annotationAuthor`. Subsequent reads from it will return its default value.
  mutating func clearAnnotationAuthor() {self._annotationAuthor = nil}

  var color: TSP_Color {
    get {return _color ?? TSP_Color()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {self._color = nil}

  var oldColor: TSP_Color {
    get {return _oldColor ?? TSP_Color()}
    set {_oldColor = newValue}
  }
  /// Returns true if `oldColor` has been explicitly set.
  var hasOldColor: Bool {return self._oldColor != nil}
  /// Clears the value of `oldColor`. Subsequent reads from it will return its default value.
  mutating func clearOldColor() {self._oldColor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _annotationAuthor: TSP_Reference? = nil
  fileprivate var _color: TSP_Color? = nil
  fileprivate var _oldColor: TSP_Color? = nil
}

struct TSK_CommandSelectionBehaviorArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var archivedSelection: TSK_SelectionPathArchive {
    get {return _archivedSelection ?? TSK_SelectionPathArchive()}
    set {_archivedSelection = newValue}
  }
  /// Returns true if `archivedSelection` has been explicitly set.
  var hasArchivedSelection: Bool {return self._archivedSelection != nil}
  /// Clears the value of `archivedSelection`. Subsequent reads from it will return its default value.
  mutating func clearArchivedSelection() {self._archivedSelection = nil}

  var archivedOldSelection: TSK_SelectionPathArchive {
    get {return _archivedOldSelection ?? TSK_SelectionPathArchive()}
    set {_archivedOldSelection = newValue}
  }
  /// Returns true if `archivedOldSelection` has been explicitly set.
  var hasArchivedOldSelection: Bool {return self._archivedOldSelection != nil}
  /// Clears the value of `archivedOldSelection`. Subsequent reads from it will return its default value.
  mutating func clearArchivedOldSelection() {self._archivedOldSelection = nil}

  var archivedNewSelection: TSK_SelectionPathArchive {
    get {return _archivedNewSelection ?? TSK_SelectionPathArchive()}
    set {_archivedNewSelection = newValue}
  }
  /// Returns true if `archivedNewSelection` has been explicitly set.
  var hasArchivedNewSelection: Bool {return self._archivedNewSelection != nil}
  /// Clears the value of `archivedNewSelection`. Subsequent reads from it will return its default value.
  mutating func clearArchivedNewSelection() {self._archivedNewSelection = nil}

  var selectionFlags: UInt64 {
    get {return _selectionFlags ?? 0}
    set {_selectionFlags = newValue}
  }
  /// Returns true if `selectionFlags` has been explicitly set.
  var hasSelectionFlags: Bool {return self._selectionFlags != nil}
  /// Clears the value of `selectionFlags`. Subsequent reads from it will return its default value.
  mutating func clearSelectionFlags() {self._selectionFlags = nil}

  var additionalForwardSelectionFlags: UInt64 {
    get {return _additionalForwardSelectionFlags ?? 0}
    set {_additionalForwardSelectionFlags = newValue}
  }
  /// Returns true if `additionalForwardSelectionFlags` has been explicitly set.
  var hasAdditionalForwardSelectionFlags: Bool {return self._additionalForwardSelectionFlags != nil}
  /// Clears the value of `additionalForwardSelectionFlags`. Subsequent reads from it will return its default value.
  mutating func clearAdditionalForwardSelectionFlags() {self._additionalForwardSelectionFlags = nil}

  var additionalReverseSelectionFlags: UInt64 {
    get {return _additionalReverseSelectionFlags ?? 0}
    set {_additionalReverseSelectionFlags = newValue}
  }
  /// Returns true if `additionalReverseSelectionFlags` has been explicitly set.
  var hasAdditionalReverseSelectionFlags: Bool {return self._additionalReverseSelectionFlags != nil}
  /// Clears the value of `additionalReverseSelectionFlags`. Subsequent reads from it will return its default value.
  mutating func clearAdditionalReverseSelectionFlags() {self._additionalReverseSelectionFlags = nil}

  var forwardSelectionPathTransformer: TSP_Reference {
    get {return _forwardSelectionPathTransformer ?? TSP_Reference()}
    set {_forwardSelectionPathTransformer = newValue}
  }
  /// Returns true if `forwardSelectionPathTransformer` has been explicitly set.
  var hasForwardSelectionPathTransformer: Bool {return self._forwardSelectionPathTransformer != nil}
  /// Clears the value of `forwardSelectionPathTransformer`. Subsequent reads from it will return its default value.
  mutating func clearForwardSelectionPathTransformer() {self._forwardSelectionPathTransformer = nil}

  var reverseSelectionPathTransformer: TSP_Reference {
    get {return _reverseSelectionPathTransformer ?? TSP_Reference()}
    set {_reverseSelectionPathTransformer = newValue}
  }
  /// Returns true if `reverseSelectionPathTransformer` has been explicitly set.
  var hasReverseSelectionPathTransformer: Bool {return self._reverseSelectionPathTransformer != nil}
  /// Clears the value of `reverseSelectionPathTransformer`. Subsequent reads from it will return its default value.
  mutating func clearReverseSelectionPathTransformer() {self._reverseSelectionPathTransformer = nil}

  var additionalSelectionBehaviors: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _archivedSelection: TSK_SelectionPathArchive? = nil
  fileprivate var _archivedOldSelection: TSK_SelectionPathArchive? = nil
  fileprivate var _archivedNewSelection: TSK_SelectionPathArchive? = nil
  fileprivate var _selectionFlags: UInt64? = nil
  fileprivate var _additionalForwardSelectionFlags: UInt64? = nil
  fileprivate var _additionalReverseSelectionFlags: UInt64? = nil
  fileprivate var _forwardSelectionPathTransformer: TSP_Reference? = nil
  fileprivate var _reverseSelectionPathTransformer: TSP_Reference? = nil
}

struct TSK_SelectionPathTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var selectionTransformers: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSK_SelectionPathArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderedSelections: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSK_DocumentSelectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var documentRoot: TSP_Reference {
    get {return _documentRoot ?? TSP_Reference()}
    set {_documentRoot = newValue}
  }
  /// Returns true if `documentRoot` has been explicitly set.
  var hasDocumentRoot: Bool {return self._documentRoot != nil}
  /// Clears the value of `documentRoot`. Subsequent reads from it will return its default value.
  mutating func clearDocumentRoot() {self._documentRoot = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _documentRoot: TSP_Reference? = nil
}

struct TSK_IdOperationArgs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var idPath: TSP_UUIDPath {
    get {return _idPath ?? TSP_UUIDPath()}
    set {_idPath = newValue}
  }
  /// Returns true if `idPath` has been explicitly set.
  var hasIDPath: Bool {return self._idPath != nil}
  /// Clears the value of `idPath`. Subsequent reads from it will return its default value.
  mutating func clearIDPath() {self._idPath = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _idPath: TSP_UUIDPath? = nil
}

struct TSK_AddIdOperationArgs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_IdOperationArgs {
    get {return _super ?? TSK_IdOperationArgs()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var index: Int32 {
    get {return _index ?? 0}
    set {_index = newValue}
  }
  /// Returns true if `index` has been explicitly set.
  var hasIndex: Bool {return self._index != nil}
  /// Clears the value of `index`. Subsequent reads from it will return its default value.
  mutating func clearIndex() {self._index = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_IdOperationArgs? = nil
  fileprivate var _index: Int32? = nil
}

struct TSK_RemoveIdOperationArgs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_IdOperationArgs {
    get {return _super ?? TSK_IdOperationArgs()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var index: Int32 {
    get {return _index ?? 0}
    set {_index = newValue}
  }
  /// Returns true if `index` has been explicitly set.
  var hasIndex: Bool {return self._index != nil}
  /// Clears the value of `index`. Subsequent reads from it will return its default value.
  mutating func clearIndex() {self._index = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_IdOperationArgs? = nil
  fileprivate var _index: Int32? = nil
}

struct TSK_RearrangeIdOperationArgs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_IdOperationArgs {
    get {return _super ?? TSK_IdOperationArgs()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var fromIndex: Int32 {
    get {return _fromIndex ?? 0}
    set {_fromIndex = newValue}
  }
  /// Returns true if `fromIndex` has been explicitly set.
  var hasFromIndex: Bool {return self._fromIndex != nil}
  /// Clears the value of `fromIndex`. Subsequent reads from it will return its default value.
  mutating func clearFromIndex() {self._fromIndex = nil}

  var toIndex: Int32 {
    get {return _toIndex ?? 0}
    set {_toIndex = newValue}
  }
  /// Returns true if `toIndex` has been explicitly set.
  var hasToIndex: Bool {return self._toIndex != nil}
  /// Clears the value of `toIndex`. Subsequent reads from it will return its default value.
  mutating func clearToIndex() {self._toIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_IdOperationArgs? = nil
  fileprivate var _fromIndex: Int32? = nil
  fileprivate var _toIndex: Int32? = nil
}

struct TSK_IdPlacementOperationArgs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_IdOperationArgs {
    get {return _super ?? TSK_IdOperationArgs()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var fromIndex: Int32 {
    get {return _fromIndex ?? 0}
    set {_fromIndex = newValue}
  }
  /// Returns true if `fromIndex` has been explicitly set.
  var hasFromIndex: Bool {return self._fromIndex != nil}
  /// Clears the value of `fromIndex`. Subsequent reads from it will return its default value.
  mutating func clearFromIndex() {self._fromIndex = nil}

  var toIndex: Int32 {
    get {return _toIndex ?? 0}
    set {_toIndex = newValue}
  }
  /// Returns true if `toIndex` has been explicitly set.
  var hasToIndex: Bool {return self._toIndex != nil}
  /// Clears the value of `toIndex`. Subsequent reads from it will return its default value.
  mutating func clearToIndex() {self._toIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_IdOperationArgs? = nil
  fileprivate var _fromIndex: Int32? = nil
  fileprivate var _toIndex: Int32? = nil
}

struct TSK_NullCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
}

struct TSK_GroupCommitCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
}

struct TSK_UpgradeDocPostProcessingCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
}

struct TSK_InducedCommandCollectionCommitCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
}

struct TSK_ExecuteTestBetweenRollbackAndReapplyCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
}

struct TSK_ChangeDocumentPackageTypeCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var newPackageType: TSK_ChangeDocumentPackageTypeCommandArchive.PackageType {
    get {return _newPackageType ?? .default}
    set {_newPackageType = newValue}
  }
  /// Returns true if `newPackageType` has been explicitly set.
  var hasNewPackageType: Bool {return self._newPackageType != nil}
  /// Clears the value of `newPackageType`. Subsequent reads from it will return its default value.
  mutating func clearNewPackageType() {self._newPackageType = nil}

  var oldPackageType: TSK_ChangeDocumentPackageTypeCommandArchive.PackageType {
    get {return _oldPackageType ?? .default}
    set {_oldPackageType = newValue}
  }
  /// Returns true if `oldPackageType` has been explicitly set.
  var hasOldPackageType: Bool {return self._oldPackageType != nil}
  /// Clears the value of `oldPackageType`. Subsequent reads from it will return its default value.
  mutating func clearOldPackageType() {self._oldPackageType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PackageType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case `default` // = 0
    case directory // = 1
    case singleFile // = 2

    init() {
      self = .default
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .default
      case 1: self = .directory
      case 2: self = .singleFile
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .default: return 0
      case .directory: return 1
      case .singleFile: return 2
      }
    }

  }

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _newPackageType: TSK_ChangeDocumentPackageTypeCommandArchive.PackageType? = nil
  fileprivate var _oldPackageType: TSK_ChangeDocumentPackageTypeCommandArchive.PackageType? = nil
}

#if swift(>=4.2)

extension TSK_ChangeDocumentPackageTypeCommandArchive.PackageType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSK_CreateLocalStorageSnapshotCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var snapshotID: String {
    get {return _snapshotID ?? String()}
    set {_snapshotID = newValue}
  }
  /// Returns true if `snapshotID` has been explicitly set.
  var hasSnapshotID: Bool {return self._snapshotID != nil}
  /// Clears the value of `snapshotID`. Subsequent reads from it will return its default value.
  mutating func clearSnapshotID() {self._snapshotID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _snapshotID: String? = nil
}

struct TSK_BlockDiffsAtCurrentRevisionCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
}

struct TSK_RangeAddress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var addressIdentifier: [UInt64] = []

  var rangeList: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSK_Operation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: TSK_Operation.OperationType {
    get {return _type ?? .replaceRange}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var noop: Bool {
    get {return _noop ?? false}
    set {_noop = newValue}
  }
  /// Returns true if `noop` has been explicitly set.
  var hasNoop: Bool {return self._noop != nil}
  /// Clears the value of `noop`. Subsequent reads from it will return its default value.
  mutating func clearNoop() {self._noop = nil}

  var addressIdentifier: [UInt64] = []

  var insertLength: UInt64 {
    get {return _insertLength ?? 1}
    set {_insertLength = newValue}
  }
  /// Returns true if `insertLength` has been explicitly set.
  var hasInsertLength: Bool {return self._insertLength != nil}
  /// Clears the value of `insertLength`. Subsequent reads from it will return its default value.
  mutating func clearInsertLength() {self._insertLength = nil}

  var preserveLowerPriorityLocation: Bool {
    get {return _preserveLowerPriorityLocation ?? false}
    set {_preserveLowerPriorityLocation = newValue}
  }
  /// Returns true if `preserveLowerPriorityLocation` has been explicitly set.
  var hasPreserveLowerPriorityLocation: Bool {return self._preserveLowerPriorityLocation != nil}
  /// Clears the value of `preserveLowerPriorityLocation`. Subsequent reads from it will return its default value.
  mutating func clearPreserveLowerPriorityLocation() {self._preserveLowerPriorityLocation = nil}

  var rangeList: [UInt32] = []

  var transformBehavior: UInt32 {
    get {return _transformBehavior ?? 7}
    set {_transformBehavior = newValue}
  }
  /// Returns true if `transformBehavior` has been explicitly set.
  var hasTransformBehavior: Bool {return self._transformBehavior != nil}
  /// Clears the value of `transformBehavior`. Subsequent reads from it will return its default value.
  mutating func clearTransformBehavior() {self._transformBehavior = nil}

  var propertyID: UInt32 {
    get {return _propertyID ?? 0}
    set {_propertyID = newValue}
  }
  /// Returns true if `propertyID` has been explicitly set.
  var hasPropertyID: Bool {return self._propertyID != nil}
  /// Clears the value of `propertyID`. Subsequent reads from it will return its default value.
  mutating func clearPropertyID() {self._propertyID = nil}

  var fromIndex: Int32 {
    get {return _fromIndex ?? -1}
    set {_fromIndex = newValue}
  }
  /// Returns true if `fromIndex` has been explicitly set.
  var hasFromIndex: Bool {return self._fromIndex != nil}
  /// Clears the value of `fromIndex`. Subsequent reads from it will return its default value.
  mutating func clearFromIndex() {self._fromIndex = nil}

  var toIndex: Int32 {
    get {return _toIndex ?? -1}
    set {_toIndex = newValue}
  }
  /// Returns true if `toIndex` has been explicitly set.
  var hasToIndex: Bool {return self._toIndex != nil}
  /// Clears the value of `toIndex`. Subsequent reads from it will return its default value.
  mutating func clearToIndex() {self._toIndex = nil}

  var dominating: Bool {
    get {return _dominating ?? false}
    set {_dominating = newValue}
  }
  /// Returns true if `dominating` has been explicitly set.
  var hasDominating: Bool {return self._dominating != nil}
  /// Clears the value of `dominating`. Subsequent reads from it will return its default value.
  mutating func clearDominating() {self._dominating = nil}

  var objectCount: Int32 {
    get {return _objectCount ?? -1}
    set {_objectCount = newValue}
  }
  /// Returns true if `objectCount` has been explicitly set.
  var hasObjectCount: Bool {return self._objectCount != nil}
  /// Clears the value of `objectCount`. Subsequent reads from it will return its default value.
  mutating func clearObjectCount() {self._objectCount = nil}

  var objectCounterSpace: Int32 {
    get {return _objectCounterSpace ?? 0}
    set {_objectCounterSpace = newValue}
  }
  /// Returns true if `objectCounterSpace` has been explicitly set.
  var hasObjectCounterSpace: Bool {return self._objectCounterSpace != nil}
  /// Clears the value of `objectCounterSpace`. Subsequent reads from it will return its default value.
  mutating func clearObjectCounterSpace() {self._objectCounterSpace = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OperationType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case add // = 0
    case remove // = 1
    case placement // = 2
    case rearrange // = 3
    case updateID // = 4
    case updateRange // = 5
    case replaceRange // = 6

    init() {
      self = .add
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .add
      case 1: self = .remove
      case 2: self = .placement
      case 3: self = .rearrange
      case 4: self = .updateID
      case 5: self = .updateRange
      case 6: self = .replaceRange
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .add: return 0
      case .remove: return 1
      case .placement: return 2
      case .rearrange: return 3
      case .updateID: return 4
      case .updateRange: return 5
      case .replaceRange: return 6
      }
    }

  }

  init() {}

  fileprivate var _type: TSK_Operation.OperationType? = nil
  fileprivate var _noop: Bool? = nil
  fileprivate var _insertLength: UInt64? = nil
  fileprivate var _preserveLowerPriorityLocation: Bool? = nil
  fileprivate var _transformBehavior: UInt32? = nil
  fileprivate var _propertyID: UInt32? = nil
  fileprivate var _fromIndex: Int32? = nil
  fileprivate var _toIndex: Int32? = nil
  fileprivate var _dominating: Bool? = nil
  fileprivate var _objectCount: Int32? = nil
  fileprivate var _objectCounterSpace: Int32? = nil
}

#if swift(>=4.2)

extension TSK_Operation.OperationType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSK_OperationTransformer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var higherPriority: Bool {
    get {return _higherPriority ?? false}
    set {_higherPriority = newValue}
  }
  /// Returns true if `higherPriority` has been explicitly set.
  var hasHigherPriority: Bool {return self._higherPriority != nil}
  /// Clears the value of `higherPriority`. Subsequent reads from it will return its default value.
  mutating func clearHigherPriority() {self._higherPriority = nil}

  var operations: [TSK_Operation] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _higherPriority: Bool? = nil
}

struct TSK_TransformerEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sequence: UInt64 {
    get {return _sequence ?? 0}
    set {_sequence = newValue}
  }
  /// Returns true if `sequence` has been explicitly set.
  var hasSequence: Bool {return self._sequence != nil}
  /// Clears the value of `sequence`. Subsequent reads from it will return its default value.
  mutating func clearSequence() {self._sequence = nil}

  var creationTime: Double {
    get {return _creationTime ?? 0}
    set {_creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  var hasCreationTime: Bool {return self._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  mutating func clearCreationTime() {self._creationTime = nil}

  var transformer: TSK_OperationTransformer {
    get {return _transformer ?? TSK_OperationTransformer()}
    set {_transformer = newValue}
  }
  /// Returns true if `transformer` has been explicitly set.
  var hasTransformer: Bool {return self._transformer != nil}
  /// Clears the value of `transformer`. Subsequent reads from it will return its default value.
  mutating func clearTransformer() {self._transformer = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sequence: UInt64? = nil
  fileprivate var _creationTime: Double? = nil
  fileprivate var _transformer: TSK_OperationTransformer? = nil
}

struct TSK_OutgoingCommandQueueItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var command: TSP_Reference {
    get {return _command ?? TSP_Reference()}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  mutating func clearCommand() {self._command = nil}

  var serializedJsonWithoutDataBase64EncodedString: String {
    get {return _serializedJsonWithoutDataBase64EncodedString ?? String()}
    set {_serializedJsonWithoutDataBase64EncodedString = newValue}
  }
  /// Returns true if `serializedJsonWithoutDataBase64EncodedString` has been explicitly set.
  var hasSerializedJsonWithoutDataBase64EncodedString: Bool {return self._serializedJsonWithoutDataBase64EncodedString != nil}
  /// Clears the value of `serializedJsonWithoutDataBase64EncodedString`. Subsequent reads from it will return its default value.
  mutating func clearSerializedJsonWithoutDataBase64EncodedString() {self._serializedJsonWithoutDataBase64EncodedString = nil}

  var serializedJsonWithoutDataBase64EncodedData: TSP_DataReference {
    get {return _serializedJsonWithoutDataBase64EncodedData ?? TSP_DataReference()}
    set {_serializedJsonWithoutDataBase64EncodedData = newValue}
  }
  /// Returns true if `serializedJsonWithoutDataBase64EncodedData` has been explicitly set.
  var hasSerializedJsonWithoutDataBase64EncodedData: Bool {return self._serializedJsonWithoutDataBase64EncodedData != nil}
  /// Clears the value of `serializedJsonWithoutDataBase64EncodedData`. Subsequent reads from it will return its default value.
  mutating func clearSerializedJsonWithoutDataBase64EncodedData() {self._serializedJsonWithoutDataBase64EncodedData = nil}

  var uuidToDataMapEntries: [TSK_OutgoingCommandQueueItemUUIDToDataMapEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _command: TSP_Reference? = nil
  fileprivate var _serializedJsonWithoutDataBase64EncodedString: String? = nil
  fileprivate var _serializedJsonWithoutDataBase64EncodedData: TSP_DataReference? = nil
}

struct TSK_OutgoingCommandQueueItemUUIDToDataMapEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: TSP_UUID {
    get {return _uuid ?? TSP_UUID()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  var data: TSP_DataReference {
    get {return _data ?? TSP_DataReference()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _uuid: TSP_UUID? = nil
  fileprivate var _data: TSP_DataReference? = nil
}

struct TSK_CollaborationDocumentSessionState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var collaboratorIds: [String] {
    get {return _storage._collaboratorIds}
    set {_uniqueStorage()._collaboratorIds = newValue}
  }

  var rsvpCommandQueueItems: [TSP_Reference] {
    get {return _storage._rsvpCommandQueueItems}
    set {_uniqueStorage()._rsvpCommandQueueItems = newValue}
  }

  var collaboratorCursorTransformerEntries: [TSP_Reference] {
    get {return _storage._collaboratorCursorTransformerEntries}
    set {_uniqueStorage()._collaboratorCursorTransformerEntries = newValue}
  }

  var acknowledgedCommandsPendingResumeProcessDiffs: [TSP_Reference] {
    get {return _storage._acknowledgedCommandsPendingResumeProcessDiffs}
    set {_uniqueStorage()._acknowledgedCommandsPendingResumeProcessDiffs = newValue}
  }

  var unprocessedCommandsPendingResumeProcessDiffs: [TSP_Reference] {
    get {return _storage._unprocessedCommandsPendingResumeProcessDiffs}
    set {_uniqueStorage()._unprocessedCommandsPendingResumeProcessDiffs = newValue}
  }

  var commandAcknowledgementObserverEntries: [TSK_CollaborationDocumentSessionState.AcknowledgementObserverEntry] {
    get {return _storage._commandAcknowledgementObserverEntries}
    set {_uniqueStorage()._commandAcknowledgementObserverEntries = newValue}
  }

  var transformerFromUnprocessedCommandOperationsEntries: [TSP_Reference] {
    get {return _storage._transformerFromUnprocessedCommandOperationsEntries}
    set {_uniqueStorage()._transformerFromUnprocessedCommandOperationsEntries = newValue}
  }

  var mailboxRequestDocumentRevisionSequence: Int32 {
    get {return _storage._mailboxRequestDocumentRevisionSequence ?? 0}
    set {_uniqueStorage()._mailboxRequestDocumentRevisionSequence = newValue}
  }
  /// Returns true if `mailboxRequestDocumentRevisionSequence` has been explicitly set.
  var hasMailboxRequestDocumentRevisionSequence: Bool {return _storage._mailboxRequestDocumentRevisionSequence != nil}
  /// Clears the value of `mailboxRequestDocumentRevisionSequence`. Subsequent reads from it will return its default value.
  mutating func clearMailboxRequestDocumentRevisionSequence() {_uniqueStorage()._mailboxRequestDocumentRevisionSequence = nil}

  var mailboxRequestDocumentRevisionIdentifier: String {
    get {return _storage._mailboxRequestDocumentRevisionIdentifier ?? String()}
    set {_uniqueStorage()._mailboxRequestDocumentRevisionIdentifier = newValue}
  }
  /// Returns true if `mailboxRequestDocumentRevisionIdentifier` has been explicitly set.
  var hasMailboxRequestDocumentRevisionIdentifier: Bool {return _storage._mailboxRequestDocumentRevisionIdentifier != nil}
  /// Clears the value of `mailboxRequestDocumentRevisionIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearMailboxRequestDocumentRevisionIdentifier() {_uniqueStorage()._mailboxRequestDocumentRevisionIdentifier = nil}

  var lastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue: Bool {
    get {return _storage._lastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue ?? false}
    set {_uniqueStorage()._lastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue = newValue}
  }
  /// Returns true if `lastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue` has been explicitly set.
  var hasLastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue: Bool {return _storage._lastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue != nil}
  /// Clears the value of `lastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue`. Subsequent reads from it will return its default value.
  mutating func clearLastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue() {_uniqueStorage()._lastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue = nil}

  var lastCommandSendMarkerSequence: Int32 {
    get {return _storage._lastCommandSendMarkerSequence ?? 0}
    set {_uniqueStorage()._lastCommandSendMarkerSequence = newValue}
  }
  /// Returns true if `lastCommandSendMarkerSequence` has been explicitly set.
  var hasLastCommandSendMarkerSequence: Bool {return _storage._lastCommandSendMarkerSequence != nil}
  /// Clears the value of `lastCommandSendMarkerSequence`. Subsequent reads from it will return its default value.
  mutating func clearLastCommandSendMarkerSequence() {_uniqueStorage()._lastCommandSendMarkerSequence = nil}

  var lastCommandSendMarkerIdentifier: String {
    get {return _storage._lastCommandSendMarkerIdentifier ?? String()}
    set {_uniqueStorage()._lastCommandSendMarkerIdentifier = newValue}
  }
  /// Returns true if `lastCommandSendMarkerIdentifier` has been explicitly set.
  var hasLastCommandSendMarkerIdentifier: Bool {return _storage._lastCommandSendMarkerIdentifier != nil}
  /// Clears the value of `lastCommandSendMarkerIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearLastCommandSendMarkerIdentifier() {_uniqueStorage()._lastCommandSendMarkerIdentifier = nil}

  var skippedAcknowledgedCommandsPendingResumeProcessDiffs: [TSP_Reference] {
    get {return _storage._skippedAcknowledgedCommandsPendingResumeProcessDiffs}
    set {_uniqueStorage()._skippedAcknowledgedCommandsPendingResumeProcessDiffs = newValue}
  }

  var lastTooOldCommandIdentifier: TSP_UUID {
    get {return _storage._lastTooOldCommandIdentifier ?? TSP_UUID()}
    set {_uniqueStorage()._lastTooOldCommandIdentifier = newValue}
  }
  /// Returns true if `lastTooOldCommandIdentifier` has been explicitly set.
  var hasLastTooOldCommandIdentifier: Bool {return _storage._lastTooOldCommandIdentifier != nil}
  /// Clears the value of `lastTooOldCommandIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearLastTooOldCommandIdentifier() {_uniqueStorage()._lastTooOldCommandIdentifier = nil}

  var unprocessedOperationEntriesPendingResumeProcessDiffs: TSP_Reference {
    get {return _storage._unprocessedOperationEntriesPendingResumeProcessDiffs ?? TSP_Reference()}
    set {_uniqueStorage()._unprocessedOperationEntriesPendingResumeProcessDiffs = newValue}
  }
  /// Returns true if `unprocessedOperationEntriesPendingResumeProcessDiffs` has been explicitly set.
  var hasUnprocessedOperationEntriesPendingResumeProcessDiffs: Bool {return _storage._unprocessedOperationEntriesPendingResumeProcessDiffs != nil}
  /// Clears the value of `unprocessedOperationEntriesPendingResumeProcessDiffs`. Subsequent reads from it will return its default value.
  mutating func clearUnprocessedOperationEntriesPendingResumeProcessDiffs() {_uniqueStorage()._unprocessedOperationEntriesPendingResumeProcessDiffs = nil}

  var sendPendingCommandQueue: TSP_Reference {
    get {return _storage._sendPendingCommandQueue ?? TSP_Reference()}
    set {_uniqueStorage()._sendPendingCommandQueue = newValue}
  }
  /// Returns true if `sendPendingCommandQueue` has been explicitly set.
  var hasSendPendingCommandQueue: Bool {return _storage._sendPendingCommandQueue != nil}
  /// Clears the value of `sendPendingCommandQueue`. Subsequent reads from it will return its default value.
  mutating func clearSendPendingCommandQueue() {_uniqueStorage()._sendPendingCommandQueue = nil}

  var countOfSendPendingCommandQueueItemsMovedFromRsvpQueue: UInt64 {
    get {return _storage._countOfSendPendingCommandQueueItemsMovedFromRsvpQueue ?? 0}
    set {_uniqueStorage()._countOfSendPendingCommandQueueItemsMovedFromRsvpQueue = newValue}
  }
  /// Returns true if `countOfSendPendingCommandQueueItemsMovedFromRsvpQueue` has been explicitly set.
  var hasCountOfSendPendingCommandQueueItemsMovedFromRsvpQueue: Bool {return _storage._countOfSendPendingCommandQueueItemsMovedFromRsvpQueue != nil}
  /// Clears the value of `countOfSendPendingCommandQueueItemsMovedFromRsvpQueue`. Subsequent reads from it will return its default value.
  mutating func clearCountOfSendPendingCommandQueueItemsMovedFromRsvpQueue() {_uniqueStorage()._countOfSendPendingCommandQueueItemsMovedFromRsvpQueue = nil}

  var lastEnqueuedDocumentLoadCommandIdentifier: TSP_UUID {
    get {return _storage._lastEnqueuedDocumentLoadCommandIdentifier ?? TSP_UUID()}
    set {_uniqueStorage()._lastEnqueuedDocumentLoadCommandIdentifier = newValue}
  }
  /// Returns true if `lastEnqueuedDocumentLoadCommandIdentifier` has been explicitly set.
  var hasLastEnqueuedDocumentLoadCommandIdentifier: Bool {return _storage._lastEnqueuedDocumentLoadCommandIdentifier != nil}
  /// Clears the value of `lastEnqueuedDocumentLoadCommandIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearLastEnqueuedDocumentLoadCommandIdentifier() {_uniqueStorage()._lastEnqueuedDocumentLoadCommandIdentifier = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct AcknowledgementObserverEntry {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var commandIdentifier: TSP_UUID {
      get {return _commandIdentifier ?? TSP_UUID()}
      set {_commandIdentifier = newValue}
    }
    /// Returns true if `commandIdentifier` has been explicitly set.
    var hasCommandIdentifier: Bool {return self._commandIdentifier != nil}
    /// Clears the value of `commandIdentifier`. Subsequent reads from it will return its default value.
    mutating func clearCommandIdentifier() {self._commandIdentifier = nil}

    var acknowledgementObservers: [TSP_Reference] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _commandIdentifier: TSP_UUID? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSK_NativeContentDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appName: String {
    get {return _appName ?? String()}
    set {_appName = newValue}
  }
  /// Returns true if `appName` has been explicitly set.
  var hasAppName: Bool {return self._appName != nil}
  /// Clears the value of `appName`. Subsequent reads from it will return its default value.
  mutating func clearAppName() {self._appName = nil}

  var appVersion: String {
    get {return _appVersion ?? String()}
    set {_appVersion = newValue}
  }
  /// Returns true if `appVersion` has been explicitly set.
  var hasAppVersion: Bool {return self._appVersion != nil}
  /// Clears the value of `appVersion`. Subsequent reads from it will return its default value.
  mutating func clearAppVersion() {self._appVersion = nil}

  var documentID: String {
    get {return _documentID ?? String()}
    set {_documentID = newValue}
  }
  /// Returns true if `documentID` has been explicitly set.
  var hasDocumentID: Bool {return self._documentID != nil}
  /// Clears the value of `documentID`. Subsequent reads from it will return its default value.
  mutating func clearDocumentID() {self._documentID = nil}

  var drawableDescriptions: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _appName: String? = nil
  fileprivate var _appVersion: String? = nil
  fileprivate var _documentID: String? = nil
}

struct TSK_StructuredTextImportSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: TSK_StructuredTextImportType {
    get {return _type ?? .importTypeUnknown}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var startingRow: Int32 {
    get {return _startingRow ?? 0}
    set {_startingRow = newValue}
  }
  /// Returns true if `startingRow` has been explicitly set.
  var hasStartingRow: Bool {return self._startingRow != nil}
  /// Clears the value of `startingRow`. Subsequent reads from it will return its default value.
  mutating func clearStartingRow() {self._startingRow = nil}

  var decimalSeparators: [String] = []

  var thousandsSeparators: [String] = []

  var transposeRowsAndColumns: Bool {
    get {return _transposeRowsAndColumns ?? false}
    set {_transposeRowsAndColumns = newValue}
  }
  /// Returns true if `transposeRowsAndColumns` has been explicitly set.
  var hasTransposeRowsAndColumns: Bool {return self._transposeRowsAndColumns != nil}
  /// Clears the value of `transposeRowsAndColumns`. Subsequent reads from it will return its default value.
  mutating func clearTransposeRowsAndColumns() {self._transposeRowsAndColumns = nil}

  var delimiters: [String] = []

  var textQualifiers: [String] = []

  var collapseConsecutive: Bool {
    get {return _collapseConsecutive ?? false}
    set {_collapseConsecutive = newValue}
  }
  /// Returns true if `collapseConsecutive` has been explicitly set.
  var hasCollapseConsecutive: Bool {return self._collapseConsecutive != nil}
  /// Clears the value of `collapseConsecutive`. Subsequent reads from it will return its default value.
  mutating func clearCollapseConsecutive() {self._collapseConsecutive = nil}

  var columnOffsets: TSP_IndexSet {
    get {return _columnOffsets ?? TSP_IndexSet()}
    set {_columnOffsets = newValue}
  }
  /// Returns true if `columnOffsets` has been explicitly set.
  var hasColumnOffsets: Bool {return self._columnOffsets != nil}
  /// Clears the value of `columnOffsets`. Subsequent reads from it will return its default value.
  mutating func clearColumnOffsets() {self._columnOffsets = nil}

  var automaticDelimiters: Bool {
    get {return _automaticDelimiters ?? false}
    set {_automaticDelimiters = newValue}
  }
  /// Returns true if `automaticDelimiters` has been explicitly set.
  var hasAutomaticDelimiters: Bool {return self._automaticDelimiters != nil}
  /// Clears the value of `automaticDelimiters`. Subsequent reads from it will return its default value.
  mutating func clearAutomaticDelimiters() {self._automaticDelimiters = nil}

  var automaticOffsets: Bool {
    get {return _automaticOffsets ?? false}
    set {_automaticOffsets = newValue}
  }
  /// Returns true if `automaticOffsets` has been explicitly set.
  var hasAutomaticOffsets: Bool {return self._automaticOffsets != nil}
  /// Clears the value of `automaticOffsets`. Subsequent reads from it will return its default value.
  mutating func clearAutomaticOffsets() {self._automaticOffsets = nil}

  var sourceEncoding: UInt64 {
    get {return _sourceEncoding ?? 0}
    set {_sourceEncoding = newValue}
  }
  /// Returns true if `sourceEncoding` has been explicitly set.
  var hasSourceEncoding: Bool {return self._sourceEncoding != nil}
  /// Clears the value of `sourceEncoding`. Subsequent reads from it will return its default value.
  mutating func clearSourceEncoding() {self._sourceEncoding = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _type: TSK_StructuredTextImportType? = nil
  fileprivate var _startingRow: Int32? = nil
  fileprivate var _transposeRowsAndColumns: Bool? = nil
  fileprivate var _collapseConsecutive: Bool? = nil
  fileprivate var _columnOffsets: TSP_IndexSet? = nil
  fileprivate var _automaticDelimiters: Bool? = nil
  fileprivate var _automaticOffsets: Bool? = nil
  fileprivate var _sourceEncoding: UInt64? = nil
}

struct TSK_OperationStorageCommandOperationsEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var commandIdentifierSameAsRevisionIdentifier: Bool {
    get {return _commandIdentifierSameAsRevisionIdentifier ?? false}
    set {_commandIdentifierSameAsRevisionIdentifier = newValue}
  }
  /// Returns true if `commandIdentifierSameAsRevisionIdentifier` has been explicitly set.
  var hasCommandIdentifierSameAsRevisionIdentifier: Bool {return self._commandIdentifierSameAsRevisionIdentifier != nil}
  /// Clears the value of `commandIdentifierSameAsRevisionIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCommandIdentifierSameAsRevisionIdentifier() {self._commandIdentifierSameAsRevisionIdentifier = nil}

  var commandIdentifier: [UInt64] = []

  var operations: [TSK_Operation] = []

  var serverOriginated: Bool {
    get {return _serverOriginated ?? false}
    set {_serverOriginated = newValue}
  }
  /// Returns true if `serverOriginated` has been explicitly set.
  var hasServerOriginated: Bool {return self._serverOriginated != nil}
  /// Clears the value of `serverOriginated`. Subsequent reads from it will return its default value.
  mutating func clearServerOriginated() {self._serverOriginated = nil}

  var coalescedCommandEntryCount: UInt64 {
    get {return _coalescedCommandEntryCount ?? 0}
    set {_coalescedCommandEntryCount = newValue}
  }
  /// Returns true if `coalescedCommandEntryCount` has been explicitly set.
  var hasCoalescedCommandEntryCount: Bool {return self._coalescedCommandEntryCount != nil}
  /// Clears the value of `coalescedCommandEntryCount`. Subsequent reads from it will return its default value.
  mutating func clearCoalescedCommandEntryCount() {self._coalescedCommandEntryCount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _commandIdentifierSameAsRevisionIdentifier: Bool? = nil
  fileprivate var _serverOriginated: Bool? = nil
  fileprivate var _coalescedCommandEntryCount: UInt64? = nil
}

struct TSK_OperationStorageEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var documentRevisionIdentifier: [UInt64] = []

  var documentRevisionSequenceDelta: Int32 {
    get {return _documentRevisionSequenceDelta ?? 0}
    set {_documentRevisionSequenceDelta = newValue}
  }
  /// Returns true if `documentRevisionSequenceDelta` has been explicitly set.
  var hasDocumentRevisionSequenceDelta: Bool {return self._documentRevisionSequenceDelta != nil}
  /// Clears the value of `documentRevisionSequenceDelta`. Subsequent reads from it will return its default value.
  mutating func clearDocumentRevisionSequenceDelta() {self._documentRevisionSequenceDelta = nil}

  var commandOperationEntries: [TSK_OperationStorageCommandOperationsEntry] = []

  var firstEntryCreationTime: Double {
    get {return _firstEntryCreationTime ?? 0}
    set {_firstEntryCreationTime = newValue}
  }
  /// Returns true if `firstEntryCreationTime` has been explicitly set.
  var hasFirstEntryCreationTime: Bool {return self._firstEntryCreationTime != nil}
  /// Clears the value of `firstEntryCreationTime`. Subsequent reads from it will return its default value.
  mutating func clearFirstEntryCreationTime() {self._firstEntryCreationTime = nil}

  var creationTimeDiffBucket: Int32 {
    get {return _creationTimeDiffBucket ?? 0}
    set {_creationTimeDiffBucket = newValue}
  }
  /// Returns true if `creationTimeDiffBucket` has been explicitly set.
  var hasCreationTimeDiffBucket: Bool {return self._creationTimeDiffBucket != nil}
  /// Clears the value of `creationTimeDiffBucket`. Subsequent reads from it will return its default value.
  mutating func clearCreationTimeDiffBucket() {self._creationTimeDiffBucket = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _documentRevisionSequenceDelta: Int32? = nil
  fileprivate var _firstEntryCreationTime: Double? = nil
  fileprivate var _creationTimeDiffBucket: Int32? = nil
}

struct TSK_OperationStorageEntryArray {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var largeArray: TSP_LargeArray {
    get {return _largeArray ?? TSP_LargeArray()}
    set {_largeArray = newValue}
  }
  /// Returns true if `largeArray` has been explicitly set.
  var hasLargeArray: Bool {return self._largeArray != nil}
  /// Clears the value of `largeArray`. Subsequent reads from it will return its default value.
  mutating func clearLargeArray() {self._largeArray = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _largeArray: TSP_LargeArray? = nil
}

struct TSK_OperationStorageEntryArraySegment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var largeArraySegment: TSP_LargeArraySegment {
    get {return _largeArraySegment ?? TSP_LargeArraySegment()}
    set {_largeArraySegment = newValue}
  }
  /// Returns true if `largeArraySegment` has been explicitly set.
  var hasLargeArraySegment: Bool {return self._largeArraySegment != nil}
  /// Clears the value of `largeArraySegment`. Subsequent reads from it will return its default value.
  mutating func clearLargeArraySegment() {self._largeArraySegment = nil}

  var elements: [TSK_OperationStorageEntry] = []

  var lastDocumentRevisionSequenceBeforeSegment: Int32 {
    get {return _lastDocumentRevisionSequenceBeforeSegment ?? 0}
    set {_lastDocumentRevisionSequenceBeforeSegment = newValue}
  }
  /// Returns true if `lastDocumentRevisionSequenceBeforeSegment` has been explicitly set.
  var hasLastDocumentRevisionSequenceBeforeSegment: Bool {return self._lastDocumentRevisionSequenceBeforeSegment != nil}
  /// Clears the value of `lastDocumentRevisionSequenceBeforeSegment`. Subsequent reads from it will return its default value.
  mutating func clearLastDocumentRevisionSequenceBeforeSegment() {self._lastDocumentRevisionSequenceBeforeSegment = nil}

  var lastDocumentRevisionSequence: Int32 {
    get {return _lastDocumentRevisionSequence ?? 0}
    set {_lastDocumentRevisionSequence = newValue}
  }
  /// Returns true if `lastDocumentRevisionSequence` has been explicitly set.
  var hasLastDocumentRevisionSequence: Bool {return self._lastDocumentRevisionSequence != nil}
  /// Clears the value of `lastDocumentRevisionSequence`. Subsequent reads from it will return its default value.
  mutating func clearLastDocumentRevisionSequence() {self._lastDocumentRevisionSequence = nil}

  var segmentFirstEntryCreationTime: Double {
    get {return _segmentFirstEntryCreationTime ?? 0}
    set {_segmentFirstEntryCreationTime = newValue}
  }
  /// Returns true if `segmentFirstEntryCreationTime` has been explicitly set.
  var hasSegmentFirstEntryCreationTime: Bool {return self._segmentFirstEntryCreationTime != nil}
  /// Clears the value of `segmentFirstEntryCreationTime`. Subsequent reads from it will return its default value.
  mutating func clearSegmentFirstEntryCreationTime() {self._segmentFirstEntryCreationTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _largeArraySegment: TSP_LargeArraySegment? = nil
  fileprivate var _lastDocumentRevisionSequenceBeforeSegment: Int32? = nil
  fileprivate var _lastDocumentRevisionSequence: Int32? = nil
  fileprivate var _segmentFirstEntryCreationTime: Double? = nil
}

struct TSK_OperationStorage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entries: TSP_Reference {
    get {return _entries ?? TSP_Reference()}
    set {_entries = newValue}
  }
  /// Returns true if `entries` has been explicitly set.
  var hasEntries: Bool {return self._entries != nil}
  /// Clears the value of `entries`. Subsequent reads from it will return its default value.
  mutating func clearEntries() {self._entries = nil}

  var operationCount: UInt64 {
    get {return _operationCount ?? 0}
    set {_operationCount = newValue}
  }
  /// Returns true if `operationCount` has been explicitly set.
  var hasOperationCount: Bool {return self._operationCount != nil}
  /// Clears the value of `operationCount`. Subsequent reads from it will return its default value.
  mutating func clearOperationCount() {self._operationCount = nil}

  var lastDocumentRevisionSequence: Int32 {
    get {return _lastDocumentRevisionSequence ?? 0}
    set {_lastDocumentRevisionSequence = newValue}
  }
  /// Returns true if `lastDocumentRevisionSequence` has been explicitly set.
  var hasLastDocumentRevisionSequence: Bool {return self._lastDocumentRevisionSequence != nil}
  /// Clears the value of `lastDocumentRevisionSequence`. Subsequent reads from it will return its default value.
  mutating func clearLastDocumentRevisionSequence() {self._lastDocumentRevisionSequence = nil}

  var lastDocumentRevisionIdentifier: [UInt64] = []

  var lastUnskippableDocumentRevisionBeforeEntriesSequence: Int32 {
    get {return _lastUnskippableDocumentRevisionBeforeEntriesSequence ?? 0}
    set {_lastUnskippableDocumentRevisionBeforeEntriesSequence = newValue}
  }
  /// Returns true if `lastUnskippableDocumentRevisionBeforeEntriesSequence` has been explicitly set.
  var hasLastUnskippableDocumentRevisionBeforeEntriesSequence: Bool {return self._lastUnskippableDocumentRevisionBeforeEntriesSequence != nil}
  /// Clears the value of `lastUnskippableDocumentRevisionBeforeEntriesSequence`. Subsequent reads from it will return its default value.
  mutating func clearLastUnskippableDocumentRevisionBeforeEntriesSequence() {self._lastUnskippableDocumentRevisionBeforeEntriesSequence = nil}

  var lastUnskippableDocumentRevisionBeforeEntriesIdentifier: [UInt64] = []

  var lastUnskippableDocumentRevisionInEntriesSequence: Int32 {
    get {return _lastUnskippableDocumentRevisionInEntriesSequence ?? 0}
    set {_lastUnskippableDocumentRevisionInEntriesSequence = newValue}
  }
  /// Returns true if `lastUnskippableDocumentRevisionInEntriesSequence` has been explicitly set.
  var hasLastUnskippableDocumentRevisionInEntriesSequence: Bool {return self._lastUnskippableDocumentRevisionInEntriesSequence != nil}
  /// Clears the value of `lastUnskippableDocumentRevisionInEntriesSequence`. Subsequent reads from it will return its default value.
  mutating func clearLastUnskippableDocumentRevisionInEntriesSequence() {self._lastUnskippableDocumentRevisionInEntriesSequence = nil}

  var lastUnskippableDocumentRevisionInEntriesIdentifier: [UInt64] = []

  var daysWithAnEntry: TSP_IndexSet {
    get {return _daysWithAnEntry ?? TSP_IndexSet()}
    set {_daysWithAnEntry = newValue}
  }
  /// Returns true if `daysWithAnEntry` has been explicitly set.
  var hasDaysWithAnEntry: Bool {return self._daysWithAnEntry != nil}
  /// Clears the value of `daysWithAnEntry`. Subsequent reads from it will return its default value.
  mutating func clearDaysWithAnEntry() {self._daysWithAnEntry = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _entries: TSP_Reference? = nil
  fileprivate var _operationCount: UInt64? = nil
  fileprivate var _lastDocumentRevisionSequence: Int32? = nil
  fileprivate var _lastUnskippableDocumentRevisionBeforeEntriesSequence: Int32? = nil
  fileprivate var _lastUnskippableDocumentRevisionInEntriesSequence: Int32? = nil
  fileprivate var _daysWithAnEntry: TSP_IndexSet? = nil
}

struct TSK_OutgoingCommandQueue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var largeObjectArray: TSP_LargeObjectArray {
    get {return _largeObjectArray ?? TSP_LargeObjectArray()}
    set {_largeObjectArray = newValue}
  }
  /// Returns true if `largeObjectArray` has been explicitly set.
  var hasLargeObjectArray: Bool {return self._largeObjectArray != nil}
  /// Clears the value of `largeObjectArray`. Subsequent reads from it will return its default value.
  mutating func clearLargeObjectArray() {self._largeObjectArray = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _largeObjectArray: TSP_LargeObjectArray? = nil
}

struct TSK_OutgoingCommandQueueSegment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var largeObjectArraySegment: TSP_LargeObjectArraySegment {
    get {return _largeObjectArraySegment ?? TSP_LargeObjectArraySegment()}
    set {_largeObjectArraySegment = newValue}
  }
  /// Returns true if `largeObjectArraySegment` has been explicitly set.
  var hasLargeObjectArraySegment: Bool {return self._largeObjectArraySegment != nil}
  /// Clears the value of `largeObjectArraySegment`. Subsequent reads from it will return its default value.
  mutating func clearLargeObjectArraySegment() {self._largeObjectArraySegment = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _largeObjectArraySegment: TSP_LargeObjectArraySegment? = nil
}

struct TSK_DataReferenceRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var addedContainerUuidToReferencedDataPairs: [TSK_DataReferenceRecord.ContainerUUIDToReferencedDataPair] = []

  var removedContainerUuidToReferencedDataPairs: [TSK_DataReferenceRecord.ContainerUUIDToReferencedDataPair] = []

  var unboundedReferencedDatas: [TSP_DataReference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct ContainerUUIDToReferencedDataPair {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var containerUuid: TSP_UUID {
      get {return _containerUuid ?? TSP_UUID()}
      set {_containerUuid = newValue}
    }
    /// Returns true if `containerUuid` has been explicitly set.
    var hasContainerUuid: Bool {return self._containerUuid != nil}
    /// Clears the value of `containerUuid`. Subsequent reads from it will return its default value.
    mutating func clearContainerUuid() {self._containerUuid = nil}

    var referencedData: TSP_DataReference {
      get {return _referencedData ?? TSP_DataReference()}
      set {_referencedData = newValue}
    }
    /// Returns true if `referencedData` has been explicitly set.
    var hasReferencedData: Bool {return self._referencedData != nil}
    /// Clears the value of `referencedData`. Subsequent reads from it will return its default value.
    mutating func clearReferencedData() {self._referencedData = nil}

    var referenceCount: UInt32 {
      get {return _referenceCount ?? 0}
      set {_referenceCount = newValue}
    }
    /// Returns true if `referenceCount` has been explicitly set.
    var hasReferenceCount: Bool {return self._referenceCount != nil}
    /// Clears the value of `referenceCount`. Subsequent reads from it will return its default value.
    mutating func clearReferenceCount() {self._referenceCount = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _containerUuid: TSP_UUID? = nil
    fileprivate var _referencedData: TSP_DataReference? = nil
    fileprivate var _referenceCount: UInt32? = nil
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TSK"

extension TSK_StructuredTextImportType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ImportType_UNKNOWN"),
    1: .same(proto: "ImportType_DELIMITED"),
    2: .same(proto: "ImportType_FIXEDWIDTH"),
  ]
}

extension TSK_TreeNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TreeNode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "children"),
    3: .same(proto: "object"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.children) {return false}
    if let v = self._object, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.children)
      case 3: try decoder.decodeSingularMessageField(value: &self._object)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.children.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.children, fieldNumber: 2)
    }
    if let v = self._object {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_TreeNode, rhs: TSK_TreeNode) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs.children != rhs.children {return false}
    if lhs._object != rhs._object {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_CommandHistory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandHistory"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "undo_count"),
    2: .same(proto: "commands"),
    3: .standard(proto: "marked_redo_commands"),
    4: .standard(proto: "pending_preflight_command"),
    5: .standard(proto: "selection_behavior_entries"),
    10: .standard(proto: "fixed_radar_13365177"),
  ]

  public var isInitialized: Bool {
    if self._undoCount == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.commands) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.markedRedoCommands) {return false}
    if let v = self._pendingPreflightCommand, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.selectionBehaviorEntries) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._undoCount)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.commands)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.markedRedoCommands)
      case 4: try decoder.decodeSingularMessageField(value: &self._pendingPreflightCommand)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.selectionBehaviorEntries)
      case 10: try decoder.decodeSingularBoolField(value: &self._fixedRadar13365177)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._undoCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if !self.commands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.commands, fieldNumber: 2)
    }
    if !self.markedRedoCommands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.markedRedoCommands, fieldNumber: 3)
    }
    if let v = self._pendingPreflightCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.selectionBehaviorEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.selectionBehaviorEntries, fieldNumber: 5)
    }
    if let v = self._fixedRadar13365177 {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_CommandHistory, rhs: TSK_CommandHistory) -> Bool {
    if lhs._undoCount != rhs._undoCount {return false}
    if lhs.commands != rhs.commands {return false}
    if lhs.markedRedoCommands != rhs.markedRedoCommands {return false}
    if lhs._pendingPreflightCommand != rhs._pendingPreflightCommand {return false}
    if lhs.selectionBehaviorEntries != rhs.selectionBehaviorEntries {return false}
    if lhs._fixedRadar13365177 != rhs._fixedRadar13365177 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_CommandHistory.SelectionBehaviorEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSK_CommandHistory.protoMessageName + ".SelectionBehaviorEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
    2: .standard(proto: "command_selection_behavior"),
  ]

  public var isInitialized: Bool {
    if self._command == nil {return false}
    if self._commandSelectionBehavior == nil {return false}
    if let v = self._command, !v.isInitialized {return false}
    if let v = self._commandSelectionBehavior, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._command)
      case 2: try decoder.decodeSingularMessageField(value: &self._commandSelectionBehavior)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._commandSelectionBehavior {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_CommandHistory.SelectionBehaviorEntry, rhs: TSK_CommandHistory.SelectionBehaviorEntry) -> Bool {
    if lhs._command != rhs._command {return false}
    if lhs._commandSelectionBehavior != rhs._commandSelectionBehavior {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_CollaborationCommandHistory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CollaborationCommandHistory"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "undo_items"),
    2: .standard(proto: "redo_items"),
    3: .standard(proto: "local_identifier"),
    4: .standard(proto: "undo_transformer_entries"),
    5: .standard(proto: "redo_transformer_entries"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.undoItems) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.redoItems) {return false}
    if let v = self._localIdentifier, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.undoTransformerEntries) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.redoTransformerEntries) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.undoItems)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.redoItems)
      case 3: try decoder.decodeSingularMessageField(value: &self._localIdentifier)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.undoTransformerEntries)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.redoTransformerEntries)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.undoItems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.undoItems, fieldNumber: 1)
    }
    if !self.redoItems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.redoItems, fieldNumber: 2)
    }
    if let v = self._localIdentifier {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.undoTransformerEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.undoTransformerEntries, fieldNumber: 4)
    }
    if !self.redoTransformerEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.redoTransformerEntries, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_CollaborationCommandHistory, rhs: TSK_CollaborationCommandHistory) -> Bool {
    if lhs.undoItems != rhs.undoItems {return false}
    if lhs.redoItems != rhs.redoItems {return false}
    if lhs._localIdentifier != rhs._localIdentifier {return false}
    if lhs.undoTransformerEntries != rhs.undoTransformerEntries {return false}
    if lhs.redoTransformerEntries != rhs.redoTransformerEntries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_CollaborationCommandHistoryItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CollaborationCommandHistoryItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
    2: .standard(proto: "action_string"),
    3: .standard(proto: "selection_behavior"),
    4: .standard(proto: "coalescing_group"),
    5: .standard(proto: "revision_sequence"),
  ]

  public var isInitialized: Bool {
    if let v = self._command, !v.isInitialized {return false}
    if let v = self._selectionBehavior, !v.isInitialized {return false}
    if let v = self._coalescingGroup, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._command)
      case 2: try decoder.decodeSingularStringField(value: &self._actionString)
      case 3: try decoder.decodeSingularMessageField(value: &self._selectionBehavior)
      case 4: try decoder.decodeSingularMessageField(value: &self._coalescingGroup)
      case 5: try decoder.decodeSingularUInt64Field(value: &self._revisionSequence)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._actionString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._selectionBehavior {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._coalescingGroup {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._revisionSequence {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_CollaborationCommandHistoryItem, rhs: TSK_CollaborationCommandHistoryItem) -> Bool {
    if lhs._command != rhs._command {return false}
    if lhs._actionString != rhs._actionString {return false}
    if lhs._selectionBehavior != rhs._selectionBehavior {return false}
    if lhs._coalescingGroup != rhs._coalescingGroup {return false}
    if lhs._revisionSequence != rhs._revisionSequence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_CollaborationCommandHistoryCoalescingGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CollaborationCommandHistoryCoalescingGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nodes"),
    2: .standard(proto: "did_coalesce_all_commands"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.nodes) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.nodes)
      case 2: try decoder.decodeSingularBoolField(value: &self._didCoalesceAllCommands)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nodes, fieldNumber: 1)
    }
    if let v = self._didCoalesceAllCommands {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_CollaborationCommandHistoryCoalescingGroup, rhs: TSK_CollaborationCommandHistoryCoalescingGroup) -> Bool {
    if lhs.nodes != rhs.nodes {return false}
    if lhs._didCoalesceAllCommands != rhs._didCoalesceAllCommands {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_CollaborationCommandHistoryCoalescingGroupNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CollaborationCommandHistoryCoalescingGroupNode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
  ]

  public var isInitialized: Bool {
    if let v = self._command, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._command)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_CollaborationCommandHistoryCoalescingGroupNode, rhs: TSK_CollaborationCommandHistoryCoalescingGroupNode) -> Bool {
    if lhs._command != rhs._command {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "coalescing_group"),
    2: .same(proto: "node"),
  ]

  public var isInitialized: Bool {
    if let v = self._coalescingGroup, !v.isInitialized {return false}
    if let v = self._node, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._coalescingGroup)
      case 2: try decoder.decodeSingularMessageField(value: &self._node)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._coalescingGroup {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._node {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver, rhs: TSK_CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver) -> Bool {
    if lhs._coalescingGroup != rhs._coalescingGroup {return false}
    if lhs._node != rhs._node {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_DocumentArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DocumentArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .standard(proto: "locale_identifier"),
    7: .standard(proto: "annotation_author_storage"),
    8: .standard(proto: "activity_log_entries"),
    9: .standard(proto: "creation_locale_identifier"),
    10: .standard(proto: "prevent_image_conversion_on_open"),
    11: .standard(proto: "has_floating_locale"),
    12: .standard(proto: "has_user_defined_locale"),
    14: .standard(proto: "collaboration_operation_history"),
    15: .standard(proto: "should_measure_negatively_tracked_text_correctly"),
    16: .standard(proto: "use_optimized_text_vertical_alignment"),
    17: .standard(proto: "formatting_symbols"),
  ]

  public var isInitialized: Bool {
    if let v = self._annotationAuthorStorage, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.activityLogEntries) {return false}
    if let v = self._collaborationOperationHistory, !v.isInitialized {return false}
    if let v = self._formattingSymbols, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 4: try decoder.decodeSingularStringField(value: &self._localeIdentifier)
      case 7: try decoder.decodeSingularMessageField(value: &self._annotationAuthorStorage)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.activityLogEntries)
      case 9: try decoder.decodeSingularStringField(value: &self._creationLocaleIdentifier)
      case 10: try decoder.decodeSingularBoolField(value: &self._preventImageConversionOnOpen)
      case 11: try decoder.decodeSingularBoolField(value: &self._hasFloatingLocale_p)
      case 12: try decoder.decodeSingularBoolField(value: &self._hasUserDefinedLocale_p)
      case 14: try decoder.decodeSingularMessageField(value: &self._collaborationOperationHistory)
      case 15: try decoder.decodeSingularBoolField(value: &self._shouldMeasureNegativelyTrackedTextCorrectly)
      case 16: try decoder.decodeSingularBoolField(value: &self._useOptimizedTextVerticalAlignment)
      case 17: try decoder.decodeSingularMessageField(value: &self._formattingSymbols)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._localeIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._annotationAuthorStorage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if !self.activityLogEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.activityLogEntries, fieldNumber: 8)
    }
    if let v = self._creationLocaleIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }
    if let v = self._preventImageConversionOnOpen {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    }
    if let v = self._hasFloatingLocale_p {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    }
    if let v = self._hasUserDefinedLocale_p {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
    }
    if let v = self._collaborationOperationHistory {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }
    if let v = self._shouldMeasureNegativelyTrackedTextCorrectly {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
    }
    if let v = self._useOptimizedTextVerticalAlignment {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
    }
    if let v = self._formattingSymbols {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_DocumentArchive, rhs: TSK_DocumentArchive) -> Bool {
    if lhs._localeIdentifier != rhs._localeIdentifier {return false}
    if lhs._annotationAuthorStorage != rhs._annotationAuthorStorage {return false}
    if lhs.activityLogEntries != rhs.activityLogEntries {return false}
    if lhs._creationLocaleIdentifier != rhs._creationLocaleIdentifier {return false}
    if lhs._preventImageConversionOnOpen != rhs._preventImageConversionOnOpen {return false}
    if lhs._hasFloatingLocale_p != rhs._hasFloatingLocale_p {return false}
    if lhs._hasUserDefinedLocale_p != rhs._hasUserDefinedLocale_p {return false}
    if lhs._collaborationOperationHistory != rhs._collaborationOperationHistory {return false}
    if lhs._shouldMeasureNegativelyTrackedTextCorrectly != rhs._shouldMeasureNegativelyTrackedTextCorrectly {return false}
    if lhs._useOptimizedTextVerticalAlignment != rhs._useOptimizedTextVerticalAlignment {return false}
    if lhs._formattingSymbols != rhs._formattingSymbols {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_FormattingSymbolsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FormattingSymbolsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "calendar"),
    3: .standard(proto: "numbering_system"),
    4: .same(proto: "months"),
    5: .standard(proto: "standalone_months"),
    6: .standard(proto: "short_months"),
    7: .standard(proto: "standalone_short_months"),
    8: .same(proto: "weekdays"),
    9: .standard(proto: "standalone_weekdays"),
    10: .standard(proto: "short_weekdays"),
    11: .standard(proto: "standalone_short_weekdays"),
    12: .standard(proto: "am_symbol"),
    13: .standard(proto: "pm_symbol"),
    14: .standard(proto: "tiny_months"),
    15: .standard(proto: "standalone_tiny_months"),
    16: .standard(proto: "tiny_weekdays"),
    17: .standard(proto: "standalone_tiny_weekdays"),
    18: .same(proto: "quarters"),
    19: .standard(proto: "standalone_quarters"),
    20: .standard(proto: "short_quarters"),
    21: .standard(proto: "standalone_short_quarters"),
    22: .same(proto: "eras"),
    23: .standard(proto: "long_eras"),
    24: .standard(proto: "short_date_pattern"),
    25: .standard(proto: "medium_date_pattern"),
    26: .standard(proto: "long_date_pattern"),
    27: .standard(proto: "full_date_pattern"),
    28: .standard(proto: "short_time_pattern"),
    29: .standard(proto: "medium_time_pattern"),
    30: .standard(proto: "long_time_pattern"),
    31: .standard(proto: "full_time_pattern"),
    32: .standard(proto: "decimal_separator"),
    33: .standard(proto: "grouping_separator"),
    34: .standard(proto: "currency_decimal_separator"),
    35: .standard(proto: "currency_grouping_separator"),
    36: .standard(proto: "plus_sign"),
    37: .standard(proto: "minus_sign"),
    38: .standard(proto: "exponential_symbol"),
    39: .standard(proto: "percent_symbol"),
    40: .standard(proto: "per_mille_symbol"),
    41: .standard(proto: "infinity_symbol"),
    42: .standard(proto: "nan_symbol"),
    43: .standard(proto: "decimal_pattern"),
    44: .standard(proto: "scientific_pattern"),
    45: .standard(proto: "percent_pattern"),
    46: .standard(proto: "currency_pattern"),
    47: .standard(proto: "currency_code"),
    48: .standard(proto: "currency_symbols"),
  ]

  fileprivate class _StorageClass {
    var _version: String? = nil
    var _calendar: String? = nil
    var _numberingSystem: String? = nil
    var _months: [String] = []
    var _standaloneMonths: [String] = []
    var _shortMonths: [String] = []
    var _standaloneShortMonths: [String] = []
    var _weekdays: [String] = []
    var _standaloneWeekdays: [String] = []
    var _shortWeekdays: [String] = []
    var _standaloneShortWeekdays: [String] = []
    var _amSymbol: String? = nil
    var _pmSymbol: String? = nil
    var _tinyMonths: [String] = []
    var _standaloneTinyMonths: [String] = []
    var _tinyWeekdays: [String] = []
    var _standaloneTinyWeekdays: [String] = []
    var _quarters: [String] = []
    var _standaloneQuarters: [String] = []
    var _shortQuarters: [String] = []
    var _standaloneShortQuarters: [String] = []
    var _eras: [String] = []
    var _longEras: [String] = []
    var _shortDatePattern: String? = nil
    var _mediumDatePattern: String? = nil
    var _longDatePattern: String? = nil
    var _fullDatePattern: String? = nil
    var _shortTimePattern: String? = nil
    var _mediumTimePattern: String? = nil
    var _longTimePattern: String? = nil
    var _fullTimePattern: String? = nil
    var _decimalSeparator: String? = nil
    var _groupingSeparator: String? = nil
    var _currencyDecimalSeparator: String? = nil
    var _currencyGroupingSeparator: String? = nil
    var _plusSign: String? = nil
    var _minusSign: String? = nil
    var _exponentialSymbol: String? = nil
    var _percentSymbol: String? = nil
    var _perMilleSymbol: String? = nil
    var _infinitySymbol: String? = nil
    var _nanSymbol: String? = nil
    var _decimalPattern: String? = nil
    var _scientificPattern: String? = nil
    var _percentPattern: String? = nil
    var _currencyPattern: String? = nil
    var _currencyCode: String? = nil
    var _currencySymbols: [TSK_FormattingSymbolsArchive.CurrencySymbol] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _version = source._version
      _calendar = source._calendar
      _numberingSystem = source._numberingSystem
      _months = source._months
      _standaloneMonths = source._standaloneMonths
      _shortMonths = source._shortMonths
      _standaloneShortMonths = source._standaloneShortMonths
      _weekdays = source._weekdays
      _standaloneWeekdays = source._standaloneWeekdays
      _shortWeekdays = source._shortWeekdays
      _standaloneShortWeekdays = source._standaloneShortWeekdays
      _amSymbol = source._amSymbol
      _pmSymbol = source._pmSymbol
      _tinyMonths = source._tinyMonths
      _standaloneTinyMonths = source._standaloneTinyMonths
      _tinyWeekdays = source._tinyWeekdays
      _standaloneTinyWeekdays = source._standaloneTinyWeekdays
      _quarters = source._quarters
      _standaloneQuarters = source._standaloneQuarters
      _shortQuarters = source._shortQuarters
      _standaloneShortQuarters = source._standaloneShortQuarters
      _eras = source._eras
      _longEras = source._longEras
      _shortDatePattern = source._shortDatePattern
      _mediumDatePattern = source._mediumDatePattern
      _longDatePattern = source._longDatePattern
      _fullDatePattern = source._fullDatePattern
      _shortTimePattern = source._shortTimePattern
      _mediumTimePattern = source._mediumTimePattern
      _longTimePattern = source._longTimePattern
      _fullTimePattern = source._fullTimePattern
      _decimalSeparator = source._decimalSeparator
      _groupingSeparator = source._groupingSeparator
      _currencyDecimalSeparator = source._currencyDecimalSeparator
      _currencyGroupingSeparator = source._currencyGroupingSeparator
      _plusSign = source._plusSign
      _minusSign = source._minusSign
      _exponentialSymbol = source._exponentialSymbol
      _percentSymbol = source._percentSymbol
      _perMilleSymbol = source._perMilleSymbol
      _infinitySymbol = source._infinitySymbol
      _nanSymbol = source._nanSymbol
      _decimalPattern = source._decimalPattern
      _scientificPattern = source._scientificPattern
      _percentPattern = source._percentPattern
      _currencyPattern = source._currencyPattern
      _currencyCode = source._currencyCode
      _currencySymbols = source._currencySymbols
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._currencySymbols) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._version)
        case 2: try decoder.decodeSingularStringField(value: &_storage._calendar)
        case 3: try decoder.decodeSingularStringField(value: &_storage._numberingSystem)
        case 4: try decoder.decodeRepeatedStringField(value: &_storage._months)
        case 5: try decoder.decodeRepeatedStringField(value: &_storage._standaloneMonths)
        case 6: try decoder.decodeRepeatedStringField(value: &_storage._shortMonths)
        case 7: try decoder.decodeRepeatedStringField(value: &_storage._standaloneShortMonths)
        case 8: try decoder.decodeRepeatedStringField(value: &_storage._weekdays)
        case 9: try decoder.decodeRepeatedStringField(value: &_storage._standaloneWeekdays)
        case 10: try decoder.decodeRepeatedStringField(value: &_storage._shortWeekdays)
        case 11: try decoder.decodeRepeatedStringField(value: &_storage._standaloneShortWeekdays)
        case 12: try decoder.decodeSingularStringField(value: &_storage._amSymbol)
        case 13: try decoder.decodeSingularStringField(value: &_storage._pmSymbol)
        case 14: try decoder.decodeRepeatedStringField(value: &_storage._tinyMonths)
        case 15: try decoder.decodeRepeatedStringField(value: &_storage._standaloneTinyMonths)
        case 16: try decoder.decodeRepeatedStringField(value: &_storage._tinyWeekdays)
        case 17: try decoder.decodeRepeatedStringField(value: &_storage._standaloneTinyWeekdays)
        case 18: try decoder.decodeRepeatedStringField(value: &_storage._quarters)
        case 19: try decoder.decodeRepeatedStringField(value: &_storage._standaloneQuarters)
        case 20: try decoder.decodeRepeatedStringField(value: &_storage._shortQuarters)
        case 21: try decoder.decodeRepeatedStringField(value: &_storage._standaloneShortQuarters)
        case 22: try decoder.decodeRepeatedStringField(value: &_storage._eras)
        case 23: try decoder.decodeRepeatedStringField(value: &_storage._longEras)
        case 24: try decoder.decodeSingularStringField(value: &_storage._shortDatePattern)
        case 25: try decoder.decodeSingularStringField(value: &_storage._mediumDatePattern)
        case 26: try decoder.decodeSingularStringField(value: &_storage._longDatePattern)
        case 27: try decoder.decodeSingularStringField(value: &_storage._fullDatePattern)
        case 28: try decoder.decodeSingularStringField(value: &_storage._shortTimePattern)
        case 29: try decoder.decodeSingularStringField(value: &_storage._mediumTimePattern)
        case 30: try decoder.decodeSingularStringField(value: &_storage._longTimePattern)
        case 31: try decoder.decodeSingularStringField(value: &_storage._fullTimePattern)
        case 32: try decoder.decodeSingularStringField(value: &_storage._decimalSeparator)
        case 33: try decoder.decodeSingularStringField(value: &_storage._groupingSeparator)
        case 34: try decoder.decodeSingularStringField(value: &_storage._currencyDecimalSeparator)
        case 35: try decoder.decodeSingularStringField(value: &_storage._currencyGroupingSeparator)
        case 36: try decoder.decodeSingularStringField(value: &_storage._plusSign)
        case 37: try decoder.decodeSingularStringField(value: &_storage._minusSign)
        case 38: try decoder.decodeSingularStringField(value: &_storage._exponentialSymbol)
        case 39: try decoder.decodeSingularStringField(value: &_storage._percentSymbol)
        case 40: try decoder.decodeSingularStringField(value: &_storage._perMilleSymbol)
        case 41: try decoder.decodeSingularStringField(value: &_storage._infinitySymbol)
        case 42: try decoder.decodeSingularStringField(value: &_storage._nanSymbol)
        case 43: try decoder.decodeSingularStringField(value: &_storage._decimalPattern)
        case 44: try decoder.decodeSingularStringField(value: &_storage._scientificPattern)
        case 45: try decoder.decodeSingularStringField(value: &_storage._percentPattern)
        case 46: try decoder.decodeSingularStringField(value: &_storage._currencyPattern)
        case 47: try decoder.decodeSingularStringField(value: &_storage._currencyCode)
        case 48: try decoder.decodeRepeatedMessageField(value: &_storage._currencySymbols)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._version {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._calendar {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._numberingSystem {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if !_storage._months.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._months, fieldNumber: 4)
      }
      if !_storage._standaloneMonths.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._standaloneMonths, fieldNumber: 5)
      }
      if !_storage._shortMonths.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._shortMonths, fieldNumber: 6)
      }
      if !_storage._standaloneShortMonths.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._standaloneShortMonths, fieldNumber: 7)
      }
      if !_storage._weekdays.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._weekdays, fieldNumber: 8)
      }
      if !_storage._standaloneWeekdays.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._standaloneWeekdays, fieldNumber: 9)
      }
      if !_storage._shortWeekdays.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._shortWeekdays, fieldNumber: 10)
      }
      if !_storage._standaloneShortWeekdays.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._standaloneShortWeekdays, fieldNumber: 11)
      }
      if let v = _storage._amSymbol {
        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
      }
      if let v = _storage._pmSymbol {
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      }
      if !_storage._tinyMonths.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tinyMonths, fieldNumber: 14)
      }
      if !_storage._standaloneTinyMonths.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._standaloneTinyMonths, fieldNumber: 15)
      }
      if !_storage._tinyWeekdays.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tinyWeekdays, fieldNumber: 16)
      }
      if !_storage._standaloneTinyWeekdays.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._standaloneTinyWeekdays, fieldNumber: 17)
      }
      if !_storage._quarters.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._quarters, fieldNumber: 18)
      }
      if !_storage._standaloneQuarters.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._standaloneQuarters, fieldNumber: 19)
      }
      if !_storage._shortQuarters.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._shortQuarters, fieldNumber: 20)
      }
      if !_storage._standaloneShortQuarters.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._standaloneShortQuarters, fieldNumber: 21)
      }
      if !_storage._eras.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._eras, fieldNumber: 22)
      }
      if !_storage._longEras.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._longEras, fieldNumber: 23)
      }
      if let v = _storage._shortDatePattern {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      }
      if let v = _storage._mediumDatePattern {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      }
      if let v = _storage._longDatePattern {
        try visitor.visitSingularStringField(value: v, fieldNumber: 26)
      }
      if let v = _storage._fullDatePattern {
        try visitor.visitSingularStringField(value: v, fieldNumber: 27)
      }
      if let v = _storage._shortTimePattern {
        try visitor.visitSingularStringField(value: v, fieldNumber: 28)
      }
      if let v = _storage._mediumTimePattern {
        try visitor.visitSingularStringField(value: v, fieldNumber: 29)
      }
      if let v = _storage._longTimePattern {
        try visitor.visitSingularStringField(value: v, fieldNumber: 30)
      }
      if let v = _storage._fullTimePattern {
        try visitor.visitSingularStringField(value: v, fieldNumber: 31)
      }
      if let v = _storage._decimalSeparator {
        try visitor.visitSingularStringField(value: v, fieldNumber: 32)
      }
      if let v = _storage._groupingSeparator {
        try visitor.visitSingularStringField(value: v, fieldNumber: 33)
      }
      if let v = _storage._currencyDecimalSeparator {
        try visitor.visitSingularStringField(value: v, fieldNumber: 34)
      }
      if let v = _storage._currencyGroupingSeparator {
        try visitor.visitSingularStringField(value: v, fieldNumber: 35)
      }
      if let v = _storage._plusSign {
        try visitor.visitSingularStringField(value: v, fieldNumber: 36)
      }
      if let v = _storage._minusSign {
        try visitor.visitSingularStringField(value: v, fieldNumber: 37)
      }
      if let v = _storage._exponentialSymbol {
        try visitor.visitSingularStringField(value: v, fieldNumber: 38)
      }
      if let v = _storage._percentSymbol {
        try visitor.visitSingularStringField(value: v, fieldNumber: 39)
      }
      if let v = _storage._perMilleSymbol {
        try visitor.visitSingularStringField(value: v, fieldNumber: 40)
      }
      if let v = _storage._infinitySymbol {
        try visitor.visitSingularStringField(value: v, fieldNumber: 41)
      }
      if let v = _storage._nanSymbol {
        try visitor.visitSingularStringField(value: v, fieldNumber: 42)
      }
      if let v = _storage._decimalPattern {
        try visitor.visitSingularStringField(value: v, fieldNumber: 43)
      }
      if let v = _storage._scientificPattern {
        try visitor.visitSingularStringField(value: v, fieldNumber: 44)
      }
      if let v = _storage._percentPattern {
        try visitor.visitSingularStringField(value: v, fieldNumber: 45)
      }
      if let v = _storage._currencyPattern {
        try visitor.visitSingularStringField(value: v, fieldNumber: 46)
      }
      if let v = _storage._currencyCode {
        try visitor.visitSingularStringField(value: v, fieldNumber: 47)
      }
      if !_storage._currencySymbols.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._currencySymbols, fieldNumber: 48)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_FormattingSymbolsArchive, rhs: TSK_FormattingSymbolsArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._version != rhs_storage._version {return false}
        if _storage._calendar != rhs_storage._calendar {return false}
        if _storage._numberingSystem != rhs_storage._numberingSystem {return false}
        if _storage._months != rhs_storage._months {return false}
        if _storage._standaloneMonths != rhs_storage._standaloneMonths {return false}
        if _storage._shortMonths != rhs_storage._shortMonths {return false}
        if _storage._standaloneShortMonths != rhs_storage._standaloneShortMonths {return false}
        if _storage._weekdays != rhs_storage._weekdays {return false}
        if _storage._standaloneWeekdays != rhs_storage._standaloneWeekdays {return false}
        if _storage._shortWeekdays != rhs_storage._shortWeekdays {return false}
        if _storage._standaloneShortWeekdays != rhs_storage._standaloneShortWeekdays {return false}
        if _storage._amSymbol != rhs_storage._amSymbol {return false}
        if _storage._pmSymbol != rhs_storage._pmSymbol {return false}
        if _storage._tinyMonths != rhs_storage._tinyMonths {return false}
        if _storage._standaloneTinyMonths != rhs_storage._standaloneTinyMonths {return false}
        if _storage._tinyWeekdays != rhs_storage._tinyWeekdays {return false}
        if _storage._standaloneTinyWeekdays != rhs_storage._standaloneTinyWeekdays {return false}
        if _storage._quarters != rhs_storage._quarters {return false}
        if _storage._standaloneQuarters != rhs_storage._standaloneQuarters {return false}
        if _storage._shortQuarters != rhs_storage._shortQuarters {return false}
        if _storage._standaloneShortQuarters != rhs_storage._standaloneShortQuarters {return false}
        if _storage._eras != rhs_storage._eras {return false}
        if _storage._longEras != rhs_storage._longEras {return false}
        if _storage._shortDatePattern != rhs_storage._shortDatePattern {return false}
        if _storage._mediumDatePattern != rhs_storage._mediumDatePattern {return false}
        if _storage._longDatePattern != rhs_storage._longDatePattern {return false}
        if _storage._fullDatePattern != rhs_storage._fullDatePattern {return false}
        if _storage._shortTimePattern != rhs_storage._shortTimePattern {return false}
        if _storage._mediumTimePattern != rhs_storage._mediumTimePattern {return false}
        if _storage._longTimePattern != rhs_storage._longTimePattern {return false}
        if _storage._fullTimePattern != rhs_storage._fullTimePattern {return false}
        if _storage._decimalSeparator != rhs_storage._decimalSeparator {return false}
        if _storage._groupingSeparator != rhs_storage._groupingSeparator {return false}
        if _storage._currencyDecimalSeparator != rhs_storage._currencyDecimalSeparator {return false}
        if _storage._currencyGroupingSeparator != rhs_storage._currencyGroupingSeparator {return false}
        if _storage._plusSign != rhs_storage._plusSign {return false}
        if _storage._minusSign != rhs_storage._minusSign {return false}
        if _storage._exponentialSymbol != rhs_storage._exponentialSymbol {return false}
        if _storage._percentSymbol != rhs_storage._percentSymbol {return false}
        if _storage._perMilleSymbol != rhs_storage._perMilleSymbol {return false}
        if _storage._infinitySymbol != rhs_storage._infinitySymbol {return false}
        if _storage._nanSymbol != rhs_storage._nanSymbol {return false}
        if _storage._decimalPattern != rhs_storage._decimalPattern {return false}
        if _storage._scientificPattern != rhs_storage._scientificPattern {return false}
        if _storage._percentPattern != rhs_storage._percentPattern {return false}
        if _storage._currencyPattern != rhs_storage._currencyPattern {return false}
        if _storage._currencyCode != rhs_storage._currencyCode {return false}
        if _storage._currencySymbols != rhs_storage._currencySymbols {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_FormattingSymbolsArchive.CurrencySymbol: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSK_FormattingSymbolsArchive.protoMessageName + ".CurrencySymbol"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "symbol"),
  ]

  public var isInitialized: Bool {
    if self._code == nil {return false}
    if self._symbol == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._code)
      case 2: try decoder.decodeSingularStringField(value: &self._symbol)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._code {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._symbol {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_FormattingSymbolsArchive.CurrencySymbol, rhs: TSK_FormattingSymbolsArchive.CurrencySymbol) -> Bool {
    if lhs._code != rhs._code {return false}
    if lhs._symbol != rhs._symbol {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_DocumentSupportCollaborationState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DocumentSupportCollaborationState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collaboration_command_history"),
    2: .standard(proto: "collaboration_session_state"),
  ]

  public var isInitialized: Bool {
    if let v = self._collaborationCommandHistory, !v.isInitialized {return false}
    if let v = self._collaborationSessionState, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._collaborationCommandHistory)
      case 2: try decoder.decodeSingularMessageField(value: &self._collaborationSessionState)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._collaborationCommandHistory {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._collaborationSessionState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_DocumentSupportCollaborationState, rhs: TSK_DocumentSupportCollaborationState) -> Bool {
    if lhs._collaborationCommandHistory != rhs._collaborationCommandHistory {return false}
    if lhs._collaborationSessionState != rhs._collaborationSessionState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_DocumentSupportArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DocumentSupportArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "command_history"),
    4: .standard(proto: "undo_count"),
    5: .standard(proto: "redo_count"),
    6: .standard(proto: "undo_action_string"),
    7: .standard(proto: "redo_action_string"),
    8: .standard(proto: "web_state"),
    9: .standard(proto: "is_in_collaboration_mode"),
    12: .standard(proto: "action_string_localization"),
    13: .standard(proto: "collaboration_state"),
    2: .standard(proto: "command_selection_behavior_history"),
    3: .standard(proto: "view_state"),
    10: .standard(proto: "collaboration_command_history"),
    11: .standard(proto: "collaboration_session_state"),
  ]

  public var isInitialized: Bool {
    if let v = self._commandHistory, !v.isInitialized {return false}
    if let v = self._webState, !v.isInitialized {return false}
    if let v = self._collaborationState, !v.isInitialized {return false}
    if let v = self._commandSelectionBehaviorHistory, !v.isInitialized {return false}
    if let v = self._viewState, !v.isInitialized {return false}
    if let v = self._collaborationCommandHistory, !v.isInitialized {return false}
    if let v = self._collaborationSessionState, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._commandHistory)
      case 2: try decoder.decodeSingularMessageField(value: &self._commandSelectionBehaviorHistory)
      case 3: try decoder.decodeSingularMessageField(value: &self._viewState)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._undoCount)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._redoCount)
      case 6: try decoder.decodeSingularStringField(value: &self._undoActionString)
      case 7: try decoder.decodeSingularStringField(value: &self._redoActionString)
      case 8: try decoder.decodeSingularMessageField(value: &self._webState)
      case 9: try decoder.decodeSingularBoolField(value: &self._isInCollaborationMode)
      case 10: try decoder.decodeSingularMessageField(value: &self._collaborationCommandHistory)
      case 11: try decoder.decodeSingularMessageField(value: &self._collaborationSessionState)
      case 12: try decoder.decodeSingularStringField(value: &self._actionStringLocalization)
      case 13: try decoder.decodeSingularMessageField(value: &self._collaborationState)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commandHistory {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._commandSelectionBehaviorHistory {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._viewState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._undoCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._redoCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._undoActionString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if let v = self._redoActionString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    if let v = self._webState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._isInCollaborationMode {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    if let v = self._collaborationCommandHistory {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._collaborationSessionState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._actionStringLocalization {
      try visitor.visitSingularStringField(value: v, fieldNumber: 12)
    }
    if let v = self._collaborationState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_DocumentSupportArchive, rhs: TSK_DocumentSupportArchive) -> Bool {
    if lhs._commandHistory != rhs._commandHistory {return false}
    if lhs._undoCount != rhs._undoCount {return false}
    if lhs._redoCount != rhs._redoCount {return false}
    if lhs._undoActionString != rhs._undoActionString {return false}
    if lhs._redoActionString != rhs._redoActionString {return false}
    if lhs._webState != rhs._webState {return false}
    if lhs._isInCollaborationMode != rhs._isInCollaborationMode {return false}
    if lhs._actionStringLocalization != rhs._actionStringLocalization {return false}
    if lhs._collaborationState != rhs._collaborationState {return false}
    if lhs._commandSelectionBehaviorHistory != rhs._commandSelectionBehaviorHistory {return false}
    if lhs._viewState != rhs._viewState {return false}
    if lhs._collaborationCommandHistory != rhs._collaborationCommandHistory {return false}
    if lhs._collaborationSessionState != rhs._collaborationSessionState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_ViewStateArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ViewStateArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "view_state_root"),
    2: .standard(proto: "document_revision_sequence"),
    3: .standard(proto: "document_revision_identifier"),
  ]

  public var isInitialized: Bool {
    if self._viewStateRoot == nil {return false}
    if let v = self._viewStateRoot, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._viewStateRoot)
      case 2: try decoder.decodeSingularInt32Field(value: &self._documentRevisionSequence)
      case 3: try decoder.decodeSingularStringField(value: &self._documentRevisionIdentifier)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._viewStateRoot {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._documentRevisionSequence {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._documentRevisionIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_ViewStateArchive, rhs: TSK_ViewStateArchive) -> Bool {
    if lhs._viewStateRoot != rhs._viewStateRoot {return false}
    if lhs._documentRevisionSequence != rhs._documentRevisionSequence {return false}
    if lhs._documentRevisionIdentifier != rhs._documentRevisionIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_CommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "undoRedoState"),
    2: .same(proto: "undoCollection"),
    3: .standard(proto: "shadowed_by_transform"),
    4: .standard(proto: "shadowed_by_commit"),
    5: .same(proto: "remote"),
    6: .standard(proto: "should_hold_until_group_commit"),
    7: .standard(proto: "server_originated"),
  ]

  public var isInitialized: Bool {
    if let v = self._undoRedoState, !v.isInitialized {return false}
    if let v = self._undoCollection, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._undoRedoState)
      case 2: try decoder.decodeSingularMessageField(value: &self._undoCollection)
      case 3: try decoder.decodeSingularBoolField(value: &self._shadowedByTransform)
      case 4: try decoder.decodeSingularBoolField(value: &self._shadowedByCommit)
      case 5: try decoder.decodeSingularBoolField(value: &self._remote)
      case 6: try decoder.decodeSingularBoolField(value: &self._shouldHoldUntilGroupCommit)
      case 7: try decoder.decodeSingularBoolField(value: &self._serverOriginated)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._undoRedoState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._undoCollection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._shadowedByTransform {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._shadowedByCommit {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._remote {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._shouldHoldUntilGroupCommit {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._serverOriginated {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_CommandArchive, rhs: TSK_CommandArchive) -> Bool {
    if lhs._undoRedoState != rhs._undoRedoState {return false}
    if lhs._undoCollection != rhs._undoCollection {return false}
    if lhs._shadowedByTransform != rhs._shadowedByTransform {return false}
    if lhs._shadowedByCommit != rhs._shadowedByCommit {return false}
    if lhs._remote != rhs._remote {return false}
    if lhs._shouldHoldUntilGroupCommit != rhs._shouldHoldUntilGroupCommit {return false}
    if lhs._serverOriginated != rhs._serverOriginated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_CommandGroupArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandGroupArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "commands"),
    3: .standard(proto: "process_results"),
    4: .standard(proto: "action_string"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.commands) {return false}
    if let v = self._processResults, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.commands)
      case 3: try decoder.decodeSingularMessageField(value: &self._processResults)
      case 4: try decoder.decodeSingularStringField(value: &self._actionString)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.commands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.commands, fieldNumber: 2)
    }
    if let v = self._processResults {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._actionString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_CommandGroupArchive, rhs: TSK_CommandGroupArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.commands != rhs.commands {return false}
    if lhs._processResults != rhs._processResults {return false}
    if lhs._actionString != rhs._actionString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_InducedCommandCollectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InducedCommandCollectionArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "inducing_command"),
    3: .standard(proto: "induced_commands"),
    4: .standard(proto: "indexes_of_processed_induced_commands"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._inducingCommand, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.inducedCommands) {return false}
    if let v = self._indexesOfProcessedInducedCommands, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._inducingCommand)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.inducedCommands)
      case 4: try decoder.decodeSingularMessageField(value: &self._indexesOfProcessedInducedCommands)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._inducingCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.inducedCommands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inducedCommands, fieldNumber: 3)
    }
    if let v = self._indexesOfProcessedInducedCommands {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_InducedCommandCollectionArchive, rhs: TSK_InducedCommandCollectionArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._inducingCommand != rhs._inducingCommand {return false}
    if lhs.inducedCommands != rhs.inducedCommands {return false}
    if lhs._indexesOfProcessedInducedCommands != rhs._indexesOfProcessedInducedCommands {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_PropagatedCommandCollectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PropagatedCommandCollectionArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "propagatable_command"),
    3: .standard(proto: "propagatable_command_process_result"),
    4: .standard(proto: "propagating_command"),
    5: .standard(proto: "propagating_command_process_result"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._propagatableCommand == nil {return false}
    if self._propagatingCommand == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._propagatableCommand, !v.isInitialized {return false}
    if let v = self._propagatingCommand, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._propagatableCommand)
      case 3: try decoder.decodeSingularBoolField(value: &self._propagatableCommandProcessResult)
      case 4: try decoder.decodeSingularMessageField(value: &self._propagatingCommand)
      case 5: try decoder.decodeSingularBoolField(value: &self._propagatingCommandProcessResult)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._propagatableCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._propagatableCommandProcessResult {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._propagatingCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._propagatingCommandProcessResult {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_PropagatedCommandCollectionArchive, rhs: TSK_PropagatedCommandCollectionArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._propagatableCommand != rhs._propagatableCommand {return false}
    if lhs._propagatableCommandProcessResult != rhs._propagatableCommandProcessResult {return false}
    if lhs._propagatingCommand != rhs._propagatingCommand {return false}
    if lhs._propagatingCommandProcessResult != rhs._propagatingCommandProcessResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_FinalCommandPairArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FinalCommandPairArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "command"),
    3: .standard(proto: "command_process_result"),
    4: .standard(proto: "final_command"),
    5: .standard(proto: "final_command_process_result"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._command == nil {return false}
    if self._finalCommand == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._command, !v.isInitialized {return false}
    if let v = self._finalCommand, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._command)
      case 3: try decoder.decodeSingularBoolField(value: &self._commandProcessResult)
      case 4: try decoder.decodeSingularMessageField(value: &self._finalCommand)
      case 5: try decoder.decodeSingularBoolField(value: &self._finalCommandProcessResult)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._commandProcessResult {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._finalCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._finalCommandProcessResult {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_FinalCommandPairArchive, rhs: TSK_FinalCommandPairArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._command != rhs._command {return false}
    if lhs._commandProcessResult != rhs._commandProcessResult {return false}
    if lhs._finalCommand != rhs._finalCommand {return false}
    if lhs._finalCommandProcessResult != rhs._finalCommandProcessResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_CommandContainerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandContainerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "commands"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.commands) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.commands)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.commands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.commands, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_CommandContainerArchive, rhs: TSK_CommandContainerArchive) -> Bool {
    if lhs.commands != rhs.commands {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_ShuffleMappingArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShuffleMappingArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_index"),
    2: .standard(proto: "end_index"),
    3: .same(proto: "entries"),
    4: .standard(proto: "is_vertical"),
    5: .standard(proto: "is_move_operation"),
    6: .standard(proto: "first_moved_index"),
    7: .standard(proto: "destination_index_for_move"),
    8: .standard(proto: "number_of_indexes_moved"),
  ]

  public var isInitialized: Bool {
    if self._startIndex == nil {return false}
    if self._endIndex == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.entries) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._startIndex)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._endIndex)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.entries)
      case 4: try decoder.decodeSingularBoolField(value: &self._isVertical)
      case 5: try decoder.decodeSingularBoolField(value: &self._isMoveOperation)
      case 6: try decoder.decodeSingularUInt32Field(value: &self._firstMovedIndex)
      case 7: try decoder.decodeSingularUInt32Field(value: &self._destinationIndexForMove)
      case 8: try decoder.decodeSingularUInt32Field(value: &self._numberOfIndexesMoved)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._startIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._endIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 3)
    }
    if let v = self._isVertical {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._isMoveOperation {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._firstMovedIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._destinationIndexForMove {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._numberOfIndexesMoved {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_ShuffleMappingArchive, rhs: TSK_ShuffleMappingArchive) -> Bool {
    if lhs._startIndex != rhs._startIndex {return false}
    if lhs._endIndex != rhs._endIndex {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs._isVertical != rhs._isVertical {return false}
    if lhs._isMoveOperation != rhs._isMoveOperation {return false}
    if lhs._firstMovedIndex != rhs._firstMovedIndex {return false}
    if lhs._destinationIndexForMove != rhs._destinationIndexForMove {return false}
    if lhs._numberOfIndexesMoved != rhs._numberOfIndexesMoved {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_ShuffleMappingArchive.Entry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSK_ShuffleMappingArchive.protoMessageName + ".Entry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
  ]

  public var isInitialized: Bool {
    if self._from == nil {return false}
    if self._to == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._from)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._to)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._from {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._to {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_ShuffleMappingArchive.Entry, rhs: TSK_ShuffleMappingArchive.Entry) -> Bool {
    if lhs._from != rhs._from {return false}
    if lhs._to != rhs._to {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_ProgressiveCommandGroupArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProgressiveCommandGroupArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_ProgressiveCommandGroupArchive, rhs: TSK_ProgressiveCommandGroupArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_FormatStructArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FormatStructArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "format_type"),
    2: .standard(proto: "decimal_places"),
    3: .standard(proto: "currency_code"),
    4: .standard(proto: "negative_style"),
    5: .standard(proto: "show_thousands_separator"),
    6: .standard(proto: "use_accounting_style"),
    7: .standard(proto: "duration_style"),
    8: .same(proto: "base"),
    9: .standard(proto: "base_places"),
    10: .standard(proto: "base_use_minus_sign"),
    11: .standard(proto: "fraction_accuracy"),
    12: .standard(proto: "suppress_date_format"),
    13: .standard(proto: "suppress_time_format"),
    14: .standard(proto: "date_time_format"),
    15: .standard(proto: "duration_unit_largest"),
    16: .standard(proto: "duration_unit_smallest"),
    17: .standard(proto: "custom_id"),
    18: .standard(proto: "custom_format_string"),
    19: .standard(proto: "scale_factor"),
    20: .standard(proto: "requires_fraction_replacement"),
    21: .standard(proto: "control_minimum"),
    22: .standard(proto: "control_maximum"),
    23: .standard(proto: "control_increment"),
    24: .standard(proto: "control_format_type"),
    25: .standard(proto: "slider_orientation"),
    26: .standard(proto: "slider_position"),
    27: .standard(proto: "decimal_width"),
    28: .standard(proto: "min_integer_width"),
    29: .standard(proto: "num_nonspace_integer_digits"),
    30: .standard(proto: "num_nonspace_decimal_digits"),
    31: .standard(proto: "index_from_right_last_integer"),
    32: .standard(proto: "interstitial_strings"),
    33: .standard(proto: "inters_str_insertion_indexes"),
    34: .standard(proto: "num_hash_decimal_digits"),
    35: .standard(proto: "total_num_decimal_digits"),
    36: .standard(proto: "is_complex"),
    37: .standard(proto: "contains_integer_token"),
    38: .standard(proto: "multiple_choice_list_initial_value"),
    39: .standard(proto: "multiple_choice_list_id"),
    40: .standard(proto: "use_automatic_duration_units"),
    41: .standard(proto: "custom_uid"),
    42: .standard(proto: "custom_format"),
    43: .standard(proto: "uses_plus_sign"),
    44: .standard(proto: "bool_true_string"),
    45: .standard(proto: "bool_false_string"),
  ]

  fileprivate class _StorageClass {
    var _formatType: UInt32? = nil
    var _decimalPlaces: UInt32? = nil
    var _currencyCode: String? = nil
    var _negativeStyle: UInt32? = nil
    var _showThousandsSeparator: Bool? = nil
    var _useAccountingStyle: Bool? = nil
    var _durationStyle: UInt32? = nil
    var _base: UInt32? = nil
    var _basePlaces: UInt32? = nil
    var _baseUseMinusSign: Bool? = nil
    var _fractionAccuracy: UInt32? = nil
    var _suppressDateFormat: Bool? = nil
    var _suppressTimeFormat: Bool? = nil
    var _dateTimeFormat: String? = nil
    var _durationUnitLargest: UInt32? = nil
    var _durationUnitSmallest: UInt32? = nil
    var _customID: UInt32? = nil
    var _customFormatString: String? = nil
    var _scaleFactor: Double? = nil
    var _requiresFractionReplacement: Bool? = nil
    var _controlMinimum: Double? = nil
    var _controlMaximum: Double? = nil
    var _controlIncrement: Double? = nil
    var _controlFormatType: UInt32? = nil
    var _sliderOrientation: UInt32? = nil
    var _sliderPosition: UInt32? = nil
    var _decimalWidth: UInt32? = nil
    var _minIntegerWidth: UInt32? = nil
    var _numNonspaceIntegerDigits: UInt32? = nil
    var _numNonspaceDecimalDigits: UInt32? = nil
    var _indexFromRightLastInteger: UInt32? = nil
    var _interstitialStrings: [String] = []
    var _intersStrInsertionIndexes: TSP_IndexSet? = nil
    var _numHashDecimalDigits: UInt32? = nil
    var _totalNumDecimalDigits: UInt32? = nil
    var _isComplex: Bool? = nil
    var _containsIntegerToken: Bool? = nil
    var _multipleChoiceListInitialValue: UInt32? = nil
    var _multipleChoiceListID: UInt32? = nil
    var _useAutomaticDurationUnits: Bool? = nil
    var _customUid: TSP_UUID? = nil
    var _customFormat: TSK_CustomFormatArchive? = nil
    var _usesPlusSign: Bool? = nil
    var _boolTrueString: String? = nil
    var _boolFalseString: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _formatType = source._formatType
      _decimalPlaces = source._decimalPlaces
      _currencyCode = source._currencyCode
      _negativeStyle = source._negativeStyle
      _showThousandsSeparator = source._showThousandsSeparator
      _useAccountingStyle = source._useAccountingStyle
      _durationStyle = source._durationStyle
      _base = source._base
      _basePlaces = source._basePlaces
      _baseUseMinusSign = source._baseUseMinusSign
      _fractionAccuracy = source._fractionAccuracy
      _suppressDateFormat = source._suppressDateFormat
      _suppressTimeFormat = source._suppressTimeFormat
      _dateTimeFormat = source._dateTimeFormat
      _durationUnitLargest = source._durationUnitLargest
      _durationUnitSmallest = source._durationUnitSmallest
      _customID = source._customID
      _customFormatString = source._customFormatString
      _scaleFactor = source._scaleFactor
      _requiresFractionReplacement = source._requiresFractionReplacement
      _controlMinimum = source._controlMinimum
      _controlMaximum = source._controlMaximum
      _controlIncrement = source._controlIncrement
      _controlFormatType = source._controlFormatType
      _sliderOrientation = source._sliderOrientation
      _sliderPosition = source._sliderPosition
      _decimalWidth = source._decimalWidth
      _minIntegerWidth = source._minIntegerWidth
      _numNonspaceIntegerDigits = source._numNonspaceIntegerDigits
      _numNonspaceDecimalDigits = source._numNonspaceDecimalDigits
      _indexFromRightLastInteger = source._indexFromRightLastInteger
      _interstitialStrings = source._interstitialStrings
      _intersStrInsertionIndexes = source._intersStrInsertionIndexes
      _numHashDecimalDigits = source._numHashDecimalDigits
      _totalNumDecimalDigits = source._totalNumDecimalDigits
      _isComplex = source._isComplex
      _containsIntegerToken = source._containsIntegerToken
      _multipleChoiceListInitialValue = source._multipleChoiceListInitialValue
      _multipleChoiceListID = source._multipleChoiceListID
      _useAutomaticDurationUnits = source._useAutomaticDurationUnits
      _customUid = source._customUid
      _customFormat = source._customFormat
      _usesPlusSign = source._usesPlusSign
      _boolTrueString = source._boolTrueString
      _boolFalseString = source._boolFalseString
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._formatType == nil {return false}
      if let v = _storage._intersStrInsertionIndexes, !v.isInitialized {return false}
      if let v = _storage._customUid, !v.isInitialized {return false}
      if let v = _storage._customFormat, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._formatType)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._decimalPlaces)
        case 3: try decoder.decodeSingularStringField(value: &_storage._currencyCode)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._negativeStyle)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._showThousandsSeparator)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._useAccountingStyle)
        case 7: try decoder.decodeSingularUInt32Field(value: &_storage._durationStyle)
        case 8: try decoder.decodeSingularUInt32Field(value: &_storage._base)
        case 9: try decoder.decodeSingularUInt32Field(value: &_storage._basePlaces)
        case 10: try decoder.decodeSingularBoolField(value: &_storage._baseUseMinusSign)
        case 11: try decoder.decodeSingularUInt32Field(value: &_storage._fractionAccuracy)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._suppressDateFormat)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._suppressTimeFormat)
        case 14: try decoder.decodeSingularStringField(value: &_storage._dateTimeFormat)
        case 15: try decoder.decodeSingularUInt32Field(value: &_storage._durationUnitLargest)
        case 16: try decoder.decodeSingularUInt32Field(value: &_storage._durationUnitSmallest)
        case 17: try decoder.decodeSingularUInt32Field(value: &_storage._customID)
        case 18: try decoder.decodeSingularStringField(value: &_storage._customFormatString)
        case 19: try decoder.decodeSingularDoubleField(value: &_storage._scaleFactor)
        case 20: try decoder.decodeSingularBoolField(value: &_storage._requiresFractionReplacement)
        case 21: try decoder.decodeSingularDoubleField(value: &_storage._controlMinimum)
        case 22: try decoder.decodeSingularDoubleField(value: &_storage._controlMaximum)
        case 23: try decoder.decodeSingularDoubleField(value: &_storage._controlIncrement)
        case 24: try decoder.decodeSingularUInt32Field(value: &_storage._controlFormatType)
        case 25: try decoder.decodeSingularUInt32Field(value: &_storage._sliderOrientation)
        case 26: try decoder.decodeSingularUInt32Field(value: &_storage._sliderPosition)
        case 27: try decoder.decodeSingularUInt32Field(value: &_storage._decimalWidth)
        case 28: try decoder.decodeSingularUInt32Field(value: &_storage._minIntegerWidth)
        case 29: try decoder.decodeSingularUInt32Field(value: &_storage._numNonspaceIntegerDigits)
        case 30: try decoder.decodeSingularUInt32Field(value: &_storage._numNonspaceDecimalDigits)
        case 31: try decoder.decodeSingularUInt32Field(value: &_storage._indexFromRightLastInteger)
        case 32: try decoder.decodeRepeatedStringField(value: &_storage._interstitialStrings)
        case 33: try decoder.decodeSingularMessageField(value: &_storage._intersStrInsertionIndexes)
        case 34: try decoder.decodeSingularUInt32Field(value: &_storage._numHashDecimalDigits)
        case 35: try decoder.decodeSingularUInt32Field(value: &_storage._totalNumDecimalDigits)
        case 36: try decoder.decodeSingularBoolField(value: &_storage._isComplex)
        case 37: try decoder.decodeSingularBoolField(value: &_storage._containsIntegerToken)
        case 38: try decoder.decodeSingularUInt32Field(value: &_storage._multipleChoiceListInitialValue)
        case 39: try decoder.decodeSingularUInt32Field(value: &_storage._multipleChoiceListID)
        case 40: try decoder.decodeSingularBoolField(value: &_storage._useAutomaticDurationUnits)
        case 41: try decoder.decodeSingularMessageField(value: &_storage._customUid)
        case 42: try decoder.decodeSingularMessageField(value: &_storage._customFormat)
        case 43: try decoder.decodeSingularBoolField(value: &_storage._usesPlusSign)
        case 44: try decoder.decodeSingularStringField(value: &_storage._boolTrueString)
        case 45: try decoder.decodeSingularStringField(value: &_storage._boolFalseString)
        case 10000..<20000:
          try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: TSK_FormatStructArchive.self, fieldNumber: fieldNumber)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._formatType {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._decimalPlaces {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._currencyCode {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._negativeStyle {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._showThousandsSeparator {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      }
      if let v = _storage._useAccountingStyle {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      }
      if let v = _storage._durationStyle {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._base {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._basePlaces {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._baseUseMinusSign {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      }
      if let v = _storage._fractionAccuracy {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
      }
      if let v = _storage._suppressDateFormat {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      }
      if let v = _storage._suppressTimeFormat {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      }
      if let v = _storage._dateTimeFormat {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      }
      if let v = _storage._durationUnitLargest {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 15)
      }
      if let v = _storage._durationUnitSmallest {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 16)
      }
      if let v = _storage._customID {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 17)
      }
      if let v = _storage._customFormatString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
      }
      if let v = _storage._scaleFactor {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 19)
      }
      if let v = _storage._requiresFractionReplacement {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      }
      if let v = _storage._controlMinimum {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 21)
      }
      if let v = _storage._controlMaximum {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 22)
      }
      if let v = _storage._controlIncrement {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 23)
      }
      if let v = _storage._controlFormatType {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 24)
      }
      if let v = _storage._sliderOrientation {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 25)
      }
      if let v = _storage._sliderPosition {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 26)
      }
      if let v = _storage._decimalWidth {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 27)
      }
      if let v = _storage._minIntegerWidth {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 28)
      }
      if let v = _storage._numNonspaceIntegerDigits {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 29)
      }
      if let v = _storage._numNonspaceDecimalDigits {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 30)
      }
      if let v = _storage._indexFromRightLastInteger {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 31)
      }
      if !_storage._interstitialStrings.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._interstitialStrings, fieldNumber: 32)
      }
      if let v = _storage._intersStrInsertionIndexes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
      }
      if let v = _storage._numHashDecimalDigits {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 34)
      }
      if let v = _storage._totalNumDecimalDigits {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 35)
      }
      if let v = _storage._isComplex {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 36)
      }
      if let v = _storage._containsIntegerToken {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 37)
      }
      if let v = _storage._multipleChoiceListInitialValue {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 38)
      }
      if let v = _storage._multipleChoiceListID {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 39)
      }
      if let v = _storage._useAutomaticDurationUnits {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 40)
      }
      if let v = _storage._customUid {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
      }
      if let v = _storage._customFormat {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 42)
      }
      if let v = _storage._usesPlusSign {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 43)
      }
      if let v = _storage._boolTrueString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 44)
      }
      if let v = _storage._boolFalseString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 45)
      }
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 10000, end: 20000)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_FormatStructArchive, rhs: TSK_FormatStructArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._formatType != rhs_storage._formatType {return false}
        if _storage._decimalPlaces != rhs_storage._decimalPlaces {return false}
        if _storage._currencyCode != rhs_storage._currencyCode {return false}
        if _storage._negativeStyle != rhs_storage._negativeStyle {return false}
        if _storage._showThousandsSeparator != rhs_storage._showThousandsSeparator {return false}
        if _storage._useAccountingStyle != rhs_storage._useAccountingStyle {return false}
        if _storage._durationStyle != rhs_storage._durationStyle {return false}
        if _storage._base != rhs_storage._base {return false}
        if _storage._basePlaces != rhs_storage._basePlaces {return false}
        if _storage._baseUseMinusSign != rhs_storage._baseUseMinusSign {return false}
        if _storage._fractionAccuracy != rhs_storage._fractionAccuracy {return false}
        if _storage._suppressDateFormat != rhs_storage._suppressDateFormat {return false}
        if _storage._suppressTimeFormat != rhs_storage._suppressTimeFormat {return false}
        if _storage._dateTimeFormat != rhs_storage._dateTimeFormat {return false}
        if _storage._durationUnitLargest != rhs_storage._durationUnitLargest {return false}
        if _storage._durationUnitSmallest != rhs_storage._durationUnitSmallest {return false}
        if _storage._customID != rhs_storage._customID {return false}
        if _storage._customFormatString != rhs_storage._customFormatString {return false}
        if _storage._scaleFactor != rhs_storage._scaleFactor {return false}
        if _storage._requiresFractionReplacement != rhs_storage._requiresFractionReplacement {return false}
        if _storage._controlMinimum != rhs_storage._controlMinimum {return false}
        if _storage._controlMaximum != rhs_storage._controlMaximum {return false}
        if _storage._controlIncrement != rhs_storage._controlIncrement {return false}
        if _storage._controlFormatType != rhs_storage._controlFormatType {return false}
        if _storage._sliderOrientation != rhs_storage._sliderOrientation {return false}
        if _storage._sliderPosition != rhs_storage._sliderPosition {return false}
        if _storage._decimalWidth != rhs_storage._decimalWidth {return false}
        if _storage._minIntegerWidth != rhs_storage._minIntegerWidth {return false}
        if _storage._numNonspaceIntegerDigits != rhs_storage._numNonspaceIntegerDigits {return false}
        if _storage._numNonspaceDecimalDigits != rhs_storage._numNonspaceDecimalDigits {return false}
        if _storage._indexFromRightLastInteger != rhs_storage._indexFromRightLastInteger {return false}
        if _storage._interstitialStrings != rhs_storage._interstitialStrings {return false}
        if _storage._intersStrInsertionIndexes != rhs_storage._intersStrInsertionIndexes {return false}
        if _storage._numHashDecimalDigits != rhs_storage._numHashDecimalDigits {return false}
        if _storage._totalNumDecimalDigits != rhs_storage._totalNumDecimalDigits {return false}
        if _storage._isComplex != rhs_storage._isComplex {return false}
        if _storage._containsIntegerToken != rhs_storage._containsIntegerToken {return false}
        if _storage._multipleChoiceListInitialValue != rhs_storage._multipleChoiceListInitialValue {return false}
        if _storage._multipleChoiceListID != rhs_storage._multipleChoiceListID {return false}
        if _storage._useAutomaticDurationUnits != rhs_storage._useAutomaticDurationUnits {return false}
        if _storage._customUid != rhs_storage._customUid {return false}
        if _storage._customFormat != rhs_storage._customFormat {return false}
        if _storage._usesPlusSign != rhs_storage._usesPlusSign {return false}
        if _storage._boolTrueString != rhs_storage._boolTrueString {return false}
        if _storage._boolFalseString != rhs_storage._boolFalseString {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension TSK_CustomFormatArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CustomFormatArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "format_type_pre_bnc"),
    3: .standard(proto: "default_format"),
    4: .same(proto: "conditions"),
    5: .standard(proto: "format_type"),
  ]

  fileprivate class _StorageClass {
    var _name: String? = nil
    var _formatTypePreBnc: UInt32? = nil
    var _defaultFormat: TSK_FormatStructArchive? = nil
    var _conditions: [TSK_CustomFormatArchive.Condition] = []
    var _formatType: UInt32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _formatTypePreBnc = source._formatTypePreBnc
      _defaultFormat = source._defaultFormat
      _conditions = source._conditions
      _formatType = source._formatType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._name == nil {return false}
      if _storage._formatTypePreBnc == nil {return false}
      if _storage._defaultFormat == nil {return false}
      if let v = _storage._defaultFormat, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._conditions) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._formatTypePreBnc)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._defaultFormat)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._conditions)
        case 5: try decoder.decodeSingularUInt32Field(value: &_storage._formatType)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._formatTypePreBnc {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._defaultFormat {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._conditions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._conditions, fieldNumber: 4)
      }
      if let v = _storage._formatType {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_CustomFormatArchive, rhs: TSK_CustomFormatArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._formatTypePreBnc != rhs_storage._formatTypePreBnc {return false}
        if _storage._defaultFormat != rhs_storage._defaultFormat {return false}
        if _storage._conditions != rhs_storage._conditions {return false}
        if _storage._formatType != rhs_storage._formatType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_CustomFormatArchive.Condition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSK_CustomFormatArchive.protoMessageName + ".Condition"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "condition_type"),
    2: .standard(proto: "condition_value"),
    3: .standard(proto: "condition_format"),
    4: .standard(proto: "condition_value_dbl"),
  ]

  public var isInitialized: Bool {
    if self._conditionType == nil {return false}
    if self._conditionFormat == nil {return false}
    if let v = self._conditionFormat, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._conditionType)
      case 2: try decoder.decodeSingularFloatField(value: &self._conditionValue)
      case 3: try decoder.decodeSingularMessageField(value: &self._conditionFormat)
      case 4: try decoder.decodeSingularDoubleField(value: &self._conditionValueDbl)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._conditionType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._conditionValue {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._conditionFormat {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._conditionValueDbl {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_CustomFormatArchive.Condition, rhs: TSK_CustomFormatArchive.Condition) -> Bool {
    if lhs._conditionType != rhs._conditionType {return false}
    if lhs._conditionValue != rhs._conditionValue {return false}
    if lhs._conditionFormat != rhs._conditionFormat {return false}
    if lhs._conditionValueDbl != rhs._conditionValueDbl {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_CustomFormatListArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CustomFormatListArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuids"),
    2: .standard(proto: "custom_formats"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.uuids) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.customFormats) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.uuids)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.customFormats)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.uuids, fieldNumber: 1)
    }
    if !self.customFormats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.customFormats, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_CustomFormatListArchive, rhs: TSK_CustomFormatListArchive) -> Bool {
    if lhs.uuids != rhs.uuids {return false}
    if lhs.customFormats != rhs.customFormats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_AnnotationAuthorArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AnnotationAuthorArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "color"),
    3: .standard(proto: "public_id"),
    4: .standard(proto: "is_public_author"),
  ]

  public var isInitialized: Bool {
    if let v = self._color, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeSingularMessageField(value: &self._color)
      case 3: try decoder.decodeSingularStringField(value: &self._publicID)
      case 4: try decoder.decodeSingularBoolField(value: &self._isPublicAuthor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._publicID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._isPublicAuthor {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_AnnotationAuthorArchive, rhs: TSK_AnnotationAuthorArchive) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._color != rhs._color {return false}
    if lhs._publicID != rhs._publicID {return false}
    if lhs._isPublicAuthor != rhs._isPublicAuthor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_DeprecatedChangeAuthorArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeprecatedChangeAuthorArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "change_color"),
  ]

  public var isInitialized: Bool {
    if let v = self._changeColor, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeSingularMessageField(value: &self._changeColor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._changeColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_DeprecatedChangeAuthorArchive, rhs: TSK_DeprecatedChangeAuthorArchive) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._changeColor != rhs._changeColor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_AnnotationAuthorStorageArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AnnotationAuthorStorageArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "annotation_author"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.annotationAuthor) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.annotationAuthor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.annotationAuthor.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.annotationAuthor, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_AnnotationAuthorStorageArchive, rhs: TSK_AnnotationAuthorStorageArchive) -> Bool {
    if lhs.annotationAuthor != rhs.annotationAuthor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_SetAnnotationAuthorColorCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetAnnotationAuthorColorCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "annotation_author"),
    3: .same(proto: "color"),
    4: .standard(proto: "old_color"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._annotationAuthor, !v.isInitialized {return false}
    if let v = self._color, !v.isInitialized {return false}
    if let v = self._oldColor, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._annotationAuthor)
      case 3: try decoder.decodeSingularMessageField(value: &self._color)
      case 4: try decoder.decodeSingularMessageField(value: &self._oldColor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._annotationAuthor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._oldColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_SetAnnotationAuthorColorCommandArchive, rhs: TSK_SetAnnotationAuthorColorCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._annotationAuthor != rhs._annotationAuthor {return false}
    if lhs._color != rhs._color {return false}
    if lhs._oldColor != rhs._oldColor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_CommandSelectionBehaviorArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSelectionBehaviorArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    8: .standard(proto: "archived_selection"),
    1: .standard(proto: "archived_old_selection"),
    2: .standard(proto: "archived_new_selection"),
    3: .standard(proto: "selection_flags"),
    4: .standard(proto: "additional_forward_selection_flags"),
    5: .standard(proto: "additional_reverse_selection_flags"),
    6: .standard(proto: "forward_selection_path_transformer"),
    7: .standard(proto: "reverse_selection_path_transformer"),
    9: .standard(proto: "additional_selection_behaviors"),
  ]

  public var isInitialized: Bool {
    if let v = self._archivedSelection, !v.isInitialized {return false}
    if let v = self._archivedOldSelection, !v.isInitialized {return false}
    if let v = self._archivedNewSelection, !v.isInitialized {return false}
    if let v = self._forwardSelectionPathTransformer, !v.isInitialized {return false}
    if let v = self._reverseSelectionPathTransformer, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.additionalSelectionBehaviors) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._archivedOldSelection)
      case 2: try decoder.decodeSingularMessageField(value: &self._archivedNewSelection)
      case 3: try decoder.decodeSingularUInt64Field(value: &self._selectionFlags)
      case 4: try decoder.decodeSingularUInt64Field(value: &self._additionalForwardSelectionFlags)
      case 5: try decoder.decodeSingularUInt64Field(value: &self._additionalReverseSelectionFlags)
      case 6: try decoder.decodeSingularMessageField(value: &self._forwardSelectionPathTransformer)
      case 7: try decoder.decodeSingularMessageField(value: &self._reverseSelectionPathTransformer)
      case 8: try decoder.decodeSingularMessageField(value: &self._archivedSelection)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.additionalSelectionBehaviors)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._archivedOldSelection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._archivedNewSelection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._selectionFlags {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    }
    if let v = self._additionalForwardSelectionFlags {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
    }
    if let v = self._additionalReverseSelectionFlags {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 5)
    }
    if let v = self._forwardSelectionPathTransformer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._reverseSelectionPathTransformer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._archivedSelection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if !self.additionalSelectionBehaviors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalSelectionBehaviors, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_CommandSelectionBehaviorArchive, rhs: TSK_CommandSelectionBehaviorArchive) -> Bool {
    if lhs._archivedSelection != rhs._archivedSelection {return false}
    if lhs._archivedOldSelection != rhs._archivedOldSelection {return false}
    if lhs._archivedNewSelection != rhs._archivedNewSelection {return false}
    if lhs._selectionFlags != rhs._selectionFlags {return false}
    if lhs._additionalForwardSelectionFlags != rhs._additionalForwardSelectionFlags {return false}
    if lhs._additionalReverseSelectionFlags != rhs._additionalReverseSelectionFlags {return false}
    if lhs._forwardSelectionPathTransformer != rhs._forwardSelectionPathTransformer {return false}
    if lhs._reverseSelectionPathTransformer != rhs._reverseSelectionPathTransformer {return false}
    if lhs.additionalSelectionBehaviors != rhs.additionalSelectionBehaviors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_SelectionPathTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SelectionPathTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "selection_transformers"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.selectionTransformers) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.selectionTransformers)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.selectionTransformers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.selectionTransformers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_SelectionPathTransformerArchive, rhs: TSK_SelectionPathTransformerArchive) -> Bool {
    if lhs.selectionTransformers != rhs.selectionTransformers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_SelectionPathArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SelectionPathArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ordered_selections"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.orderedSelections) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.orderedSelections)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orderedSelections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.orderedSelections, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_SelectionPathArchive, rhs: TSK_SelectionPathArchive) -> Bool {
    if lhs.orderedSelections != rhs.orderedSelections {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_DocumentSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DocumentSelectionArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "document_root"),
  ]

  public var isInitialized: Bool {
    if let v = self._documentRoot, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._documentRoot)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._documentRoot {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_DocumentSelectionArchive, rhs: TSK_DocumentSelectionArchive) -> Bool {
    if lhs._documentRoot != rhs._documentRoot {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_IdOperationArgs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IdOperationArgs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "id_path"),
  ]

  public var isInitialized: Bool {
    if self._idPath == nil {return false}
    if let v = self._idPath, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._idPath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._idPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_IdOperationArgs, rhs: TSK_IdOperationArgs) -> Bool {
    if lhs._idPath != rhs._idPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_AddIdOperationArgs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddIdOperationArgs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "index"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._index == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularInt32Field(value: &self._index)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._index {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_AddIdOperationArgs, rhs: TSK_AddIdOperationArgs) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._index != rhs._index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_RemoveIdOperationArgs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveIdOperationArgs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "index"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._index == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularInt32Field(value: &self._index)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._index {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_RemoveIdOperationArgs, rhs: TSK_RemoveIdOperationArgs) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._index != rhs._index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_RearrangeIdOperationArgs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RearrangeIdOperationArgs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "from_index"),
    3: .standard(proto: "to_index"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._fromIndex == nil {return false}
    if self._toIndex == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularInt32Field(value: &self._fromIndex)
      case 3: try decoder.decodeSingularInt32Field(value: &self._toIndex)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._fromIndex {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._toIndex {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_RearrangeIdOperationArgs, rhs: TSK_RearrangeIdOperationArgs) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._fromIndex != rhs._fromIndex {return false}
    if lhs._toIndex != rhs._toIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_IdPlacementOperationArgs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IdPlacementOperationArgs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "from_index"),
    3: .standard(proto: "to_index"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._fromIndex == nil {return false}
    if self._toIndex == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularInt32Field(value: &self._fromIndex)
      case 3: try decoder.decodeSingularInt32Field(value: &self._toIndex)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._fromIndex {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._toIndex {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_IdPlacementOperationArgs, rhs: TSK_IdPlacementOperationArgs) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._fromIndex != rhs._fromIndex {return false}
    if lhs._toIndex != rhs._toIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_NullCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NullCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_NullCommandArchive, rhs: TSK_NullCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_GroupCommitCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupCommitCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_GroupCommitCommandArchive, rhs: TSK_GroupCommitCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_UpgradeDocPostProcessingCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpgradeDocPostProcessingCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_UpgradeDocPostProcessingCommandArchive, rhs: TSK_UpgradeDocPostProcessingCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_InducedCommandCollectionCommitCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InducedCommandCollectionCommitCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_InducedCommandCollectionCommitCommandArchive, rhs: TSK_InducedCommandCollectionCommitCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_ExecuteTestBetweenRollbackAndReapplyCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExecuteTestBetweenRollbackAndReapplyCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_ExecuteTestBetweenRollbackAndReapplyCommandArchive, rhs: TSK_ExecuteTestBetweenRollbackAndReapplyCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_ChangeDocumentPackageTypeCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChangeDocumentPackageTypeCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "new_package_type"),
    3: .standard(proto: "old_package_type"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._newPackageType == nil {return false}
    if self._oldPackageType == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularEnumField(value: &self._newPackageType)
      case 3: try decoder.decodeSingularEnumField(value: &self._oldPackageType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._newPackageType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._oldPackageType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_ChangeDocumentPackageTypeCommandArchive, rhs: TSK_ChangeDocumentPackageTypeCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._newPackageType != rhs._newPackageType {return false}
    if lhs._oldPackageType != rhs._oldPackageType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_ChangeDocumentPackageTypeCommandArchive.PackageType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Default"),
    1: .same(proto: "Directory"),
    2: .same(proto: "SingleFile"),
  ]
}

extension TSK_CreateLocalStorageSnapshotCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateLocalStorageSnapshotCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "snapshot_id"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularStringField(value: &self._snapshotID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._snapshotID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_CreateLocalStorageSnapshotCommandArchive, rhs: TSK_CreateLocalStorageSnapshotCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._snapshotID != rhs._snapshotID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_BlockDiffsAtCurrentRevisionCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BlockDiffsAtCurrentRevisionCommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_BlockDiffsAtCurrentRevisionCommand, rhs: TSK_BlockDiffsAtCurrentRevisionCommand) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_RangeAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RangeAddress"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "address_identifier"),
    2: .standard(proto: "range_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt64Field(value: &self.addressIdentifier)
      case 2: try decoder.decodeRepeatedUInt32Field(value: &self.rangeList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.addressIdentifier.isEmpty {
      try visitor.visitRepeatedUInt64Field(value: self.addressIdentifier, fieldNumber: 1)
    }
    if !self.rangeList.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.rangeList, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_RangeAddress, rhs: TSK_RangeAddress) -> Bool {
    if lhs.addressIdentifier != rhs.addressIdentifier {return false}
    if lhs.rangeList != rhs.rangeList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Operation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "noop"),
    3: .standard(proto: "address_identifier"),
    4: .standard(proto: "insert_length"),
    5: .standard(proto: "preserve_lower_priority_location"),
    6: .standard(proto: "range_list"),
    7: .standard(proto: "transform_behavior"),
    8: .standard(proto: "property_id"),
    9: .standard(proto: "from_index"),
    10: .standard(proto: "to_index"),
    11: .same(proto: "dominating"),
    12: .standard(proto: "object_count"),
    13: .standard(proto: "object_counter_space"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularBoolField(value: &self._noop)
      case 3: try decoder.decodeRepeatedFixed64Field(value: &self.addressIdentifier)
      case 4: try decoder.decodeSingularUInt64Field(value: &self._insertLength)
      case 5: try decoder.decodeSingularBoolField(value: &self._preserveLowerPriorityLocation)
      case 6: try decoder.decodeRepeatedUInt32Field(value: &self.rangeList)
      case 7: try decoder.decodeSingularUInt32Field(value: &self._transformBehavior)
      case 8: try decoder.decodeSingularUInt32Field(value: &self._propertyID)
      case 9: try decoder.decodeSingularInt32Field(value: &self._fromIndex)
      case 10: try decoder.decodeSingularInt32Field(value: &self._toIndex)
      case 11: try decoder.decodeSingularBoolField(value: &self._dominating)
      case 12: try decoder.decodeSingularInt32Field(value: &self._objectCount)
      case 13: try decoder.decodeSingularInt32Field(value: &self._objectCounterSpace)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._noop {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if !self.addressIdentifier.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.addressIdentifier, fieldNumber: 3)
    }
    if let v = self._insertLength {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
    }
    if let v = self._preserveLowerPriorityLocation {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if !self.rangeList.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.rangeList, fieldNumber: 6)
    }
    if let v = self._transformBehavior {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._propertyID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    }
    if let v = self._fromIndex {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
    }
    if let v = self._toIndex {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
    }
    if let v = self._dominating {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    }
    if let v = self._objectCount {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
    }
    if let v = self._objectCounterSpace {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_Operation, rhs: TSK_Operation) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._noop != rhs._noop {return false}
    if lhs.addressIdentifier != rhs.addressIdentifier {return false}
    if lhs._insertLength != rhs._insertLength {return false}
    if lhs._preserveLowerPriorityLocation != rhs._preserveLowerPriorityLocation {return false}
    if lhs.rangeList != rhs.rangeList {return false}
    if lhs._transformBehavior != rhs._transformBehavior {return false}
    if lhs._propertyID != rhs._propertyID {return false}
    if lhs._fromIndex != rhs._fromIndex {return false}
    if lhs._toIndex != rhs._toIndex {return false}
    if lhs._dominating != rhs._dominating {return false}
    if lhs._objectCount != rhs._objectCount {return false}
    if lhs._objectCounterSpace != rhs._objectCounterSpace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_Operation.OperationType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Add"),
    1: .same(proto: "Remove"),
    2: .same(proto: "Placement"),
    3: .same(proto: "Rearrange"),
    4: .same(proto: "UpdateId"),
    5: .same(proto: "UpdateRange"),
    6: .same(proto: "ReplaceRange"),
  ]
}

extension TSK_OperationTransformer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OperationTransformer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "higher_priority"),
    2: .same(proto: "operations"),
  ]

  public var isInitialized: Bool {
    if self._higherPriority == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._higherPriority)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.operations)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._higherPriority {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if !self.operations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.operations, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_OperationTransformer, rhs: TSK_OperationTransformer) -> Bool {
    if lhs._higherPriority != rhs._higherPriority {return false}
    if lhs.operations != rhs.operations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_TransformerEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransformerEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sequence"),
    2: .standard(proto: "creation_time"),
    3: .same(proto: "transformer"),
  ]

  public var isInitialized: Bool {
    if self._sequence == nil {return false}
    if self._creationTime == nil {return false}
    if self._transformer == nil {return false}
    if let v = self._transformer, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._sequence)
      case 2: try decoder.decodeSingularDoubleField(value: &self._creationTime)
      case 3: try decoder.decodeSingularMessageField(value: &self._transformer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sequence {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._creationTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    if let v = self._transformer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_TransformerEntry, rhs: TSK_TransformerEntry) -> Bool {
    if lhs._sequence != rhs._sequence {return false}
    if lhs._creationTime != rhs._creationTime {return false}
    if lhs._transformer != rhs._transformer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_OutgoingCommandQueueItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OutgoingCommandQueueItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
    2: .standard(proto: "serialized_json_without_data_base64_encoded_string"),
    4: .standard(proto: "serialized_json_without_data_base64_encoded_data"),
    3: .standard(proto: "uuid_to_data_map_entries"),
  ]

  public var isInitialized: Bool {
    if let v = self._command, !v.isInitialized {return false}
    if let v = self._serializedJsonWithoutDataBase64EncodedData, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.uuidToDataMapEntries) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._command)
      case 2: try decoder.decodeSingularStringField(value: &self._serializedJsonWithoutDataBase64EncodedString)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.uuidToDataMapEntries)
      case 4: try decoder.decodeSingularMessageField(value: &self._serializedJsonWithoutDataBase64EncodedData)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._serializedJsonWithoutDataBase64EncodedString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if !self.uuidToDataMapEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.uuidToDataMapEntries, fieldNumber: 3)
    }
    if let v = self._serializedJsonWithoutDataBase64EncodedData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_OutgoingCommandQueueItem, rhs: TSK_OutgoingCommandQueueItem) -> Bool {
    if lhs._command != rhs._command {return false}
    if lhs._serializedJsonWithoutDataBase64EncodedString != rhs._serializedJsonWithoutDataBase64EncodedString {return false}
    if lhs._serializedJsonWithoutDataBase64EncodedData != rhs._serializedJsonWithoutDataBase64EncodedData {return false}
    if lhs.uuidToDataMapEntries != rhs.uuidToDataMapEntries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_OutgoingCommandQueueItemUUIDToDataMapEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OutgoingCommandQueueItemUUIDToDataMapEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "data"),
  ]

  public var isInitialized: Bool {
    if self._uuid == nil {return false}
    if self._data == nil {return false}
    if let v = self._uuid, !v.isInitialized {return false}
    if let v = self._data, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._uuid)
      case 2: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._uuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_OutgoingCommandQueueItemUUIDToDataMapEntry, rhs: TSK_OutgoingCommandQueueItemUUIDToDataMapEntry) -> Bool {
    if lhs._uuid != rhs._uuid {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_CollaborationDocumentSessionState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CollaborationDocumentSessionState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collaborator_ids"),
    3: .standard(proto: "rsvp_command_queue_items"),
    4: .standard(proto: "collaborator_cursor_transformer_entries"),
    5: .standard(proto: "acknowledged_commands_pending_resume_process_diffs"),
    6: .standard(proto: "unprocessed_commands_pending_resume_process_diffs"),
    7: .standard(proto: "command_acknowledgement_observer_entries"),
    8: .standard(proto: "transformer_from_unprocessed_command_operations_entries"),
    10: .standard(proto: "mailbox_request_document_revision_sequence"),
    11: .standard(proto: "mailbox_request_document_revision_identifier"),
    12: .standard(proto: "last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue"),
    13: .standard(proto: "last_command_send_marker_sequence"),
    14: .standard(proto: "last_command_send_marker_identifier"),
    15: .standard(proto: "skipped_acknowledged_commands_pending_resume_process_diffs"),
    16: .standard(proto: "last_too_old_command_identifier"),
    17: .standard(proto: "unprocessed_operation_entries_pending_resume_process_diffs"),
    18: .standard(proto: "send_pending_command_queue"),
    19: .standard(proto: "count_of_send_pending_command_queue_items_moved_from_rsvp_queue"),
    20: .standard(proto: "last_enqueued_document_load_command_identifier"),
  ]

  fileprivate class _StorageClass {
    var _collaboratorIds: [String] = []
    var _rsvpCommandQueueItems: [TSP_Reference] = []
    var _collaboratorCursorTransformerEntries: [TSP_Reference] = []
    var _acknowledgedCommandsPendingResumeProcessDiffs: [TSP_Reference] = []
    var _unprocessedCommandsPendingResumeProcessDiffs: [TSP_Reference] = []
    var _commandAcknowledgementObserverEntries: [TSK_CollaborationDocumentSessionState.AcknowledgementObserverEntry] = []
    var _transformerFromUnprocessedCommandOperationsEntries: [TSP_Reference] = []
    var _mailboxRequestDocumentRevisionSequence: Int32? = nil
    var _mailboxRequestDocumentRevisionIdentifier: String? = nil
    var _lastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue: Bool? = nil
    var _lastCommandSendMarkerSequence: Int32? = nil
    var _lastCommandSendMarkerIdentifier: String? = nil
    var _skippedAcknowledgedCommandsPendingResumeProcessDiffs: [TSP_Reference] = []
    var _lastTooOldCommandIdentifier: TSP_UUID? = nil
    var _unprocessedOperationEntriesPendingResumeProcessDiffs: TSP_Reference? = nil
    var _sendPendingCommandQueue: TSP_Reference? = nil
    var _countOfSendPendingCommandQueueItemsMovedFromRsvpQueue: UInt64? = nil
    var _lastEnqueuedDocumentLoadCommandIdentifier: TSP_UUID? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _collaboratorIds = source._collaboratorIds
      _rsvpCommandQueueItems = source._rsvpCommandQueueItems
      _collaboratorCursorTransformerEntries = source._collaboratorCursorTransformerEntries
      _acknowledgedCommandsPendingResumeProcessDiffs = source._acknowledgedCommandsPendingResumeProcessDiffs
      _unprocessedCommandsPendingResumeProcessDiffs = source._unprocessedCommandsPendingResumeProcessDiffs
      _commandAcknowledgementObserverEntries = source._commandAcknowledgementObserverEntries
      _transformerFromUnprocessedCommandOperationsEntries = source._transformerFromUnprocessedCommandOperationsEntries
      _mailboxRequestDocumentRevisionSequence = source._mailboxRequestDocumentRevisionSequence
      _mailboxRequestDocumentRevisionIdentifier = source._mailboxRequestDocumentRevisionIdentifier
      _lastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue = source._lastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue
      _lastCommandSendMarkerSequence = source._lastCommandSendMarkerSequence
      _lastCommandSendMarkerIdentifier = source._lastCommandSendMarkerIdentifier
      _skippedAcknowledgedCommandsPendingResumeProcessDiffs = source._skippedAcknowledgedCommandsPendingResumeProcessDiffs
      _lastTooOldCommandIdentifier = source._lastTooOldCommandIdentifier
      _unprocessedOperationEntriesPendingResumeProcessDiffs = source._unprocessedOperationEntriesPendingResumeProcessDiffs
      _sendPendingCommandQueue = source._sendPendingCommandQueue
      _countOfSendPendingCommandQueueItemsMovedFromRsvpQueue = source._countOfSendPendingCommandQueueItemsMovedFromRsvpQueue
      _lastEnqueuedDocumentLoadCommandIdentifier = source._lastEnqueuedDocumentLoadCommandIdentifier
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._rsvpCommandQueueItems) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._collaboratorCursorTransformerEntries) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._acknowledgedCommandsPendingResumeProcessDiffs) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._unprocessedCommandsPendingResumeProcessDiffs) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._commandAcknowledgementObserverEntries) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._transformerFromUnprocessedCommandOperationsEntries) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._skippedAcknowledgedCommandsPendingResumeProcessDiffs) {return false}
      if let v = _storage._lastTooOldCommandIdentifier, !v.isInitialized {return false}
      if let v = _storage._unprocessedOperationEntriesPendingResumeProcessDiffs, !v.isInitialized {return false}
      if let v = _storage._sendPendingCommandQueue, !v.isInitialized {return false}
      if let v = _storage._lastEnqueuedDocumentLoadCommandIdentifier, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedStringField(value: &_storage._collaboratorIds)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._rsvpCommandQueueItems)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._collaboratorCursorTransformerEntries)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._acknowledgedCommandsPendingResumeProcessDiffs)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._unprocessedCommandsPendingResumeProcessDiffs)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._commandAcknowledgementObserverEntries)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._transformerFromUnprocessedCommandOperationsEntries)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._mailboxRequestDocumentRevisionSequence)
        case 11: try decoder.decodeSingularStringField(value: &_storage._mailboxRequestDocumentRevisionIdentifier)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._lastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue)
        case 13: try decoder.decodeSingularInt32Field(value: &_storage._lastCommandSendMarkerSequence)
        case 14: try decoder.decodeSingularStringField(value: &_storage._lastCommandSendMarkerIdentifier)
        case 15: try decoder.decodeRepeatedMessageField(value: &_storage._skippedAcknowledgedCommandsPendingResumeProcessDiffs)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._lastTooOldCommandIdentifier)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._unprocessedOperationEntriesPendingResumeProcessDiffs)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._sendPendingCommandQueue)
        case 19: try decoder.decodeSingularUInt64Field(value: &_storage._countOfSendPendingCommandQueueItemsMovedFromRsvpQueue)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._lastEnqueuedDocumentLoadCommandIdentifier)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._collaboratorIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._collaboratorIds, fieldNumber: 1)
      }
      if !_storage._rsvpCommandQueueItems.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._rsvpCommandQueueItems, fieldNumber: 3)
      }
      if !_storage._collaboratorCursorTransformerEntries.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._collaboratorCursorTransformerEntries, fieldNumber: 4)
      }
      if !_storage._acknowledgedCommandsPendingResumeProcessDiffs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._acknowledgedCommandsPendingResumeProcessDiffs, fieldNumber: 5)
      }
      if !_storage._unprocessedCommandsPendingResumeProcessDiffs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._unprocessedCommandsPendingResumeProcessDiffs, fieldNumber: 6)
      }
      if !_storage._commandAcknowledgementObserverEntries.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._commandAcknowledgementObserverEntries, fieldNumber: 7)
      }
      if !_storage._transformerFromUnprocessedCommandOperationsEntries.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._transformerFromUnprocessedCommandOperationsEntries, fieldNumber: 8)
      }
      if let v = _storage._mailboxRequestDocumentRevisionSequence {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._mailboxRequestDocumentRevisionIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      }
      if let v = _storage._lastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      }
      if let v = _storage._lastCommandSendMarkerSequence {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      }
      if let v = _storage._lastCommandSendMarkerIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      }
      if !_storage._skippedAcknowledgedCommandsPendingResumeProcessDiffs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._skippedAcknowledgedCommandsPendingResumeProcessDiffs, fieldNumber: 15)
      }
      if let v = _storage._lastTooOldCommandIdentifier {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._unprocessedOperationEntriesPendingResumeProcessDiffs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._sendPendingCommandQueue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._countOfSendPendingCommandQueueItemsMovedFromRsvpQueue {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 19)
      }
      if let v = _storage._lastEnqueuedDocumentLoadCommandIdentifier {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_CollaborationDocumentSessionState, rhs: TSK_CollaborationDocumentSessionState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._collaboratorIds != rhs_storage._collaboratorIds {return false}
        if _storage._rsvpCommandQueueItems != rhs_storage._rsvpCommandQueueItems {return false}
        if _storage._collaboratorCursorTransformerEntries != rhs_storage._collaboratorCursorTransformerEntries {return false}
        if _storage._acknowledgedCommandsPendingResumeProcessDiffs != rhs_storage._acknowledgedCommandsPendingResumeProcessDiffs {return false}
        if _storage._unprocessedCommandsPendingResumeProcessDiffs != rhs_storage._unprocessedCommandsPendingResumeProcessDiffs {return false}
        if _storage._commandAcknowledgementObserverEntries != rhs_storage._commandAcknowledgementObserverEntries {return false}
        if _storage._transformerFromUnprocessedCommandOperationsEntries != rhs_storage._transformerFromUnprocessedCommandOperationsEntries {return false}
        if _storage._mailboxRequestDocumentRevisionSequence != rhs_storage._mailboxRequestDocumentRevisionSequence {return false}
        if _storage._mailboxRequestDocumentRevisionIdentifier != rhs_storage._mailboxRequestDocumentRevisionIdentifier {return false}
        if _storage._lastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue != rhs_storage._lastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue {return false}
        if _storage._lastCommandSendMarkerSequence != rhs_storage._lastCommandSendMarkerSequence {return false}
        if _storage._lastCommandSendMarkerIdentifier != rhs_storage._lastCommandSendMarkerIdentifier {return false}
        if _storage._skippedAcknowledgedCommandsPendingResumeProcessDiffs != rhs_storage._skippedAcknowledgedCommandsPendingResumeProcessDiffs {return false}
        if _storage._lastTooOldCommandIdentifier != rhs_storage._lastTooOldCommandIdentifier {return false}
        if _storage._unprocessedOperationEntriesPendingResumeProcessDiffs != rhs_storage._unprocessedOperationEntriesPendingResumeProcessDiffs {return false}
        if _storage._sendPendingCommandQueue != rhs_storage._sendPendingCommandQueue {return false}
        if _storage._countOfSendPendingCommandQueueItemsMovedFromRsvpQueue != rhs_storage._countOfSendPendingCommandQueueItemsMovedFromRsvpQueue {return false}
        if _storage._lastEnqueuedDocumentLoadCommandIdentifier != rhs_storage._lastEnqueuedDocumentLoadCommandIdentifier {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_CollaborationDocumentSessionState.AcknowledgementObserverEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSK_CollaborationDocumentSessionState.protoMessageName + ".AcknowledgementObserverEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "command_identifier"),
    2: .standard(proto: "acknowledgement_observers"),
  ]

  public var isInitialized: Bool {
    if self._commandIdentifier == nil {return false}
    if let v = self._commandIdentifier, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.acknowledgementObservers) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._commandIdentifier)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.acknowledgementObservers)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commandIdentifier {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.acknowledgementObservers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.acknowledgementObservers, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_CollaborationDocumentSessionState.AcknowledgementObserverEntry, rhs: TSK_CollaborationDocumentSessionState.AcknowledgementObserverEntry) -> Bool {
    if lhs._commandIdentifier != rhs._commandIdentifier {return false}
    if lhs.acknowledgementObservers != rhs.acknowledgementObservers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_NativeContentDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NativeContentDescription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_name"),
    2: .standard(proto: "app_version"),
    3: .standard(proto: "document_id"),
    4: .standard(proto: "drawable_descriptions"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.drawableDescriptions) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._appName)
      case 2: try decoder.decodeSingularStringField(value: &self._appVersion)
      case 3: try decoder.decodeSingularStringField(value: &self._documentID)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.drawableDescriptions)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._appName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._appVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._documentID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if !self.drawableDescriptions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.drawableDescriptions, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_NativeContentDescription, rhs: TSK_NativeContentDescription) -> Bool {
    if lhs._appName != rhs._appName {return false}
    if lhs._appVersion != rhs._appVersion {return false}
    if lhs._documentID != rhs._documentID {return false}
    if lhs.drawableDescriptions != rhs.drawableDescriptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_StructuredTextImportSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StructuredTextImportSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "starting_row"),
    3: .standard(proto: "decimal_separators"),
    4: .standard(proto: "thousands_separators"),
    5: .standard(proto: "transpose_rows_and_columns"),
    6: .same(proto: "delimiters"),
    7: .standard(proto: "text_qualifiers"),
    8: .standard(proto: "collapse_consecutive"),
    9: .standard(proto: "column_offsets"),
    10: .standard(proto: "automatic_delimiters"),
    11: .standard(proto: "automatic_offsets"),
    12: .standard(proto: "source_encoding"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if self._startingRow == nil {return false}
    if let v = self._columnOffsets, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularInt32Field(value: &self._startingRow)
      case 3: try decoder.decodeRepeatedStringField(value: &self.decimalSeparators)
      case 4: try decoder.decodeRepeatedStringField(value: &self.thousandsSeparators)
      case 5: try decoder.decodeSingularBoolField(value: &self._transposeRowsAndColumns)
      case 6: try decoder.decodeRepeatedStringField(value: &self.delimiters)
      case 7: try decoder.decodeRepeatedStringField(value: &self.textQualifiers)
      case 8: try decoder.decodeSingularBoolField(value: &self._collapseConsecutive)
      case 9: try decoder.decodeSingularMessageField(value: &self._columnOffsets)
      case 10: try decoder.decodeSingularBoolField(value: &self._automaticDelimiters)
      case 11: try decoder.decodeSingularBoolField(value: &self._automaticOffsets)
      case 12: try decoder.decodeSingularUInt64Field(value: &self._sourceEncoding)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._startingRow {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if !self.decimalSeparators.isEmpty {
      try visitor.visitRepeatedStringField(value: self.decimalSeparators, fieldNumber: 3)
    }
    if !self.thousandsSeparators.isEmpty {
      try visitor.visitRepeatedStringField(value: self.thousandsSeparators, fieldNumber: 4)
    }
    if let v = self._transposeRowsAndColumns {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if !self.delimiters.isEmpty {
      try visitor.visitRepeatedStringField(value: self.delimiters, fieldNumber: 6)
    }
    if !self.textQualifiers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.textQualifiers, fieldNumber: 7)
    }
    if let v = self._collapseConsecutive {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._columnOffsets {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._automaticDelimiters {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    }
    if let v = self._automaticOffsets {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    }
    if let v = self._sourceEncoding {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_StructuredTextImportSettings, rhs: TSK_StructuredTextImportSettings) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._startingRow != rhs._startingRow {return false}
    if lhs.decimalSeparators != rhs.decimalSeparators {return false}
    if lhs.thousandsSeparators != rhs.thousandsSeparators {return false}
    if lhs._transposeRowsAndColumns != rhs._transposeRowsAndColumns {return false}
    if lhs.delimiters != rhs.delimiters {return false}
    if lhs.textQualifiers != rhs.textQualifiers {return false}
    if lhs._collapseConsecutive != rhs._collapseConsecutive {return false}
    if lhs._columnOffsets != rhs._columnOffsets {return false}
    if lhs._automaticDelimiters != rhs._automaticDelimiters {return false}
    if lhs._automaticOffsets != rhs._automaticOffsets {return false}
    if lhs._sourceEncoding != rhs._sourceEncoding {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_OperationStorageCommandOperationsEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OperationStorageCommandOperationsEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "command_identifier_same_as_revision_identifier"),
    2: .standard(proto: "command_identifier"),
    3: .same(proto: "operations"),
    4: .standard(proto: "server_originated"),
    5: .standard(proto: "coalesced_command_entry_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._commandIdentifierSameAsRevisionIdentifier)
      case 2: try decoder.decodeRepeatedFixed64Field(value: &self.commandIdentifier)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.operations)
      case 4: try decoder.decodeSingularBoolField(value: &self._serverOriginated)
      case 5: try decoder.decodeSingularUInt64Field(value: &self._coalescedCommandEntryCount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commandIdentifierSameAsRevisionIdentifier {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if !self.commandIdentifier.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.commandIdentifier, fieldNumber: 2)
    }
    if !self.operations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.operations, fieldNumber: 3)
    }
    if let v = self._serverOriginated {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._coalescedCommandEntryCount {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_OperationStorageCommandOperationsEntry, rhs: TSK_OperationStorageCommandOperationsEntry) -> Bool {
    if lhs._commandIdentifierSameAsRevisionIdentifier != rhs._commandIdentifierSameAsRevisionIdentifier {return false}
    if lhs.commandIdentifier != rhs.commandIdentifier {return false}
    if lhs.operations != rhs.operations {return false}
    if lhs._serverOriginated != rhs._serverOriginated {return false}
    if lhs._coalescedCommandEntryCount != rhs._coalescedCommandEntryCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_OperationStorageEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OperationStorageEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "document_revision_identifier"),
    2: .standard(proto: "document_revision_sequence_delta"),
    3: .standard(proto: "command_operation_entries"),
    4: .standard(proto: "first_entry_creation_time"),
    5: .standard(proto: "creation_time_diff_bucket"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedFixed64Field(value: &self.documentRevisionIdentifier)
      case 2: try decoder.decodeSingularInt32Field(value: &self._documentRevisionSequenceDelta)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.commandOperationEntries)
      case 4: try decoder.decodeSingularDoubleField(value: &self._firstEntryCreationTime)
      case 5: try decoder.decodeSingularInt32Field(value: &self._creationTimeDiffBucket)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.documentRevisionIdentifier.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.documentRevisionIdentifier, fieldNumber: 1)
    }
    if let v = self._documentRevisionSequenceDelta {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if !self.commandOperationEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.commandOperationEntries, fieldNumber: 3)
    }
    if let v = self._firstEntryCreationTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    }
    if let v = self._creationTimeDiffBucket {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_OperationStorageEntry, rhs: TSK_OperationStorageEntry) -> Bool {
    if lhs.documentRevisionIdentifier != rhs.documentRevisionIdentifier {return false}
    if lhs._documentRevisionSequenceDelta != rhs._documentRevisionSequenceDelta {return false}
    if lhs.commandOperationEntries != rhs.commandOperationEntries {return false}
    if lhs._firstEntryCreationTime != rhs._firstEntryCreationTime {return false}
    if lhs._creationTimeDiffBucket != rhs._creationTimeDiffBucket {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_OperationStorageEntryArray: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OperationStorageEntryArray"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "large_array"),
  ]

  public var isInitialized: Bool {
    if let v = self._largeArray, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._largeArray)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._largeArray {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_OperationStorageEntryArray, rhs: TSK_OperationStorageEntryArray) -> Bool {
    if lhs._largeArray != rhs._largeArray {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_OperationStorageEntryArraySegment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OperationStorageEntryArraySegment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "large_array_segment"),
    2: .same(proto: "elements"),
    3: .standard(proto: "last_document_revision_sequence_before_segment"),
    4: .standard(proto: "last_document_revision_sequence"),
    5: .standard(proto: "segment_first_entry_creation_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._largeArraySegment)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.elements)
      case 3: try decoder.decodeSingularInt32Field(value: &self._lastDocumentRevisionSequenceBeforeSegment)
      case 4: try decoder.decodeSingularInt32Field(value: &self._lastDocumentRevisionSequence)
      case 5: try decoder.decodeSingularDoubleField(value: &self._segmentFirstEntryCreationTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._largeArraySegment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.elements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.elements, fieldNumber: 2)
    }
    if let v = self._lastDocumentRevisionSequenceBeforeSegment {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._lastDocumentRevisionSequence {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._segmentFirstEntryCreationTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_OperationStorageEntryArraySegment, rhs: TSK_OperationStorageEntryArraySegment) -> Bool {
    if lhs._largeArraySegment != rhs._largeArraySegment {return false}
    if lhs.elements != rhs.elements {return false}
    if lhs._lastDocumentRevisionSequenceBeforeSegment != rhs._lastDocumentRevisionSequenceBeforeSegment {return false}
    if lhs._lastDocumentRevisionSequence != rhs._lastDocumentRevisionSequence {return false}
    if lhs._segmentFirstEntryCreationTime != rhs._segmentFirstEntryCreationTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_OperationStorage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OperationStorage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
    2: .standard(proto: "operation_count"),
    3: .standard(proto: "last_document_revision_sequence"),
    4: .standard(proto: "last_document_revision_identifier"),
    5: .standard(proto: "last_unskippable_document_revision_before_entries_sequence"),
    6: .standard(proto: "last_unskippable_document_revision_before_entries_identifier"),
    7: .standard(proto: "last_unskippable_document_revision_in_entries_sequence"),
    8: .standard(proto: "last_unskippable_document_revision_in_entries_identifier"),
    9: .standard(proto: "days_with_an_entry"),
  ]

  public var isInitialized: Bool {
    if self._entries == nil {return false}
    if self._operationCount == nil {return false}
    if let v = self._entries, !v.isInitialized {return false}
    if let v = self._daysWithAnEntry, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._entries)
      case 2: try decoder.decodeSingularUInt64Field(value: &self._operationCount)
      case 3: try decoder.decodeSingularInt32Field(value: &self._lastDocumentRevisionSequence)
      case 4: try decoder.decodeRepeatedFixed64Field(value: &self.lastDocumentRevisionIdentifier)
      case 5: try decoder.decodeSingularInt32Field(value: &self._lastUnskippableDocumentRevisionBeforeEntriesSequence)
      case 6: try decoder.decodeRepeatedFixed64Field(value: &self.lastUnskippableDocumentRevisionBeforeEntriesIdentifier)
      case 7: try decoder.decodeSingularInt32Field(value: &self._lastUnskippableDocumentRevisionInEntriesSequence)
      case 8: try decoder.decodeRepeatedFixed64Field(value: &self.lastUnskippableDocumentRevisionInEntriesIdentifier)
      case 9: try decoder.decodeSingularMessageField(value: &self._daysWithAnEntry)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._entries {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._operationCount {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }
    if let v = self._lastDocumentRevisionSequence {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if !self.lastDocumentRevisionIdentifier.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.lastDocumentRevisionIdentifier, fieldNumber: 4)
    }
    if let v = self._lastUnskippableDocumentRevisionBeforeEntriesSequence {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    if !self.lastUnskippableDocumentRevisionBeforeEntriesIdentifier.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.lastUnskippableDocumentRevisionBeforeEntriesIdentifier, fieldNumber: 6)
    }
    if let v = self._lastUnskippableDocumentRevisionInEntriesSequence {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    }
    if !self.lastUnskippableDocumentRevisionInEntriesIdentifier.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.lastUnskippableDocumentRevisionInEntriesIdentifier, fieldNumber: 8)
    }
    if let v = self._daysWithAnEntry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_OperationStorage, rhs: TSK_OperationStorage) -> Bool {
    if lhs._entries != rhs._entries {return false}
    if lhs._operationCount != rhs._operationCount {return false}
    if lhs._lastDocumentRevisionSequence != rhs._lastDocumentRevisionSequence {return false}
    if lhs.lastDocumentRevisionIdentifier != rhs.lastDocumentRevisionIdentifier {return false}
    if lhs._lastUnskippableDocumentRevisionBeforeEntriesSequence != rhs._lastUnskippableDocumentRevisionBeforeEntriesSequence {return false}
    if lhs.lastUnskippableDocumentRevisionBeforeEntriesIdentifier != rhs.lastUnskippableDocumentRevisionBeforeEntriesIdentifier {return false}
    if lhs._lastUnskippableDocumentRevisionInEntriesSequence != rhs._lastUnskippableDocumentRevisionInEntriesSequence {return false}
    if lhs.lastUnskippableDocumentRevisionInEntriesIdentifier != rhs.lastUnskippableDocumentRevisionInEntriesIdentifier {return false}
    if lhs._daysWithAnEntry != rhs._daysWithAnEntry {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_OutgoingCommandQueue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OutgoingCommandQueue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "large_object_array"),
  ]

  public var isInitialized: Bool {
    if let v = self._largeObjectArray, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._largeObjectArray)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._largeObjectArray {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_OutgoingCommandQueue, rhs: TSK_OutgoingCommandQueue) -> Bool {
    if lhs._largeObjectArray != rhs._largeObjectArray {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_OutgoingCommandQueueSegment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OutgoingCommandQueueSegment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "large_object_array_segment"),
  ]

  public var isInitialized: Bool {
    if let v = self._largeObjectArraySegment, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._largeObjectArraySegment)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._largeObjectArraySegment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_OutgoingCommandQueueSegment, rhs: TSK_OutgoingCommandQueueSegment) -> Bool {
    if lhs._largeObjectArraySegment != rhs._largeObjectArraySegment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_DataReferenceRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataReferenceRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "added_container_uuid_to_referenced_data_pairs"),
    2: .standard(proto: "removed_container_uuid_to_referenced_data_pairs"),
    3: .standard(proto: "unbounded_referenced_datas"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.addedContainerUuidToReferencedDataPairs) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.removedContainerUuidToReferencedDataPairs) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.unboundedReferencedDatas) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.addedContainerUuidToReferencedDataPairs)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.removedContainerUuidToReferencedDataPairs)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.unboundedReferencedDatas)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.addedContainerUuidToReferencedDataPairs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addedContainerUuidToReferencedDataPairs, fieldNumber: 1)
    }
    if !self.removedContainerUuidToReferencedDataPairs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.removedContainerUuidToReferencedDataPairs, fieldNumber: 2)
    }
    if !self.unboundedReferencedDatas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unboundedReferencedDatas, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_DataReferenceRecord, rhs: TSK_DataReferenceRecord) -> Bool {
    if lhs.addedContainerUuidToReferencedDataPairs != rhs.addedContainerUuidToReferencedDataPairs {return false}
    if lhs.removedContainerUuidToReferencedDataPairs != rhs.removedContainerUuidToReferencedDataPairs {return false}
    if lhs.unboundedReferencedDatas != rhs.unboundedReferencedDatas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSK_DataReferenceRecord.ContainerUUIDToReferencedDataPair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSK_DataReferenceRecord.protoMessageName + ".ContainerUUIDToReferencedDataPair"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "container_uuid"),
    2: .standard(proto: "referenced_data"),
    3: .standard(proto: "reference_count"),
  ]

  public var isInitialized: Bool {
    if self._containerUuid == nil {return false}
    if self._referencedData == nil {return false}
    if self._referenceCount == nil {return false}
    if let v = self._containerUuid, !v.isInitialized {return false}
    if let v = self._referencedData, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._containerUuid)
      case 2: try decoder.decodeSingularMessageField(value: &self._referencedData)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._referenceCount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._containerUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._referencedData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._referenceCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSK_DataReferenceRecord.ContainerUUIDToReferencedDataPair, rhs: TSK_DataReferenceRecord.ContainerUUIDToReferencedDataPair) -> Bool {
    if lhs._containerUuid != rhs._containerUuid {return false}
    if lhs._referencedData != rhs._referencedData {return false}
    if lhs._referenceCount != rhs._referenceCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
