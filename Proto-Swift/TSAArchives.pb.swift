// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TSAArchives.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum TSA_GalleryInfoCaptionMode: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case perImage // = 1
  case allImages // = 2

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .perImage
    case 2: self = .allImages
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .perImage: return 1
    case .allImages: return 2
    }
  }

}

#if swift(>=4.2)

extension TSA_GalleryInfoCaptionMode: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum TSA_GalleryInfoProperty: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case galleryInfoCaptionProperty // = 0

  init() {
    self = .galleryInfoCaptionProperty
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .galleryInfoCaptionProperty
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .galleryInfoCaptionProperty: return 0
    }
  }

}

#if swift(>=4.2)

extension TSA_GalleryInfoProperty: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum TSA_GalleryCaptionMode: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case perImage // = 1
  case allImages // = 2

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .perImage
    case 2: self = .allImages
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .perImage: return 1
    case .allImages: return 2
    }
  }

}

#if swift(>=4.2)

extension TSA_GalleryCaptionMode: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum TSA_GalleryItemProperty: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case imageData // = 0
  case thumbnailImageData // = 1
  case accessibilityDescription // = 2

  init() {
    self = .imageData
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .imageData
    case 1: self = .thumbnailImageData
    case 2: self = .accessibilityDescription
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .imageData: return 0
    case .thumbnailImageData: return 1
    case .accessibilityDescription: return 2
    }
  }

}

#if swift(>=4.2)

extension TSA_GalleryItemProperty: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSA_DocumentArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_DocumentArchive {
    get {return _super ?? TSK_DocumentArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var textPresetDisplayItems: [TSWP_TextPresetDisplayItemArchive] = []

  var documentLanguage: String {
    get {return _documentLanguage ?? String()}
    set {_documentLanguage = newValue}
  }
  /// Returns true if `documentLanguage` has been explicitly set.
  var hasDocumentLanguage: Bool {return self._documentLanguage != nil}
  /// Clears the value of `documentLanguage`. Subsequent reads from it will return its default value.
  mutating func clearDocumentLanguage() {self._documentLanguage = nil}

  var calculationEngine: TSP_Reference {
    get {return _calculationEngine ?? TSP_Reference()}
    set {_calculationEngine = newValue}
  }
  /// Returns true if `calculationEngine` has been explicitly set.
  var hasCalculationEngine: Bool {return self._calculationEngine != nil}
  /// Clears the value of `calculationEngine`. Subsequent reads from it will return its default value.
  mutating func clearCalculationEngine() {self._calculationEngine = nil}

  var viewState: TSP_Reference {
    get {return _viewState ?? TSP_Reference()}
    set {_viewState = newValue}
  }
  /// Returns true if `viewState` has been explicitly set.
  var hasViewState: Bool {return self._viewState != nil}
  /// Clears the value of `viewState`. Subsequent reads from it will return its default value.
  mutating func clearViewState() {self._viewState = nil}

  var functionBrowserState: TSP_Reference {
    get {return _functionBrowserState ?? TSP_Reference()}
    set {_functionBrowserState = newValue}
  }
  /// Returns true if `functionBrowserState` has been explicitly set.
  var hasFunctionBrowserState: Bool {return self._functionBrowserState != nil}
  /// Clears the value of `functionBrowserState`. Subsequent reads from it will return its default value.
  mutating func clearFunctionBrowserState() {self._functionBrowserState = nil}

  var tablesCustomFormatList: TSP_Reference {
    get {return _tablesCustomFormatList ?? TSP_Reference()}
    set {_tablesCustomFormatList = newValue}
  }
  /// Returns true if `tablesCustomFormatList` has been explicitly set.
  var hasTablesCustomFormatList: Bool {return self._tablesCustomFormatList != nil}
  /// Clears the value of `tablesCustomFormatList`. Subsequent reads from it will return its default value.
  mutating func clearTablesCustomFormatList() {self._tablesCustomFormatList = nil}

  var needsMediaCompatibilityUpgrade: Bool {
    get {return _needsMediaCompatibilityUpgrade ?? false}
    set {_needsMediaCompatibilityUpgrade = newValue}
  }
  /// Returns true if `needsMediaCompatibilityUpgrade` has been explicitly set.
  var hasNeedsMediaCompatibilityUpgrade: Bool {return self._needsMediaCompatibilityUpgrade != nil}
  /// Clears the value of `needsMediaCompatibilityUpgrade`. Subsequent reads from it will return its default value.
  mutating func clearNeedsMediaCompatibilityUpgrade() {self._needsMediaCompatibilityUpgrade = nil}

  var templateIdentifier: String {
    get {return _templateIdentifier ?? String()}
    set {_templateIdentifier = newValue}
  }
  /// Returns true if `templateIdentifier` has been explicitly set.
  var hasTemplateIdentifier: Bool {return self._templateIdentifier != nil}
  /// Clears the value of `templateIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearTemplateIdentifier() {self._templateIdentifier = nil}

  var shortcutController: TSP_Reference {
    get {return _shortcutController ?? TSP_Reference()}
    set {_shortcutController = newValue}
  }
  /// Returns true if `shortcutController` has been explicitly set.
  var hasShortcutController: Bool {return self._shortcutController != nil}
  /// Clears the value of `shortcutController`. Subsequent reads from it will return its default value.
  mutating func clearShortcutController() {self._shortcutController = nil}

  var annotationCacheDeprecated: TSP_Reference {
    get {return _annotationCacheDeprecated ?? TSP_Reference()}
    set {_annotationCacheDeprecated = newValue}
  }
  /// Returns true if `annotationCacheDeprecated` has been explicitly set.
  var hasAnnotationCacheDeprecated: Bool {return self._annotationCacheDeprecated != nil}
  /// Clears the value of `annotationCacheDeprecated`. Subsequent reads from it will return its default value.
  mutating func clearAnnotationCacheDeprecated() {self._annotationCacheDeprecated = nil}

  var customFormatList: TSP_Reference {
    get {return _customFormatList ?? TSP_Reference()}
    set {_customFormatList = newValue}
  }
  /// Returns true if `customFormatList` has been explicitly set.
  var hasCustomFormatList: Bool {return self._customFormatList != nil}
  /// Clears the value of `customFormatList`. Subsequent reads from it will return its default value.
  mutating func clearCustomFormatList() {self._customFormatList = nil}

  var annotationCacheDeprecated2: TSP_Reference {
    get {return _annotationCacheDeprecated2 ?? TSP_Reference()}
    set {_annotationCacheDeprecated2 = newValue}
  }
  /// Returns true if `annotationCacheDeprecated2` has been explicitly set.
  var hasAnnotationCacheDeprecated2: Bool {return self._annotationCacheDeprecated2 != nil}
  /// Clears the value of `annotationCacheDeprecated2`. Subsequent reads from it will return its default value.
  mutating func clearAnnotationCacheDeprecated2() {self._annotationCacheDeprecated2 = nil}

  var collaborativeMediaCompatibilityUpgradeDidFail: Bool {
    get {return _collaborativeMediaCompatibilityUpgradeDidFail ?? false}
    set {_collaborativeMediaCompatibilityUpgradeDidFail = newValue}
  }
  /// Returns true if `collaborativeMediaCompatibilityUpgradeDidFail` has been explicitly set.
  var hasCollaborativeMediaCompatibilityUpgradeDidFail: Bool {return self._collaborativeMediaCompatibilityUpgradeDidFail != nil}
  /// Clears the value of `collaborativeMediaCompatibilityUpgradeDidFail`. Subsequent reads from it will return its default value.
  mutating func clearCollaborativeMediaCompatibilityUpgradeDidFail() {self._collaborativeMediaCompatibilityUpgradeDidFail = nil}

  var canUseHevc: Bool {
    get {return _canUseHevc ?? false}
    set {_canUseHevc = newValue}
  }
  /// Returns true if `canUseHevc` has been explicitly set.
  var hasCanUseHevc: Bool {return self._canUseHevc != nil}
  /// Clears the value of `canUseHevc`. Subsequent reads from it will return its default value.
  mutating func clearCanUseHevc() {self._canUseHevc = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_DocumentArchive? = nil
  fileprivate var _documentLanguage: String? = nil
  fileprivate var _calculationEngine: TSP_Reference? = nil
  fileprivate var _viewState: TSP_Reference? = nil
  fileprivate var _functionBrowserState: TSP_Reference? = nil
  fileprivate var _tablesCustomFormatList: TSP_Reference? = nil
  fileprivate var _needsMediaCompatibilityUpgrade: Bool? = nil
  fileprivate var _templateIdentifier: String? = nil
  fileprivate var _shortcutController: TSP_Reference? = nil
  fileprivate var _annotationCacheDeprecated: TSP_Reference? = nil
  fileprivate var _customFormatList: TSP_Reference? = nil
  fileprivate var _annotationCacheDeprecated2: TSP_Reference? = nil
  fileprivate var _collaborativeMediaCompatibilityUpgradeDidFail: Bool? = nil
  fileprivate var _canUseHevc: Bool? = nil
}

struct TSA_FunctionBrowserStateArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recentFunctions: [UInt32] = []

  var backFunctions: [UInt32] = []

  var forwardFunctions: [UInt32] = []

  var currentFunction: UInt32 {
    get {return _currentFunction ?? 0}
    set {_currentFunction = newValue}
  }
  /// Returns true if `currentFunction` has been explicitly set.
  var hasCurrentFunction: Bool {return self._currentFunction != nil}
  /// Clears the value of `currentFunction`. Subsequent reads from it will return its default value.
  mutating func clearCurrentFunction() {self._currentFunction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _currentFunction: UInt32? = nil
}

struct TSA_TestDocumentArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSA_DocumentArchive {
    get {return _super ?? TSA_DocumentArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var value: String {
    get {return _value ?? String()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSA_DocumentArchive? = nil
  fileprivate var _value: String? = nil
}

struct TSA_ShortcutControllerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entries: [TSA_ShortcutControllerArchive.ShortcutMapEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct ShortcutMapEntry {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var shortcut: String {
      get {return _shortcut ?? String()}
      set {_shortcut = newValue}
    }
    /// Returns true if `shortcut` has been explicitly set.
    var hasShortcut: Bool {return self._shortcut != nil}
    /// Clears the value of `shortcut`. Subsequent reads from it will return its default value.
    mutating func clearShortcut() {self._shortcut = nil}

    var style: TSP_Reference {
      get {return _style ?? TSP_Reference()}
      set {_style = newValue}
    }
    /// Returns true if `style` has been explicitly set.
    var hasStyle: Bool {return self._style != nil}
    /// Clears the value of `style`. Subsequent reads from it will return its default value.
    mutating func clearStyle() {self._style = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _shortcut: String? = nil
    fileprivate var _style: TSP_Reference? = nil
  }

  init() {}
}

struct TSA_PropagatePresetCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var presetChangeCommand: TSP_Reference {
    get {return _presetChangeCommand ?? TSP_Reference()}
    set {_presetChangeCommand = newValue}
  }
  /// Returns true if `presetChangeCommand` has been explicitly set.
  var hasPresetChangeCommand: Bool {return self._presetChangeCommand != nil}
  /// Clears the value of `presetChangeCommand`. Subsequent reads from it will return its default value.
  mutating func clearPresetChangeCommand() {self._presetChangeCommand = nil}

  var alwaysPreserveAppearance: Bool {
    get {return _alwaysPreserveAppearance ?? false}
    set {_alwaysPreserveAppearance = newValue}
  }
  /// Returns true if `alwaysPreserveAppearance` has been explicitly set.
  var hasAlwaysPreserveAppearance: Bool {return self._alwaysPreserveAppearance != nil}
  /// Clears the value of `alwaysPreserveAppearance`. Subsequent reads from it will return its default value.
  mutating func clearAlwaysPreserveAppearance() {self._alwaysPreserveAppearance = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _presetChangeCommand: TSP_Reference? = nil
  fileprivate var _alwaysPreserveAppearance: Bool? = nil
}

struct TSA_ShortcutCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldStyle: TSP_Reference {
    get {return _oldStyle ?? TSP_Reference()}
    set {_oldStyle = newValue}
  }
  /// Returns true if `oldStyle` has been explicitly set.
  var hasOldStyle: Bool {return self._oldStyle != nil}
  /// Clears the value of `oldStyle`. Subsequent reads from it will return its default value.
  mutating func clearOldStyle() {self._oldStyle = nil}

  var newStyle: TSP_Reference {
    get {return _newStyle ?? TSP_Reference()}
    set {_newStyle = newValue}
  }
  /// Returns true if `newStyle` has been explicitly set.
  var hasNewStyle: Bool {return self._newStyle != nil}
  /// Clears the value of `newStyle`. Subsequent reads from it will return its default value.
  mutating func clearNewStyle() {self._newStyle = nil}

  var oldShortcut: String {
    get {return _oldShortcut ?? String()}
    set {_oldShortcut = newValue}
  }
  /// Returns true if `oldShortcut` has been explicitly set.
  var hasOldShortcut: Bool {return self._oldShortcut != nil}
  /// Clears the value of `oldShortcut`. Subsequent reads from it will return its default value.
  mutating func clearOldShortcut() {self._oldShortcut = nil}

  var newShortcut: String {
    get {return _newShortcut ?? String()}
    set {_newShortcut = newValue}
  }
  /// Returns true if `newShortcut` has been explicitly set.
  var hasNewShortcut: Bool {return self._newShortcut != nil}
  /// Clears the value of `newShortcut`. Subsequent reads from it will return its default value.
  mutating func clearNewShortcut() {self._newShortcut = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _oldStyle: TSP_Reference? = nil
  fileprivate var _newStyle: TSP_Reference? = nil
  fileprivate var _oldShortcut: String? = nil
  fileprivate var _newShortcut: String? = nil
}

struct TSA_AddCustomFormatCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var customFormat: TSK_CustomFormatArchive {
    get {return _customFormat ?? TSK_CustomFormatArchive()}
    set {_customFormat = newValue}
  }
  /// Returns true if `customFormat` has been explicitly set.
  var hasCustomFormat: Bool {return self._customFormat != nil}
  /// Clears the value of `customFormat`. Subsequent reads from it will return its default value.
  mutating func clearCustomFormat() {self._customFormat = nil}

  var customFormatKey: TSP_UUID {
    get {return _customFormatKey ?? TSP_UUID()}
    set {_customFormatKey = newValue}
  }
  /// Returns true if `customFormatKey` has been explicitly set.
  var hasCustomFormatKey: Bool {return self._customFormatKey != nil}
  /// Clears the value of `customFormatKey`. Subsequent reads from it will return its default value.
  mutating func clearCustomFormatKey() {self._customFormatKey = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _customFormat: TSK_CustomFormatArchive? = nil
  fileprivate var _customFormatKey: TSP_UUID? = nil
}

struct TSA_UpdateCustomFormatCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var customFormat: TSK_CustomFormatArchive {
    get {return _customFormat ?? TSK_CustomFormatArchive()}
    set {_customFormat = newValue}
  }
  /// Returns true if `customFormat` has been explicitly set.
  var hasCustomFormat: Bool {return self._customFormat != nil}
  /// Clears the value of `customFormat`. Subsequent reads from it will return its default value.
  mutating func clearCustomFormat() {self._customFormat = nil}

  var oldCustomFormat: TSK_CustomFormatArchive {
    get {return _oldCustomFormat ?? TSK_CustomFormatArchive()}
    set {_oldCustomFormat = newValue}
  }
  /// Returns true if `oldCustomFormat` has been explicitly set.
  var hasOldCustomFormat: Bool {return self._oldCustomFormat != nil}
  /// Clears the value of `oldCustomFormat`. Subsequent reads from it will return its default value.
  mutating func clearOldCustomFormat() {self._oldCustomFormat = nil}

  var customFormatKey: TSP_UUID {
    get {return _customFormatKey ?? TSP_UUID()}
    set {_customFormatKey = newValue}
  }
  /// Returns true if `customFormatKey` has been explicitly set.
  var hasCustomFormatKey: Bool {return self._customFormatKey != nil}
  /// Clears the value of `customFormatKey`. Subsequent reads from it will return its default value.
  mutating func clearCustomFormatKey() {self._customFormatKey = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _customFormat: TSK_CustomFormatArchive? = nil
  fileprivate var _oldCustomFormat: TSK_CustomFormatArchive? = nil
  fileprivate var _customFormatKey: TSP_UUID? = nil
}

struct TSA_ReplaceCustomFormatCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var customFormat: TSK_CustomFormatArchive {
    get {return _customFormat ?? TSK_CustomFormatArchive()}
    set {_customFormat = newValue}
  }
  /// Returns true if `customFormat` has been explicitly set.
  var hasCustomFormat: Bool {return self._customFormat != nil}
  /// Clears the value of `customFormat`. Subsequent reads from it will return its default value.
  mutating func clearCustomFormat() {self._customFormat = nil}

  var customFormatKey: TSP_UUID {
    get {return _customFormatKey ?? TSP_UUID()}
    set {_customFormatKey = newValue}
  }
  /// Returns true if `customFormatKey` has been explicitly set.
  var hasCustomFormatKey: Bool {return self._customFormatKey != nil}
  /// Clears the value of `customFormatKey`. Subsequent reads from it will return its default value.
  mutating func clearCustomFormatKey() {self._customFormatKey = nil}

  var replacementFormat: TSK_FormatStructArchive {
    get {return _replacementFormat ?? TSK_FormatStructArchive()}
    set {_replacementFormat = newValue}
  }
  /// Returns true if `replacementFormat` has been explicitly set.
  var hasReplacementFormat: Bool {return self._replacementFormat != nil}
  /// Clears the value of `replacementFormat`. Subsequent reads from it will return its default value.
  mutating func clearReplacementFormat() {self._replacementFormat = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _customFormat: TSK_CustomFormatArchive? = nil
  fileprivate var _customFormatKey: TSP_UUID? = nil
  fileprivate var _replacementFormat: TSK_FormatStructArchive? = nil
}

struct TSA_NeedsMediaCompatibilityUpgradeCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var needsMediaCompatibilityUpgrade: Bool {
    get {return _needsMediaCompatibilityUpgrade ?? false}
    set {_needsMediaCompatibilityUpgrade = newValue}
  }
  /// Returns true if `needsMediaCompatibilityUpgrade` has been explicitly set.
  var hasNeedsMediaCompatibilityUpgrade: Bool {return self._needsMediaCompatibilityUpgrade != nil}
  /// Clears the value of `needsMediaCompatibilityUpgrade`. Subsequent reads from it will return its default value.
  mutating func clearNeedsMediaCompatibilityUpgrade() {self._needsMediaCompatibilityUpgrade = nil}

  var oldNeedsMediaCompatibilityUpgrade: Bool {
    get {return _oldNeedsMediaCompatibilityUpgrade ?? false}
    set {_oldNeedsMediaCompatibilityUpgrade = newValue}
  }
  /// Returns true if `oldNeedsMediaCompatibilityUpgrade` has been explicitly set.
  var hasOldNeedsMediaCompatibilityUpgrade: Bool {return self._oldNeedsMediaCompatibilityUpgrade != nil}
  /// Clears the value of `oldNeedsMediaCompatibilityUpgrade`. Subsequent reads from it will return its default value.
  mutating func clearOldNeedsMediaCompatibilityUpgrade() {self._oldNeedsMediaCompatibilityUpgrade = nil}

  var collaborativeMediaCompatibilityUpgradeDidFail: Bool {
    get {return _collaborativeMediaCompatibilityUpgradeDidFail ?? false}
    set {_collaborativeMediaCompatibilityUpgradeDidFail = newValue}
  }
  /// Returns true if `collaborativeMediaCompatibilityUpgradeDidFail` has been explicitly set.
  var hasCollaborativeMediaCompatibilityUpgradeDidFail: Bool {return self._collaborativeMediaCompatibilityUpgradeDidFail != nil}
  /// Clears the value of `collaborativeMediaCompatibilityUpgradeDidFail`. Subsequent reads from it will return its default value.
  mutating func clearCollaborativeMediaCompatibilityUpgradeDidFail() {self._collaborativeMediaCompatibilityUpgradeDidFail = nil}

  var oldCollaborativeMediaCompatibilityUpgradeDidFail: Bool {
    get {return _oldCollaborativeMediaCompatibilityUpgradeDidFail ?? false}
    set {_oldCollaborativeMediaCompatibilityUpgradeDidFail = newValue}
  }
  /// Returns true if `oldCollaborativeMediaCompatibilityUpgradeDidFail` has been explicitly set.
  var hasOldCollaborativeMediaCompatibilityUpgradeDidFail: Bool {return self._oldCollaborativeMediaCompatibilityUpgradeDidFail != nil}
  /// Clears the value of `oldCollaborativeMediaCompatibilityUpgradeDidFail`. Subsequent reads from it will return its default value.
  mutating func clearOldCollaborativeMediaCompatibilityUpgradeDidFail() {self._oldCollaborativeMediaCompatibilityUpgradeDidFail = nil}

  var canUseHevc: Bool {
    get {return _canUseHevc ?? false}
    set {_canUseHevc = newValue}
  }
  /// Returns true if `canUseHevc` has been explicitly set.
  var hasCanUseHevc: Bool {return self._canUseHevc != nil}
  /// Clears the value of `canUseHevc`. Subsequent reads from it will return its default value.
  mutating func clearCanUseHevc() {self._canUseHevc = nil}

  var oldCanUseHevc: Bool {
    get {return _oldCanUseHevc ?? false}
    set {_oldCanUseHevc = newValue}
  }
  /// Returns true if `oldCanUseHevc` has been explicitly set.
  var hasOldCanUseHevc: Bool {return self._oldCanUseHevc != nil}
  /// Clears the value of `oldCanUseHevc`. Subsequent reads from it will return its default value.
  mutating func clearOldCanUseHevc() {self._oldCanUseHevc = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _needsMediaCompatibilityUpgrade: Bool? = nil
  fileprivate var _oldNeedsMediaCompatibilityUpgrade: Bool? = nil
  fileprivate var _collaborativeMediaCompatibilityUpgradeDidFail: Bool? = nil
  fileprivate var _oldCollaborativeMediaCompatibilityUpgradeDidFail: Bool? = nil
  fileprivate var _canUseHevc: Bool? = nil
  fileprivate var _oldCanUseHevc: Bool? = nil
}

struct TSA_ChangeDocumentLocaleCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldLocaleID: String {
    get {return _oldLocaleID ?? String()}
    set {_oldLocaleID = newValue}
  }
  /// Returns true if `oldLocaleID` has been explicitly set.
  var hasOldLocaleID: Bool {return self._oldLocaleID != nil}
  /// Clears the value of `oldLocaleID`. Subsequent reads from it will return its default value.
  mutating func clearOldLocaleID() {self._oldLocaleID = nil}

  var newLocaleID: String {
    get {return _newLocaleID ?? String()}
    set {_newLocaleID = newValue}
  }
  /// Returns true if `newLocaleID` has been explicitly set.
  var hasNewLocaleID: Bool {return self._newLocaleID != nil}
  /// Clears the value of `newLocaleID`. Subsequent reads from it will return its default value.
  mutating func clearNewLocaleID() {self._newLocaleID = nil}

  var oldFormattingSymbols: TSK_FormattingSymbolsArchive {
    get {return _oldFormattingSymbols ?? TSK_FormattingSymbolsArchive()}
    set {_oldFormattingSymbols = newValue}
  }
  /// Returns true if `oldFormattingSymbols` has been explicitly set.
  var hasOldFormattingSymbols: Bool {return self._oldFormattingSymbols != nil}
  /// Clears the value of `oldFormattingSymbols`. Subsequent reads from it will return its default value.
  mutating func clearOldFormattingSymbols() {self._oldFormattingSymbols = nil}

  var newFormattingSymbols: TSK_FormattingSymbolsArchive {
    get {return _newFormattingSymbols ?? TSK_FormattingSymbolsArchive()}
    set {_newFormattingSymbols = newValue}
  }
  /// Returns true if `newFormattingSymbols` has been explicitly set.
  var hasNewFormattingSymbols: Bool {return self._newFormattingSymbols != nil}
  /// Clears the value of `newFormattingSymbols`. Subsequent reads from it will return its default value.
  mutating func clearNewFormattingSymbols() {self._newFormattingSymbols = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _oldLocaleID: String? = nil
  fileprivate var _newLocaleID: String? = nil
  fileprivate var _oldFormattingSymbols: TSK_FormattingSymbolsArchive? = nil
  fileprivate var _newFormattingSymbols: TSK_FormattingSymbolsArchive? = nil
}

struct TSA_InducedVerifyObjectsWithServerCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var objectIDList: [TSP_UUID] = []

  var objectIDListUndefined: Bool {
    get {return _objectIDListUndefined ?? false}
    set {_objectIDListUndefined = newValue}
  }
  /// Returns true if `objectIDListUndefined` has been explicitly set.
  var hasObjectIDListUndefined: Bool {return self._objectIDListUndefined != nil}
  /// Clears the value of `objectIDListUndefined`. Subsequent reads from it will return its default value.
  mutating func clearObjectIDListUndefined() {self._objectIDListUndefined = nil}

  var serverObjectSOSStringList: [String] = []

  var serverObjectSOSStringListUndefined: Bool {
    get {return _serverObjectSOSStringListUndefined ?? false}
    set {_serverObjectSOSStringListUndefined = newValue}
  }
  /// Returns true if `serverObjectSOSStringListUndefined` has been explicitly set.
  var hasServerObjectSOSStringListUndefined: Bool {return self._serverObjectSOSStringListUndefined != nil}
  /// Clears the value of `serverObjectSOSStringListUndefined`. Subsequent reads from it will return its default value.
  mutating func clearServerObjectSOSStringListUndefined() {self._serverObjectSOSStringListUndefined = nil}

  var pendingRecalc: Bool {
    get {return _pendingRecalc ?? false}
    set {_pendingRecalc = newValue}
  }
  /// Returns true if `pendingRecalc` has been explicitly set.
  var hasPendingRecalc: Bool {return self._pendingRecalc != nil}
  /// Clears the value of `pendingRecalc`. Subsequent reads from it will return its default value.
  mutating func clearPendingRecalc() {self._pendingRecalc = nil}

  var remoteDataSyncKey: Double {
    get {return _remoteDataSyncKey ?? 0}
    set {_remoteDataSyncKey = newValue}
  }
  /// Returns true if `remoteDataSyncKey` has been explicitly set.
  var hasRemoteDataSyncKey: Bool {return self._remoteDataSyncKey != nil}
  /// Clears the value of `remoteDataSyncKey`. Subsequent reads from it will return its default value.
  mutating func clearRemoteDataSyncKey() {self._remoteDataSyncKey = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _objectIDListUndefined: Bool? = nil
  fileprivate var _serverObjectSOSStringListUndefined: Bool? = nil
  fileprivate var _pendingRecalc: Bool? = nil
  fileprivate var _remoteDataSyncKey: Double? = nil
}

struct TSA_InducedVerifyTransformHistoryWithServerCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var serverOperationStorageEntries: [TSK_OperationStorageEntry] = []

  var serverOperationStorageEntriesUndefined: Bool {
    get {return _serverOperationStorageEntriesUndefined ?? false}
    set {_serverOperationStorageEntriesUndefined = newValue}
  }
  /// Returns true if `serverOperationStorageEntriesUndefined` has been explicitly set.
  var hasServerOperationStorageEntriesUndefined: Bool {return self._serverOperationStorageEntriesUndefined != nil}
  /// Clears the value of `serverOperationStorageEntriesUndefined`. Subsequent reads from it will return its default value.
  mutating func clearServerOperationStorageEntriesUndefined() {self._serverOperationStorageEntriesUndefined = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _serverOperationStorageEntriesUndefined: Bool? = nil
}

struct TSA_StyleUpdatePropertyMapCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSWP_StyleUpdatePropertyMapCommandArchive {
    get {return _super ?? TSWP_StyleUpdatePropertyMapCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSWP_StyleUpdatePropertyMapCommandArchive? = nil
}

struct TSA_RemoteDataChangeCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var valueMap: TSCE_RemoteDataValueMapArchive {
    get {return _valueMap ?? TSCE_RemoteDataValueMapArchive()}
    set {_valueMap = newValue}
  }
  /// Returns true if `valueMap` has been explicitly set.
  var hasValueMap: Bool {return self._valueMap != nil}
  /// Clears the value of `valueMap`. Subsequent reads from it will return its default value.
  mutating func clearValueMap() {self._valueMap = nil}

  var quotes: [TSCE_StockArchive] = []

  var remoteDataSyncKey: Double {
    get {return _remoteDataSyncKey ?? 0}
    set {_remoteDataSyncKey = newValue}
  }
  /// Returns true if `remoteDataSyncKey` has been explicitly set.
  var hasRemoteDataSyncKey: Bool {return self._remoteDataSyncKey != nil}
  /// Clears the value of `remoteDataSyncKey`. Subsequent reads from it will return its default value.
  mutating func clearRemoteDataSyncKey() {self._remoteDataSyncKey = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _valueMap: TSCE_RemoteDataValueMapArchive? = nil
  fileprivate var _remoteDataSyncKey: Double? = nil
}

struct TSA_GalleryInfoSetValueCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var infoIDPath: TSP_UUIDPath {
    get {return _infoIDPath ?? TSP_UUIDPath()}
    set {_infoIDPath = newValue}
  }
  /// Returns true if `infoIDPath` has been explicitly set.
  var hasInfoIDPath: Bool {return self._infoIDPath != nil}
  /// Clears the value of `infoIDPath`. Subsequent reads from it will return its default value.
  mutating func clearInfoIDPath() {self._infoIDPath = nil}

  var property: TSA_GalleryInfoProperty {
    get {return _property ?? .galleryInfoCaptionProperty}
    set {_property = newValue}
  }
  /// Returns true if `property` has been explicitly set.
  var hasProperty: Bool {return self._property != nil}
  /// Clears the value of `property`. Subsequent reads from it will return its default value.
  mutating func clearProperty() {self._property = nil}

  var value: TSA_GalleryInfoSetValueCommandArchive.PropertyValue {
    get {return _value ?? TSA_GalleryInfoSetValueCommandArchive.PropertyValue()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var oldValue: TSA_GalleryInfoSetValueCommandArchive.PropertyValue {
    get {return _oldValue ?? TSA_GalleryInfoSetValueCommandArchive.PropertyValue()}
    set {_oldValue = newValue}
  }
  /// Returns true if `oldValue` has been explicitly set.
  var hasOldValue: Bool {return self._oldValue != nil}
  /// Clears the value of `oldValue`. Subsequent reads from it will return its default value.
  mutating func clearOldValue() {self._oldValue = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct PropertyValue {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var captionMode: TSA_GalleryInfoCaptionMode {
      get {return _captionMode ?? .none}
      set {_captionMode = newValue}
    }
    /// Returns true if `captionMode` has been explicitly set.
    var hasCaptionMode: Bool {return self._captionMode != nil}
    /// Clears the value of `captionMode`. Subsequent reads from it will return its default value.
    mutating func clearCaptionMode() {self._captionMode = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _captionMode: TSA_GalleryInfoCaptionMode? = nil
  }

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _infoIDPath: TSP_UUIDPath? = nil
  fileprivate var _property: TSA_GalleryInfoProperty? = nil
  fileprivate var _value: TSA_GalleryInfoSetValueCommandArchive.PropertyValue? = nil
  fileprivate var _oldValue: TSA_GalleryInfoSetValueCommandArchive.PropertyValue? = nil
}

struct TSA_GalleryItemSetGeometryCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var itemIDPath: TSP_UUIDPath {
    get {return _itemIDPath ?? TSP_UUIDPath()}
    set {_itemIDPath = newValue}
  }
  /// Returns true if `itemIDPath` has been explicitly set.
  var hasItemIDPath: Bool {return self._itemIDPath != nil}
  /// Clears the value of `itemIDPath`. Subsequent reads from it will return its default value.
  mutating func clearItemIDPath() {self._itemIDPath = nil}

  var offset: TSP_Point {
    get {return _offset ?? TSP_Point()}
    set {_offset = newValue}
  }
  /// Returns true if `offset` has been explicitly set.
  var hasOffset: Bool {return self._offset != nil}
  /// Clears the value of `offset`. Subsequent reads from it will return its default value.
  mutating func clearOffset() {self._offset = nil}

  var scale: Float {
    get {return _scale ?? 1}
    set {_scale = newValue}
  }
  /// Returns true if `scale` has been explicitly set.
  var hasScale: Bool {return self._scale != nil}
  /// Clears the value of `scale`. Subsequent reads from it will return its default value.
  mutating func clearScale() {self._scale = nil}

  var oldOffset: TSP_Point {
    get {return _oldOffset ?? TSP_Point()}
    set {_oldOffset = newValue}
  }
  /// Returns true if `oldOffset` has been explicitly set.
  var hasOldOffset: Bool {return self._oldOffset != nil}
  /// Clears the value of `oldOffset`. Subsequent reads from it will return its default value.
  mutating func clearOldOffset() {self._oldOffset = nil}

  var oldScale: Float {
    get {return _oldScale ?? 0}
    set {_oldScale = newValue}
  }
  /// Returns true if `oldScale` has been explicitly set.
  var hasOldScale: Bool {return self._oldScale != nil}
  /// Clears the value of `oldScale`. Subsequent reads from it will return its default value.
  mutating func clearOldScale() {self._oldScale = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _itemIDPath: TSP_UUIDPath? = nil
  fileprivate var _offset: TSP_Point? = nil
  fileprivate var _scale: Float? = nil
  fileprivate var _oldOffset: TSP_Point? = nil
  fileprivate var _oldScale: Float? = nil
}

struct TSA_GalleryItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var offset: TSP_Point {
    get {return _offset ?? TSP_Point()}
    set {_offset = newValue}
  }
  /// Returns true if `offset` has been explicitly set.
  var hasOffset: Bool {return self._offset != nil}
  /// Clears the value of `offset`. Subsequent reads from it will return its default value.
  mutating func clearOffset() {self._offset = nil}

  var scale: Float {
    get {return _scale ?? 0}
    set {_scale = newValue}
  }
  /// Returns true if `scale` has been explicitly set.
  var hasScale: Bool {return self._scale != nil}
  /// Clears the value of `scale`. Subsequent reads from it will return its default value.
  mutating func clearScale() {self._scale = nil}

  var imageData: TSP_DataReference {
    get {return _imageData ?? TSP_DataReference()}
    set {_imageData = newValue}
  }
  /// Returns true if `imageData` has been explicitly set.
  var hasImageData: Bool {return self._imageData != nil}
  /// Clears the value of `imageData`. Subsequent reads from it will return its default value.
  mutating func clearImageData() {self._imageData = nil}

  var thumbnailImageData: TSP_DataReference {
    get {return _thumbnailImageData ?? TSP_DataReference()}
    set {_thumbnailImageData = newValue}
  }
  /// Returns true if `thumbnailImageData` has been explicitly set.
  var hasThumbnailImageData: Bool {return self._thumbnailImageData != nil}
  /// Clears the value of `thumbnailImageData`. Subsequent reads from it will return its default value.
  mutating func clearThumbnailImageData() {self._thumbnailImageData = nil}

  var imageAdjustments: TSD_ImageAdjustmentsArchive {
    get {return _imageAdjustments ?? TSD_ImageAdjustmentsArchive()}
    set {_imageAdjustments = newValue}
  }
  /// Returns true if `imageAdjustments` has been explicitly set.
  var hasImageAdjustments: Bool {return self._imageAdjustments != nil}
  /// Clears the value of `imageAdjustments`. Subsequent reads from it will return its default value.
  mutating func clearImageAdjustments() {self._imageAdjustments = nil}

  var adjustedImageData: TSP_DataReference {
    get {return _adjustedImageData ?? TSP_DataReference()}
    set {_adjustedImageData = newValue}
  }
  /// Returns true if `adjustedImageData` has been explicitly set.
  var hasAdjustedImageData: Bool {return self._adjustedImageData != nil}
  /// Clears the value of `adjustedImageData`. Subsequent reads from it will return its default value.
  mutating func clearAdjustedImageData() {self._adjustedImageData = nil}

  var thumbnailAdjustedImageData: TSP_DataReference {
    get {return _thumbnailAdjustedImageData ?? TSP_DataReference()}
    set {_thumbnailAdjustedImageData = newValue}
  }
  /// Returns true if `thumbnailAdjustedImageData` has been explicitly set.
  var hasThumbnailAdjustedImageData: Bool {return self._thumbnailAdjustedImageData != nil}
  /// Clears the value of `thumbnailAdjustedImageData`. Subsequent reads from it will return its default value.
  mutating func clearThumbnailAdjustedImageData() {self._thumbnailAdjustedImageData = nil}

  var captionStorage: TSP_Reference {
    get {return _captionStorage ?? TSP_Reference()}
    set {_captionStorage = newValue}
  }
  /// Returns true if `captionStorage` has been explicitly set.
  var hasCaptionStorage: Bool {return self._captionStorage != nil}
  /// Clears the value of `captionStorage`. Subsequent reads from it will return its default value.
  mutating func clearCaptionStorage() {self._captionStorage = nil}

  var accessibilityDescription: String {
    get {return _accessibilityDescription ?? String()}
    set {_accessibilityDescription = newValue}
  }
  /// Returns true if `accessibilityDescription` has been explicitly set.
  var hasAccessibilityDescription: Bool {return self._accessibilityDescription != nil}
  /// Clears the value of `accessibilityDescription`. Subsequent reads from it will return its default value.
  mutating func clearAccessibilityDescription() {self._accessibilityDescription = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _offset: TSP_Point? = nil
  fileprivate var _scale: Float? = nil
  fileprivate var _imageData: TSP_DataReference? = nil
  fileprivate var _thumbnailImageData: TSP_DataReference? = nil
  fileprivate var _imageAdjustments: TSD_ImageAdjustmentsArchive? = nil
  fileprivate var _adjustedImageData: TSP_DataReference? = nil
  fileprivate var _thumbnailAdjustedImageData: TSP_DataReference? = nil
  fileprivate var _captionStorage: TSP_Reference? = nil
  fileprivate var _accessibilityDescription: String? = nil
}

struct TSA_GalleryInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var items: [TSP_Reference] = []

  var captionMode: TSA_GalleryCaptionMode {
    get {return _captionMode ?? .none}
    set {_captionMode = newValue}
  }
  /// Returns true if `captionMode` has been explicitly set.
  var hasCaptionMode: Bool {return self._captionMode != nil}
  /// Clears the value of `captionMode`. Subsequent reads from it will return its default value.
  mutating func clearCaptionMode() {self._captionMode = nil}

  var captionStorage: TSP_Reference {
    get {return _captionStorage ?? TSP_Reference()}
    set {_captionStorage = newValue}
  }
  /// Returns true if `captionStorage` has been explicitly set.
  var hasCaptionStorage: Bool {return self._captionStorage != nil}
  /// Clears the value of `captionStorage`. Subsequent reads from it will return its default value.
  mutating func clearCaptionStorage() {self._captionStorage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _captionMode: TSA_GalleryCaptionMode? = nil
  fileprivate var _captionStorage: TSP_Reference? = nil
}

struct TSA_GallerySelectionTransformer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_DrawableSelectionTransformerArchive {
    get {return _super ?? TSD_DrawableSelectionTransformerArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var galleryUuidPath: TSP_UUIDPath {
    get {return _galleryUuidPath ?? TSP_UUIDPath()}
    set {_galleryUuidPath = newValue}
  }
  /// Returns true if `galleryUuidPath` has been explicitly set.
  var hasGalleryUuidPath: Bool {return self._galleryUuidPath != nil}
  /// Clears the value of `galleryUuidPath`. Subsequent reads from it will return its default value.
  mutating func clearGalleryUuidPath() {self._galleryUuidPath = nil}

  var captionStorageUuidPath: TSP_UUIDPath {
    get {return _captionStorageUuidPath ?? TSP_UUIDPath()}
    set {_captionStorageUuidPath = newValue}
  }
  /// Returns true if `captionStorageUuidPath` has been explicitly set.
  var hasCaptionStorageUuidPath: Bool {return self._captionStorageUuidPath != nil}
  /// Clears the value of `captionStorageUuidPath`. Subsequent reads from it will return its default value.
  mutating func clearCaptionStorageUuidPath() {self._captionStorageUuidPath = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_DrawableSelectionTransformerArchive? = nil
  fileprivate var _galleryUuidPath: TSP_UUIDPath? = nil
  fileprivate var _captionStorageUuidPath: TSP_UUIDPath? = nil
}

struct TSA_GalleryItemSelection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var displayedItem: TSP_Reference {
    get {return _displayedItem ?? TSP_Reference()}
    set {_displayedItem = newValue}
  }
  /// Returns true if `displayedItem` has been explicitly set.
  var hasDisplayedItem: Bool {return self._displayedItem != nil}
  /// Clears the value of `displayedItem`. Subsequent reads from it will return its default value.
  mutating func clearDisplayedItem() {self._displayedItem = nil}

  var items: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _displayedItem: TSP_Reference? = nil
}

struct TSA_GalleryItemSelectionTransformer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transformerHelper: TSA_GalleryItemSelectionTransformerHelper {
    get {return _transformerHelper ?? TSA_GalleryItemSelectionTransformerHelper()}
    set {_transformerHelper = newValue}
  }
  /// Returns true if `transformerHelper` has been explicitly set.
  var hasTransformerHelper: Bool {return self._transformerHelper != nil}
  /// Clears the value of `transformerHelper`. Subsequent reads from it will return its default value.
  mutating func clearTransformerHelper() {self._transformerHelper = nil}

  var captionStorageUuidPath: TSP_UUIDPath {
    get {return _captionStorageUuidPath ?? TSP_UUIDPath()}
    set {_captionStorageUuidPath = newValue}
  }
  /// Returns true if `captionStorageUuidPath` has been explicitly set.
  var hasCaptionStorageUuidPath: Bool {return self._captionStorageUuidPath != nil}
  /// Clears the value of `captionStorageUuidPath`. Subsequent reads from it will return its default value.
  mutating func clearCaptionStorageUuidPath() {self._captionStorageUuidPath = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _transformerHelper: TSA_GalleryItemSelectionTransformerHelper? = nil
  fileprivate var _captionStorageUuidPath: TSP_UUIDPath? = nil
}

struct TSA_GalleryItemSelectionTransformerHelper {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var displayedItemUuidPath: TSP_UUIDPath {
    get {return _displayedItemUuidPath ?? TSP_UUIDPath()}
    set {_displayedItemUuidPath = newValue}
  }
  /// Returns true if `displayedItemUuidPath` has been explicitly set.
  var hasDisplayedItemUuidPath: Bool {return self._displayedItemUuidPath != nil}
  /// Clears the value of `displayedItemUuidPath`. Subsequent reads from it will return its default value.
  mutating func clearDisplayedItemUuidPath() {self._displayedItemUuidPath = nil}

  var itemUuidPaths: [TSP_UUIDPath] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _displayedItemUuidPath: TSP_UUIDPath? = nil
}

struct TSA_GalleryItemSetValueCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var itemIDPath: TSP_UUIDPath {
    get {return _itemIDPath ?? TSP_UUIDPath()}
    set {_itemIDPath = newValue}
  }
  /// Returns true if `itemIDPath` has been explicitly set.
  var hasItemIDPath: Bool {return self._itemIDPath != nil}
  /// Clears the value of `itemIDPath`. Subsequent reads from it will return its default value.
  mutating func clearItemIDPath() {self._itemIDPath = nil}

  var property: TSA_GalleryItemProperty {
    get {return _property ?? .imageData}
    set {_property = newValue}
  }
  /// Returns true if `property` has been explicitly set.
  var hasProperty: Bool {return self._property != nil}
  /// Clears the value of `property`. Subsequent reads from it will return its default value.
  mutating func clearProperty() {self._property = nil}

  var value: TSA_GalleryItemSetValueCommand.PropertyValue {
    get {return _value ?? TSA_GalleryItemSetValueCommand.PropertyValue()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var oldValue: TSA_GalleryItemSetValueCommand.PropertyValue {
    get {return _oldValue ?? TSA_GalleryItemSetValueCommand.PropertyValue()}
    set {_oldValue = newValue}
  }
  /// Returns true if `oldValue` has been explicitly set.
  var hasOldValue: Bool {return self._oldValue != nil}
  /// Clears the value of `oldValue`. Subsequent reads from it will return its default value.
  mutating func clearOldValue() {self._oldValue = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct PropertyValue {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var imageData: TSP_DataReference {
      get {return _imageData ?? TSP_DataReference()}
      set {_imageData = newValue}
    }
    /// Returns true if `imageData` has been explicitly set.
    var hasImageData: Bool {return self._imageData != nil}
    /// Clears the value of `imageData`. Subsequent reads from it will return its default value.
    mutating func clearImageData() {self._imageData = nil}

    var accessibilityDescription: String {
      get {return _accessibilityDescription ?? String()}
      set {_accessibilityDescription = newValue}
    }
    /// Returns true if `accessibilityDescription` has been explicitly set.
    var hasAccessibilityDescription: Bool {return self._accessibilityDescription != nil}
    /// Clears the value of `accessibilityDescription`. Subsequent reads from it will return its default value.
    mutating func clearAccessibilityDescription() {self._accessibilityDescription = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _imageData: TSP_DataReference? = nil
    fileprivate var _accessibilityDescription: String? = nil
  }

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _itemIDPath: TSP_UUIDPath? = nil
  fileprivate var _property: TSA_GalleryItemProperty? = nil
  fileprivate var _value: TSA_GalleryItemSetValueCommand.PropertyValue? = nil
  fileprivate var _oldValue: TSA_GalleryItemSetValueCommand.PropertyValue? = nil
}

// MARK: - Extension support defined in TSAArchives.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension TSD_ImageArchive {

  var TSA_GalleryInfo_galleryInfo: TSA_GalleryInfo {
    get {return getExtensionValue(ext: TSA_GalleryInfo.Extensions.gallery_info) ?? TSA_GalleryInfo()}
    set {setExtensionValue(ext: TSA_GalleryInfo.Extensions.gallery_info, value: newValue)}
  }
  /// Returns true if extension `TSA_GalleryInfo.Extensions.gallery_info`
  /// has been explicitly set.
  var hasTSA_GalleryInfo_galleryInfo: Bool {
    return hasExtensionValue(ext: TSA_GalleryInfo.Extensions.gallery_info)
  }
  /// Clears the value of extension `TSA_GalleryInfo.Extensions.gallery_info`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSA_GalleryInfo_galleryInfo() {
    clearExtensionValue(ext: TSA_GalleryInfo.Extensions.gallery_info)
  }

}

// MARK: - File's ExtensionMap: TSA_Tsaarchives_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let TSA_Tsaarchives_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  TSA_GalleryInfo.Extensions.gallery_info
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

extension TSA_GalleryInfo {
  enum Extensions {
    static let gallery_info = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TSA_GalleryInfo>, TSD_ImageArchive>(
      _protobuf_fieldNumber: 200,
      fieldName: "TSA.GalleryInfo.gallery_info"
    )
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TSA"

extension TSA_GalleryInfoCaptionMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GalleryInfoCaptionModeNone"),
    1: .same(proto: "GalleryInfoCaptionModePerImage"),
    2: .same(proto: "GalleryInfoCaptionModeAllImages"),
  ]
}

extension TSA_GalleryInfoProperty: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GalleryInfoCaptionProperty"),
  ]
}

extension TSA_GalleryCaptionMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GalleryCaptionModeNone"),
    1: .same(proto: "GalleryCaptionModePerImage"),
    2: .same(proto: "GalleryCaptionModeAllImages"),
  ]
}

extension TSA_GalleryItemProperty: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GalleryItemPropertyImageData"),
    1: .same(proto: "GalleryItemPropertyThumbnailImageData"),
    2: .same(proto: "GalleryItemPropertyAccessibilityDescription"),
  ]
}

extension TSA_DocumentArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DocumentArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "text_preset_display_items"),
    3: .standard(proto: "document_language"),
    4: .standard(proto: "calculation_engine"),
    5: .standard(proto: "view_state"),
    6: .standard(proto: "function_browser_state"),
    7: .standard(proto: "tables_custom_format_list"),
    8: .standard(proto: "needs_media_compatibility_upgrade"),
    9: .standard(proto: "template_identifier"),
    10: .standard(proto: "shortcut_controller"),
    11: .standard(proto: "annotation_cache_deprecated"),
    12: .standard(proto: "custom_format_list"),
    13: .standard(proto: "annotation_cache_deprecated_2"),
    14: .standard(proto: "collaborative_media_compatibility_upgrade_did_fail"),
    15: .standard(proto: "can_use_hevc"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.textPresetDisplayItems) {return false}
    if let v = self._calculationEngine, !v.isInitialized {return false}
    if let v = self._viewState, !v.isInitialized {return false}
    if let v = self._functionBrowserState, !v.isInitialized {return false}
    if let v = self._tablesCustomFormatList, !v.isInitialized {return false}
    if let v = self._shortcutController, !v.isInitialized {return false}
    if let v = self._annotationCacheDeprecated, !v.isInitialized {return false}
    if let v = self._customFormatList, !v.isInitialized {return false}
    if let v = self._annotationCacheDeprecated2, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.textPresetDisplayItems)
      case 3: try decoder.decodeSingularStringField(value: &self._documentLanguage)
      case 4: try decoder.decodeSingularMessageField(value: &self._calculationEngine)
      case 5: try decoder.decodeSingularMessageField(value: &self._viewState)
      case 6: try decoder.decodeSingularMessageField(value: &self._functionBrowserState)
      case 7: try decoder.decodeSingularMessageField(value: &self._tablesCustomFormatList)
      case 8: try decoder.decodeSingularBoolField(value: &self._needsMediaCompatibilityUpgrade)
      case 9: try decoder.decodeSingularStringField(value: &self._templateIdentifier)
      case 10: try decoder.decodeSingularMessageField(value: &self._shortcutController)
      case 11: try decoder.decodeSingularMessageField(value: &self._annotationCacheDeprecated)
      case 12: try decoder.decodeSingularMessageField(value: &self._customFormatList)
      case 13: try decoder.decodeSingularMessageField(value: &self._annotationCacheDeprecated2)
      case 14: try decoder.decodeSingularBoolField(value: &self._collaborativeMediaCompatibilityUpgradeDidFail)
      case 15: try decoder.decodeSingularBoolField(value: &self._canUseHevc)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.textPresetDisplayItems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.textPresetDisplayItems, fieldNumber: 2)
    }
    if let v = self._documentLanguage {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._calculationEngine {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._viewState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._functionBrowserState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._tablesCustomFormatList {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._needsMediaCompatibilityUpgrade {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._templateIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }
    if let v = self._shortcutController {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._annotationCacheDeprecated {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._customFormatList {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }
    if let v = self._annotationCacheDeprecated2 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }
    if let v = self._collaborativeMediaCompatibilityUpgradeDidFail {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
    }
    if let v = self._canUseHevc {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_DocumentArchive, rhs: TSA_DocumentArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.textPresetDisplayItems != rhs.textPresetDisplayItems {return false}
    if lhs._documentLanguage != rhs._documentLanguage {return false}
    if lhs._calculationEngine != rhs._calculationEngine {return false}
    if lhs._viewState != rhs._viewState {return false}
    if lhs._functionBrowserState != rhs._functionBrowserState {return false}
    if lhs._tablesCustomFormatList != rhs._tablesCustomFormatList {return false}
    if lhs._needsMediaCompatibilityUpgrade != rhs._needsMediaCompatibilityUpgrade {return false}
    if lhs._templateIdentifier != rhs._templateIdentifier {return false}
    if lhs._shortcutController != rhs._shortcutController {return false}
    if lhs._annotationCacheDeprecated != rhs._annotationCacheDeprecated {return false}
    if lhs._customFormatList != rhs._customFormatList {return false}
    if lhs._annotationCacheDeprecated2 != rhs._annotationCacheDeprecated2 {return false}
    if lhs._collaborativeMediaCompatibilityUpgradeDidFail != rhs._collaborativeMediaCompatibilityUpgradeDidFail {return false}
    if lhs._canUseHevc != rhs._canUseHevc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_FunctionBrowserStateArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FunctionBrowserStateArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "recent_functions"),
    2: .standard(proto: "back_functions"),
    3: .standard(proto: "forward_functions"),
    4: .standard(proto: "current_function"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt32Field(value: &self.recentFunctions)
      case 2: try decoder.decodeRepeatedUInt32Field(value: &self.backFunctions)
      case 3: try decoder.decodeRepeatedUInt32Field(value: &self.forwardFunctions)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._currentFunction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.recentFunctions.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.recentFunctions, fieldNumber: 1)
    }
    if !self.backFunctions.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.backFunctions, fieldNumber: 2)
    }
    if !self.forwardFunctions.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.forwardFunctions, fieldNumber: 3)
    }
    if let v = self._currentFunction {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_FunctionBrowserStateArchive, rhs: TSA_FunctionBrowserStateArchive) -> Bool {
    if lhs.recentFunctions != rhs.recentFunctions {return false}
    if lhs.backFunctions != rhs.backFunctions {return false}
    if lhs.forwardFunctions != rhs.forwardFunctions {return false}
    if lhs._currentFunction != rhs._currentFunction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_TestDocumentArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestDocumentArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "value"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularStringField(value: &self._value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._value {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_TestDocumentArchive, rhs: TSA_TestDocumentArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_ShortcutControllerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShortcutControllerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.entries) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.entries)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_ShortcutControllerArchive, rhs: TSA_ShortcutControllerArchive) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_ShortcutControllerArchive.ShortcutMapEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSA_ShortcutControllerArchive.protoMessageName + ".ShortcutMapEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shortcut"),
    2: .same(proto: "style"),
  ]

  public var isInitialized: Bool {
    if self._shortcut == nil {return false}
    if self._style == nil {return false}
    if let v = self._style, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._shortcut)
      case 2: try decoder.decodeSingularMessageField(value: &self._style)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._shortcut {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_ShortcutControllerArchive.ShortcutMapEntry, rhs: TSA_ShortcutControllerArchive.ShortcutMapEntry) -> Bool {
    if lhs._shortcut != rhs._shortcut {return false}
    if lhs._style != rhs._style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_PropagatePresetCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PropagatePresetCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "preset_change_command"),
    3: .standard(proto: "always_preserve_appearance"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._presetChangeCommand == nil {return false}
    if self._alwaysPreserveAppearance == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._presetChangeCommand, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._presetChangeCommand)
      case 3: try decoder.decodeSingularBoolField(value: &self._alwaysPreserveAppearance)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._presetChangeCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._alwaysPreserveAppearance {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_PropagatePresetCommandArchive, rhs: TSA_PropagatePresetCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._presetChangeCommand != rhs._presetChangeCommand {return false}
    if lhs._alwaysPreserveAppearance != rhs._alwaysPreserveAppearance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_ShortcutCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShortcutCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "old_style"),
    3: .standard(proto: "new_style"),
    4: .standard(proto: "old_shortcut"),
    5: .standard(proto: "new_shortcut"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._oldStyle, !v.isInitialized {return false}
    if let v = self._newStyle, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._oldStyle)
      case 3: try decoder.decodeSingularMessageField(value: &self._newStyle)
      case 4: try decoder.decodeSingularStringField(value: &self._oldShortcut)
      case 5: try decoder.decodeSingularStringField(value: &self._newShortcut)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._newStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._oldShortcut {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._newShortcut {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_ShortcutCommandArchive, rhs: TSA_ShortcutCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldStyle != rhs._oldStyle {return false}
    if lhs._newStyle != rhs._newStyle {return false}
    if lhs._oldShortcut != rhs._oldShortcut {return false}
    if lhs._newShortcut != rhs._newShortcut {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_AddCustomFormatCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddCustomFormatCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "custom_format"),
    3: .standard(proto: "custom_format_key"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._customFormat, !v.isInitialized {return false}
    if let v = self._customFormatKey, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._customFormat)
      case 3: try decoder.decodeSingularMessageField(value: &self._customFormatKey)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._customFormat {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._customFormatKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_AddCustomFormatCommandArchive, rhs: TSA_AddCustomFormatCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._customFormat != rhs._customFormat {return false}
    if lhs._customFormatKey != rhs._customFormatKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_UpdateCustomFormatCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateCustomFormatCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "custom_format"),
    3: .standard(proto: "old_custom_format"),
    4: .standard(proto: "custom_format_key"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._customFormat, !v.isInitialized {return false}
    if let v = self._oldCustomFormat, !v.isInitialized {return false}
    if let v = self._customFormatKey, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._customFormat)
      case 3: try decoder.decodeSingularMessageField(value: &self._oldCustomFormat)
      case 4: try decoder.decodeSingularMessageField(value: &self._customFormatKey)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._customFormat {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._oldCustomFormat {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._customFormatKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_UpdateCustomFormatCommandArchive, rhs: TSA_UpdateCustomFormatCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._customFormat != rhs._customFormat {return false}
    if lhs._oldCustomFormat != rhs._oldCustomFormat {return false}
    if lhs._customFormatKey != rhs._customFormatKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_ReplaceCustomFormatCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReplaceCustomFormatCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "custom_format"),
    3: .standard(proto: "custom_format_key"),
    4: .standard(proto: "replacement_format"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._customFormat, !v.isInitialized {return false}
    if let v = self._customFormatKey, !v.isInitialized {return false}
    if let v = self._replacementFormat, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._customFormat)
      case 3: try decoder.decodeSingularMessageField(value: &self._customFormatKey)
      case 4: try decoder.decodeSingularMessageField(value: &self._replacementFormat)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._customFormat {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._customFormatKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._replacementFormat {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_ReplaceCustomFormatCommandArchive, rhs: TSA_ReplaceCustomFormatCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._customFormat != rhs._customFormat {return false}
    if lhs._customFormatKey != rhs._customFormatKey {return false}
    if lhs._replacementFormat != rhs._replacementFormat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_NeedsMediaCompatibilityUpgradeCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NeedsMediaCompatibilityUpgradeCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "needs_media_compatibility_upgrade"),
    3: .standard(proto: "old_needs_media_compatibility_upgrade"),
    4: .standard(proto: "collaborative_media_compatibility_upgrade_did_fail"),
    5: .standard(proto: "old_collaborative_media_compatibility_upgrade_did_fail"),
    6: .standard(proto: "can_use_hevc"),
    7: .standard(proto: "old_can_use_hevc"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularBoolField(value: &self._needsMediaCompatibilityUpgrade)
      case 3: try decoder.decodeSingularBoolField(value: &self._oldNeedsMediaCompatibilityUpgrade)
      case 4: try decoder.decodeSingularBoolField(value: &self._collaborativeMediaCompatibilityUpgradeDidFail)
      case 5: try decoder.decodeSingularBoolField(value: &self._oldCollaborativeMediaCompatibilityUpgradeDidFail)
      case 6: try decoder.decodeSingularBoolField(value: &self._canUseHevc)
      case 7: try decoder.decodeSingularBoolField(value: &self._oldCanUseHevc)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._needsMediaCompatibilityUpgrade {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._oldNeedsMediaCompatibilityUpgrade {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._collaborativeMediaCompatibilityUpgradeDidFail {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._oldCollaborativeMediaCompatibilityUpgradeDidFail {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._canUseHevc {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._oldCanUseHevc {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_NeedsMediaCompatibilityUpgradeCommandArchive, rhs: TSA_NeedsMediaCompatibilityUpgradeCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._needsMediaCompatibilityUpgrade != rhs._needsMediaCompatibilityUpgrade {return false}
    if lhs._oldNeedsMediaCompatibilityUpgrade != rhs._oldNeedsMediaCompatibilityUpgrade {return false}
    if lhs._collaborativeMediaCompatibilityUpgradeDidFail != rhs._collaborativeMediaCompatibilityUpgradeDidFail {return false}
    if lhs._oldCollaborativeMediaCompatibilityUpgradeDidFail != rhs._oldCollaborativeMediaCompatibilityUpgradeDidFail {return false}
    if lhs._canUseHevc != rhs._canUseHevc {return false}
    if lhs._oldCanUseHevc != rhs._oldCanUseHevc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_ChangeDocumentLocaleCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChangeDocumentLocaleCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "old_locale_id"),
    3: .standard(proto: "new_locale_id"),
    4: .standard(proto: "old_formatting_symbols"),
    5: .standard(proto: "new_formatting_symbols"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._oldFormattingSymbols, !v.isInitialized {return false}
    if let v = self._newFormattingSymbols, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularStringField(value: &self._oldLocaleID)
      case 3: try decoder.decodeSingularStringField(value: &self._newLocaleID)
      case 4: try decoder.decodeSingularMessageField(value: &self._oldFormattingSymbols)
      case 5: try decoder.decodeSingularMessageField(value: &self._newFormattingSymbols)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldLocaleID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._newLocaleID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._oldFormattingSymbols {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._newFormattingSymbols {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_ChangeDocumentLocaleCommandArchive, rhs: TSA_ChangeDocumentLocaleCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldLocaleID != rhs._oldLocaleID {return false}
    if lhs._newLocaleID != rhs._newLocaleID {return false}
    if lhs._oldFormattingSymbols != rhs._oldFormattingSymbols {return false}
    if lhs._newFormattingSymbols != rhs._newFormattingSymbols {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_InducedVerifyObjectsWithServerCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InducedVerifyObjectsWithServerCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "object_id_list"),
    3: .standard(proto: "object_id_list_undefined"),
    4: .standard(proto: "server_object_s_o_s_string_list"),
    5: .standard(proto: "server_object_s_o_s_string_list_undefined"),
    6: .standard(proto: "pending_recalc"),
    7: .standard(proto: "remote_data_sync_key"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._pendingRecalc == nil {return false}
    if self._remoteDataSyncKey == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.objectIDList) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.objectIDList)
      case 3: try decoder.decodeSingularBoolField(value: &self._objectIDListUndefined)
      case 4: try decoder.decodeRepeatedStringField(value: &self.serverObjectSOSStringList)
      case 5: try decoder.decodeSingularBoolField(value: &self._serverObjectSOSStringListUndefined)
      case 6: try decoder.decodeSingularBoolField(value: &self._pendingRecalc)
      case 7: try decoder.decodeSingularDoubleField(value: &self._remoteDataSyncKey)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.objectIDList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.objectIDList, fieldNumber: 2)
    }
    if let v = self._objectIDListUndefined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if !self.serverObjectSOSStringList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.serverObjectSOSStringList, fieldNumber: 4)
    }
    if let v = self._serverObjectSOSStringListUndefined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._pendingRecalc {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._remoteDataSyncKey {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_InducedVerifyObjectsWithServerCommandArchive, rhs: TSA_InducedVerifyObjectsWithServerCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.objectIDList != rhs.objectIDList {return false}
    if lhs._objectIDListUndefined != rhs._objectIDListUndefined {return false}
    if lhs.serverObjectSOSStringList != rhs.serverObjectSOSStringList {return false}
    if lhs._serverObjectSOSStringListUndefined != rhs._serverObjectSOSStringListUndefined {return false}
    if lhs._pendingRecalc != rhs._pendingRecalc {return false}
    if lhs._remoteDataSyncKey != rhs._remoteDataSyncKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_InducedVerifyTransformHistoryWithServerCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InducedVerifyTransformHistoryWithServerCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "server_operation_storage_entries"),
    3: .standard(proto: "server_operation_storage_entries_undefined"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.serverOperationStorageEntries)
      case 3: try decoder.decodeSingularBoolField(value: &self._serverOperationStorageEntriesUndefined)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.serverOperationStorageEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.serverOperationStorageEntries, fieldNumber: 2)
    }
    if let v = self._serverOperationStorageEntriesUndefined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_InducedVerifyTransformHistoryWithServerCommandArchive, rhs: TSA_InducedVerifyTransformHistoryWithServerCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.serverOperationStorageEntries != rhs.serverOperationStorageEntries {return false}
    if lhs._serverOperationStorageEntriesUndefined != rhs._serverOperationStorageEntriesUndefined {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_StyleUpdatePropertyMapCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StyleUpdatePropertyMapCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_StyleUpdatePropertyMapCommandArchive, rhs: TSA_StyleUpdatePropertyMapCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_RemoteDataChangeCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoteDataChangeCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "value_map"),
    3: .same(proto: "quotes"),
    4: .standard(proto: "remote_data_sync_key"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._valueMap == nil {return false}
    if self._remoteDataSyncKey == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._valueMap, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.quotes) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._valueMap)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.quotes)
      case 4: try decoder.decodeSingularDoubleField(value: &self._remoteDataSyncKey)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._valueMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.quotes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.quotes, fieldNumber: 3)
    }
    if let v = self._remoteDataSyncKey {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_RemoteDataChangeCommandArchive, rhs: TSA_RemoteDataChangeCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._valueMap != rhs._valueMap {return false}
    if lhs.quotes != rhs.quotes {return false}
    if lhs._remoteDataSyncKey != rhs._remoteDataSyncKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_GalleryInfoSetValueCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GalleryInfoSetValueCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "info_id_path"),
    3: .same(proto: "property"),
    4: .same(proto: "value"),
    5: .standard(proto: "old_value"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._infoIDPath, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._infoIDPath)
      case 3: try decoder.decodeSingularEnumField(value: &self._property)
      case 4: try decoder.decodeSingularMessageField(value: &self._value)
      case 5: try decoder.decodeSingularMessageField(value: &self._oldValue)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._infoIDPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._property {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._oldValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_GalleryInfoSetValueCommandArchive, rhs: TSA_GalleryInfoSetValueCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._infoIDPath != rhs._infoIDPath {return false}
    if lhs._property != rhs._property {return false}
    if lhs._value != rhs._value {return false}
    if lhs._oldValue != rhs._oldValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_GalleryInfoSetValueCommandArchive.PropertyValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSA_GalleryInfoSetValueCommandArchive.protoMessageName + ".PropertyValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "caption_mode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._captionMode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._captionMode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_GalleryInfoSetValueCommandArchive.PropertyValue, rhs: TSA_GalleryInfoSetValueCommandArchive.PropertyValue) -> Bool {
    if lhs._captionMode != rhs._captionMode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_GalleryItemSetGeometryCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GalleryItemSetGeometryCommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "item_id_path"),
    3: .same(proto: "offset"),
    4: .same(proto: "scale"),
    5: .standard(proto: "old_offset"),
    6: .standard(proto: "old_scale"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._itemIDPath, !v.isInitialized {return false}
    if let v = self._offset, !v.isInitialized {return false}
    if let v = self._oldOffset, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._itemIDPath)
      case 3: try decoder.decodeSingularMessageField(value: &self._offset)
      case 4: try decoder.decodeSingularFloatField(value: &self._scale)
      case 5: try decoder.decodeSingularMessageField(value: &self._oldOffset)
      case 6: try decoder.decodeSingularFloatField(value: &self._oldScale)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._itemIDPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._offset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._scale {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    if let v = self._oldOffset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._oldScale {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_GalleryItemSetGeometryCommand, rhs: TSA_GalleryItemSetGeometryCommand) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._itemIDPath != rhs._itemIDPath {return false}
    if lhs._offset != rhs._offset {return false}
    if lhs._scale != rhs._scale {return false}
    if lhs._oldOffset != rhs._oldOffset {return false}
    if lhs._oldScale != rhs._oldScale {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_GalleryItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GalleryItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "offset"),
    2: .same(proto: "scale"),
    3: .standard(proto: "image_data"),
    4: .standard(proto: "thumbnail_image_data"),
    5: .standard(proto: "image_adjustments"),
    6: .standard(proto: "adjusted_image_data"),
    7: .standard(proto: "thumbnail_adjusted_image_data"),
    8: .standard(proto: "caption_storage"),
    9: .standard(proto: "accessibility_description"),
  ]

  public var isInitialized: Bool {
    if let v = self._offset, !v.isInitialized {return false}
    if let v = self._imageData, !v.isInitialized {return false}
    if let v = self._thumbnailImageData, !v.isInitialized {return false}
    if let v = self._adjustedImageData, !v.isInitialized {return false}
    if let v = self._thumbnailAdjustedImageData, !v.isInitialized {return false}
    if let v = self._captionStorage, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._offset)
      case 2: try decoder.decodeSingularFloatField(value: &self._scale)
      case 3: try decoder.decodeSingularMessageField(value: &self._imageData)
      case 4: try decoder.decodeSingularMessageField(value: &self._thumbnailImageData)
      case 5: try decoder.decodeSingularMessageField(value: &self._imageAdjustments)
      case 6: try decoder.decodeSingularMessageField(value: &self._adjustedImageData)
      case 7: try decoder.decodeSingularMessageField(value: &self._thumbnailAdjustedImageData)
      case 8: try decoder.decodeSingularMessageField(value: &self._captionStorage)
      case 9: try decoder.decodeSingularStringField(value: &self._accessibilityDescription)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._offset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._scale {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._imageData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._thumbnailImageData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._imageAdjustments {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._adjustedImageData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._thumbnailAdjustedImageData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._captionStorage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._accessibilityDescription {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_GalleryItem, rhs: TSA_GalleryItem) -> Bool {
    if lhs._offset != rhs._offset {return false}
    if lhs._scale != rhs._scale {return false}
    if lhs._imageData != rhs._imageData {return false}
    if lhs._thumbnailImageData != rhs._thumbnailImageData {return false}
    if lhs._imageAdjustments != rhs._imageAdjustments {return false}
    if lhs._adjustedImageData != rhs._adjustedImageData {return false}
    if lhs._thumbnailAdjustedImageData != rhs._thumbnailAdjustedImageData {return false}
    if lhs._captionStorage != rhs._captionStorage {return false}
    if lhs._accessibilityDescription != rhs._accessibilityDescription {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_GalleryInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GalleryInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
    2: .standard(proto: "caption_mode"),
    3: .standard(proto: "caption_storage"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.items) {return false}
    if let v = self._captionStorage, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.items)
      case 2: try decoder.decodeSingularEnumField(value: &self._captionMode)
      case 3: try decoder.decodeSingularMessageField(value: &self._captionStorage)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    if let v = self._captionMode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._captionStorage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_GalleryInfo, rhs: TSA_GalleryInfo) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs._captionMode != rhs._captionMode {return false}
    if lhs._captionStorage != rhs._captionStorage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_GallerySelectionTransformer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GallerySelectionTransformer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "gallery_uuid_path"),
    3: .standard(proto: "caption_storage_uuid_path"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._galleryUuidPath, !v.isInitialized {return false}
    if let v = self._captionStorageUuidPath, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._galleryUuidPath)
      case 3: try decoder.decodeSingularMessageField(value: &self._captionStorageUuidPath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._galleryUuidPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._captionStorageUuidPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_GallerySelectionTransformer, rhs: TSA_GallerySelectionTransformer) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._galleryUuidPath != rhs._galleryUuidPath {return false}
    if lhs._captionStorageUuidPath != rhs._captionStorageUuidPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_GalleryItemSelection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GalleryItemSelection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "displayed_item"),
    2: .same(proto: "items"),
  ]

  public var isInitialized: Bool {
    if let v = self._displayedItem, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.items) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._displayedItem)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.items)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._displayedItem {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_GalleryItemSelection, rhs: TSA_GalleryItemSelection) -> Bool {
    if lhs._displayedItem != rhs._displayedItem {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_GalleryItemSelectionTransformer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GalleryItemSelectionTransformer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transformer_helper"),
    2: .standard(proto: "caption_storage_uuid_path"),
  ]

  public var isInitialized: Bool {
    if let v = self._transformerHelper, !v.isInitialized {return false}
    if let v = self._captionStorageUuidPath, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._transformerHelper)
      case 2: try decoder.decodeSingularMessageField(value: &self._captionStorageUuidPath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._transformerHelper {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._captionStorageUuidPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_GalleryItemSelectionTransformer, rhs: TSA_GalleryItemSelectionTransformer) -> Bool {
    if lhs._transformerHelper != rhs._transformerHelper {return false}
    if lhs._captionStorageUuidPath != rhs._captionStorageUuidPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_GalleryItemSelectionTransformerHelper: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GalleryItemSelectionTransformerHelper"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "displayed_item_uuid_path"),
    2: .standard(proto: "item_uuid_paths"),
  ]

  public var isInitialized: Bool {
    if let v = self._displayedItemUuidPath, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.itemUuidPaths) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._displayedItemUuidPath)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.itemUuidPaths)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._displayedItemUuidPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.itemUuidPaths.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.itemUuidPaths, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_GalleryItemSelectionTransformerHelper, rhs: TSA_GalleryItemSelectionTransformerHelper) -> Bool {
    if lhs._displayedItemUuidPath != rhs._displayedItemUuidPath {return false}
    if lhs.itemUuidPaths != rhs.itemUuidPaths {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_GalleryItemSetValueCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GalleryItemSetValueCommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "item_id_path"),
    3: .same(proto: "property"),
    4: .same(proto: "value"),
    5: .standard(proto: "old_value"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._itemIDPath, !v.isInitialized {return false}
    if let v = self._value, !v.isInitialized {return false}
    if let v = self._oldValue, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._itemIDPath)
      case 3: try decoder.decodeSingularEnumField(value: &self._property)
      case 4: try decoder.decodeSingularMessageField(value: &self._value)
      case 5: try decoder.decodeSingularMessageField(value: &self._oldValue)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._itemIDPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._property {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._oldValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_GalleryItemSetValueCommand, rhs: TSA_GalleryItemSetValueCommand) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._itemIDPath != rhs._itemIDPath {return false}
    if lhs._property != rhs._property {return false}
    if lhs._value != rhs._value {return false}
    if lhs._oldValue != rhs._oldValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSA_GalleryItemSetValueCommand.PropertyValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSA_GalleryItemSetValueCommand.protoMessageName + ".PropertyValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "image_data"),
    2: .standard(proto: "accessibility_description"),
  ]

  public var isInitialized: Bool {
    if let v = self._imageData, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._imageData)
      case 2: try decoder.decodeSingularStringField(value: &self._accessibilityDescription)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._imageData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._accessibilityDescription {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSA_GalleryItemSetValueCommand.PropertyValue, rhs: TSA_GalleryItemSetValueCommand.PropertyValue) -> Bool {
    if lhs._imageData != rhs._imageData {return false}
    if lhs._accessibilityDescription != rhs._accessibilityDescription {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
