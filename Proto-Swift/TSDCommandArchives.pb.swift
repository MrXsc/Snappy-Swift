// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TSDCommandArchives.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum TSD_CommentCommandVariant: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case baseComment // = 0
  case addReply // = 1
  case editReply // = 2
  case deleteReply // = 3

  init() {
    self = .baseComment
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .baseComment
    case 1: self = .addReply
    case 2: self = .editReply
    case 3: self = .deleteReply
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .baseComment: return 0
    case .addReply: return 1
    case .editReply: return 2
    case .deleteReply: return 3
    }
  }

}

#if swift(>=4.2)

extension TSD_CommentCommandVariant: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_UndoObjectArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var stylesheet: TSP_Reference {
    get {return _stylesheet ?? TSP_Reference()}
    set {_stylesheet = newValue}
  }
  /// Returns true if `stylesheet` has been explicitly set.
  var hasStylesheet: Bool {return self._stylesheet != nil}
  /// Clears the value of `stylesheet`. Subsequent reads from it will return its default value.
  mutating func clearStylesheet() {self._stylesheet = nil}

  var objects: [TSP_Reference] = []

  var keys: [String] = []

  var counts: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _stylesheet: TSP_Reference? = nil
}

struct TSD_GroupDrawablesCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var drawables: [TSP_Reference] = []

  var group: TSP_Reference {
    get {return _group ?? TSP_Reference()}
    set {_group = newValue}
  }
  /// Returns true if `group` has been explicitly set.
  var hasGroup: Bool {return self._group != nil}
  /// Clears the value of `group`. Subsequent reads from it will return its default value.
  mutating func clearGroup() {self._group = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _group: TSP_Reference? = nil
}

struct TSD_UngroupGroupCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var drawables: [TSP_Reference] = []

  var group: TSP_Reference {
    get {return _group ?? TSP_Reference()}
    set {_group = newValue}
  }
  /// Returns true if `group` has been explicitly set.
  var hasGroup: Bool {return self._group != nil}
  /// Clears the value of `group`. Subsequent reads from it will return its default value.
  mutating func clearGroup() {self._group = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _group: TSP_Reference? = nil
}

struct TSD_ContainerRemoveChildrenCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var containerIDPath: TSP_UUIDPath {
    get {return _containerIDPath ?? TSP_UUIDPath()}
    set {_containerIDPath = newValue}
  }
  /// Returns true if `containerIDPath` has been explicitly set.
  var hasContainerIDPath: Bool {return self._containerIDPath != nil}
  /// Clears the value of `containerIDPath`. Subsequent reads from it will return its default value.
  mutating func clearContainerIDPath() {self._containerIDPath = nil}

  var argsList: [TSK_RemoveIdOperationArgs] = []

  var children: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _containerIDPath: TSP_UUIDPath? = nil
}

struct TSD_ContainerRemoveDrawablesCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_ContainerRemoveChildrenCommandArchive {
    get {return _super ?? TSD_ContainerRemoveChildrenCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_ContainerRemoveChildrenCommandArchive? = nil
}

struct TSD_ContainerInsertChildrenCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var containerIDPath: TSP_UUIDPath {
    get {return _containerIDPath ?? TSP_UUIDPath()}
    set {_containerIDPath = newValue}
  }
  /// Returns true if `containerIDPath` has been explicitly set.
  var hasContainerIDPath: Bool {return self._containerIDPath != nil}
  /// Clears the value of `containerIDPath`. Subsequent reads from it will return its default value.
  mutating func clearContainerIDPath() {self._containerIDPath = nil}

  var children: [TSP_Reference] = []

  var argsList: [TSK_AddIdOperationArgs] = []

  var customFormatKeys: [TSP_UUID] = []

  var undoObject: TSP_Reference {
    get {return _undoObject ?? TSP_Reference()}
    set {_undoObject = newValue}
  }
  /// Returns true if `undoObject` has been explicitly set.
  var hasUndoObject: Bool {return self._undoObject != nil}
  /// Clears the value of `undoObject`. Subsequent reads from it will return its default value.
  mutating func clearUndoObject() {self._undoObject = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _containerIDPath: TSP_UUIDPath? = nil
  fileprivate var _undoObject: TSP_Reference? = nil
}

struct TSD_ContainerInsertDrawablesCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_ContainerInsertChildrenCommandArchive {
    get {return _super ?? TSD_ContainerInsertChildrenCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var drawables: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_ContainerInsertChildrenCommandArchive? = nil
}

struct TSD_ContainerReorderChildrenCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var containerIDPath: TSP_UUIDPath {
    get {return _containerIDPath ?? TSP_UUIDPath()}
    set {_containerIDPath = newValue}
  }
  /// Returns true if `containerIDPath` has been explicitly set.
  var hasContainerIDPath: Bool {return self._containerIDPath != nil}
  /// Clears the value of `containerIDPath`. Subsequent reads from it will return its default value.
  mutating func clearContainerIDPath() {self._containerIDPath = nil}

  var argsList: [TSK_RearrangeIdOperationArgs] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _containerIDPath: TSP_UUIDPath? = nil
}

struct TSD_GroupUngroupInformativeCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var removedInfos: [TSP_Reference] = []

  var insertedInfos: [TSP_Reference] = []

  var commandType: TSD_GroupUngroupInformativeCommandArchive.CommandType {
    get {return _commandType ?? .group}
    set {_commandType = newValue}
  }
  /// Returns true if `commandType` has been explicitly set.
  var hasCommandType: Bool {return self._commandType != nil}
  /// Clears the value of `commandType`. Subsequent reads from it will return its default value.
  mutating func clearCommandType() {self._commandType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum CommandType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case group // = 0
    case ungroup // = 1

    init() {
      self = .group
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .group
      case 1: self = .ungroup
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .group: return 0
      case .ungroup: return 1
      }
    }

  }

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _commandType: TSD_GroupUngroupInformativeCommandArchive.CommandType? = nil
}

#if swift(>=4.2)

extension TSD_GroupUngroupInformativeCommandArchive.CommandType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_InfoCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var infoIDPath: TSP_UUIDPath {
    get {return _infoIDPath ?? TSP_UUIDPath()}
    set {_infoIDPath = newValue}
  }
  /// Returns true if `infoIDPath` has been explicitly set.
  var hasInfoIDPath: Bool {return self._infoIDPath != nil}
  /// Clears the value of `infoIDPath`. Subsequent reads from it will return its default value.
  mutating func clearInfoIDPath() {self._infoIDPath = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _infoIDPath: TSP_UUIDPath? = nil
}

struct TSD_ConnectionLineConnectCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var connectedFromID: TSP_UUID {
    get {return _connectedFromID ?? TSP_UUID()}
    set {_connectedFromID = newValue}
  }
  /// Returns true if `connectedFromID` has been explicitly set.
  var hasConnectedFromID: Bool {return self._connectedFromID != nil}
  /// Clears the value of `connectedFromID`. Subsequent reads from it will return its default value.
  mutating func clearConnectedFromID() {self._connectedFromID = nil}

  var connectedToID: TSP_UUID {
    get {return _connectedToID ?? TSP_UUID()}
    set {_connectedToID = newValue}
  }
  /// Returns true if `connectedToID` has been explicitly set.
  var hasConnectedToID: Bool {return self._connectedToID != nil}
  /// Clears the value of `connectedToID`. Subsequent reads from it will return its default value.
  mutating func clearConnectedToID() {self._connectedToID = nil}

  var oldConnectedToID: TSP_UUID {
    get {return _oldConnectedToID ?? TSP_UUID()}
    set {_oldConnectedToID = newValue}
  }
  /// Returns true if `oldConnectedToID` has been explicitly set.
  var hasOldConnectedToID: Bool {return self._oldConnectedToID != nil}
  /// Clears the value of `oldConnectedToID`. Subsequent reads from it will return its default value.
  mutating func clearOldConnectedToID() {self._oldConnectedToID = nil}

  var oldConnectedFromID: TSP_UUID {
    get {return _oldConnectedFromID ?? TSP_UUID()}
    set {_oldConnectedFromID = newValue}
  }
  /// Returns true if `oldConnectedFromID` has been explicitly set.
  var hasOldConnectedFromID: Bool {return self._oldConnectedFromID != nil}
  /// Clears the value of `oldConnectedFromID`. Subsequent reads from it will return its default value.
  mutating func clearOldConnectedFromID() {self._oldConnectedFromID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _connectedFromID: TSP_UUID? = nil
  fileprivate var _connectedToID: TSP_UUID? = nil
  fileprivate var _oldConnectedToID: TSP_UUID? = nil
  fileprivate var _oldConnectedFromID: TSP_UUID? = nil
}

struct TSD_InfoGeometryCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var newGeometry: TSD_GeometryArchive {
    get {return _newGeometry ?? TSD_GeometryArchive()}
    set {_newGeometry = newValue}
  }
  /// Returns true if `newGeometry` has been explicitly set.
  var hasNewGeometry: Bool {return self._newGeometry != nil}
  /// Clears the value of `newGeometry`. Subsequent reads from it will return its default value.
  mutating func clearNewGeometry() {self._newGeometry = nil}

  var oldGeometry: TSD_GeometryArchive {
    get {return _oldGeometry ?? TSD_GeometryArchive()}
    set {_oldGeometry = newValue}
  }
  /// Returns true if `oldGeometry` has been explicitly set.
  var hasOldGeometry: Bool {return self._oldGeometry != nil}
  /// Clears the value of `oldGeometry`. Subsequent reads from it will return its default value.
  mutating func clearOldGeometry() {self._oldGeometry = nil}

  var matchObjectPlaceholderGeometry: Bool {
    get {return _matchObjectPlaceholderGeometry ?? false}
    set {_matchObjectPlaceholderGeometry = newValue}
  }
  /// Returns true if `matchObjectPlaceholderGeometry` has been explicitly set.
  var hasMatchObjectPlaceholderGeometry: Bool {return self._matchObjectPlaceholderGeometry != nil}
  /// Clears the value of `matchObjectPlaceholderGeometry`. Subsequent reads from it will return its default value.
  mutating func clearMatchObjectPlaceholderGeometry() {self._matchObjectPlaceholderGeometry = nil}

  var oldMatchObjectPlaceholderGeometry: Bool {
    get {return _oldMatchObjectPlaceholderGeometry ?? false}
    set {_oldMatchObjectPlaceholderGeometry = newValue}
  }
  /// Returns true if `oldMatchObjectPlaceholderGeometry` has been explicitly set.
  var hasOldMatchObjectPlaceholderGeometry: Bool {return self._oldMatchObjectPlaceholderGeometry != nil}
  /// Clears the value of `oldMatchObjectPlaceholderGeometry`. Subsequent reads from it will return its default value.
  mutating func clearOldMatchObjectPlaceholderGeometry() {self._oldMatchObjectPlaceholderGeometry = nil}

  var shouldTriggerRtuAnimation: Bool {
    get {return _shouldTriggerRtuAnimation ?? false}
    set {_shouldTriggerRtuAnimation = newValue}
  }
  /// Returns true if `shouldTriggerRtuAnimation` has been explicitly set.
  var hasShouldTriggerRtuAnimation: Bool {return self._shouldTriggerRtuAnimation != nil}
  /// Clears the value of `shouldTriggerRtuAnimation`. Subsequent reads from it will return its default value.
  mutating func clearShouldTriggerRtuAnimation() {self._shouldTriggerRtuAnimation = nil}

  var initiatedOnWeb: Bool {
    get {return _initiatedOnWeb ?? false}
    set {_initiatedOnWeb = newValue}
  }
  /// Returns true if `initiatedOnWeb` has been explicitly set.
  var hasInitiatedOnWeb: Bool {return self._initiatedOnWeb != nil}
  /// Clears the value of `initiatedOnWeb`. Subsequent reads from it will return its default value.
  mutating func clearInitiatedOnWeb() {self._initiatedOnWeb = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _newGeometry: TSD_GeometryArchive? = nil
  fileprivate var _oldGeometry: TSD_GeometryArchive? = nil
  fileprivate var _matchObjectPlaceholderGeometry: Bool? = nil
  fileprivate var _oldMatchObjectPlaceholderGeometry: Bool? = nil
  fileprivate var _shouldTriggerRtuAnimation: Bool? = nil
  fileprivate var _initiatedOnWeb: Bool? = nil
}

struct TSD_DrawablePathSourceCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldPathSource: TSD_PathSourceArchive {
    get {return _oldPathSource ?? TSD_PathSourceArchive()}
    set {_oldPathSource = newValue}
  }
  /// Returns true if `oldPathSource` has been explicitly set.
  var hasOldPathSource: Bool {return self._oldPathSource != nil}
  /// Clears the value of `oldPathSource`. Subsequent reads from it will return its default value.
  mutating func clearOldPathSource() {self._oldPathSource = nil}

  var newPathSource: TSD_PathSourceArchive {
    get {return _newPathSource ?? TSD_PathSourceArchive()}
    set {_newPathSource = newValue}
  }
  /// Returns true if `newPathSource` has been explicitly set.
  var hasNewPathSource: Bool {return self._newPathSource != nil}
  /// Clears the value of `newPathSource`. Subsequent reads from it will return its default value.
  mutating func clearNewPathSource() {self._newPathSource = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _oldPathSource: TSD_PathSourceArchive? = nil
  fileprivate var _newPathSource: TSD_PathSourceArchive? = nil
}

struct TSD_InstantAlphaCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldpath: TSP_Path {
    get {return _oldpath ?? TSP_Path()}
    set {_oldpath = newValue}
  }
  /// Returns true if `oldpath` has been explicitly set.
  var hasOldpath: Bool {return self._oldpath != nil}
  /// Clears the value of `oldpath`. Subsequent reads from it will return its default value.
  mutating func clearOldpath() {self._oldpath = nil}

  var newpath: TSP_Path {
    get {return _newpath ?? TSP_Path()}
    set {_newpath = newValue}
  }
  /// Returns true if `newpath` has been explicitly set.
  var hasNewpath: Bool {return self._newpath != nil}
  /// Clears the value of `newpath`. Subsequent reads from it will return its default value.
  mutating func clearNewpath() {self._newpath = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _oldpath: TSP_Path? = nil
  fileprivate var _newpath: TSP_Path? = nil
}

struct TSD_DrawableApplyThemeCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSS_ApplyThemeChildCommandArchive {
    get {return _super ?? TSS_ApplyThemeChildCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var info: TSP_Reference {
    get {return _info ?? TSP_Reference()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {self._info = nil}

  var style: TSP_Reference {
    get {return _style ?? TSP_Reference()}
    set {_style = newValue}
  }
  /// Returns true if `style` has been explicitly set.
  var hasStyle: Bool {return self._style != nil}
  /// Clears the value of `style`. Subsequent reads from it will return its default value.
  mutating func clearStyle() {self._style = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSS_ApplyThemeChildCommandArchive? = nil
  fileprivate var _info: TSP_Reference? = nil
  fileprivate var _style: TSP_Reference? = nil
}

struct TSD_ShapePathSourceFlipCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var info: TSP_Reference {
    get {return _info ?? TSP_Reference()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {self._info = nil}

  var newHorizontalFlip: Bool {
    get {return _newHorizontalFlip ?? false}
    set {_newHorizontalFlip = newValue}
  }
  /// Returns true if `newHorizontalFlip` has been explicitly set.
  var hasNewHorizontalFlip: Bool {return self._newHorizontalFlip != nil}
  /// Clears the value of `newHorizontalFlip`. Subsequent reads from it will return its default value.
  mutating func clearNewHorizontalFlip() {self._newHorizontalFlip = nil}

  var newVerticalFlip: Bool {
    get {return _newVerticalFlip ?? false}
    set {_newVerticalFlip = newValue}
  }
  /// Returns true if `newVerticalFlip` has been explicitly set.
  var hasNewVerticalFlip: Bool {return self._newVerticalFlip != nil}
  /// Clears the value of `newVerticalFlip`. Subsequent reads from it will return its default value.
  mutating func clearNewVerticalFlip() {self._newVerticalFlip = nil}

  var oldHorizontalFlip: Bool {
    get {return _oldHorizontalFlip ?? false}
    set {_oldHorizontalFlip = newValue}
  }
  /// Returns true if `oldHorizontalFlip` has been explicitly set.
  var hasOldHorizontalFlip: Bool {return self._oldHorizontalFlip != nil}
  /// Clears the value of `oldHorizontalFlip`. Subsequent reads from it will return its default value.
  mutating func clearOldHorizontalFlip() {self._oldHorizontalFlip = nil}

  var oldVerticalFlip: Bool {
    get {return _oldVerticalFlip ?? false}
    set {_oldVerticalFlip = newValue}
  }
  /// Returns true if `oldVerticalFlip` has been explicitly set.
  var hasOldVerticalFlip: Bool {return self._oldVerticalFlip != nil}
  /// Clears the value of `oldVerticalFlip`. Subsequent reads from it will return its default value.
  mutating func clearOldVerticalFlip() {self._oldVerticalFlip = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _info: TSP_Reference? = nil
  fileprivate var _newHorizontalFlip: Bool? = nil
  fileprivate var _newVerticalFlip: Bool? = nil
  fileprivate var _oldHorizontalFlip: Bool? = nil
  fileprivate var _oldVerticalFlip: Bool? = nil
}

struct TSD_AbstractStyleCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
}

struct TSD_StyledInfoSetStyleCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_AbstractStyleCommandArchive {
    get {return _super ?? TSD_AbstractStyleCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var newStyle: TSP_Reference {
    get {return _newStyle ?? TSP_Reference()}
    set {_newStyle = newValue}
  }
  /// Returns true if `newStyle` has been explicitly set.
  var hasNewStyle: Bool {return self._newStyle != nil}
  /// Clears the value of `newStyle`. Subsequent reads from it will return its default value.
  mutating func clearNewStyle() {self._newStyle = nil}

  var rollbackStyle: TSP_Reference {
    get {return _rollbackStyle ?? TSP_Reference()}
    set {_rollbackStyle = newValue}
  }
  /// Returns true if `rollbackStyle` has been explicitly set.
  var hasRollbackStyle: Bool {return self._rollbackStyle != nil}
  /// Clears the value of `rollbackStyle`. Subsequent reads from it will return its default value.
  mutating func clearRollbackStyle() {self._rollbackStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_AbstractStyleCommandArchive? = nil
  fileprivate var _newStyle: TSP_Reference? = nil
  fileprivate var _rollbackStyle: TSP_Reference? = nil
}

struct TSD_BaseApplyPresetCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_AbstractStyleCommandArchive {
    get {return _super ?? TSD_AbstractStyleCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var presetStyle: TSP_Reference {
    get {return _presetStyle ?? TSP_Reference()}
    set {_presetStyle = newValue}
  }
  /// Returns true if `presetStyle` has been explicitly set.
  var hasPresetStyle: Bool {return self._presetStyle != nil}
  /// Clears the value of `presetStyle`. Subsequent reads from it will return its default value.
  mutating func clearPresetStyle() {self._presetStyle = nil}

  var rollbackStyle: TSP_Reference {
    get {return _rollbackStyle ?? TSP_Reference()}
    set {_rollbackStyle = newValue}
  }
  /// Returns true if `rollbackStyle` has been explicitly set.
  var hasRollbackStyle: Bool {return self._rollbackStyle != nil}
  /// Clears the value of `rollbackStyle`. Subsequent reads from it will return its default value.
  mutating func clearRollbackStyle() {self._rollbackStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_AbstractStyleCommandArchive? = nil
  fileprivate var _presetStyle: TSP_Reference? = nil
  fileprivate var _rollbackStyle: TSP_Reference? = nil
}

struct TSD_ShapeApplyPresetCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_BaseApplyPresetCommandArchive {
    get {return _super ?? TSD_BaseApplyPresetCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_BaseApplyPresetCommandArchive? = nil
}

struct TSD_MediaApplyPresetCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_BaseApplyPresetCommandArchive {
    get {return _super ?? TSD_BaseApplyPresetCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_BaseApplyPresetCommandArchive? = nil
}

struct TSD_ShapeStyleSetValueCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_BaseStyleSetValueCommandArchive {
    get {return _super ?? TSD_BaseStyleSetValueCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var change: TSD_BaseShapeStylePropertyChangeSetArchive {
    get {return _change ?? TSD_BaseShapeStylePropertyChangeSetArchive()}
    set {_change = newValue}
  }
  /// Returns true if `change` has been explicitly set.
  var hasChange: Bool {return self._change != nil}
  /// Clears the value of `change`. Subsequent reads from it will return its default value.
  mutating func clearChange() {self._change = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_BaseStyleSetValueCommandArchive? = nil
  fileprivate var _change: TSD_BaseShapeStylePropertyChangeSetArchive? = nil
}

struct TSD_BaseStyleSetValueCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_AbstractStyleCommandArchive {
    get {return _super ?? TSD_AbstractStyleCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldStyle: TSP_Reference {
    get {return _oldStyle ?? TSP_Reference()}
    set {_oldStyle = newValue}
  }
  /// Returns true if `oldStyle` has been explicitly set.
  var hasOldStyle: Bool {return self._oldStyle != nil}
  /// Clears the value of `oldStyle`. Subsequent reads from it will return its default value.
  mutating func clearOldStyle() {self._oldStyle = nil}

  var isBorderChange: Bool {
    get {return _isBorderChange ?? false}
    set {_isBorderChange = newValue}
  }
  /// Returns true if `isBorderChange` has been explicitly set.
  var hasIsBorderChange: Bool {return self._isBorderChange != nil}
  /// Clears the value of `isBorderChange`. Subsequent reads from it will return its default value.
  mutating func clearIsBorderChange() {self._isBorderChange = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_AbstractStyleCommandArchive? = nil
  fileprivate var _oldStyle: TSP_Reference? = nil
  fileprivate var _isBorderChange: Bool? = nil
}

struct TSD_MovieSetValueCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var property: Int32 {
    get {return _property ?? 0}
    set {_property = newValue}
  }
  /// Returns true if `property` has been explicitly set.
  var hasProperty: Bool {return self._property != nil}
  /// Clears the value of `property`. Subsequent reads from it will return its default value.
  mutating func clearProperty() {self._property = nil}

  var value: TSD_MovieSetValueCommandArchive.PropertyValue {
    get {return _value ?? TSD_MovieSetValueCommandArchive.PropertyValue()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var oldValue: TSD_MovieSetValueCommandArchive.PropertyValue {
    get {return _oldValue ?? TSD_MovieSetValueCommandArchive.PropertyValue()}
    set {_oldValue = newValue}
  }
  /// Returns true if `oldValue` has been explicitly set.
  var hasOldValue: Bool {return self._oldValue != nil}
  /// Clears the value of `oldValue`. Subsequent reads from it will return its default value.
  mutating func clearOldValue() {self._oldValue = nil}

  var importedauxiliarymedia: TSP_DataReference {
    get {return _importedauxiliarymedia ?? TSP_DataReference()}
    set {_importedauxiliarymedia = newValue}
  }
  /// Returns true if `importedauxiliarymedia` has been explicitly set.
  var hasImportedauxiliarymedia: Bool {return self._importedauxiliarymedia != nil}
  /// Clears the value of `importedauxiliarymedia`. Subsequent reads from it will return its default value.
  mutating func clearImportedauxiliarymedia() {self._importedauxiliarymedia = nil}

  var oldimportedauxiliarymedia: TSP_DataReference {
    get {return _oldimportedauxiliarymedia ?? TSP_DataReference()}
    set {_oldimportedauxiliarymedia = newValue}
  }
  /// Returns true if `oldimportedauxiliarymedia` has been explicitly set.
  var hasOldimportedauxiliarymedia: Bool {return self._oldimportedauxiliarymedia != nil}
  /// Clears the value of `oldimportedauxiliarymedia`. Subsequent reads from it will return its default value.
  mutating func clearOldimportedauxiliarymedia() {self._oldimportedauxiliarymedia = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum LoopOption: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case none // = 0
    case `repeat` // = 1
    case backAndForth // = 2

    init() {
      self = .none
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .repeat
      case 2: self = .backAndForth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .none: return 0
      case .repeat: return 1
      case .backAndForth: return 2
      }
    }

  }

  struct PropertyValue {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var starttime: Double {
      get {return _starttime ?? 0}
      set {_starttime = newValue}
    }
    /// Returns true if `starttime` has been explicitly set.
    var hasStarttime: Bool {return self._starttime != nil}
    /// Clears the value of `starttime`. Subsequent reads from it will return its default value.
    mutating func clearStarttime() {self._starttime = nil}

    var endtime: Double {
      get {return _endtime ?? 0}
      set {_endtime = newValue}
    }
    /// Returns true if `endtime` has been explicitly set.
    var hasEndtime: Bool {return self._endtime != nil}
    /// Clears the value of `endtime`. Subsequent reads from it will return its default value.
    mutating func clearEndtime() {self._endtime = nil}

    var postertime: Double {
      get {return _postertime ?? 0}
      set {_postertime = newValue}
    }
    /// Returns true if `postertime` has been explicitly set.
    var hasPostertime: Bool {return self._postertime != nil}
    /// Clears the value of `postertime`. Subsequent reads from it will return its default value.
    mutating func clearPostertime() {self._postertime = nil}

    var posterimagedata: TSP_DataReference {
      get {return _posterimagedata ?? TSP_DataReference()}
      set {_posterimagedata = newValue}
    }
    /// Returns true if `posterimagedata` has been explicitly set.
    var hasPosterimagedata: Bool {return self._posterimagedata != nil}
    /// Clears the value of `posterimagedata`. Subsequent reads from it will return its default value.
    mutating func clearPosterimagedata() {self._posterimagedata = nil}

    var autoplay: Bool {
      get {return _autoplay ?? false}
      set {_autoplay = newValue}
    }
    /// Returns true if `autoplay` has been explicitly set.
    var hasAutoplay: Bool {return self._autoplay != nil}
    /// Clears the value of `autoplay`. Subsequent reads from it will return its default value.
    mutating func clearAutoplay() {self._autoplay = nil}

    var loopOption: TSD_MovieSetValueCommandArchive.LoopOption {
      get {return _loopOption ?? .none}
      set {_loopOption = newValue}
    }
    /// Returns true if `loopOption` has been explicitly set.
    var hasLoopOption: Bool {return self._loopOption != nil}
    /// Clears the value of `loopOption`. Subsequent reads from it will return its default value.
    mutating func clearLoopOption() {self._loopOption = nil}

    var volume: Float {
      get {return _volume ?? 0}
      set {_volume = newValue}
    }
    /// Returns true if `volume` has been explicitly set.
    var hasVolume: Bool {return self._volume != nil}
    /// Clears the value of `volume`. Subsequent reads from it will return its default value.
    mutating func clearVolume() {self._volume = nil}

    var media: TSP_DataReference {
      get {return _media ?? TSP_DataReference()}
      set {_media = newValue}
    }
    /// Returns true if `media` has been explicitly set.
    var hasMedia: Bool {return self._media != nil}
    /// Clears the value of `media`. Subsequent reads from it will return its default value.
    mutating func clearMedia() {self._media = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _starttime: Double? = nil
    fileprivate var _endtime: Double? = nil
    fileprivate var _postertime: Double? = nil
    fileprivate var _posterimagedata: TSP_DataReference? = nil
    fileprivate var _autoplay: Bool? = nil
    fileprivate var _loopOption: TSD_MovieSetValueCommandArchive.LoopOption? = nil
    fileprivate var _volume: Float? = nil
    fileprivate var _media: TSP_DataReference? = nil
  }

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _property: Int32? = nil
  fileprivate var _value: TSD_MovieSetValueCommandArchive.PropertyValue? = nil
  fileprivate var _oldValue: TSD_MovieSetValueCommandArchive.PropertyValue? = nil
  fileprivate var _importedauxiliarymedia: TSP_DataReference? = nil
  fileprivate var _oldimportedauxiliarymedia: TSP_DataReference? = nil
}

#if swift(>=4.2)

extension TSD_MovieSetValueCommandArchive.LoopOption: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_MediaStyleSetValueCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_BaseStyleSetValueCommandArchive {
    get {return _super ?? TSD_BaseStyleSetValueCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var change: TSD_MediaStylePropertyChangeSetArchive {
    get {return _change ?? TSD_MediaStylePropertyChangeSetArchive()}
    set {_change = newValue}
  }
  /// Returns true if `change` has been explicitly set.
  var hasChange: Bool {return self._change != nil}
  /// Clears the value of `change`. Subsequent reads from it will return its default value.
  mutating func clearChange() {self._change = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_BaseStyleSetValueCommandArchive? = nil
  fileprivate var _change: TSD_MediaStylePropertyChangeSetArchive? = nil
}

struct TSD_ImageMediaCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _storage._super ?? TSD_InfoCommandArchive()}
    set {_uniqueStorage()._super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return _storage._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {_uniqueStorage()._super = nil}

  var newImageData: TSP_DataReference {
    get {return _storage._newImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._newImageData = newValue}
  }
  /// Returns true if `newImageData` has been explicitly set.
  var hasNewImageData: Bool {return _storage._newImageData != nil}
  /// Clears the value of `newImageData`. Subsequent reads from it will return its default value.
  mutating func clearNewImageData() {_uniqueStorage()._newImageData = nil}

  var oldImageData: TSP_DataReference {
    get {return _storage._oldImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._oldImageData = newValue}
  }
  /// Returns true if `oldImageData` has been explicitly set.
  var hasOldImageData: Bool {return _storage._oldImageData != nil}
  /// Clears the value of `oldImageData`. Subsequent reads from it will return its default value.
  mutating func clearOldImageData() {_uniqueStorage()._oldImageData = nil}

  var oldOriginalImageData: TSP_DataReference {
    get {return _storage._oldOriginalImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._oldOriginalImageData = newValue}
  }
  /// Returns true if `oldOriginalImageData` has been explicitly set.
  var hasOldOriginalImageData: Bool {return _storage._oldOriginalImageData != nil}
  /// Clears the value of `oldOriginalImageData`. Subsequent reads from it will return its default value.
  mutating func clearOldOriginalImageData() {_uniqueStorage()._oldOriginalImageData = nil}

  var oldNaturalSize: TSP_Size {
    get {return _storage._oldNaturalSize ?? TSP_Size()}
    set {_uniqueStorage()._oldNaturalSize = newValue}
  }
  /// Returns true if `oldNaturalSize` has been explicitly set.
  var hasOldNaturalSize: Bool {return _storage._oldNaturalSize != nil}
  /// Clears the value of `oldNaturalSize`. Subsequent reads from it will return its default value.
  mutating func clearOldNaturalSize() {_uniqueStorage()._oldNaturalSize = nil}

  var newOriginalImageData: TSP_DataReference {
    get {return _storage._newOriginalImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._newOriginalImageData = newValue}
  }
  /// Returns true if `newOriginalImageData` has been explicitly set.
  var hasNewOriginalImageData: Bool {return _storage._newOriginalImageData != nil}
  /// Clears the value of `newOriginalImageData`. Subsequent reads from it will return its default value.
  mutating func clearNewOriginalImageData() {_uniqueStorage()._newOriginalImageData = nil}

  var oldImageAdjustments: TSD_ImageAdjustmentsArchive {
    get {return _storage._oldImageAdjustments ?? TSD_ImageAdjustmentsArchive()}
    set {_uniqueStorage()._oldImageAdjustments = newValue}
  }
  /// Returns true if `oldImageAdjustments` has been explicitly set.
  var hasOldImageAdjustments: Bool {return _storage._oldImageAdjustments != nil}
  /// Clears the value of `oldImageAdjustments`. Subsequent reads from it will return its default value.
  mutating func clearOldImageAdjustments() {_uniqueStorage()._oldImageAdjustments = nil}

  var oldAdjustedImageData: TSP_DataReference {
    get {return _storage._oldAdjustedImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._oldAdjustedImageData = newValue}
  }
  /// Returns true if `oldAdjustedImageData` has been explicitly set.
  var hasOldAdjustedImageData: Bool {return _storage._oldAdjustedImageData != nil}
  /// Clears the value of `oldAdjustedImageData`. Subsequent reads from it will return its default value.
  mutating func clearOldAdjustedImageData() {_uniqueStorage()._oldAdjustedImageData = nil}

  var oldEnhancedImageData: TSP_DataReference {
    get {return _storage._oldEnhancedImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._oldEnhancedImageData = newValue}
  }
  /// Returns true if `oldEnhancedImageData` has been explicitly set.
  var hasOldEnhancedImageData: Bool {return _storage._oldEnhancedImageData != nil}
  /// Clears the value of `oldEnhancedImageData`. Subsequent reads from it will return its default value.
  mutating func clearOldEnhancedImageData() {_uniqueStorage()._oldEnhancedImageData = nil}

  var imageAdjustments: TSD_ImageAdjustmentsArchive {
    get {return _storage._imageAdjustments ?? TSD_ImageAdjustmentsArchive()}
    set {_uniqueStorage()._imageAdjustments = newValue}
  }
  /// Returns true if `imageAdjustments` has been explicitly set.
  var hasImageAdjustments: Bool {return _storage._imageAdjustments != nil}
  /// Clears the value of `imageAdjustments`. Subsequent reads from it will return its default value.
  mutating func clearImageAdjustments() {_uniqueStorage()._imageAdjustments = nil}

  var adjustedImageData: TSP_DataReference {
    get {return _storage._adjustedImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._adjustedImageData = newValue}
  }
  /// Returns true if `adjustedImageData` has been explicitly set.
  var hasAdjustedImageData: Bool {return _storage._adjustedImageData != nil}
  /// Clears the value of `adjustedImageData`. Subsequent reads from it will return its default value.
  mutating func clearAdjustedImageData() {_uniqueStorage()._adjustedImageData = nil}

  var enhancedImageData: TSP_DataReference {
    get {return _storage._enhancedImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._enhancedImageData = newValue}
  }
  /// Returns true if `enhancedImageData` has been explicitly set.
  var hasEnhancedImageData: Bool {return _storage._enhancedImageData != nil}
  /// Clears the value of `enhancedImageData`. Subsequent reads from it will return its default value.
  mutating func clearEnhancedImageData() {_uniqueStorage()._enhancedImageData = nil}

  var newThumbnailImageData: TSP_DataReference {
    get {return _storage._newThumbnailImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._newThumbnailImageData = newValue}
  }
  /// Returns true if `newThumbnailImageData` has been explicitly set.
  var hasNewThumbnailImageData: Bool {return _storage._newThumbnailImageData != nil}
  /// Clears the value of `newThumbnailImageData`. Subsequent reads from it will return its default value.
  mutating func clearNewThumbnailImageData() {_uniqueStorage()._newThumbnailImageData = nil}

  var oldThumbnailImageData: TSP_DataReference {
    get {return _storage._oldThumbnailImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._oldThumbnailImageData = newValue}
  }
  /// Returns true if `oldThumbnailImageData` has been explicitly set.
  var hasOldThumbnailImageData: Bool {return _storage._oldThumbnailImageData != nil}
  /// Clears the value of `oldThumbnailImageData`. Subsequent reads from it will return its default value.
  mutating func clearOldThumbnailImageData() {_uniqueStorage()._oldThumbnailImageData = nil}

  var thumbnailAdjustedImageData: TSP_DataReference {
    get {return _storage._thumbnailAdjustedImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._thumbnailAdjustedImageData = newValue}
  }
  /// Returns true if `thumbnailAdjustedImageData` has been explicitly set.
  var hasThumbnailAdjustedImageData: Bool {return _storage._thumbnailAdjustedImageData != nil}
  /// Clears the value of `thumbnailAdjustedImageData`. Subsequent reads from it will return its default value.
  mutating func clearThumbnailAdjustedImageData() {_uniqueStorage()._thumbnailAdjustedImageData = nil}

  var oldThumbnailAdjustedImageData: TSP_DataReference {
    get {return _storage._oldThumbnailAdjustedImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._oldThumbnailAdjustedImageData = newValue}
  }
  /// Returns true if `oldThumbnailAdjustedImageData` has been explicitly set.
  var hasOldThumbnailAdjustedImageData: Bool {return _storage._oldThumbnailAdjustedImageData != nil}
  /// Clears the value of `oldThumbnailAdjustedImageData`. Subsequent reads from it will return its default value.
  mutating func clearOldThumbnailAdjustedImageData() {_uniqueStorage()._oldThumbnailAdjustedImageData = nil}

  var databaseNewImageData: TSP_Reference {
    get {return _storage._databaseNewImageData ?? TSP_Reference()}
    set {_uniqueStorage()._databaseNewImageData = newValue}
  }
  /// Returns true if `databaseNewImageData` has been explicitly set.
  var hasDatabaseNewImageData: Bool {return _storage._databaseNewImageData != nil}
  /// Clears the value of `databaseNewImageData`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseNewImageData() {_uniqueStorage()._databaseNewImageData = nil}

  var databaseOldImageData: TSP_Reference {
    get {return _storage._databaseOldImageData ?? TSP_Reference()}
    set {_uniqueStorage()._databaseOldImageData = newValue}
  }
  /// Returns true if `databaseOldImageData` has been explicitly set.
  var hasDatabaseOldImageData: Bool {return _storage._databaseOldImageData != nil}
  /// Clears the value of `databaseOldImageData`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseOldImageData() {_uniqueStorage()._databaseOldImageData = nil}

  var databaseOldOriginalImageData: TSP_Reference {
    get {return _storage._databaseOldOriginalImageData ?? TSP_Reference()}
    set {_uniqueStorage()._databaseOldOriginalImageData = newValue}
  }
  /// Returns true if `databaseOldOriginalImageData` has been explicitly set.
  var hasDatabaseOldOriginalImageData: Bool {return _storage._databaseOldOriginalImageData != nil}
  /// Clears the value of `databaseOldOriginalImageData`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseOldOriginalImageData() {_uniqueStorage()._databaseOldOriginalImageData = nil}

  var databaseNewOriginalImageData: TSP_Reference {
    get {return _storage._databaseNewOriginalImageData ?? TSP_Reference()}
    set {_uniqueStorage()._databaseNewOriginalImageData = newValue}
  }
  /// Returns true if `databaseNewOriginalImageData` has been explicitly set.
  var hasDatabaseNewOriginalImageData: Bool {return _storage._databaseNewOriginalImageData != nil}
  /// Clears the value of `databaseNewOriginalImageData`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseNewOriginalImageData() {_uniqueStorage()._databaseNewOriginalImageData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSD_MediaOriginalSizeCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var newOriginalSize: TSP_Size {
    get {return _newOriginalSize ?? TSP_Size()}
    set {_newOriginalSize = newValue}
  }
  /// Returns true if `newOriginalSize` has been explicitly set.
  var hasNewOriginalSize: Bool {return self._newOriginalSize != nil}
  /// Clears the value of `newOriginalSize`. Subsequent reads from it will return its default value.
  mutating func clearNewOriginalSize() {self._newOriginalSize = nil}

  var oldOriginalSize: TSP_Size {
    get {return _oldOriginalSize ?? TSP_Size()}
    set {_oldOriginalSize = newValue}
  }
  /// Returns true if `oldOriginalSize` has been explicitly set.
  var hasOldOriginalSize: Bool {return self._oldOriginalSize != nil}
  /// Clears the value of `oldOriginalSize`. Subsequent reads from it will return its default value.
  mutating func clearOldOriginalSize() {self._oldOriginalSize = nil}

  var propertyName: String {
    get {return _propertyName ?? String()}
    set {_propertyName = newValue}
  }
  /// Returns true if `propertyName` has been explicitly set.
  var hasPropertyName: Bool {return self._propertyName != nil}
  /// Clears the value of `propertyName`. Subsequent reads from it will return its default value.
  mutating func clearPropertyName() {self._propertyName = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _newOriginalSize: TSP_Size? = nil
  fileprivate var _oldOriginalSize: TSP_Size? = nil
  fileprivate var _propertyName: String? = nil
}

struct TSD_MediaInfoGeometryCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoGeometryCommandArchive {
    get {return _super ?? TSD_InfoGeometryCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var newOriginalSize: TSP_Size {
    get {return _newOriginalSize ?? TSP_Size()}
    set {_newOriginalSize = newValue}
  }
  /// Returns true if `newOriginalSize` has been explicitly set.
  var hasNewOriginalSize: Bool {return self._newOriginalSize != nil}
  /// Clears the value of `newOriginalSize`. Subsequent reads from it will return its default value.
  mutating func clearNewOriginalSize() {self._newOriginalSize = nil}

  var oldOriginalSize: TSP_Size {
    get {return _oldOriginalSize ?? TSP_Size()}
    set {_oldOriginalSize = newValue}
  }
  /// Returns true if `oldOriginalSize` has been explicitly set.
  var hasOldOriginalSize: Bool {return self._oldOriginalSize != nil}
  /// Clears the value of `oldOriginalSize`. Subsequent reads from it will return its default value.
  mutating func clearOldOriginalSize() {self._oldOriginalSize = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoGeometryCommandArchive? = nil
  fileprivate var _newOriginalSize: TSP_Size? = nil
  fileprivate var _oldOriginalSize: TSP_Size? = nil
}

struct TSD_ImageNaturalSizeCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var newNaturalSize: TSP_Size {
    get {return _newNaturalSize ?? TSP_Size()}
    set {_newNaturalSize = newValue}
  }
  /// Returns true if `newNaturalSize` has been explicitly set.
  var hasNewNaturalSize: Bool {return self._newNaturalSize != nil}
  /// Clears the value of `newNaturalSize`. Subsequent reads from it will return its default value.
  mutating func clearNewNaturalSize() {self._newNaturalSize = nil}

  var oldNaturalSize: TSP_Size {
    get {return _oldNaturalSize ?? TSP_Size()}
    set {_oldNaturalSize = newValue}
  }
  /// Returns true if `oldNaturalSize` has been explicitly set.
  var hasOldNaturalSize: Bool {return self._oldNaturalSize != nil}
  /// Clears the value of `oldNaturalSize`. Subsequent reads from it will return its default value.
  mutating func clearOldNaturalSize() {self._oldNaturalSize = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _newNaturalSize: TSP_Size? = nil
  fileprivate var _oldNaturalSize: TSP_Size? = nil
}

struct TSD_ImageMaskCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var newMaskInfo: TSP_Reference {
    get {return _newMaskInfo ?? TSP_Reference()}
    set {_newMaskInfo = newValue}
  }
  /// Returns true if `newMaskInfo` has been explicitly set.
  var hasNewMaskInfo: Bool {return self._newMaskInfo != nil}
  /// Clears the value of `newMaskInfo`. Subsequent reads from it will return its default value.
  mutating func clearNewMaskInfo() {self._newMaskInfo = nil}

  var oldMaskInfo: TSP_Reference {
    get {return _oldMaskInfo ?? TSP_Reference()}
    set {_oldMaskInfo = newValue}
  }
  /// Returns true if `oldMaskInfo` has been explicitly set.
  var hasOldMaskInfo: Bool {return self._oldMaskInfo != nil}
  /// Clears the value of `oldMaskInfo`. Subsequent reads from it will return its default value.
  mutating func clearOldMaskInfo() {self._oldMaskInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _newMaskInfo: TSP_Reference? = nil
  fileprivate var _oldMaskInfo: TSP_Reference? = nil
}

struct TSD_ImageAdjustmentsCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldImageAdjustments: TSD_ImageAdjustmentsArchive {
    get {return _oldImageAdjustments ?? TSD_ImageAdjustmentsArchive()}
    set {_oldImageAdjustments = newValue}
  }
  /// Returns true if `oldImageAdjustments` has been explicitly set.
  var hasOldImageAdjustments: Bool {return self._oldImageAdjustments != nil}
  /// Clears the value of `oldImageAdjustments`. Subsequent reads from it will return its default value.
  mutating func clearOldImageAdjustments() {self._oldImageAdjustments = nil}

  var newImageAdjustments: TSD_ImageAdjustmentsArchive {
    get {return _newImageAdjustments ?? TSD_ImageAdjustmentsArchive()}
    set {_newImageAdjustments = newValue}
  }
  /// Returns true if `newImageAdjustments` has been explicitly set.
  var hasNewImageAdjustments: Bool {return self._newImageAdjustments != nil}
  /// Clears the value of `newImageAdjustments`. Subsequent reads from it will return its default value.
  mutating func clearNewImageAdjustments() {self._newImageAdjustments = nil}

  var adjustedImageData: TSP_DataReference {
    get {return _adjustedImageData ?? TSP_DataReference()}
    set {_adjustedImageData = newValue}
  }
  /// Returns true if `adjustedImageData` has been explicitly set.
  var hasAdjustedImageData: Bool {return self._adjustedImageData != nil}
  /// Clears the value of `adjustedImageData`. Subsequent reads from it will return its default value.
  mutating func clearAdjustedImageData() {self._adjustedImageData = nil}

  var replacedAdjustedImageData: TSP_DataReference {
    get {return _replacedAdjustedImageData ?? TSP_DataReference()}
    set {_replacedAdjustedImageData = newValue}
  }
  /// Returns true if `replacedAdjustedImageData` has been explicitly set.
  var hasReplacedAdjustedImageData: Bool {return self._replacedAdjustedImageData != nil}
  /// Clears the value of `replacedAdjustedImageData`. Subsequent reads from it will return its default value.
  mutating func clearReplacedAdjustedImageData() {self._replacedAdjustedImageData = nil}

  var enhancedImageData: TSP_DataReference {
    get {return _enhancedImageData ?? TSP_DataReference()}
    set {_enhancedImageData = newValue}
  }
  /// Returns true if `enhancedImageData` has been explicitly set.
  var hasEnhancedImageData: Bool {return self._enhancedImageData != nil}
  /// Clears the value of `enhancedImageData`. Subsequent reads from it will return its default value.
  mutating func clearEnhancedImageData() {self._enhancedImageData = nil}

  var replacedEnhancedImageData: TSP_DataReference {
    get {return _replacedEnhancedImageData ?? TSP_DataReference()}
    set {_replacedEnhancedImageData = newValue}
  }
  /// Returns true if `replacedEnhancedImageData` has been explicitly set.
  var hasReplacedEnhancedImageData: Bool {return self._replacedEnhancedImageData != nil}
  /// Clears the value of `replacedEnhancedImageData`. Subsequent reads from it will return its default value.
  mutating func clearReplacedEnhancedImageData() {self._replacedEnhancedImageData = nil}

  var thumbnailAdjustedImageData: TSP_DataReference {
    get {return _thumbnailAdjustedImageData ?? TSP_DataReference()}
    set {_thumbnailAdjustedImageData = newValue}
  }
  /// Returns true if `thumbnailAdjustedImageData` has been explicitly set.
  var hasThumbnailAdjustedImageData: Bool {return self._thumbnailAdjustedImageData != nil}
  /// Clears the value of `thumbnailAdjustedImageData`. Subsequent reads from it will return its default value.
  mutating func clearThumbnailAdjustedImageData() {self._thumbnailAdjustedImageData = nil}

  var replacedThumbnailAdjustedImageData: TSP_DataReference {
    get {return _replacedThumbnailAdjustedImageData ?? TSP_DataReference()}
    set {_replacedThumbnailAdjustedImageData = newValue}
  }
  /// Returns true if `replacedThumbnailAdjustedImageData` has been explicitly set.
  var hasReplacedThumbnailAdjustedImageData: Bool {return self._replacedThumbnailAdjustedImageData != nil}
  /// Clears the value of `replacedThumbnailAdjustedImageData`. Subsequent reads from it will return its default value.
  mutating func clearReplacedThumbnailAdjustedImageData() {self._replacedThumbnailAdjustedImageData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _oldImageAdjustments: TSD_ImageAdjustmentsArchive? = nil
  fileprivate var _newImageAdjustments: TSD_ImageAdjustmentsArchive? = nil
  fileprivate var _adjustedImageData: TSP_DataReference? = nil
  fileprivate var _replacedAdjustedImageData: TSP_DataReference? = nil
  fileprivate var _enhancedImageData: TSP_DataReference? = nil
  fileprivate var _replacedEnhancedImageData: TSP_DataReference? = nil
  fileprivate var _thumbnailAdjustedImageData: TSP_DataReference? = nil
  fileprivate var _replacedThumbnailAdjustedImageData: TSP_DataReference? = nil
}

struct TSD_MediaFlagsCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var wasMediaReplaced: Bool {
    get {return _wasMediaReplaced ?? false}
    set {_wasMediaReplaced = newValue}
  }
  /// Returns true if `wasMediaReplaced` has been explicitly set.
  var hasWasMediaReplaced: Bool {return self._wasMediaReplaced != nil}
  /// Clears the value of `wasMediaReplaced`. Subsequent reads from it will return its default value.
  mutating func clearWasMediaReplaced() {self._wasMediaReplaced = nil}

  var isPlaceholder: Bool {
    get {return _isPlaceholder ?? false}
    set {_isPlaceholder = newValue}
  }
  /// Returns true if `isPlaceholder` has been explicitly set.
  var hasIsPlaceholder: Bool {return self._isPlaceholder != nil}
  /// Clears the value of `isPlaceholder`. Subsequent reads from it will return its default value.
  mutating func clearIsPlaceholder() {self._isPlaceholder = nil}

  var oldWasMediaReplaced: Bool {
    get {return _oldWasMediaReplaced ?? false}
    set {_oldWasMediaReplaced = newValue}
  }
  /// Returns true if `oldWasMediaReplaced` has been explicitly set.
  var hasOldWasMediaReplaced: Bool {return self._oldWasMediaReplaced != nil}
  /// Clears the value of `oldWasMediaReplaced`. Subsequent reads from it will return its default value.
  mutating func clearOldWasMediaReplaced() {self._oldWasMediaReplaced = nil}

  var oldIsPlaceholder: Bool {
    get {return _oldIsPlaceholder ?? false}
    set {_oldIsPlaceholder = newValue}
  }
  /// Returns true if `oldIsPlaceholder` has been explicitly set.
  var hasOldIsPlaceholder: Bool {return self._oldIsPlaceholder != nil}
  /// Clears the value of `oldIsPlaceholder`. Subsequent reads from it will return its default value.
  mutating func clearOldIsPlaceholder() {self._oldIsPlaceholder = nil}

  var propertyName: String {
    get {return _propertyName ?? String()}
    set {_propertyName = newValue}
  }
  /// Returns true if `propertyName` has been explicitly set.
  var hasPropertyName: Bool {return self._propertyName != nil}
  /// Clears the value of `propertyName`. Subsequent reads from it will return its default value.
  mutating func clearPropertyName() {self._propertyName = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _wasMediaReplaced: Bool? = nil
  fileprivate var _isPlaceholder: Bool? = nil
  fileprivate var _oldWasMediaReplaced: Bool? = nil
  fileprivate var _oldIsPlaceholder: Bool? = nil
  fileprivate var _propertyName: String? = nil
}

struct TSD_DrawablesCommandGroupArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandGroupArchive {
    get {return _super ?? TSK_CommandGroupArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var obsoleteSelection: TSD_CanvasSelectionArchive {
    get {return _obsoleteSelection ?? TSD_CanvasSelectionArchive()}
    set {_obsoleteSelection = newValue}
  }
  /// Returns true if `obsoleteSelection` has been explicitly set.
  var hasObsoleteSelection: Bool {return self._obsoleteSelection != nil}
  /// Clears the value of `obsoleteSelection`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteSelection() {self._obsoleteSelection = nil}

  var modelforselection: TSP_Reference {
    get {return _modelforselection ?? TSP_Reference()}
    set {_modelforselection = newValue}
  }
  /// Returns true if `modelforselection` has been explicitly set.
  var hasModelforselection: Bool {return self._modelforselection != nil}
  /// Clears the value of `modelforselection`. Subsequent reads from it will return its default value.
  mutating func clearModelforselection() {self._modelforselection = nil}

  var type: TSD_DrawablesCommandGroupArchive.DrawablesCommandGroupType {
    get {return _type ?? .constructive}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var forDrag: Bool {
    get {return _forDrag ?? false}
    set {_forDrag = newValue}
  }
  /// Returns true if `forDrag` has been explicitly set.
  var hasForDrag: Bool {return self._forDrag != nil}
  /// Clears the value of `forDrag`. Subsequent reads from it will return its default value.
  mutating func clearForDrag() {self._forDrag = nil}

  var archivedselection: TSP_Reference {
    get {return _archivedselection ?? TSP_Reference()}
    set {_archivedselection = newValue}
  }
  /// Returns true if `archivedselection` has been explicitly set.
  var hasArchivedselection: Bool {return self._archivedselection != nil}
  /// Clears the value of `archivedselection`. Subsequent reads from it will return its default value.
  mutating func clearArchivedselection() {self._archivedselection = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum DrawablesCommandGroupType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case constructive // = 1
    case destructive // = 2
    case inPlace // = 3

    init() {
      self = .constructive
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .constructive
      case 2: self = .destructive
      case 3: self = .inPlace
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .constructive: return 1
      case .destructive: return 2
      case .inPlace: return 3
      }
    }

  }

  init() {}

  fileprivate var _super: TSK_CommandGroupArchive? = nil
  fileprivate var _obsoleteSelection: TSD_CanvasSelectionArchive? = nil
  fileprivate var _modelforselection: TSP_Reference? = nil
  fileprivate var _type: TSD_DrawablesCommandGroupArchive.DrawablesCommandGroupType? = nil
  fileprivate var _forDrag: Bool? = nil
  fileprivate var _archivedselection: TSP_Reference? = nil
}

#if swift(>=4.2)

extension TSD_DrawablesCommandGroupArchive.DrawablesCommandGroupType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_ExteriorTextWrapCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldExteriorTextWrap: TSD_ExteriorTextWrapArchive {
    get {return _oldExteriorTextWrap ?? TSD_ExteriorTextWrapArchive()}
    set {_oldExteriorTextWrap = newValue}
  }
  /// Returns true if `oldExteriorTextWrap` has been explicitly set.
  var hasOldExteriorTextWrap: Bool {return self._oldExteriorTextWrap != nil}
  /// Clears the value of `oldExteriorTextWrap`. Subsequent reads from it will return its default value.
  mutating func clearOldExteriorTextWrap() {self._oldExteriorTextWrap = nil}

  var type: UInt32 {
    get {return _type ?? 0}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var direction: UInt32 {
    get {return _direction ?? 0}
    set {_direction = newValue}
  }
  /// Returns true if `direction` has been explicitly set.
  var hasDirection: Bool {return self._direction != nil}
  /// Clears the value of `direction`. Subsequent reads from it will return its default value.
  mutating func clearDirection() {self._direction = nil}

  var fitType: UInt32 {
    get {return _fitType ?? 0}
    set {_fitType = newValue}
  }
  /// Returns true if `fitType` has been explicitly set.
  var hasFitType: Bool {return self._fitType != nil}
  /// Clears the value of `fitType`. Subsequent reads from it will return its default value.
  mutating func clearFitType() {self._fitType = nil}

  var margin: Float {
    get {return _margin ?? 0}
    set {_margin = newValue}
  }
  /// Returns true if `margin` has been explicitly set.
  var hasMargin: Bool {return self._margin != nil}
  /// Clears the value of `margin`. Subsequent reads from it will return its default value.
  mutating func clearMargin() {self._margin = nil}

  var alphaThreshold: Float {
    get {return _alphaThreshold ?? 0}
    set {_alphaThreshold = newValue}
  }
  /// Returns true if `alphaThreshold` has been explicitly set.
  var hasAlphaThreshold: Bool {return self._alphaThreshold != nil}
  /// Clears the value of `alphaThreshold`. Subsequent reads from it will return its default value.
  mutating func clearAlphaThreshold() {self._alphaThreshold = nil}

  var isHtmlWrap: Bool {
    get {return _isHtmlWrap ?? false}
    set {_isHtmlWrap = newValue}
  }
  /// Returns true if `isHtmlWrap` has been explicitly set.
  var hasIsHtmlWrap: Bool {return self._isHtmlWrap != nil}
  /// Clears the value of `isHtmlWrap`. Subsequent reads from it will return its default value.
  mutating func clearIsHtmlWrap() {self._isHtmlWrap = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _oldExteriorTextWrap: TSD_ExteriorTextWrapArchive? = nil
  fileprivate var _type: UInt32? = nil
  fileprivate var _direction: UInt32? = nil
  fileprivate var _fitType: UInt32? = nil
  fileprivate var _margin: Float? = nil
  fileprivate var _alphaThreshold: Float? = nil
  fileprivate var _isHtmlWrap: Bool? = nil
}

struct TSD_DrawableHyperlinkCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldhyperlinkURL: String {
    get {return _oldhyperlinkURL ?? String()}
    set {_oldhyperlinkURL = newValue}
  }
  /// Returns true if `oldhyperlinkURL` has been explicitly set.
  var hasOldhyperlinkURL: Bool {return self._oldhyperlinkURL != nil}
  /// Clears the value of `oldhyperlinkURL`. Subsequent reads from it will return its default value.
  mutating func clearOldhyperlinkURL() {self._oldhyperlinkURL = nil}

  var newhyperlinkURL: String {
    get {return _newhyperlinkURL ?? String()}
    set {_newhyperlinkURL = newValue}
  }
  /// Returns true if `newhyperlinkURL` has been explicitly set.
  var hasNewhyperlinkURL: Bool {return self._newhyperlinkURL != nil}
  /// Clears the value of `newhyperlinkURL`. Subsequent reads from it will return its default value.
  mutating func clearNewhyperlinkURL() {self._newhyperlinkURL = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _oldhyperlinkURL: String? = nil
  fileprivate var _newhyperlinkURL: String? = nil
}

struct TSD_CommentInvalidatingCommandSelectionBehaviorArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandSelectionBehaviorArchive {
    get {return _super ?? TSK_CommandSelectionBehaviorArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var annotationDisplayingCommand: TSP_Reference {
    get {return _annotationDisplayingCommand ?? TSP_Reference()}
    set {_annotationDisplayingCommand = newValue}
  }
  /// Returns true if `annotationDisplayingCommand` has been explicitly set.
  var hasAnnotationDisplayingCommand: Bool {return self._annotationDisplayingCommand != nil}
  /// Clears the value of `annotationDisplayingCommand`. Subsequent reads from it will return its default value.
  mutating func clearAnnotationDisplayingCommand() {self._annotationDisplayingCommand = nil}

  var beginEditingOnUndo: Bool {
    get {return _beginEditingOnUndo ?? false}
    set {_beginEditingOnUndo = newValue}
  }
  /// Returns true if `beginEditingOnUndo` has been explicitly set.
  var hasBeginEditingOnUndo: Bool {return self._beginEditingOnUndo != nil}
  /// Clears the value of `beginEditingOnUndo`. Subsequent reads from it will return its default value.
  mutating func clearBeginEditingOnUndo() {self._beginEditingOnUndo = nil}

  var beginEditingOnRedo: Bool {
    get {return _beginEditingOnRedo ?? false}
    set {_beginEditingOnRedo = newValue}
  }
  /// Returns true if `beginEditingOnRedo` has been explicitly set.
  var hasBeginEditingOnRedo: Bool {return self._beginEditingOnRedo != nil}
  /// Clears the value of `beginEditingOnRedo`. Subsequent reads from it will return its default value.
  mutating func clearBeginEditingOnRedo() {self._beginEditingOnRedo = nil}

  var shouldInvalidateOnUndo: Bool {
    get {return _shouldInvalidateOnUndo ?? false}
    set {_shouldInvalidateOnUndo = newValue}
  }
  /// Returns true if `shouldInvalidateOnUndo` has been explicitly set.
  var hasShouldInvalidateOnUndo: Bool {return self._shouldInvalidateOnUndo != nil}
  /// Clears the value of `shouldInvalidateOnUndo`. Subsequent reads from it will return its default value.
  mutating func clearShouldInvalidateOnUndo() {self._shouldInvalidateOnUndo = nil}

  var shouldInvalidateOnRedo: Bool {
    get {return _shouldInvalidateOnRedo ?? false}
    set {_shouldInvalidateOnRedo = newValue}
  }
  /// Returns true if `shouldInvalidateOnRedo` has been explicitly set.
  var hasShouldInvalidateOnRedo: Bool {return self._shouldInvalidateOnRedo != nil}
  /// Clears the value of `shouldInvalidateOnRedo`. Subsequent reads from it will return its default value.
  mutating func clearShouldInvalidateOnRedo() {self._shouldInvalidateOnRedo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandSelectionBehaviorArchive? = nil
  fileprivate var _annotationDisplayingCommand: TSP_Reference? = nil
  fileprivate var _beginEditingOnUndo: Bool? = nil
  fileprivate var _beginEditingOnRedo: Bool? = nil
  fileprivate var _shouldInvalidateOnUndo: Bool? = nil
  fileprivate var _shouldInvalidateOnRedo: Bool? = nil
}

struct TSD_ImageReplaceCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _storage._super ?? TSD_InfoCommandArchive()}
    set {_uniqueStorage()._super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return _storage._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {_uniqueStorage()._super = nil}

  var newImageData: TSP_DataReference {
    get {return _storage._newImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._newImageData = newValue}
  }
  /// Returns true if `newImageData` has been explicitly set.
  var hasNewImageData: Bool {return _storage._newImageData != nil}
  /// Clears the value of `newImageData`. Subsequent reads from it will return its default value.
  mutating func clearNewImageData() {_uniqueStorage()._newImageData = nil}

  var newOriginalImageData: TSP_DataReference {
    get {return _storage._newOriginalImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._newOriginalImageData = newValue}
  }
  /// Returns true if `newOriginalImageData` has been explicitly set.
  var hasNewOriginalImageData: Bool {return _storage._newOriginalImageData != nil}
  /// Clears the value of `newOriginalImageData`. Subsequent reads from it will return its default value.
  mutating func clearNewOriginalImageData() {_uniqueStorage()._newOriginalImageData = nil}

  var oldImageData: TSP_DataReference {
    get {return _storage._oldImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._oldImageData = newValue}
  }
  /// Returns true if `oldImageData` has been explicitly set.
  var hasOldImageData: Bool {return _storage._oldImageData != nil}
  /// Clears the value of `oldImageData`. Subsequent reads from it will return its default value.
  mutating func clearOldImageData() {_uniqueStorage()._oldImageData = nil}

  var oldOriginalImageData: TSP_DataReference {
    get {return _storage._oldOriginalImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._oldOriginalImageData = newValue}
  }
  /// Returns true if `oldOriginalImageData` has been explicitly set.
  var hasOldOriginalImageData: Bool {return _storage._oldOriginalImageData != nil}
  /// Clears the value of `oldOriginalImageData`. Subsequent reads from it will return its default value.
  mutating func clearOldOriginalImageData() {_uniqueStorage()._oldOriginalImageData = nil}

  var instantAlphaPath: TSP_Path {
    get {return _storage._instantAlphaPath ?? TSP_Path()}
    set {_uniqueStorage()._instantAlphaPath = newValue}
  }
  /// Returns true if `instantAlphaPath` has been explicitly set.
  var hasInstantAlphaPath: Bool {return _storage._instantAlphaPath != nil}
  /// Clears the value of `instantAlphaPath`. Subsequent reads from it will return its default value.
  mutating func clearInstantAlphaPath() {_uniqueStorage()._instantAlphaPath = nil}

  var oldInstantAlphaPath: TSP_Path {
    get {return _storage._oldInstantAlphaPath ?? TSP_Path()}
    set {_uniqueStorage()._oldInstantAlphaPath = newValue}
  }
  /// Returns true if `oldInstantAlphaPath` has been explicitly set.
  var hasOldInstantAlphaPath: Bool {return _storage._oldInstantAlphaPath != nil}
  /// Clears the value of `oldInstantAlphaPath`. Subsequent reads from it will return its default value.
  mutating func clearOldInstantAlphaPath() {_uniqueStorage()._oldInstantAlphaPath = nil}

  var naturalSizeForIapath: TSP_Size {
    get {return _storage._naturalSizeForIapath ?? TSP_Size()}
    set {_uniqueStorage()._naturalSizeForIapath = newValue}
  }
  /// Returns true if `naturalSizeForIapath` has been explicitly set.
  var hasNaturalSizeForIapath: Bool {return _storage._naturalSizeForIapath != nil}
  /// Clears the value of `naturalSizeForIapath`. Subsequent reads from it will return its default value.
  mutating func clearNaturalSizeForIapath() {_uniqueStorage()._naturalSizeForIapath = nil}

  var oldNaturalSizeForIapath: TSP_Size {
    get {return _storage._oldNaturalSizeForIapath ?? TSP_Size()}
    set {_uniqueStorage()._oldNaturalSizeForIapath = newValue}
  }
  /// Returns true if `oldNaturalSizeForIapath` has been explicitly set.
  var hasOldNaturalSizeForIapath: Bool {return _storage._oldNaturalSizeForIapath != nil}
  /// Clears the value of `oldNaturalSizeForIapath`. Subsequent reads from it will return its default value.
  mutating func clearOldNaturalSizeForIapath() {_uniqueStorage()._oldNaturalSizeForIapath = nil}

  var targetImageGeometry: TSD_GeometryArchive {
    get {return _storage._targetImageGeometry ?? TSD_GeometryArchive()}
    set {_uniqueStorage()._targetImageGeometry = newValue}
  }
  /// Returns true if `targetImageGeometry` has been explicitly set.
  var hasTargetImageGeometry: Bool {return _storage._targetImageGeometry != nil}
  /// Clears the value of `targetImageGeometry`. Subsequent reads from it will return its default value.
  mutating func clearTargetImageGeometry() {_uniqueStorage()._targetImageGeometry = nil}

  var oldTargetImageGeometry: TSD_GeometryArchive {
    get {return _storage._oldTargetImageGeometry ?? TSD_GeometryArchive()}
    set {_uniqueStorage()._oldTargetImageGeometry = newValue}
  }
  /// Returns true if `oldTargetImageGeometry` has been explicitly set.
  var hasOldTargetImageGeometry: Bool {return _storage._oldTargetImageGeometry != nil}
  /// Clears the value of `oldTargetImageGeometry`. Subsequent reads from it will return its default value.
  mutating func clearOldTargetImageGeometry() {_uniqueStorage()._oldTargetImageGeometry = nil}

  var targetMaskGeometry: TSD_GeometryArchive {
    get {return _storage._targetMaskGeometry ?? TSD_GeometryArchive()}
    set {_uniqueStorage()._targetMaskGeometry = newValue}
  }
  /// Returns true if `targetMaskGeometry` has been explicitly set.
  var hasTargetMaskGeometry: Bool {return _storage._targetMaskGeometry != nil}
  /// Clears the value of `targetMaskGeometry`. Subsequent reads from it will return its default value.
  mutating func clearTargetMaskGeometry() {_uniqueStorage()._targetMaskGeometry = nil}

  var oldTargetMaskGeometry: TSD_GeometryArchive {
    get {return _storage._oldTargetMaskGeometry ?? TSD_GeometryArchive()}
    set {_uniqueStorage()._oldTargetMaskGeometry = newValue}
  }
  /// Returns true if `oldTargetMaskGeometry` has been explicitly set.
  var hasOldTargetMaskGeometry: Bool {return _storage._oldTargetMaskGeometry != nil}
  /// Clears the value of `oldTargetMaskGeometry`. Subsequent reads from it will return its default value.
  mutating func clearOldTargetMaskGeometry() {_uniqueStorage()._oldTargetMaskGeometry = nil}

  var imageAdjustments: TSD_ImageAdjustmentsArchive {
    get {return _storage._imageAdjustments ?? TSD_ImageAdjustmentsArchive()}
    set {_uniqueStorage()._imageAdjustments = newValue}
  }
  /// Returns true if `imageAdjustments` has been explicitly set.
  var hasImageAdjustments: Bool {return _storage._imageAdjustments != nil}
  /// Clears the value of `imageAdjustments`. Subsequent reads from it will return its default value.
  mutating func clearImageAdjustments() {_uniqueStorage()._imageAdjustments = nil}

  var adjustedImageData: TSP_DataReference {
    get {return _storage._adjustedImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._adjustedImageData = newValue}
  }
  /// Returns true if `adjustedImageData` has been explicitly set.
  var hasAdjustedImageData: Bool {return _storage._adjustedImageData != nil}
  /// Clears the value of `adjustedImageData`. Subsequent reads from it will return its default value.
  mutating func clearAdjustedImageData() {_uniqueStorage()._adjustedImageData = nil}

  var enhancedImageData: TSP_DataReference {
    get {return _storage._enhancedImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._enhancedImageData = newValue}
  }
  /// Returns true if `enhancedImageData` has been explicitly set.
  var hasEnhancedImageData: Bool {return _storage._enhancedImageData != nil}
  /// Clears the value of `enhancedImageData`. Subsequent reads from it will return its default value.
  mutating func clearEnhancedImageData() {_uniqueStorage()._enhancedImageData = nil}

  var oldImageAdjustments: TSD_ImageAdjustmentsArchive {
    get {return _storage._oldImageAdjustments ?? TSD_ImageAdjustmentsArchive()}
    set {_uniqueStorage()._oldImageAdjustments = newValue}
  }
  /// Returns true if `oldImageAdjustments` has been explicitly set.
  var hasOldImageAdjustments: Bool {return _storage._oldImageAdjustments != nil}
  /// Clears the value of `oldImageAdjustments`. Subsequent reads from it will return its default value.
  mutating func clearOldImageAdjustments() {_uniqueStorage()._oldImageAdjustments = nil}

  var oldAdjustedImageData: TSP_DataReference {
    get {return _storage._oldAdjustedImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._oldAdjustedImageData = newValue}
  }
  /// Returns true if `oldAdjustedImageData` has been explicitly set.
  var hasOldAdjustedImageData: Bool {return _storage._oldAdjustedImageData != nil}
  /// Clears the value of `oldAdjustedImageData`. Subsequent reads from it will return its default value.
  mutating func clearOldAdjustedImageData() {_uniqueStorage()._oldAdjustedImageData = nil}

  var oldEnhancedImageData: TSP_DataReference {
    get {return _storage._oldEnhancedImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._oldEnhancedImageData = newValue}
  }
  /// Returns true if `oldEnhancedImageData` has been explicitly set.
  var hasOldEnhancedImageData: Bool {return _storage._oldEnhancedImageData != nil}
  /// Clears the value of `oldEnhancedImageData`. Subsequent reads from it will return its default value.
  mutating func clearOldEnhancedImageData() {_uniqueStorage()._oldEnhancedImageData = nil}

  var thumbnailImageData: TSP_DataReference {
    get {return _storage._thumbnailImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._thumbnailImageData = newValue}
  }
  /// Returns true if `thumbnailImageData` has been explicitly set.
  var hasThumbnailImageData: Bool {return _storage._thumbnailImageData != nil}
  /// Clears the value of `thumbnailImageData`. Subsequent reads from it will return its default value.
  mutating func clearThumbnailImageData() {_uniqueStorage()._thumbnailImageData = nil}

  var oldThumbnailImageData: TSP_DataReference {
    get {return _storage._oldThumbnailImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._oldThumbnailImageData = newValue}
  }
  /// Returns true if `oldThumbnailImageData` has been explicitly set.
  var hasOldThumbnailImageData: Bool {return _storage._oldThumbnailImageData != nil}
  /// Clears the value of `oldThumbnailImageData`. Subsequent reads from it will return its default value.
  mutating func clearOldThumbnailImageData() {_uniqueStorage()._oldThumbnailImageData = nil}

  var thumbnailAdjustedImageData: TSP_DataReference {
    get {return _storage._thumbnailAdjustedImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._thumbnailAdjustedImageData = newValue}
  }
  /// Returns true if `thumbnailAdjustedImageData` has been explicitly set.
  var hasThumbnailAdjustedImageData: Bool {return _storage._thumbnailAdjustedImageData != nil}
  /// Clears the value of `thumbnailAdjustedImageData`. Subsequent reads from it will return its default value.
  mutating func clearThumbnailAdjustedImageData() {_uniqueStorage()._thumbnailAdjustedImageData = nil}

  var oldThumbnailAdjustedImageData: TSP_DataReference {
    get {return _storage._oldThumbnailAdjustedImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._oldThumbnailAdjustedImageData = newValue}
  }
  /// Returns true if `oldThumbnailAdjustedImageData` has been explicitly set.
  var hasOldThumbnailAdjustedImageData: Bool {return _storage._oldThumbnailAdjustedImageData != nil}
  /// Clears the value of `oldThumbnailAdjustedImageData`. Subsequent reads from it will return its default value.
  mutating func clearOldThumbnailAdjustedImageData() {_uniqueStorage()._oldThumbnailAdjustedImageData = nil}

  var naturalSize: TSP_Size {
    get {return _storage._naturalSize ?? TSP_Size()}
    set {_uniqueStorage()._naturalSize = newValue}
  }
  /// Returns true if `naturalSize` has been explicitly set.
  var hasNaturalSize: Bool {return _storage._naturalSize != nil}
  /// Clears the value of `naturalSize`. Subsequent reads from it will return its default value.
  mutating func clearNaturalSize() {_uniqueStorage()._naturalSize = nil}

  var oldNaturalSize: TSP_Size {
    get {return _storage._oldNaturalSize ?? TSP_Size()}
    set {_uniqueStorage()._oldNaturalSize = newValue}
  }
  /// Returns true if `oldNaturalSize` has been explicitly set.
  var hasOldNaturalSize: Bool {return _storage._oldNaturalSize != nil}
  /// Clears the value of `oldNaturalSize`. Subsequent reads from it will return its default value.
  mutating func clearOldNaturalSize() {_uniqueStorage()._oldNaturalSize = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSD_DrawableLockCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var locked: Bool {
    get {return _locked ?? false}
    set {_locked = newValue}
  }
  /// Returns true if `locked` has been explicitly set.
  var hasLocked: Bool {return self._locked != nil}
  /// Clears the value of `locked`. Subsequent reads from it will return its default value.
  mutating func clearLocked() {self._locked = nil}

  var wasLocked: Bool {
    get {return _wasLocked ?? false}
    set {_wasLocked = newValue}
  }
  /// Returns true if `wasLocked` has been explicitly set.
  var hasWasLocked: Bool {return self._wasLocked != nil}
  /// Clears the value of `wasLocked`. Subsequent reads from it will return its default value.
  mutating func clearWasLocked() {self._wasLocked = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _locked: Bool? = nil
  fileprivate var _wasLocked: Bool? = nil
}

struct TSD_DrawableInfoCommentCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldComment: TSP_Reference {
    get {return _oldComment ?? TSP_Reference()}
    set {_oldComment = newValue}
  }
  /// Returns true if `oldComment` has been explicitly set.
  var hasOldComment: Bool {return self._oldComment != nil}
  /// Clears the value of `oldComment`. Subsequent reads from it will return its default value.
  mutating func clearOldComment() {self._oldComment = nil}

  var newComment: TSP_Reference {
    get {return _newComment ?? TSP_Reference()}
    set {_newComment = newValue}
  }
  /// Returns true if `newComment` has been explicitly set.
  var hasNewComment: Bool {return self._newComment != nil}
  /// Clears the value of `newComment`. Subsequent reads from it will return its default value.
  mutating func clearNewComment() {self._newComment = nil}

  var forwardVariant: TSD_CommentCommandVariant {
    get {return _forwardVariant ?? .baseComment}
    set {_forwardVariant = newValue}
  }
  /// Returns true if `forwardVariant` has been explicitly set.
  var hasForwardVariant: Bool {return self._forwardVariant != nil}
  /// Clears the value of `forwardVariant`. Subsequent reads from it will return its default value.
  mutating func clearForwardVariant() {self._forwardVariant = nil}

  var inverseVariant: TSD_CommentCommandVariant {
    get {return _inverseVariant ?? .baseComment}
    set {_inverseVariant = newValue}
  }
  /// Returns true if `inverseVariant` has been explicitly set.
  var hasInverseVariant: Bool {return self._inverseVariant != nil}
  /// Clears the value of `inverseVariant`. Subsequent reads from it will return its default value.
  mutating func clearInverseVariant() {self._inverseVariant = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _oldComment: TSP_Reference? = nil
  fileprivate var _newComment: TSP_Reference? = nil
  fileprivate var _forwardVariant: TSD_CommentCommandVariant? = nil
  fileprivate var _inverseVariant: TSD_CommentCommandVariant? = nil
}

struct TSD_DrawablePencilAnnotationCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var pencilAnnotationToAdd: TSP_Reference {
    get {return _pencilAnnotationToAdd ?? TSP_Reference()}
    set {_pencilAnnotationToAdd = newValue}
  }
  /// Returns true if `pencilAnnotationToAdd` has been explicitly set.
  var hasPencilAnnotationToAdd: Bool {return self._pencilAnnotationToAdd != nil}
  /// Clears the value of `pencilAnnotationToAdd`. Subsequent reads from it will return its default value.
  mutating func clearPencilAnnotationToAdd() {self._pencilAnnotationToAdd = nil}

  var pencilAnnotationToRemove: TSP_Reference {
    get {return _pencilAnnotationToRemove ?? TSP_Reference()}
    set {_pencilAnnotationToRemove = newValue}
  }
  /// Returns true if `pencilAnnotationToRemove` has been explicitly set.
  var hasPencilAnnotationToRemove: Bool {return self._pencilAnnotationToRemove != nil}
  /// Clears the value of `pencilAnnotationToRemove`. Subsequent reads from it will return its default value.
  mutating func clearPencilAnnotationToRemove() {self._pencilAnnotationToRemove = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _pencilAnnotationToAdd: TSP_Reference? = nil
  fileprivate var _pencilAnnotationToRemove: TSP_Reference? = nil
}

struct TSD_AbstractGuideCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldGuides: [TSD_UserDefinedGuideArchive] = []

  var newGuides: [TSD_UserDefinedGuideArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
}

struct TSD_GuideCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_AbstractGuideCommandArchive {
    get {return _super ?? TSD_AbstractGuideCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var storageIDPath: TSP_UUIDPath {
    get {return _storageIDPath ?? TSP_UUIDPath()}
    set {_storageIDPath = newValue}
  }
  /// Returns true if `storageIDPath` has been explicitly set.
  var hasStorageIDPath: Bool {return self._storageIDPath != nil}
  /// Clears the value of `storageIDPath`. Subsequent reads from it will return its default value.
  mutating func clearStorageIDPath() {self._storageIDPath = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_AbstractGuideCommandArchive? = nil
  fileprivate var _storageIDPath: TSP_UUIDPath? = nil
}

struct TSD_DrawableAspectRatioLockedCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var aspectRatioLocked: Bool {
    get {return _aspectRatioLocked ?? false}
    set {_aspectRatioLocked = newValue}
  }
  /// Returns true if `aspectRatioLocked` has been explicitly set.
  var hasAspectRatioLocked: Bool {return self._aspectRatioLocked != nil}
  /// Clears the value of `aspectRatioLocked`. Subsequent reads from it will return its default value.
  mutating func clearAspectRatioLocked() {self._aspectRatioLocked = nil}

  var wasAspectRatioLocked: Bool {
    get {return _wasAspectRatioLocked ?? false}
    set {_wasAspectRatioLocked = newValue}
  }
  /// Returns true if `wasAspectRatioLocked` has been explicitly set.
  var hasWasAspectRatioLocked: Bool {return self._wasAspectRatioLocked != nil}
  /// Clears the value of `wasAspectRatioLocked`. Subsequent reads from it will return its default value.
  mutating func clearWasAspectRatioLocked() {self._wasAspectRatioLocked = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _aspectRatioLocked: Bool? = nil
  fileprivate var _wasAspectRatioLocked: Bool? = nil
}

struct TSD_DrawableAccessibilityDescriptionCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var accessibilityDescription: String {
    get {return _accessibilityDescription ?? String()}
    set {_accessibilityDescription = newValue}
  }
  /// Returns true if `accessibilityDescription` has been explicitly set.
  var hasAccessibilityDescription: Bool {return self._accessibilityDescription != nil}
  /// Clears the value of `accessibilityDescription`. Subsequent reads from it will return its default value.
  mutating func clearAccessibilityDescription() {self._accessibilityDescription = nil}

  var oldAccessibilityDescription: String {
    get {return _oldAccessibilityDescription ?? String()}
    set {_oldAccessibilityDescription = newValue}
  }
  /// Returns true if `oldAccessibilityDescription` has been explicitly set.
  var hasOldAccessibilityDescription: Bool {return self._oldAccessibilityDescription != nil}
  /// Clears the value of `oldAccessibilityDescription`. Subsequent reads from it will return its default value.
  mutating func clearOldAccessibilityDescription() {self._oldAccessibilityDescription = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _accessibilityDescription: String? = nil
  fileprivate var _oldAccessibilityDescription: String? = nil
}

struct TSD_PasteStyleCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_AbstractStyleCommandArchive {
    get {return _super ?? TSD_AbstractStyleCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var newStyle: TSP_Reference {
    get {return _newStyle ?? TSP_Reference()}
    set {_newStyle = newValue}
  }
  /// Returns true if `newStyle` has been explicitly set.
  var hasNewStyle: Bool {return self._newStyle != nil}
  /// Clears the value of `newStyle`. Subsequent reads from it will return its default value.
  mutating func clearNewStyle() {self._newStyle = nil}

  var rollbackStyle: TSP_Reference {
    get {return _rollbackStyle ?? TSP_Reference()}
    set {_rollbackStyle = newValue}
  }
  /// Returns true if `rollbackStyle` has been explicitly set.
  var hasRollbackStyle: Bool {return self._rollbackStyle != nil}
  /// Clears the value of `rollbackStyle`. Subsequent reads from it will return its default value.
  mutating func clearRollbackStyle() {self._rollbackStyle = nil}

  var tailEndOnLeft: Bool {
    get {return _tailEndOnLeft ?? false}
    set {_tailEndOnLeft = newValue}
  }
  /// Returns true if `tailEndOnLeft` has been explicitly set.
  var hasTailEndOnLeft: Bool {return self._tailEndOnLeft != nil}
  /// Clears the value of `tailEndOnLeft`. Subsequent reads from it will return its default value.
  mutating func clearTailEndOnLeft() {self._tailEndOnLeft = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_AbstractStyleCommandArchive? = nil
  fileprivate var _newStyle: TSP_Reference? = nil
  fileprivate var _rollbackStyle: TSP_Reference? = nil
  fileprivate var _tailEndOnLeft: Bool? = nil
}

struct TSD_ImageInfoAbstractGeometryCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var newImageGeometry: TSD_GeometryArchive {
    get {return _newImageGeometry ?? TSD_GeometryArchive()}
    set {_newImageGeometry = newValue}
  }
  /// Returns true if `newImageGeometry` has been explicitly set.
  var hasNewImageGeometry: Bool {return self._newImageGeometry != nil}
  /// Clears the value of `newImageGeometry`. Subsequent reads from it will return its default value.
  mutating func clearNewImageGeometry() {self._newImageGeometry = nil}

  var oldImageGeometry: TSD_GeometryArchive {
    get {return _oldImageGeometry ?? TSD_GeometryArchive()}
    set {_oldImageGeometry = newValue}
  }
  /// Returns true if `oldImageGeometry` has been explicitly set.
  var hasOldImageGeometry: Bool {return self._oldImageGeometry != nil}
  /// Clears the value of `oldImageGeometry`. Subsequent reads from it will return its default value.
  mutating func clearOldImageGeometry() {self._oldImageGeometry = nil}

  var newMaskGeometry: TSD_GeometryArchive {
    get {return _newMaskGeometry ?? TSD_GeometryArchive()}
    set {_newMaskGeometry = newValue}
  }
  /// Returns true if `newMaskGeometry` has been explicitly set.
  var hasNewMaskGeometry: Bool {return self._newMaskGeometry != nil}
  /// Clears the value of `newMaskGeometry`. Subsequent reads from it will return its default value.
  mutating func clearNewMaskGeometry() {self._newMaskGeometry = nil}

  var oldMaskGeometry: TSD_GeometryArchive {
    get {return _oldMaskGeometry ?? TSD_GeometryArchive()}
    set {_oldMaskGeometry = newValue}
  }
  /// Returns true if `oldMaskGeometry` has been explicitly set.
  var hasOldMaskGeometry: Bool {return self._oldMaskGeometry != nil}
  /// Clears the value of `oldMaskGeometry`. Subsequent reads from it will return its default value.
  mutating func clearOldMaskGeometry() {self._oldMaskGeometry = nil}

  var newMaskPathSource: TSD_PathSourceArchive {
    get {return _newMaskPathSource ?? TSD_PathSourceArchive()}
    set {_newMaskPathSource = newValue}
  }
  /// Returns true if `newMaskPathSource` has been explicitly set.
  var hasNewMaskPathSource: Bool {return self._newMaskPathSource != nil}
  /// Clears the value of `newMaskPathSource`. Subsequent reads from it will return its default value.
  mutating func clearNewMaskPathSource() {self._newMaskPathSource = nil}

  var oldMaskPathSource: TSD_PathSourceArchive {
    get {return _oldMaskPathSource ?? TSD_PathSourceArchive()}
    set {_oldMaskPathSource = newValue}
  }
  /// Returns true if `oldMaskPathSource` has been explicitly set.
  var hasOldMaskPathSource: Bool {return self._oldMaskPathSource != nil}
  /// Clears the value of `oldMaskPathSource`. Subsequent reads from it will return its default value.
  mutating func clearOldMaskPathSource() {self._oldMaskPathSource = nil}

  var newImageOriginalSize: TSP_Size {
    get {return _newImageOriginalSize ?? TSP_Size()}
    set {_newImageOriginalSize = newValue}
  }
  /// Returns true if `newImageOriginalSize` has been explicitly set.
  var hasNewImageOriginalSize: Bool {return self._newImageOriginalSize != nil}
  /// Clears the value of `newImageOriginalSize`. Subsequent reads from it will return its default value.
  mutating func clearNewImageOriginalSize() {self._newImageOriginalSize = nil}

  var oldImageOriginalSize: TSP_Size {
    get {return _oldImageOriginalSize ?? TSP_Size()}
    set {_oldImageOriginalSize = newValue}
  }
  /// Returns true if `oldImageOriginalSize` has been explicitly set.
  var hasOldImageOriginalSize: Bool {return self._oldImageOriginalSize != nil}
  /// Clears the value of `oldImageOriginalSize`. Subsequent reads from it will return its default value.
  mutating func clearOldImageOriginalSize() {self._oldImageOriginalSize = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _newImageGeometry: TSD_GeometryArchive? = nil
  fileprivate var _oldImageGeometry: TSD_GeometryArchive? = nil
  fileprivate var _newMaskGeometry: TSD_GeometryArchive? = nil
  fileprivate var _oldMaskGeometry: TSD_GeometryArchive? = nil
  fileprivate var _newMaskPathSource: TSD_PathSourceArchive? = nil
  fileprivate var _oldMaskPathSource: TSD_PathSourceArchive? = nil
  fileprivate var _newImageOriginalSize: TSP_Size? = nil
  fileprivate var _oldImageOriginalSize: TSP_Size? = nil
}

struct TSD_ImageInfoGeometryCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_ImageInfoAbstractGeometryCommandArchive {
    get {return _super ?? TSD_ImageInfoAbstractGeometryCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_ImageInfoAbstractGeometryCommandArchive? = nil
}

struct TSD_ImageInfoMaskGeometryCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_ImageInfoAbstractGeometryCommandArchive {
    get {return _super ?? TSD_ImageInfoAbstractGeometryCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_ImageInfoAbstractGeometryCommandArchive? = nil
}

struct TSD_InfoCollectionSelectionTransformerHelperArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var infoUuidPathList: [TSP_UUIDPath] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSD_DrawableSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transformerHelper: TSD_InfoCollectionSelectionTransformerHelperArchive {
    get {return _transformerHelper ?? TSD_InfoCollectionSelectionTransformerHelperArchive()}
    set {_transformerHelper = newValue}
  }
  /// Returns true if `transformerHelper` has been explicitly set.
  var hasTransformerHelper: Bool {return self._transformerHelper != nil}
  /// Clears the value of `transformerHelper`. Subsequent reads from it will return its default value.
  mutating func clearTransformerHelper() {self._transformerHelper = nil}

  var untransformedDrawableSelection: TSP_Reference {
    get {return _untransformedDrawableSelection ?? TSP_Reference()}
    set {_untransformedDrawableSelection = newValue}
  }
  /// Returns true if `untransformedDrawableSelection` has been explicitly set.
  var hasUntransformedDrawableSelection: Bool {return self._untransformedDrawableSelection != nil}
  /// Clears the value of `untransformedDrawableSelection`. Subsequent reads from it will return its default value.
  mutating func clearUntransformedDrawableSelection() {self._untransformedDrawableSelection = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _transformerHelper: TSD_InfoCollectionSelectionTransformerHelperArchive? = nil
  fileprivate var _untransformedDrawableSelection: TSP_Reference? = nil
}

struct TSD_CanvasSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transformerHelper: TSD_InfoCollectionSelectionTransformerHelperArchive {
    get {return _transformerHelper ?? TSD_InfoCollectionSelectionTransformerHelperArchive()}
    set {_transformerHelper = newValue}
  }
  /// Returns true if `transformerHelper` has been explicitly set.
  var hasTransformerHelper: Bool {return self._transformerHelper != nil}
  /// Clears the value of `transformerHelper`. Subsequent reads from it will return its default value.
  mutating func clearTransformerHelper() {self._transformerHelper = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _transformerHelper: TSD_InfoCollectionSelectionTransformerHelperArchive? = nil
}

struct TSD_PathSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSD_ShapeSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_DrawableSelectionTransformerArchive {
    get {return _super ?? TSD_DrawableSelectionTransformerArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_DrawableSelectionTransformerArchive? = nil
}

struct TSD_GroupSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_DrawableSelectionTransformerArchive {
    get {return _super ?? TSD_DrawableSelectionTransformerArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_DrawableSelectionTransformerArchive? = nil
}

struct TSD_PencilAnnotationSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pencilAnnotationUuid: TSP_UUID {
    get {return _pencilAnnotationUuid ?? TSP_UUID()}
    set {_pencilAnnotationUuid = newValue}
  }
  /// Returns true if `pencilAnnotationUuid` has been explicitly set.
  var hasPencilAnnotationUuid: Bool {return self._pencilAnnotationUuid != nil}
  /// Clears the value of `pencilAnnotationUuid`. Subsequent reads from it will return its default value.
  mutating func clearPencilAnnotationUuid() {self._pencilAnnotationUuid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pencilAnnotationUuid: TSP_UUID? = nil
}

struct TSD_FreehandDrawingOpacityCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var opacity: Double {
    get {return _opacity ?? 0}
    set {_opacity = newValue}
  }
  /// Returns true if `opacity` has been explicitly set.
  var hasOpacity: Bool {return self._opacity != nil}
  /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
  mutating func clearOpacity() {self._opacity = nil}

  var oldOpacity: Double {
    get {return _oldOpacity ?? 0}
    set {_oldOpacity = newValue}
  }
  /// Returns true if `oldOpacity` has been explicitly set.
  var hasOldOpacity: Bool {return self._oldOpacity != nil}
  /// Clears the value of `oldOpacity`. Subsequent reads from it will return its default value.
  mutating func clearOldOpacity() {self._oldOpacity = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _opacity: Double? = nil
  fileprivate var _oldOpacity: Double? = nil
}

struct TSD_FreehandDrawingAnimationCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_InfoCommandArchive {
    get {return _super ?? TSD_InfoCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var animation: TSD_FreehandDrawingAnimationArchive {
    get {return _animation ?? TSD_FreehandDrawingAnimationArchive()}
    set {_animation = newValue}
  }
  /// Returns true if `animation` has been explicitly set.
  var hasAnimation: Bool {return self._animation != nil}
  /// Clears the value of `animation`. Subsequent reads from it will return its default value.
  mutating func clearAnimation() {self._animation = nil}

  var oldAnimation: TSD_FreehandDrawingAnimationArchive {
    get {return _oldAnimation ?? TSD_FreehandDrawingAnimationArchive()}
    set {_oldAnimation = newValue}
  }
  /// Returns true if `oldAnimation` has been explicitly set.
  var hasOldAnimation: Bool {return self._oldAnimation != nil}
  /// Clears the value of `oldAnimation`. Subsequent reads from it will return its default value.
  mutating func clearOldAnimation() {self._oldAnimation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_InfoCommandArchive? = nil
  fileprivate var _animation: TSD_FreehandDrawingAnimationArchive? = nil
  fileprivate var _oldAnimation: TSD_FreehandDrawingAnimationArchive? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TSD"

extension TSD_CommentCommandVariant: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BaseComment"),
    1: .same(proto: "AddReply"),
    2: .same(proto: "EditReply"),
    3: .same(proto: "DeleteReply"),
  ]
}

extension TSD_UndoObjectArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UndoObjectArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "stylesheet"),
    1: .same(proto: "objects"),
    3: .same(proto: "keys"),
    4: .same(proto: "counts"),
  ]

  public var isInitialized: Bool {
    if let v = self._stylesheet, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.objects) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.objects)
      case 2: try decoder.decodeSingularMessageField(value: &self._stylesheet)
      case 3: try decoder.decodeRepeatedStringField(value: &self.keys)
      case 4: try decoder.decodeRepeatedUInt32Field(value: &self.counts)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.objects.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.objects, fieldNumber: 1)
    }
    if let v = self._stylesheet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.keys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.keys, fieldNumber: 3)
    }
    if !self.counts.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.counts, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_UndoObjectArchive, rhs: TSD_UndoObjectArchive) -> Bool {
    if lhs._stylesheet != rhs._stylesheet {return false}
    if lhs.objects != rhs.objects {return false}
    if lhs.keys != rhs.keys {return false}
    if lhs.counts != rhs.counts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_GroupDrawablesCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupDrawablesCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "drawables"),
    3: .same(proto: "group"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.drawables) {return false}
    if let v = self._group, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.drawables)
      case 3: try decoder.decodeSingularMessageField(value: &self._group)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.drawables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.drawables, fieldNumber: 2)
    }
    if let v = self._group {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_GroupDrawablesCommandArchive, rhs: TSD_GroupDrawablesCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.drawables != rhs.drawables {return false}
    if lhs._group != rhs._group {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_UngroupGroupCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UngroupGroupCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "drawables"),
    3: .same(proto: "group"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.drawables) {return false}
    if let v = self._group, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.drawables)
      case 3: try decoder.decodeSingularMessageField(value: &self._group)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.drawables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.drawables, fieldNumber: 2)
    }
    if let v = self._group {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_UngroupGroupCommandArchive, rhs: TSD_UngroupGroupCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.drawables != rhs.drawables {return false}
    if lhs._group != rhs._group {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ContainerRemoveChildrenCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContainerRemoveChildrenCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "container_id_path"),
    3: .standard(proto: "args_list"),
    4: .same(proto: "children"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._containerIDPath, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.argsList) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.children) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._containerIDPath)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.argsList)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.children)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._containerIDPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.argsList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.argsList, fieldNumber: 3)
    }
    if !self.children.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.children, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ContainerRemoveChildrenCommandArchive, rhs: TSD_ContainerRemoveChildrenCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._containerIDPath != rhs._containerIDPath {return false}
    if lhs.argsList != rhs.argsList {return false}
    if lhs.children != rhs.children {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ContainerRemoveDrawablesCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContainerRemoveDrawablesCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ContainerRemoveDrawablesCommandArchive, rhs: TSD_ContainerRemoveDrawablesCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ContainerInsertChildrenCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContainerInsertChildrenCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "container_id_path"),
    3: .same(proto: "children"),
    4: .standard(proto: "args_list"),
    5: .standard(proto: "custom_format_keys"),
    6: .standard(proto: "undo_object"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._containerIDPath, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.children) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.argsList) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.customFormatKeys) {return false}
    if let v = self._undoObject, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._containerIDPath)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.children)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.argsList)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.customFormatKeys)
      case 6: try decoder.decodeSingularMessageField(value: &self._undoObject)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._containerIDPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.children.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.children, fieldNumber: 3)
    }
    if !self.argsList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.argsList, fieldNumber: 4)
    }
    if !self.customFormatKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.customFormatKeys, fieldNumber: 5)
    }
    if let v = self._undoObject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ContainerInsertChildrenCommandArchive, rhs: TSD_ContainerInsertChildrenCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._containerIDPath != rhs._containerIDPath {return false}
    if lhs.children != rhs.children {return false}
    if lhs.argsList != rhs.argsList {return false}
    if lhs.customFormatKeys != rhs.customFormatKeys {return false}
    if lhs._undoObject != rhs._undoObject {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ContainerInsertDrawablesCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContainerInsertDrawablesCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "drawables"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.drawables) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.drawables)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.drawables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.drawables, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ContainerInsertDrawablesCommandArchive, rhs: TSD_ContainerInsertDrawablesCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.drawables != rhs.drawables {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ContainerReorderChildrenCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContainerReorderChildrenCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "container_id_path"),
    3: .standard(proto: "args_list"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._containerIDPath, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.argsList) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._containerIDPath)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.argsList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._containerIDPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.argsList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.argsList, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ContainerReorderChildrenCommandArchive, rhs: TSD_ContainerReorderChildrenCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._containerIDPath != rhs._containerIDPath {return false}
    if lhs.argsList != rhs.argsList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_GroupUngroupInformativeCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupUngroupInformativeCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "removed_infos"),
    3: .standard(proto: "inserted_infos"),
    4: .standard(proto: "command_type"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.removedInfos) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.insertedInfos) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.removedInfos)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.insertedInfos)
      case 4: try decoder.decodeSingularEnumField(value: &self._commandType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.removedInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.removedInfos, fieldNumber: 2)
    }
    if !self.insertedInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.insertedInfos, fieldNumber: 3)
    }
    if let v = self._commandType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_GroupUngroupInformativeCommandArchive, rhs: TSD_GroupUngroupInformativeCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.removedInfos != rhs.removedInfos {return false}
    if lhs.insertedInfos != rhs.insertedInfos {return false}
    if lhs._commandType != rhs._commandType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_GroupUngroupInformativeCommandArchive.CommandType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Group"),
    1: .same(proto: "Ungroup"),
  ]
}

extension TSD_InfoCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InfoCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "info_id_path"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._infoIDPath, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._infoIDPath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._infoIDPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_InfoCommandArchive, rhs: TSD_InfoCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._infoIDPath != rhs._infoIDPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ConnectionLineConnectCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectionLineConnectCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    4: .standard(proto: "connected_from_id"),
    5: .standard(proto: "connected_to_id"),
    6: .standard(proto: "old_connected_to_id"),
    7: .standard(proto: "old_connected_from_id"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._connectedFromID, !v.isInitialized {return false}
    if let v = self._connectedToID, !v.isInitialized {return false}
    if let v = self._oldConnectedToID, !v.isInitialized {return false}
    if let v = self._oldConnectedFromID, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 4: try decoder.decodeSingularMessageField(value: &self._connectedFromID)
      case 5: try decoder.decodeSingularMessageField(value: &self._connectedToID)
      case 6: try decoder.decodeSingularMessageField(value: &self._oldConnectedToID)
      case 7: try decoder.decodeSingularMessageField(value: &self._oldConnectedFromID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._connectedFromID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._connectedToID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._oldConnectedToID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._oldConnectedFromID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ConnectionLineConnectCommandArchive, rhs: TSD_ConnectionLineConnectCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._connectedFromID != rhs._connectedFromID {return false}
    if lhs._connectedToID != rhs._connectedToID {return false}
    if lhs._oldConnectedToID != rhs._oldConnectedToID {return false}
    if lhs._oldConnectedFromID != rhs._oldConnectedFromID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_InfoGeometryCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InfoGeometryCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "newGeometry"),
    3: .same(proto: "oldGeometry"),
    4: .same(proto: "matchObjectPlaceholderGeometry"),
    5: .same(proto: "oldMatchObjectPlaceholderGeometry"),
    6: .same(proto: "shouldTriggerRtuAnimation"),
    7: .same(proto: "initiatedOnWeb"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._newGeometry, !v.isInitialized {return false}
    if let v = self._oldGeometry, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._newGeometry)
      case 3: try decoder.decodeSingularMessageField(value: &self._oldGeometry)
      case 4: try decoder.decodeSingularBoolField(value: &self._matchObjectPlaceholderGeometry)
      case 5: try decoder.decodeSingularBoolField(value: &self._oldMatchObjectPlaceholderGeometry)
      case 6: try decoder.decodeSingularBoolField(value: &self._shouldTriggerRtuAnimation)
      case 7: try decoder.decodeSingularBoolField(value: &self._initiatedOnWeb)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._newGeometry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._oldGeometry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._matchObjectPlaceholderGeometry {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._oldMatchObjectPlaceholderGeometry {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._shouldTriggerRtuAnimation {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._initiatedOnWeb {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_InfoGeometryCommandArchive, rhs: TSD_InfoGeometryCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._newGeometry != rhs._newGeometry {return false}
    if lhs._oldGeometry != rhs._oldGeometry {return false}
    if lhs._matchObjectPlaceholderGeometry != rhs._matchObjectPlaceholderGeometry {return false}
    if lhs._oldMatchObjectPlaceholderGeometry != rhs._oldMatchObjectPlaceholderGeometry {return false}
    if lhs._shouldTriggerRtuAnimation != rhs._shouldTriggerRtuAnimation {return false}
    if lhs._initiatedOnWeb != rhs._initiatedOnWeb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_DrawablePathSourceCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DrawablePathSourceCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "old_path_source"),
    3: .standard(proto: "new_path_source"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._oldPathSource, !v.isInitialized {return false}
    if let v = self._newPathSource, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._oldPathSource)
      case 3: try decoder.decodeSingularMessageField(value: &self._newPathSource)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldPathSource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._newPathSource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_DrawablePathSourceCommandArchive, rhs: TSD_DrawablePathSourceCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldPathSource != rhs._oldPathSource {return false}
    if lhs._newPathSource != rhs._newPathSource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_InstantAlphaCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InstantAlphaCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "oldpath"),
    3: .same(proto: "newpath"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._oldpath, !v.isInitialized {return false}
    if let v = self._newpath, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._oldpath)
      case 3: try decoder.decodeSingularMessageField(value: &self._newpath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldpath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._newpath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_InstantAlphaCommandArchive, rhs: TSD_InstantAlphaCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldpath != rhs._oldpath {return false}
    if lhs._newpath != rhs._newpath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_DrawableApplyThemeCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DrawableApplyThemeCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "info"),
    3: .same(proto: "style"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._info, !v.isInitialized {return false}
    if let v = self._style, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._info)
      case 3: try decoder.decodeSingularMessageField(value: &self._style)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_DrawableApplyThemeCommandArchive, rhs: TSD_DrawableApplyThemeCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._info != rhs._info {return false}
    if lhs._style != rhs._style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ShapePathSourceFlipCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShapePathSourceFlipCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "info"),
    3: .same(proto: "newHorizontalFlip"),
    4: .same(proto: "newVerticalFlip"),
    5: .same(proto: "oldHorizontalFlip"),
    6: .same(proto: "oldVerticalFlip"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._info, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._info)
      case 3: try decoder.decodeSingularBoolField(value: &self._newHorizontalFlip)
      case 4: try decoder.decodeSingularBoolField(value: &self._newVerticalFlip)
      case 5: try decoder.decodeSingularBoolField(value: &self._oldHorizontalFlip)
      case 6: try decoder.decodeSingularBoolField(value: &self._oldVerticalFlip)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._newHorizontalFlip {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._newVerticalFlip {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._oldHorizontalFlip {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._oldVerticalFlip {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ShapePathSourceFlipCommandArchive, rhs: TSD_ShapePathSourceFlipCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._info != rhs._info {return false}
    if lhs._newHorizontalFlip != rhs._newHorizontalFlip {return false}
    if lhs._newVerticalFlip != rhs._newVerticalFlip {return false}
    if lhs._oldHorizontalFlip != rhs._oldHorizontalFlip {return false}
    if lhs._oldVerticalFlip != rhs._oldVerticalFlip {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_AbstractStyleCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AbstractStyleCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_AbstractStyleCommandArchive, rhs: TSD_AbstractStyleCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_StyledInfoSetStyleCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StyledInfoSetStyleCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "new_style"),
    4: .standard(proto: "rollback_style"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._newStyle, !v.isInitialized {return false}
    if let v = self._rollbackStyle, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._newStyle)
      case 4: try decoder.decodeSingularMessageField(value: &self._rollbackStyle)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._newStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._rollbackStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_StyledInfoSetStyleCommandArchive, rhs: TSD_StyledInfoSetStyleCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._newStyle != rhs._newStyle {return false}
    if lhs._rollbackStyle != rhs._rollbackStyle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_BaseApplyPresetCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BaseApplyPresetCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "preset_style"),
    4: .standard(proto: "rollback_style"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._presetStyle, !v.isInitialized {return false}
    if let v = self._rollbackStyle, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._presetStyle)
      case 4: try decoder.decodeSingularMessageField(value: &self._rollbackStyle)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._presetStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._rollbackStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_BaseApplyPresetCommandArchive, rhs: TSD_BaseApplyPresetCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._presetStyle != rhs._presetStyle {return false}
    if lhs._rollbackStyle != rhs._rollbackStyle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ShapeApplyPresetCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShapeApplyPresetCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ShapeApplyPresetCommandArchive, rhs: TSD_ShapeApplyPresetCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_MediaApplyPresetCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MediaApplyPresetCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_MediaApplyPresetCommandArchive, rhs: TSD_MediaApplyPresetCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ShapeStyleSetValueCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShapeStyleSetValueCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    4: .same(proto: "change"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._change, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 4: try decoder.decodeSingularMessageField(value: &self._change)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._change {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ShapeStyleSetValueCommandArchive, rhs: TSD_ShapeStyleSetValueCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._change != rhs._change {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_BaseStyleSetValueCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BaseStyleSetValueCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    4: .standard(proto: "old_style"),
    5: .standard(proto: "is_border_change"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._isBorderChange == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._oldStyle, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 4: try decoder.decodeSingularMessageField(value: &self._oldStyle)
      case 5: try decoder.decodeSingularBoolField(value: &self._isBorderChange)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._isBorderChange {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_BaseStyleSetValueCommandArchive, rhs: TSD_BaseStyleSetValueCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldStyle != rhs._oldStyle {return false}
    if lhs._isBorderChange != rhs._isBorderChange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_MovieSetValueCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MovieSetValueCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "property"),
    3: .same(proto: "value"),
    4: .same(proto: "oldValue"),
    5: .same(proto: "importedauxiliarymedia"),
    6: .same(proto: "oldimportedauxiliarymedia"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._value, !v.isInitialized {return false}
    if let v = self._oldValue, !v.isInitialized {return false}
    if let v = self._importedauxiliarymedia, !v.isInitialized {return false}
    if let v = self._oldimportedauxiliarymedia, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularInt32Field(value: &self._property)
      case 3: try decoder.decodeSingularMessageField(value: &self._value)
      case 4: try decoder.decodeSingularMessageField(value: &self._oldValue)
      case 5: try decoder.decodeSingularMessageField(value: &self._importedauxiliarymedia)
      case 6: try decoder.decodeSingularMessageField(value: &self._oldimportedauxiliarymedia)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._property {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._oldValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._importedauxiliarymedia {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._oldimportedauxiliarymedia {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_MovieSetValueCommandArchive, rhs: TSD_MovieSetValueCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._property != rhs._property {return false}
    if lhs._value != rhs._value {return false}
    if lhs._oldValue != rhs._oldValue {return false}
    if lhs._importedauxiliarymedia != rhs._importedauxiliarymedia {return false}
    if lhs._oldimportedauxiliarymedia != rhs._oldimportedauxiliarymedia {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_MovieSetValueCommandArchive.LoopOption: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "None"),
    1: .same(proto: "Repeat"),
    2: .same(proto: "BackAndForth"),
  ]
}

extension TSD_MovieSetValueCommandArchive.PropertyValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSD_MovieSetValueCommandArchive.protoMessageName + ".PropertyValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "starttime"),
    2: .same(proto: "endtime"),
    3: .same(proto: "postertime"),
    4: .same(proto: "posterimagedata"),
    5: .same(proto: "autoplay"),
    6: .same(proto: "loopOption"),
    7: .same(proto: "volume"),
    8: .same(proto: "media"),
  ]

  public var isInitialized: Bool {
    if let v = self._posterimagedata, !v.isInitialized {return false}
    if let v = self._media, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._starttime)
      case 2: try decoder.decodeSingularDoubleField(value: &self._endtime)
      case 3: try decoder.decodeSingularDoubleField(value: &self._postertime)
      case 4: try decoder.decodeSingularMessageField(value: &self._posterimagedata)
      case 5: try decoder.decodeSingularBoolField(value: &self._autoplay)
      case 6: try decoder.decodeSingularEnumField(value: &self._loopOption)
      case 7: try decoder.decodeSingularFloatField(value: &self._volume)
      case 8: try decoder.decodeSingularMessageField(value: &self._media)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._starttime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    if let v = self._endtime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    if let v = self._postertime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }
    if let v = self._posterimagedata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._autoplay {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._loopOption {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    }
    if let v = self._volume {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 7)
    }
    if let v = self._media {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_MovieSetValueCommandArchive.PropertyValue, rhs: TSD_MovieSetValueCommandArchive.PropertyValue) -> Bool {
    if lhs._starttime != rhs._starttime {return false}
    if lhs._endtime != rhs._endtime {return false}
    if lhs._postertime != rhs._postertime {return false}
    if lhs._posterimagedata != rhs._posterimagedata {return false}
    if lhs._autoplay != rhs._autoplay {return false}
    if lhs._loopOption != rhs._loopOption {return false}
    if lhs._volume != rhs._volume {return false}
    if lhs._media != rhs._media {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_MediaStyleSetValueCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MediaStyleSetValueCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    4: .same(proto: "change"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._change, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 4: try decoder.decodeSingularMessageField(value: &self._change)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._change {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_MediaStyleSetValueCommandArchive, rhs: TSD_MediaStyleSetValueCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._change != rhs._change {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ImageMediaCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ImageMediaCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    8: .same(proto: "newImageData"),
    9: .same(proto: "oldImageData"),
    10: .same(proto: "oldOriginalImageData"),
    6: .same(proto: "oldNaturalSize"),
    11: .same(proto: "newOriginalImageData"),
    12: .same(proto: "oldImageAdjustments"),
    13: .same(proto: "oldAdjustedImageData"),
    14: .same(proto: "oldEnhancedImageData"),
    15: .same(proto: "imageAdjustments"),
    16: .same(proto: "adjustedImageData"),
    17: .same(proto: "enhancedImageData"),
    18: .same(proto: "newThumbnailImageData"),
    19: .same(proto: "oldThumbnailImageData"),
    20: .same(proto: "thumbnailAdjustedImageData"),
    21: .same(proto: "oldThumbnailAdjustedImageData"),
    3: .standard(proto: "database_newImageData"),
    4: .standard(proto: "database_oldImageData"),
    5: .standard(proto: "database_oldOriginalImageData"),
    7: .standard(proto: "database_newOriginalImageData"),
  ]

  fileprivate class _StorageClass {
    var _super: TSD_InfoCommandArchive? = nil
    var _newImageData: TSP_DataReference? = nil
    var _oldImageData: TSP_DataReference? = nil
    var _oldOriginalImageData: TSP_DataReference? = nil
    var _oldNaturalSize: TSP_Size? = nil
    var _newOriginalImageData: TSP_DataReference? = nil
    var _oldImageAdjustments: TSD_ImageAdjustmentsArchive? = nil
    var _oldAdjustedImageData: TSP_DataReference? = nil
    var _oldEnhancedImageData: TSP_DataReference? = nil
    var _imageAdjustments: TSD_ImageAdjustmentsArchive? = nil
    var _adjustedImageData: TSP_DataReference? = nil
    var _enhancedImageData: TSP_DataReference? = nil
    var _newThumbnailImageData: TSP_DataReference? = nil
    var _oldThumbnailImageData: TSP_DataReference? = nil
    var _thumbnailAdjustedImageData: TSP_DataReference? = nil
    var _oldThumbnailAdjustedImageData: TSP_DataReference? = nil
    var _databaseNewImageData: TSP_Reference? = nil
    var _databaseOldImageData: TSP_Reference? = nil
    var _databaseOldOriginalImageData: TSP_Reference? = nil
    var _databaseNewOriginalImageData: TSP_Reference? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _super = source._super
      _newImageData = source._newImageData
      _oldImageData = source._oldImageData
      _oldOriginalImageData = source._oldOriginalImageData
      _oldNaturalSize = source._oldNaturalSize
      _newOriginalImageData = source._newOriginalImageData
      _oldImageAdjustments = source._oldImageAdjustments
      _oldAdjustedImageData = source._oldAdjustedImageData
      _oldEnhancedImageData = source._oldEnhancedImageData
      _imageAdjustments = source._imageAdjustments
      _adjustedImageData = source._adjustedImageData
      _enhancedImageData = source._enhancedImageData
      _newThumbnailImageData = source._newThumbnailImageData
      _oldThumbnailImageData = source._oldThumbnailImageData
      _thumbnailAdjustedImageData = source._thumbnailAdjustedImageData
      _oldThumbnailAdjustedImageData = source._oldThumbnailAdjustedImageData
      _databaseNewImageData = source._databaseNewImageData
      _databaseOldImageData = source._databaseOldImageData
      _databaseOldOriginalImageData = source._databaseOldOriginalImageData
      _databaseNewOriginalImageData = source._databaseNewOriginalImageData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._super == nil {return false}
      if let v = _storage._super, !v.isInitialized {return false}
      if let v = _storage._newImageData, !v.isInitialized {return false}
      if let v = _storage._oldImageData, !v.isInitialized {return false}
      if let v = _storage._oldOriginalImageData, !v.isInitialized {return false}
      if let v = _storage._oldNaturalSize, !v.isInitialized {return false}
      if let v = _storage._newOriginalImageData, !v.isInitialized {return false}
      if let v = _storage._oldAdjustedImageData, !v.isInitialized {return false}
      if let v = _storage._oldEnhancedImageData, !v.isInitialized {return false}
      if let v = _storage._adjustedImageData, !v.isInitialized {return false}
      if let v = _storage._enhancedImageData, !v.isInitialized {return false}
      if let v = _storage._newThumbnailImageData, !v.isInitialized {return false}
      if let v = _storage._oldThumbnailImageData, !v.isInitialized {return false}
      if let v = _storage._thumbnailAdjustedImageData, !v.isInitialized {return false}
      if let v = _storage._oldThumbnailAdjustedImageData, !v.isInitialized {return false}
      if let v = _storage._databaseNewImageData, !v.isInitialized {return false}
      if let v = _storage._databaseOldImageData, !v.isInitialized {return false}
      if let v = _storage._databaseOldOriginalImageData, !v.isInitialized {return false}
      if let v = _storage._databaseNewOriginalImageData, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._super)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._databaseNewImageData)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._databaseOldImageData)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._databaseOldOriginalImageData)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._oldNaturalSize)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._databaseNewOriginalImageData)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._newImageData)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._oldImageData)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._oldOriginalImageData)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._newOriginalImageData)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._oldImageAdjustments)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._oldAdjustedImageData)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._oldEnhancedImageData)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._imageAdjustments)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._adjustedImageData)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._enhancedImageData)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._newThumbnailImageData)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._oldThumbnailImageData)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._thumbnailAdjustedImageData)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._oldThumbnailAdjustedImageData)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._super {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._databaseNewImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._databaseOldImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._databaseOldOriginalImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._oldNaturalSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._databaseNewOriginalImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._newImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._oldImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._oldOriginalImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._newOriginalImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._oldImageAdjustments {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._oldAdjustedImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._oldEnhancedImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._imageAdjustments {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._adjustedImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._enhancedImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._newThumbnailImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._oldThumbnailImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._thumbnailAdjustedImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._oldThumbnailAdjustedImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ImageMediaCommandArchive, rhs: TSD_ImageMediaCommandArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._super != rhs_storage._super {return false}
        if _storage._newImageData != rhs_storage._newImageData {return false}
        if _storage._oldImageData != rhs_storage._oldImageData {return false}
        if _storage._oldOriginalImageData != rhs_storage._oldOriginalImageData {return false}
        if _storage._oldNaturalSize != rhs_storage._oldNaturalSize {return false}
        if _storage._newOriginalImageData != rhs_storage._newOriginalImageData {return false}
        if _storage._oldImageAdjustments != rhs_storage._oldImageAdjustments {return false}
        if _storage._oldAdjustedImageData != rhs_storage._oldAdjustedImageData {return false}
        if _storage._oldEnhancedImageData != rhs_storage._oldEnhancedImageData {return false}
        if _storage._imageAdjustments != rhs_storage._imageAdjustments {return false}
        if _storage._adjustedImageData != rhs_storage._adjustedImageData {return false}
        if _storage._enhancedImageData != rhs_storage._enhancedImageData {return false}
        if _storage._newThumbnailImageData != rhs_storage._newThumbnailImageData {return false}
        if _storage._oldThumbnailImageData != rhs_storage._oldThumbnailImageData {return false}
        if _storage._thumbnailAdjustedImageData != rhs_storage._thumbnailAdjustedImageData {return false}
        if _storage._oldThumbnailAdjustedImageData != rhs_storage._oldThumbnailAdjustedImageData {return false}
        if _storage._databaseNewImageData != rhs_storage._databaseNewImageData {return false}
        if _storage._databaseOldImageData != rhs_storage._databaseOldImageData {return false}
        if _storage._databaseOldOriginalImageData != rhs_storage._databaseOldOriginalImageData {return false}
        if _storage._databaseNewOriginalImageData != rhs_storage._databaseNewOriginalImageData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_MediaOriginalSizeCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MediaOriginalSizeCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "newOriginalSize"),
    3: .same(proto: "oldOriginalSize"),
    4: .same(proto: "propertyName"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._propertyName == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._newOriginalSize, !v.isInitialized {return false}
    if let v = self._oldOriginalSize, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._newOriginalSize)
      case 3: try decoder.decodeSingularMessageField(value: &self._oldOriginalSize)
      case 4: try decoder.decodeSingularStringField(value: &self._propertyName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._newOriginalSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._oldOriginalSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._propertyName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_MediaOriginalSizeCommandArchive, rhs: TSD_MediaOriginalSizeCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._newOriginalSize != rhs._newOriginalSize {return false}
    if lhs._oldOriginalSize != rhs._oldOriginalSize {return false}
    if lhs._propertyName != rhs._propertyName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_MediaInfoGeometryCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MediaInfoGeometryCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "newOriginalSize"),
    3: .same(proto: "oldOriginalSize"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._newOriginalSize == nil {return false}
    if self._oldOriginalSize == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._newOriginalSize, !v.isInitialized {return false}
    if let v = self._oldOriginalSize, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._newOriginalSize)
      case 3: try decoder.decodeSingularMessageField(value: &self._oldOriginalSize)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._newOriginalSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._oldOriginalSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_MediaInfoGeometryCommandArchive, rhs: TSD_MediaInfoGeometryCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._newOriginalSize != rhs._newOriginalSize {return false}
    if lhs._oldOriginalSize != rhs._oldOriginalSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ImageNaturalSizeCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ImageNaturalSizeCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "new_natural_size"),
    3: .standard(proto: "old_natural_size"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._newNaturalSize, !v.isInitialized {return false}
    if let v = self._oldNaturalSize, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._newNaturalSize)
      case 3: try decoder.decodeSingularMessageField(value: &self._oldNaturalSize)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._newNaturalSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._oldNaturalSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ImageNaturalSizeCommandArchive, rhs: TSD_ImageNaturalSizeCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._newNaturalSize != rhs._newNaturalSize {return false}
    if lhs._oldNaturalSize != rhs._oldNaturalSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ImageMaskCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ImageMaskCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "newMaskInfo"),
    3: .same(proto: "oldMaskInfo"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._newMaskInfo, !v.isInitialized {return false}
    if let v = self._oldMaskInfo, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._newMaskInfo)
      case 3: try decoder.decodeSingularMessageField(value: &self._oldMaskInfo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._newMaskInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._oldMaskInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ImageMaskCommandArchive, rhs: TSD_ImageMaskCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._newMaskInfo != rhs._newMaskInfo {return false}
    if lhs._oldMaskInfo != rhs._oldMaskInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ImageAdjustmentsCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ImageAdjustmentsCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "old_image_adjustments"),
    3: .standard(proto: "new_image_adjustments"),
    4: .same(proto: "adjustedImageData"),
    5: .same(proto: "replacedAdjustedImageData"),
    6: .same(proto: "enhancedImageData"),
    7: .same(proto: "replacedEnhancedImageData"),
    8: .same(proto: "thumbnailAdjustedImageData"),
    9: .same(proto: "replacedThumbnailAdjustedImageData"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._adjustedImageData, !v.isInitialized {return false}
    if let v = self._replacedAdjustedImageData, !v.isInitialized {return false}
    if let v = self._enhancedImageData, !v.isInitialized {return false}
    if let v = self._replacedEnhancedImageData, !v.isInitialized {return false}
    if let v = self._thumbnailAdjustedImageData, !v.isInitialized {return false}
    if let v = self._replacedThumbnailAdjustedImageData, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._oldImageAdjustments)
      case 3: try decoder.decodeSingularMessageField(value: &self._newImageAdjustments)
      case 4: try decoder.decodeSingularMessageField(value: &self._adjustedImageData)
      case 5: try decoder.decodeSingularMessageField(value: &self._replacedAdjustedImageData)
      case 6: try decoder.decodeSingularMessageField(value: &self._enhancedImageData)
      case 7: try decoder.decodeSingularMessageField(value: &self._replacedEnhancedImageData)
      case 8: try decoder.decodeSingularMessageField(value: &self._thumbnailAdjustedImageData)
      case 9: try decoder.decodeSingularMessageField(value: &self._replacedThumbnailAdjustedImageData)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldImageAdjustments {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._newImageAdjustments {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._adjustedImageData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._replacedAdjustedImageData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._enhancedImageData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._replacedEnhancedImageData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._thumbnailAdjustedImageData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._replacedThumbnailAdjustedImageData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ImageAdjustmentsCommandArchive, rhs: TSD_ImageAdjustmentsCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldImageAdjustments != rhs._oldImageAdjustments {return false}
    if lhs._newImageAdjustments != rhs._newImageAdjustments {return false}
    if lhs._adjustedImageData != rhs._adjustedImageData {return false}
    if lhs._replacedAdjustedImageData != rhs._replacedAdjustedImageData {return false}
    if lhs._enhancedImageData != rhs._enhancedImageData {return false}
    if lhs._replacedEnhancedImageData != rhs._replacedEnhancedImageData {return false}
    if lhs._thumbnailAdjustedImageData != rhs._thumbnailAdjustedImageData {return false}
    if lhs._replacedThumbnailAdjustedImageData != rhs._replacedThumbnailAdjustedImageData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_MediaFlagsCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MediaFlagsCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    5: .standard(proto: "was_media_replaced"),
    6: .standard(proto: "is_placeholder"),
    7: .standard(proto: "old_was_media_replaced"),
    8: .standard(proto: "old_is_placeholder"),
    4: .standard(proto: "property_name"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._propertyName == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 4: try decoder.decodeSingularStringField(value: &self._propertyName)
      case 5: try decoder.decodeSingularBoolField(value: &self._wasMediaReplaced)
      case 6: try decoder.decodeSingularBoolField(value: &self._isPlaceholder)
      case 7: try decoder.decodeSingularBoolField(value: &self._oldWasMediaReplaced)
      case 8: try decoder.decodeSingularBoolField(value: &self._oldIsPlaceholder)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._propertyName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._wasMediaReplaced {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._isPlaceholder {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._oldWasMediaReplaced {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    if let v = self._oldIsPlaceholder {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_MediaFlagsCommandArchive, rhs: TSD_MediaFlagsCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._wasMediaReplaced != rhs._wasMediaReplaced {return false}
    if lhs._isPlaceholder != rhs._isPlaceholder {return false}
    if lhs._oldWasMediaReplaced != rhs._oldWasMediaReplaced {return false}
    if lhs._oldIsPlaceholder != rhs._oldIsPlaceholder {return false}
    if lhs._propertyName != rhs._propertyName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_DrawablesCommandGroupArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DrawablesCommandGroupArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "obsolete_selection"),
    3: .same(proto: "modelforselection"),
    4: .same(proto: "type"),
    5: .same(proto: "forDrag"),
    6: .same(proto: "archivedselection"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._obsoleteSelection, !v.isInitialized {return false}
    if let v = self._modelforselection, !v.isInitialized {return false}
    if let v = self._archivedselection, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._obsoleteSelection)
      case 3: try decoder.decodeSingularMessageField(value: &self._modelforselection)
      case 4: try decoder.decodeSingularEnumField(value: &self._type)
      case 5: try decoder.decodeSingularBoolField(value: &self._forDrag)
      case 6: try decoder.decodeSingularMessageField(value: &self._archivedselection)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._obsoleteSelection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._modelforselection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    if let v = self._forDrag {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._archivedselection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_DrawablesCommandGroupArchive, rhs: TSD_DrawablesCommandGroupArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._obsoleteSelection != rhs._obsoleteSelection {return false}
    if lhs._modelforselection != rhs._modelforselection {return false}
    if lhs._type != rhs._type {return false}
    if lhs._forDrag != rhs._forDrag {return false}
    if lhs._archivedselection != rhs._archivedselection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_DrawablesCommandGroupArchive.DrawablesCommandGroupType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Constructive"),
    2: .same(proto: "Destructive"),
    3: .same(proto: "InPlace"),
  ]
}

extension TSD_ExteriorTextWrapCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExteriorTextWrapCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    3: .standard(proto: "old_exterior_text_wrap"),
    4: .same(proto: "type"),
    5: .same(proto: "direction"),
    6: .standard(proto: "fit_type"),
    7: .same(proto: "margin"),
    8: .standard(proto: "alpha_threshold"),
    9: .standard(proto: "is_html_wrap"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 3: try decoder.decodeSingularMessageField(value: &self._oldExteriorTextWrap)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._type)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._direction)
      case 6: try decoder.decodeSingularUInt32Field(value: &self._fitType)
      case 7: try decoder.decodeSingularFloatField(value: &self._margin)
      case 8: try decoder.decodeSingularFloatField(value: &self._alphaThreshold)
      case 9: try decoder.decodeSingularBoolField(value: &self._isHtmlWrap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldExteriorTextWrap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._type {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._direction {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._fitType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._margin {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 7)
    }
    if let v = self._alphaThreshold {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 8)
    }
    if let v = self._isHtmlWrap {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ExteriorTextWrapCommandArchive, rhs: TSD_ExteriorTextWrapCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldExteriorTextWrap != rhs._oldExteriorTextWrap {return false}
    if lhs._type != rhs._type {return false}
    if lhs._direction != rhs._direction {return false}
    if lhs._fitType != rhs._fitType {return false}
    if lhs._margin != rhs._margin {return false}
    if lhs._alphaThreshold != rhs._alphaThreshold {return false}
    if lhs._isHtmlWrap != rhs._isHtmlWrap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_DrawableHyperlinkCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DrawableHyperlinkCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "oldhyperlink_url"),
    3: .standard(proto: "newhyperlink_url"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularStringField(value: &self._oldhyperlinkURL)
      case 3: try decoder.decodeSingularStringField(value: &self._newhyperlinkURL)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldhyperlinkURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._newhyperlinkURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_DrawableHyperlinkCommandArchive, rhs: TSD_DrawableHyperlinkCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldhyperlinkURL != rhs._oldhyperlinkURL {return false}
    if lhs._newhyperlinkURL != rhs._newhyperlinkURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_CommentInvalidatingCommandSelectionBehaviorArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommentInvalidatingCommandSelectionBehaviorArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "annotation_displaying_command"),
    3: .standard(proto: "begin_editing_on_undo"),
    4: .standard(proto: "begin_editing_on_redo"),
    5: .standard(proto: "should_invalidate_on_undo"),
    6: .standard(proto: "should_invalidate_on_redo"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._annotationDisplayingCommand, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._annotationDisplayingCommand)
      case 3: try decoder.decodeSingularBoolField(value: &self._beginEditingOnUndo)
      case 4: try decoder.decodeSingularBoolField(value: &self._beginEditingOnRedo)
      case 5: try decoder.decodeSingularBoolField(value: &self._shouldInvalidateOnUndo)
      case 6: try decoder.decodeSingularBoolField(value: &self._shouldInvalidateOnRedo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._annotationDisplayingCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._beginEditingOnUndo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._beginEditingOnRedo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._shouldInvalidateOnUndo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._shouldInvalidateOnRedo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_CommentInvalidatingCommandSelectionBehaviorArchive, rhs: TSD_CommentInvalidatingCommandSelectionBehaviorArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._annotationDisplayingCommand != rhs._annotationDisplayingCommand {return false}
    if lhs._beginEditingOnUndo != rhs._beginEditingOnUndo {return false}
    if lhs._beginEditingOnRedo != rhs._beginEditingOnRedo {return false}
    if lhs._shouldInvalidateOnUndo != rhs._shouldInvalidateOnUndo {return false}
    if lhs._shouldInvalidateOnRedo != rhs._shouldInvalidateOnRedo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ImageReplaceCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ImageReplaceCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "new_image_data"),
    3: .standard(proto: "new_original_image_data"),
    4: .standard(proto: "old_image_data"),
    5: .standard(proto: "old_original_image_data"),
    6: .standard(proto: "instant_alpha_path"),
    7: .standard(proto: "old_instant_alpha_path"),
    8: .standard(proto: "natural_size_for_IAPath"),
    9: .standard(proto: "old_natural_size_for_IAPath"),
    10: .standard(proto: "target_image_geometry"),
    12: .standard(proto: "old_target_image_geometry"),
    13: .standard(proto: "target_mask_geometry"),
    14: .standard(proto: "old_target_mask_geometry"),
    15: .standard(proto: "image_adjustments"),
    16: .standard(proto: "adjusted_image_data"),
    17: .standard(proto: "enhanced_image_data"),
    18: .standard(proto: "old_image_adjustments"),
    19: .standard(proto: "old_adjusted_image_data"),
    20: .standard(proto: "old_enhanced_image_data"),
    21: .standard(proto: "thumbnail_image_data"),
    22: .standard(proto: "old_thumbnail_image_data"),
    23: .standard(proto: "thumbnail_adjusted_image_data"),
    24: .standard(proto: "old_thumbnail_adjusted_image_data"),
    25: .standard(proto: "natural_size"),
    26: .standard(proto: "old_natural_size"),
  ]

  fileprivate class _StorageClass {
    var _super: TSD_InfoCommandArchive? = nil
    var _newImageData: TSP_DataReference? = nil
    var _newOriginalImageData: TSP_DataReference? = nil
    var _oldImageData: TSP_DataReference? = nil
    var _oldOriginalImageData: TSP_DataReference? = nil
    var _instantAlphaPath: TSP_Path? = nil
    var _oldInstantAlphaPath: TSP_Path? = nil
    var _naturalSizeForIapath: TSP_Size? = nil
    var _oldNaturalSizeForIapath: TSP_Size? = nil
    var _targetImageGeometry: TSD_GeometryArchive? = nil
    var _oldTargetImageGeometry: TSD_GeometryArchive? = nil
    var _targetMaskGeometry: TSD_GeometryArchive? = nil
    var _oldTargetMaskGeometry: TSD_GeometryArchive? = nil
    var _imageAdjustments: TSD_ImageAdjustmentsArchive? = nil
    var _adjustedImageData: TSP_DataReference? = nil
    var _enhancedImageData: TSP_DataReference? = nil
    var _oldImageAdjustments: TSD_ImageAdjustmentsArchive? = nil
    var _oldAdjustedImageData: TSP_DataReference? = nil
    var _oldEnhancedImageData: TSP_DataReference? = nil
    var _thumbnailImageData: TSP_DataReference? = nil
    var _oldThumbnailImageData: TSP_DataReference? = nil
    var _thumbnailAdjustedImageData: TSP_DataReference? = nil
    var _oldThumbnailAdjustedImageData: TSP_DataReference? = nil
    var _naturalSize: TSP_Size? = nil
    var _oldNaturalSize: TSP_Size? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _super = source._super
      _newImageData = source._newImageData
      _newOriginalImageData = source._newOriginalImageData
      _oldImageData = source._oldImageData
      _oldOriginalImageData = source._oldOriginalImageData
      _instantAlphaPath = source._instantAlphaPath
      _oldInstantAlphaPath = source._oldInstantAlphaPath
      _naturalSizeForIapath = source._naturalSizeForIapath
      _oldNaturalSizeForIapath = source._oldNaturalSizeForIapath
      _targetImageGeometry = source._targetImageGeometry
      _oldTargetImageGeometry = source._oldTargetImageGeometry
      _targetMaskGeometry = source._targetMaskGeometry
      _oldTargetMaskGeometry = source._oldTargetMaskGeometry
      _imageAdjustments = source._imageAdjustments
      _adjustedImageData = source._adjustedImageData
      _enhancedImageData = source._enhancedImageData
      _oldImageAdjustments = source._oldImageAdjustments
      _oldAdjustedImageData = source._oldAdjustedImageData
      _oldEnhancedImageData = source._oldEnhancedImageData
      _thumbnailImageData = source._thumbnailImageData
      _oldThumbnailImageData = source._oldThumbnailImageData
      _thumbnailAdjustedImageData = source._thumbnailAdjustedImageData
      _oldThumbnailAdjustedImageData = source._oldThumbnailAdjustedImageData
      _naturalSize = source._naturalSize
      _oldNaturalSize = source._oldNaturalSize
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._super == nil {return false}
      if let v = _storage._super, !v.isInitialized {return false}
      if let v = _storage._newImageData, !v.isInitialized {return false}
      if let v = _storage._newOriginalImageData, !v.isInitialized {return false}
      if let v = _storage._oldImageData, !v.isInitialized {return false}
      if let v = _storage._oldOriginalImageData, !v.isInitialized {return false}
      if let v = _storage._instantAlphaPath, !v.isInitialized {return false}
      if let v = _storage._oldInstantAlphaPath, !v.isInitialized {return false}
      if let v = _storage._naturalSizeForIapath, !v.isInitialized {return false}
      if let v = _storage._oldNaturalSizeForIapath, !v.isInitialized {return false}
      if let v = _storage._targetImageGeometry, !v.isInitialized {return false}
      if let v = _storage._oldTargetImageGeometry, !v.isInitialized {return false}
      if let v = _storage._targetMaskGeometry, !v.isInitialized {return false}
      if let v = _storage._oldTargetMaskGeometry, !v.isInitialized {return false}
      if let v = _storage._adjustedImageData, !v.isInitialized {return false}
      if let v = _storage._enhancedImageData, !v.isInitialized {return false}
      if let v = _storage._oldAdjustedImageData, !v.isInitialized {return false}
      if let v = _storage._oldEnhancedImageData, !v.isInitialized {return false}
      if let v = _storage._thumbnailImageData, !v.isInitialized {return false}
      if let v = _storage._oldThumbnailImageData, !v.isInitialized {return false}
      if let v = _storage._thumbnailAdjustedImageData, !v.isInitialized {return false}
      if let v = _storage._oldThumbnailAdjustedImageData, !v.isInitialized {return false}
      if let v = _storage._naturalSize, !v.isInitialized {return false}
      if let v = _storage._oldNaturalSize, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._super)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._newImageData)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._newOriginalImageData)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._oldImageData)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._oldOriginalImageData)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._instantAlphaPath)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._oldInstantAlphaPath)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._naturalSizeForIapath)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._oldNaturalSizeForIapath)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._targetImageGeometry)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._oldTargetImageGeometry)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._targetMaskGeometry)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._oldTargetMaskGeometry)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._imageAdjustments)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._adjustedImageData)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._enhancedImageData)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._oldImageAdjustments)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._oldAdjustedImageData)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._oldEnhancedImageData)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._thumbnailImageData)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._oldThumbnailImageData)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._thumbnailAdjustedImageData)
        case 24: try decoder.decodeSingularMessageField(value: &_storage._oldThumbnailAdjustedImageData)
        case 25: try decoder.decodeSingularMessageField(value: &_storage._naturalSize)
        case 26: try decoder.decodeSingularMessageField(value: &_storage._oldNaturalSize)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._super {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._newImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._newOriginalImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._oldImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._oldOriginalImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._instantAlphaPath {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._oldInstantAlphaPath {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._naturalSizeForIapath {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._oldNaturalSizeForIapath {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._targetImageGeometry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._oldTargetImageGeometry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._targetMaskGeometry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._oldTargetMaskGeometry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._imageAdjustments {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._adjustedImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._enhancedImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._oldImageAdjustments {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._oldAdjustedImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._oldEnhancedImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._thumbnailImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._oldThumbnailImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if let v = _storage._thumbnailAdjustedImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if let v = _storage._oldThumbnailAdjustedImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
      if let v = _storage._naturalSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      }
      if let v = _storage._oldNaturalSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ImageReplaceCommandArchive, rhs: TSD_ImageReplaceCommandArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._super != rhs_storage._super {return false}
        if _storage._newImageData != rhs_storage._newImageData {return false}
        if _storage._newOriginalImageData != rhs_storage._newOriginalImageData {return false}
        if _storage._oldImageData != rhs_storage._oldImageData {return false}
        if _storage._oldOriginalImageData != rhs_storage._oldOriginalImageData {return false}
        if _storage._instantAlphaPath != rhs_storage._instantAlphaPath {return false}
        if _storage._oldInstantAlphaPath != rhs_storage._oldInstantAlphaPath {return false}
        if _storage._naturalSizeForIapath != rhs_storage._naturalSizeForIapath {return false}
        if _storage._oldNaturalSizeForIapath != rhs_storage._oldNaturalSizeForIapath {return false}
        if _storage._targetImageGeometry != rhs_storage._targetImageGeometry {return false}
        if _storage._oldTargetImageGeometry != rhs_storage._oldTargetImageGeometry {return false}
        if _storage._targetMaskGeometry != rhs_storage._targetMaskGeometry {return false}
        if _storage._oldTargetMaskGeometry != rhs_storage._oldTargetMaskGeometry {return false}
        if _storage._imageAdjustments != rhs_storage._imageAdjustments {return false}
        if _storage._adjustedImageData != rhs_storage._adjustedImageData {return false}
        if _storage._enhancedImageData != rhs_storage._enhancedImageData {return false}
        if _storage._oldImageAdjustments != rhs_storage._oldImageAdjustments {return false}
        if _storage._oldAdjustedImageData != rhs_storage._oldAdjustedImageData {return false}
        if _storage._oldEnhancedImageData != rhs_storage._oldEnhancedImageData {return false}
        if _storage._thumbnailImageData != rhs_storage._thumbnailImageData {return false}
        if _storage._oldThumbnailImageData != rhs_storage._oldThumbnailImageData {return false}
        if _storage._thumbnailAdjustedImageData != rhs_storage._thumbnailAdjustedImageData {return false}
        if _storage._oldThumbnailAdjustedImageData != rhs_storage._oldThumbnailAdjustedImageData {return false}
        if _storage._naturalSize != rhs_storage._naturalSize {return false}
        if _storage._oldNaturalSize != rhs_storage._oldNaturalSize {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_DrawableLockCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DrawableLockCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "locked"),
    3: .standard(proto: "was_locked"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularBoolField(value: &self._locked)
      case 3: try decoder.decodeSingularBoolField(value: &self._wasLocked)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._locked {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._wasLocked {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_DrawableLockCommandArchive, rhs: TSD_DrawableLockCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._locked != rhs._locked {return false}
    if lhs._wasLocked != rhs._wasLocked {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_DrawableInfoCommentCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DrawableInfoCommentCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "old_comment"),
    3: .standard(proto: "new_comment"),
    4: .standard(proto: "forward_variant"),
    5: .standard(proto: "inverse_variant"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._oldComment, !v.isInitialized {return false}
    if let v = self._newComment, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._oldComment)
      case 3: try decoder.decodeSingularMessageField(value: &self._newComment)
      case 4: try decoder.decodeSingularEnumField(value: &self._forwardVariant)
      case 5: try decoder.decodeSingularEnumField(value: &self._inverseVariant)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldComment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._newComment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._forwardVariant {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    if let v = self._inverseVariant {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_DrawableInfoCommentCommandArchive, rhs: TSD_DrawableInfoCommentCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldComment != rhs._oldComment {return false}
    if lhs._newComment != rhs._newComment {return false}
    if lhs._forwardVariant != rhs._forwardVariant {return false}
    if lhs._inverseVariant != rhs._inverseVariant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_DrawablePencilAnnotationCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DrawablePencilAnnotationCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "pencil_annotation_to_add"),
    3: .standard(proto: "pencil_annotation_to_remove"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._pencilAnnotationToAdd, !v.isInitialized {return false}
    if let v = self._pencilAnnotationToRemove, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._pencilAnnotationToAdd)
      case 3: try decoder.decodeSingularMessageField(value: &self._pencilAnnotationToRemove)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._pencilAnnotationToAdd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._pencilAnnotationToRemove {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_DrawablePencilAnnotationCommandArchive, rhs: TSD_DrawablePencilAnnotationCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._pencilAnnotationToAdd != rhs._pencilAnnotationToAdd {return false}
    if lhs._pencilAnnotationToRemove != rhs._pencilAnnotationToRemove {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_AbstractGuideCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AbstractGuideCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    7: .standard(proto: "old_guides"),
    8: .standard(proto: "new_guides"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.oldGuides)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.newGuides)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.oldGuides.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.oldGuides, fieldNumber: 7)
    }
    if !self.newGuides.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.newGuides, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_AbstractGuideCommandArchive, rhs: TSD_AbstractGuideCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.oldGuides != rhs.oldGuides {return false}
    if lhs.newGuides != rhs.newGuides {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_GuideCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GuideCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "storage_id_path"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._storageIDPath == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._storageIDPath, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._storageIDPath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._storageIDPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_GuideCommandArchive, rhs: TSD_GuideCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._storageIDPath != rhs._storageIDPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_DrawableAspectRatioLockedCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DrawableAspectRatioLockedCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "aspect_ratio_locked"),
    3: .standard(proto: "was_aspect_ratio_locked"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularBoolField(value: &self._aspectRatioLocked)
      case 3: try decoder.decodeSingularBoolField(value: &self._wasAspectRatioLocked)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._aspectRatioLocked {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._wasAspectRatioLocked {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_DrawableAspectRatioLockedCommandArchive, rhs: TSD_DrawableAspectRatioLockedCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._aspectRatioLocked != rhs._aspectRatioLocked {return false}
    if lhs._wasAspectRatioLocked != rhs._wasAspectRatioLocked {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_DrawableAccessibilityDescriptionCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DrawableAccessibilityDescriptionCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "accessibility_description"),
    3: .standard(proto: "old_accessibility_description"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularStringField(value: &self._accessibilityDescription)
      case 3: try decoder.decodeSingularStringField(value: &self._oldAccessibilityDescription)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._accessibilityDescription {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._oldAccessibilityDescription {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_DrawableAccessibilityDescriptionCommandArchive, rhs: TSD_DrawableAccessibilityDescriptionCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._accessibilityDescription != rhs._accessibilityDescription {return false}
    if lhs._oldAccessibilityDescription != rhs._oldAccessibilityDescription {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_PasteStyleCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PasteStyleCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "new_style"),
    5: .standard(proto: "rollback_style"),
    4: .standard(proto: "tail_end_on_left"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._newStyle, !v.isInitialized {return false}
    if let v = self._rollbackStyle, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._newStyle)
      case 4: try decoder.decodeSingularBoolField(value: &self._tailEndOnLeft)
      case 5: try decoder.decodeSingularMessageField(value: &self._rollbackStyle)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._newStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._tailEndOnLeft {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._rollbackStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_PasteStyleCommandArchive, rhs: TSD_PasteStyleCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._newStyle != rhs._newStyle {return false}
    if lhs._rollbackStyle != rhs._rollbackStyle {return false}
    if lhs._tailEndOnLeft != rhs._tailEndOnLeft {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ImageInfoAbstractGeometryCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ImageInfoAbstractGeometryCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "new_image_geometry"),
    3: .standard(proto: "old_image_geometry"),
    4: .standard(proto: "new_mask_geometry"),
    5: .standard(proto: "old_mask_geometry"),
    6: .standard(proto: "new_mask_path_source"),
    7: .standard(proto: "old_mask_path_source"),
    8: .standard(proto: "new_image_original_size"),
    9: .standard(proto: "old_image_original_size"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._newImageGeometry, !v.isInitialized {return false}
    if let v = self._oldImageGeometry, !v.isInitialized {return false}
    if let v = self._newMaskGeometry, !v.isInitialized {return false}
    if let v = self._oldMaskGeometry, !v.isInitialized {return false}
    if let v = self._newMaskPathSource, !v.isInitialized {return false}
    if let v = self._oldMaskPathSource, !v.isInitialized {return false}
    if let v = self._newImageOriginalSize, !v.isInitialized {return false}
    if let v = self._oldImageOriginalSize, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._newImageGeometry)
      case 3: try decoder.decodeSingularMessageField(value: &self._oldImageGeometry)
      case 4: try decoder.decodeSingularMessageField(value: &self._newMaskGeometry)
      case 5: try decoder.decodeSingularMessageField(value: &self._oldMaskGeometry)
      case 6: try decoder.decodeSingularMessageField(value: &self._newMaskPathSource)
      case 7: try decoder.decodeSingularMessageField(value: &self._oldMaskPathSource)
      case 8: try decoder.decodeSingularMessageField(value: &self._newImageOriginalSize)
      case 9: try decoder.decodeSingularMessageField(value: &self._oldImageOriginalSize)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._newImageGeometry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._oldImageGeometry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._newMaskGeometry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._oldMaskGeometry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._newMaskPathSource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._oldMaskPathSource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._newImageOriginalSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._oldImageOriginalSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ImageInfoAbstractGeometryCommandArchive, rhs: TSD_ImageInfoAbstractGeometryCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._newImageGeometry != rhs._newImageGeometry {return false}
    if lhs._oldImageGeometry != rhs._oldImageGeometry {return false}
    if lhs._newMaskGeometry != rhs._newMaskGeometry {return false}
    if lhs._oldMaskGeometry != rhs._oldMaskGeometry {return false}
    if lhs._newMaskPathSource != rhs._newMaskPathSource {return false}
    if lhs._oldMaskPathSource != rhs._oldMaskPathSource {return false}
    if lhs._newImageOriginalSize != rhs._newImageOriginalSize {return false}
    if lhs._oldImageOriginalSize != rhs._oldImageOriginalSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ImageInfoGeometryCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ImageInfoGeometryCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ImageInfoGeometryCommandArchive, rhs: TSD_ImageInfoGeometryCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ImageInfoMaskGeometryCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ImageInfoMaskGeometryCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ImageInfoMaskGeometryCommandArchive, rhs: TSD_ImageInfoMaskGeometryCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_InfoCollectionSelectionTransformerHelperArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InfoCollectionSelectionTransformerHelperArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "info_uuid_path_list"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.infoUuidPathList) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.infoUuidPathList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.infoUuidPathList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.infoUuidPathList, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_InfoCollectionSelectionTransformerHelperArchive, rhs: TSD_InfoCollectionSelectionTransformerHelperArchive) -> Bool {
    if lhs.infoUuidPathList != rhs.infoUuidPathList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_DrawableSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DrawableSelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transformer_helper"),
    2: .standard(proto: "untransformed_drawable_selection"),
  ]

  public var isInitialized: Bool {
    if self._transformerHelper == nil {return false}
    if self._untransformedDrawableSelection == nil {return false}
    if let v = self._transformerHelper, !v.isInitialized {return false}
    if let v = self._untransformedDrawableSelection, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._transformerHelper)
      case 2: try decoder.decodeSingularMessageField(value: &self._untransformedDrawableSelection)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._transformerHelper {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._untransformedDrawableSelection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_DrawableSelectionTransformerArchive, rhs: TSD_DrawableSelectionTransformerArchive) -> Bool {
    if lhs._transformerHelper != rhs._transformerHelper {return false}
    if lhs._untransformedDrawableSelection != rhs._untransformedDrawableSelection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_CanvasSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CanvasSelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transformer_helper"),
  ]

  public var isInitialized: Bool {
    if self._transformerHelper == nil {return false}
    if let v = self._transformerHelper, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._transformerHelper)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._transformerHelper {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_CanvasSelectionTransformerArchive, rhs: TSD_CanvasSelectionTransformerArchive) -> Bool {
    if lhs._transformerHelper != rhs._transformerHelper {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_PathSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PathSelectionTransformerArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_PathSelectionTransformerArchive, rhs: TSD_PathSelectionTransformerArchive) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ShapeSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShapeSelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ShapeSelectionTransformerArchive, rhs: TSD_ShapeSelectionTransformerArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_GroupSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupSelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_GroupSelectionTransformerArchive, rhs: TSD_GroupSelectionTransformerArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_PencilAnnotationSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PencilAnnotationSelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pencil_annotation_uuid"),
  ]

  public var isInitialized: Bool {
    if self._pencilAnnotationUuid == nil {return false}
    if let v = self._pencilAnnotationUuid, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._pencilAnnotationUuid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._pencilAnnotationUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_PencilAnnotationSelectionTransformerArchive, rhs: TSD_PencilAnnotationSelectionTransformerArchive) -> Bool {
    if lhs._pencilAnnotationUuid != rhs._pencilAnnotationUuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_FreehandDrawingOpacityCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FreehandDrawingOpacityCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "opacity"),
    3: .standard(proto: "old_opacity"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularDoubleField(value: &self._opacity)
      case 3: try decoder.decodeSingularDoubleField(value: &self._oldOpacity)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._opacity {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    if let v = self._oldOpacity {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_FreehandDrawingOpacityCommandArchive, rhs: TSD_FreehandDrawingOpacityCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._opacity != rhs._opacity {return false}
    if lhs._oldOpacity != rhs._oldOpacity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_FreehandDrawingAnimationCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FreehandDrawingAnimationCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "animation"),
    3: .standard(proto: "old_animation"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._animation)
      case 3: try decoder.decodeSingularMessageField(value: &self._oldAnimation)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._animation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._oldAnimation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_FreehandDrawingAnimationCommandArchive, rhs: TSD_FreehandDrawingAnimationCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._animation != rhs._animation {return false}
    if lhs._oldAnimation != rhs._oldAnimation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
