// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TSCHCommandArchives.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum TSCH_StyleOwnerType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case chartInfo // = 1
  case legendModel // = 2
  case chartAxis // = 3
  case chartSeries // = 4
  case referenceLine // = 5

  init() {
    self = .chartInfo
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .chartInfo
    case 2: self = .legendModel
    case 3: self = .chartAxis
    case 4: self = .chartSeries
    case 5: self = .referenceLine
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .chartInfo: return 1
    case .legendModel: return 2
    case .chartAxis: return 3
    case .chartSeries: return 4
    case .referenceLine: return 5
    }
  }

}

#if swift(>=4.2)

extension TSCH_StyleOwnerType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum TSCH_StyleSwapType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case chartStyle // = 1
  case chartNonStyle // = 2
  case legendStyle // = 3
  case legendNonStyle // = 4
  case valueAxisStyle // = 5
  case valueAxisNonStyle // = 6
  case categoryAxisStyle // = 7
  case categoryAxisNonStyle // = 8
  case seriesThemeStyle // = 9
  case seriesPrivateStyle // = 10
  case seriesNonStyle // = 11
  case paragraphStyle // = 12
  case referenceLineStyle // = 13
  case referenceLineNonStyle // = 14
  case referenceLineThemeStyle // = 15

  init() {
    self = .chartStyle
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .chartStyle
    case 2: self = .chartNonStyle
    case 3: self = .legendStyle
    case 4: self = .legendNonStyle
    case 5: self = .valueAxisStyle
    case 6: self = .valueAxisNonStyle
    case 7: self = .categoryAxisStyle
    case 8: self = .categoryAxisNonStyle
    case 9: self = .seriesThemeStyle
    case 10: self = .seriesPrivateStyle
    case 11: self = .seriesNonStyle
    case 12: self = .paragraphStyle
    case 13: self = .referenceLineStyle
    case 14: self = .referenceLineNonStyle
    case 15: self = .referenceLineThemeStyle
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .chartStyle: return 1
    case .chartNonStyle: return 2
    case .legendStyle: return 3
    case .legendNonStyle: return 4
    case .valueAxisStyle: return 5
    case .valueAxisNonStyle: return 6
    case .categoryAxisStyle: return 7
    case .categoryAxisNonStyle: return 8
    case .seriesThemeStyle: return 9
    case .seriesPrivateStyle: return 10
    case .seriesNonStyle: return 11
    case .paragraphStyle: return 12
    case .referenceLineStyle: return 13
    case .referenceLineNonStyle: return 14
    case .referenceLineThemeStyle: return 15
    }
  }

}

#if swift(>=4.2)

extension TSCH_StyleSwapType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum TSCH_ApplyPresetBehavior: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case removeOverrides // = 1
  case preserveOverrides // = 2
  case preserveAppearance // = 3

  init() {
    self = .removeOverrides
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .removeOverrides
    case 2: self = .preserveOverrides
    case 3: self = .preserveAppearance
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .removeOverrides: return 1
    case .preserveOverrides: return 2
    case .preserveAppearance: return 3
    }
  }

}

#if swift(>=4.2)

extension TSCH_ApplyPresetBehavior: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSCH_StyleOwnerPath {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuids: [TSP_UUID] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSCH_CommandSetChartTypeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var newChartType: TSCH_ChartType {
    get {return _newChartType ?? .undefinedChartType}
    set {_newChartType = newValue}
  }
  /// Returns true if `newChartType` has been explicitly set.
  var hasNewChartType: Bool {return self._newChartType != nil}
  /// Clears the value of `newChartType`. Subsequent reads from it will return its default value.
  mutating func clearNewChartType() {self._newChartType = nil}

  var oldChartType: TSCH_ChartType {
    get {return _oldChartType ?? .undefinedChartType}
    set {_oldChartType = newValue}
  }
  /// Returns true if `oldChartType` has been explicitly set.
  var hasOldChartType: Bool {return self._oldChartType != nil}
  /// Clears the value of `oldChartType`. Subsequent reads from it will return its default value.
  mutating func clearOldChartType() {self._oldChartType = nil}

  var rollbackChartType: TSCH_ChartType {
    get {return _rollbackChartType ?? .undefinedChartType}
    set {_rollbackChartType = newValue}
  }
  /// Returns true if `rollbackChartType` has been explicitly set.
  var hasRollbackChartType: Bool {return self._rollbackChartType != nil}
  /// Clears the value of `rollbackChartType`. Subsequent reads from it will return its default value.
  mutating func clearRollbackChartType() {self._rollbackChartType = nil}

  var rowIds: [TSP_UUID] = []

  var columnIds: [TSP_UUID] = []

  var oldRowIds: [TSP_UUID] = []

  var oldColumnIds: [TSP_UUID] = []

  var rollbackRowIds: [TSP_UUID] = []

  var rollbackColumnIds: [TSP_UUID] = []

  var usesCapturedData: Bool {
    get {return _usesCapturedData ?? false}
    set {_usesCapturedData = newValue}
  }
  /// Returns true if `usesCapturedData` has been explicitly set.
  var hasUsesCapturedData: Bool {return self._usesCapturedData != nil}
  /// Clears the value of `usesCapturedData`. Subsequent reads from it will return its default value.
  mutating func clearUsesCapturedData() {self._usesCapturedData = nil}

  var useDefaultData: Bool {
    get {return _useDefaultData ?? false}
    set {_useDefaultData = newValue}
  }
  /// Returns true if `useDefaultData` has been explicitly set.
  var hasUseDefaultData: Bool {return self._useDefaultData != nil}
  /// Clears the value of `useDefaultData`. Subsequent reads from it will return its default value.
  mutating func clearUseDefaultData() {self._useDefaultData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _newChartType: TSCH_ChartType? = nil
  fileprivate var _oldChartType: TSCH_ChartType? = nil
  fileprivate var _rollbackChartType: TSCH_ChartType? = nil
  fileprivate var _usesCapturedData: Bool? = nil
  fileprivate var _useDefaultData: Bool? = nil
}

struct TSCH_StyleSwapUndoTupleArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chartInfo: TSP_Reference {
    get {return _chartInfo ?? TSP_Reference()}
    set {_chartInfo = newValue}
  }
  /// Returns true if `chartInfo` has been explicitly set.
  var hasChartInfo: Bool {return self._chartInfo != nil}
  /// Clears the value of `chartInfo`. Subsequent reads from it will return its default value.
  mutating func clearChartInfo() {self._chartInfo = nil}

  var swapType: TSCH_StyleSwapType {
    get {return _swapType ?? .chartStyle}
    set {_swapType = newValue}
  }
  /// Returns true if `swapType` has been explicitly set.
  var hasSwapType: Bool {return self._swapType != nil}
  /// Clears the value of `swapType`. Subsequent reads from it will return its default value.
  mutating func clearSwapType() {self._swapType = nil}

  var index: UInt32 {
    get {return _index ?? 0}
    set {_index = newValue}
  }
  /// Returns true if `index` has been explicitly set.
  var hasIndex: Bool {return self._index != nil}
  /// Clears the value of `index`. Subsequent reads from it will return its default value.
  mutating func clearIndex() {self._index = nil}

  var oldValue: TSP_Reference {
    get {return _oldValue ?? TSP_Reference()}
    set {_oldValue = newValue}
  }
  /// Returns true if `oldValue` has been explicitly set.
  var hasOldValue: Bool {return self._oldValue != nil}
  /// Clears the value of `oldValue`. Subsequent reads from it will return its default value.
  mutating func clearOldValue() {self._oldValue = nil}

  var newValue: TSP_Reference {
    get {return _newValue ?? TSP_Reference()}
    set {_newValue = newValue}
  }
  /// Returns true if `newValue` has been explicitly set.
  var hasNewValue: Bool {return self._newValue != nil}
  /// Clears the value of `newValue`. Subsequent reads from it will return its default value.
  mutating func clearNewValue() {self._newValue = nil}

  var refLineUuid: TSP_UUID {
    get {return _refLineUuid ?? TSP_UUID()}
    set {_refLineUuid = newValue}
  }
  /// Returns true if `refLineUuid` has been explicitly set.
  var hasRefLineUuid: Bool {return self._refLineUuid != nil}
  /// Clears the value of `refLineUuid`. Subsequent reads from it will return its default value.
  mutating func clearRefLineUuid() {self._refLineUuid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _chartInfo: TSP_Reference? = nil
  fileprivate var _swapType: TSCH_StyleSwapType? = nil
  fileprivate var _index: UInt32? = nil
  fileprivate var _oldValue: TSP_Reference? = nil
  fileprivate var _newValue: TSP_Reference? = nil
  fileprivate var _refLineUuid: TSP_UUID? = nil
}

struct TSCH_StyleSwapUndoTuplesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var swapTuples: [TSCH_StyleSwapUndoTupleArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSCH_CommandStyleSwapArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var undoTuples: [TSCH_StyleSwapUndoTupleArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
}

struct TSCH_CommandMutatePropertiesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var rollbackCmd: TSP_Reference {
    get {return _rollbackCmd ?? TSP_Reference()}
    set {_rollbackCmd = newValue}
  }
  /// Returns true if `rollbackCmd` has been explicitly set.
  var hasRollbackCmd: Bool {return self._rollbackCmd != nil}
  /// Clears the value of `rollbackCmd`. Subsequent reads from it will return its default value.
  mutating func clearRollbackCmd() {self._rollbackCmd = nil}

  var genericPropertyDeltaMaps: [TSCH_CommandMutatePropertiesArchive.GenericPropertyDeltaMap] = []

  var paragraphStyleDeltaMaps: [TSCH_CommandMutatePropertiesArchive.ParagraphStyleDeltaMap] = []

  var initiatedOnWeb: Bool {
    get {return _initiatedOnWeb ?? false}
    set {_initiatedOnWeb = newValue}
  }
  /// Returns true if `initiatedOnWeb` has been explicitly set.
  var hasInitiatedOnWeb: Bool {return self._initiatedOnWeb != nil}
  /// Clears the value of `initiatedOnWeb`. Subsequent reads from it will return its default value.
  mutating func clearInitiatedOnWeb() {self._initiatedOnWeb = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct GenericPropertyDeltaMap {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var styleOwnerPath: TSCH_StyleOwnerPath {
      get {return _styleOwnerPath ?? TSCH_StyleOwnerPath()}
      set {_styleOwnerPath = newValue}
    }
    /// Returns true if `styleOwnerPath` has been explicitly set.
    var hasStyleOwnerPath: Bool {return self._styleOwnerPath != nil}
    /// Clears the value of `styleOwnerPath`. Subsequent reads from it will return its default value.
    mutating func clearStyleOwnerPath() {self._styleOwnerPath = nil}

    var forwardMap: TSCH_CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion {
      get {return _forwardMap ?? TSCH_CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion()}
      set {_forwardMap = newValue}
    }
    /// Returns true if `forwardMap` has been explicitly set.
    var hasForwardMap: Bool {return self._forwardMap != nil}
    /// Clears the value of `forwardMap`. Subsequent reads from it will return its default value.
    mutating func clearForwardMap() {self._forwardMap = nil}

    var reverseMap: TSCH_CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion {
      get {return _reverseMap ?? TSCH_CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion()}
      set {_reverseMap = newValue}
    }
    /// Returns true if `reverseMap` has been explicitly set.
    var hasReverseMap: Bool {return self._reverseMap != nil}
    /// Clears the value of `reverseMap`. Subsequent reads from it will return its default value.
    mutating func clearReverseMap() {self._reverseMap = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct GenericMapUnion {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var chartMap: TSCH_Generated_ChartGenericPropertyMapArchive {
        get {return _chartMap ?? TSCH_Generated_ChartGenericPropertyMapArchive()}
        set {_chartMap = newValue}
      }
      /// Returns true if `chartMap` has been explicitly set.
      var hasChartMap: Bool {return self._chartMap != nil}
      /// Clears the value of `chartMap`. Subsequent reads from it will return its default value.
      mutating func clearChartMap() {self._chartMap = nil}

      var legendMap: TSCH_Generated_LegendGenericPropertyMapArchive {
        get {return _legendMap ?? TSCH_Generated_LegendGenericPropertyMapArchive()}
        set {_legendMap = newValue}
      }
      /// Returns true if `legendMap` has been explicitly set.
      var hasLegendMap: Bool {return self._legendMap != nil}
      /// Clears the value of `legendMap`. Subsequent reads from it will return its default value.
      mutating func clearLegendMap() {self._legendMap = nil}

      var axisMap: TSCH_Generated_ChartAxisGenericPropertyMapArchive {
        get {return _axisMap ?? TSCH_Generated_ChartAxisGenericPropertyMapArchive()}
        set {_axisMap = newValue}
      }
      /// Returns true if `axisMap` has been explicitly set.
      var hasAxisMap: Bool {return self._axisMap != nil}
      /// Clears the value of `axisMap`. Subsequent reads from it will return its default value.
      mutating func clearAxisMap() {self._axisMap = nil}

      var seriesMap: TSCH_Generated_ChartSeriesGenericPropertyMapArchive {
        get {return _seriesMap ?? TSCH_Generated_ChartSeriesGenericPropertyMapArchive()}
        set {_seriesMap = newValue}
      }
      /// Returns true if `seriesMap` has been explicitly set.
      var hasSeriesMap: Bool {return self._seriesMap != nil}
      /// Clears the value of `seriesMap`. Subsequent reads from it will return its default value.
      mutating func clearSeriesMap() {self._seriesMap = nil}

      var referenceLineMap: TSCH_Generated_ReferenceLineGenericPropertyMapArchive {
        get {return _referenceLineMap ?? TSCH_Generated_ReferenceLineGenericPropertyMapArchive()}
        set {_referenceLineMap = newValue}
      }
      /// Returns true if `referenceLineMap` has been explicitly set.
      var hasReferenceLineMap: Bool {return self._referenceLineMap != nil}
      /// Clears the value of `referenceLineMap`. Subsequent reads from it will return its default value.
      mutating func clearReferenceLineMap() {self._referenceLineMap = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _chartMap: TSCH_Generated_ChartGenericPropertyMapArchive? = nil
      fileprivate var _legendMap: TSCH_Generated_LegendGenericPropertyMapArchive? = nil
      fileprivate var _axisMap: TSCH_Generated_ChartAxisGenericPropertyMapArchive? = nil
      fileprivate var _seriesMap: TSCH_Generated_ChartSeriesGenericPropertyMapArchive? = nil
      fileprivate var _referenceLineMap: TSCH_Generated_ReferenceLineGenericPropertyMapArchive? = nil
    }

    init() {}

    fileprivate var _styleOwnerPath: TSCH_StyleOwnerPath? = nil
    fileprivate var _forwardMap: TSCH_CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion? = nil
    fileprivate var _reverseMap: TSCH_CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion? = nil
  }

  struct ParagraphStyleDeltaMap {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var styleOwnerPath: TSCH_StyleOwnerPath {
      get {return _styleOwnerPath ?? TSCH_StyleOwnerPath()}
      set {_styleOwnerPath = newValue}
    }
    /// Returns true if `styleOwnerPath` has been explicitly set.
    var hasStyleOwnerPath: Bool {return self._styleOwnerPath != nil}
    /// Clears the value of `styleOwnerPath`. Subsequent reads from it will return its default value.
    mutating func clearStyleOwnerPath() {self._styleOwnerPath = nil}

    var paragraphStyleIndexProperty: UInt32 {
      get {return _paragraphStyleIndexProperty ?? 0}
      set {_paragraphStyleIndexProperty = newValue}
    }
    /// Returns true if `paragraphStyleIndexProperty` has been explicitly set.
    var hasParagraphStyleIndexProperty: Bool {return self._paragraphStyleIndexProperty != nil}
    /// Clears the value of `paragraphStyleIndexProperty`. Subsequent reads from it will return its default value.
    mutating func clearParagraphStyleIndexProperty() {self._paragraphStyleIndexProperty = nil}

    var forwardMap: TSCH_CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive {
      get {return _forwardMap ?? TSCH_CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive()}
      set {_forwardMap = newValue}
    }
    /// Returns true if `forwardMap` has been explicitly set.
    var hasForwardMap: Bool {return self._forwardMap != nil}
    /// Clears the value of `forwardMap`. Subsequent reads from it will return its default value.
    mutating func clearForwardMap() {self._forwardMap = nil}

    var reverseMap: TSCH_CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive {
      get {return _reverseMap ?? TSCH_CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive()}
      set {_reverseMap = newValue}
    }
    /// Returns true if `reverseMap` has been explicitly set.
    var hasReverseMap: Bool {return self._reverseMap != nil}
    /// Clears the value of `reverseMap`. Subsequent reads from it will return its default value.
    mutating func clearReverseMap() {self._reverseMap = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct ParagraphStylePropertyMapArchive {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var charProperties: TSWP_CharacterStylePropertiesArchive {
        get {return _charProperties ?? TSWP_CharacterStylePropertiesArchive()}
        set {_charProperties = newValue}
      }
      /// Returns true if `charProperties` has been explicitly set.
      var hasCharProperties: Bool {return self._charProperties != nil}
      /// Clears the value of `charProperties`. Subsequent reads from it will return its default value.
      mutating func clearCharProperties() {self._charProperties = nil}

      var paraProperties: TSWP_ParagraphStylePropertiesArchive {
        get {return _paraProperties ?? TSWP_ParagraphStylePropertiesArchive()}
        set {_paraProperties = newValue}
      }
      /// Returns true if `paraProperties` has been explicitly set.
      var hasParaProperties: Bool {return self._paraProperties != nil}
      /// Clears the value of `paraProperties`. Subsequent reads from it will return its default value.
      mutating func clearParaProperties() {self._paraProperties = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _charProperties: TSWP_CharacterStylePropertiesArchive? = nil
      fileprivate var _paraProperties: TSWP_ParagraphStylePropertiesArchive? = nil
    }

    init() {}

    fileprivate var _styleOwnerPath: TSCH_StyleOwnerPath? = nil
    fileprivate var _paragraphStyleIndexProperty: UInt32? = nil
    fileprivate var _forwardMap: TSCH_CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive? = nil
    fileprivate var _reverseMap: TSCH_CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive? = nil
  }

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _rollbackCmd: TSP_Reference? = nil
  fileprivate var _initiatedOnWeb: Bool? = nil
}

struct TSCH_CommandScaleAllTextArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var rollbackCmd: TSP_Reference {
    get {return _rollbackCmd ?? TSP_Reference()}
    set {_rollbackCmd = newValue}
  }
  /// Returns true if `rollbackCmd` has been explicitly set.
  var hasRollbackCmd: Bool {return self._rollbackCmd != nil}
  /// Clears the value of `rollbackCmd`. Subsequent reads from it will return its default value.
  mutating func clearRollbackCmd() {self._rollbackCmd = nil}

  var scaleFactor: Double {
    get {return _scaleFactor ?? 0}
    set {_scaleFactor = newValue}
  }
  /// Returns true if `scaleFactor` has been explicitly set.
  var hasScaleFactor: Bool {return self._scaleFactor != nil}
  /// Clears the value of `scaleFactor`. Subsequent reads from it will return its default value.
  mutating func clearScaleFactor() {self._scaleFactor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _rollbackCmd: TSP_Reference? = nil
  fileprivate var _scaleFactor: Double? = nil
}

struct TSCH_CommandSetFontFamilyArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var rollbackCmd: TSP_Reference {
    get {return _rollbackCmd ?? TSP_Reference()}
    set {_rollbackCmd = newValue}
  }
  /// Returns true if `rollbackCmd` has been explicitly set.
  var hasRollbackCmd: Bool {return self._rollbackCmd != nil}
  /// Clears the value of `rollbackCmd`. Subsequent reads from it will return its default value.
  mutating func clearRollbackCmd() {self._rollbackCmd = nil}

  var newFontFamily: String {
    get {return _newFontFamily ?? String()}
    set {_newFontFamily = newValue}
  }
  /// Returns true if `newFontFamily` has been explicitly set.
  var hasNewFontFamily: Bool {return self._newFontFamily != nil}
  /// Clears the value of `newFontFamily`. Subsequent reads from it will return its default value.
  mutating func clearNewFontFamily() {self._newFontFamily = nil}

  var oldFontFamily: String {
    get {return _oldFontFamily ?? String()}
    set {_oldFontFamily = newValue}
  }
  /// Returns true if `oldFontFamily` has been explicitly set.
  var hasOldFontFamily: Bool {return self._oldFontFamily != nil}
  /// Clears the value of `oldFontFamily`. Subsequent reads from it will return its default value.
  mutating func clearOldFontFamily() {self._oldFontFamily = nil}

  var paragraphStyleDeltaMaps: [TSCH_CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap] = []

  var isBold: Bool {
    get {return _isBold ?? false}
    set {_isBold = newValue}
  }
  /// Returns true if `isBold` has been explicitly set.
  var hasIsBold: Bool {return self._isBold != nil}
  /// Clears the value of `isBold`. Subsequent reads from it will return its default value.
  mutating func clearIsBold() {self._isBold = nil}

  var isItalic: Bool {
    get {return _isItalic ?? false}
    set {_isItalic = newValue}
  }
  /// Returns true if `isItalic` has been explicitly set.
  var hasIsItalic: Bool {return self._isItalic != nil}
  /// Clears the value of `isItalic`. Subsequent reads from it will return its default value.
  mutating func clearIsItalic() {self._isItalic = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct StyleSemanticTag {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var swapType: TSCH_StyleSwapType {
      get {return _swapType ?? .chartStyle}
      set {_swapType = newValue}
    }
    /// Returns true if `swapType` has been explicitly set.
    var hasSwapType: Bool {return self._swapType != nil}
    /// Clears the value of `swapType`. Subsequent reads from it will return its default value.
    mutating func clearSwapType() {self._swapType = nil}

    var index: UInt32 {
      get {return _index ?? 0}
      set {_index = newValue}
    }
    /// Returns true if `index` has been explicitly set.
    var hasIndex: Bool {return self._index != nil}
    /// Clears the value of `index`. Subsequent reads from it will return its default value.
    mutating func clearIndex() {self._index = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _swapType: TSCH_StyleSwapType? = nil
    fileprivate var _index: UInt32? = nil
  }

  struct SemanticParagraphStyleMutationMap {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var styleSemanticTag: TSCH_CommandSetFontFamilyArchive.StyleSemanticTag {
      get {return _styleSemanticTag ?? TSCH_CommandSetFontFamilyArchive.StyleSemanticTag()}
      set {_styleSemanticTag = newValue}
    }
    /// Returns true if `styleSemanticTag` has been explicitly set.
    var hasStyleSemanticTag: Bool {return self._styleSemanticTag != nil}
    /// Clears the value of `styleSemanticTag`. Subsequent reads from it will return its default value.
    mutating func clearStyleSemanticTag() {self._styleSemanticTag = nil}

    var paragraphStyleIndexProperty: UInt32 {
      get {return _paragraphStyleIndexProperty ?? 0}
      set {_paragraphStyleIndexProperty = newValue}
    }
    /// Returns true if `paragraphStyleIndexProperty` has been explicitly set.
    var hasParagraphStyleIndexProperty: Bool {return self._paragraphStyleIndexProperty != nil}
    /// Clears the value of `paragraphStyleIndexProperty`. Subsequent reads from it will return its default value.
    mutating func clearParagraphStyleIndexProperty() {self._paragraphStyleIndexProperty = nil}

    var forwardMap: TSCH_CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive {
      get {return _forwardMap ?? TSCH_CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive()}
      set {_forwardMap = newValue}
    }
    /// Returns true if `forwardMap` has been explicitly set.
    var hasForwardMap: Bool {return self._forwardMap != nil}
    /// Clears the value of `forwardMap`. Subsequent reads from it will return its default value.
    mutating func clearForwardMap() {self._forwardMap = nil}

    var reverseMap: TSCH_CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive {
      get {return _reverseMap ?? TSCH_CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive()}
      set {_reverseMap = newValue}
    }
    /// Returns true if `reverseMap` has been explicitly set.
    var hasReverseMap: Bool {return self._reverseMap != nil}
    /// Clears the value of `reverseMap`. Subsequent reads from it will return its default value.
    mutating func clearReverseMap() {self._reverseMap = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct ParagraphStylePropertyMapArchive {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var charProperties: TSWP_CharacterStylePropertiesArchive {
        get {return _charProperties ?? TSWP_CharacterStylePropertiesArchive()}
        set {_charProperties = newValue}
      }
      /// Returns true if `charProperties` has been explicitly set.
      var hasCharProperties: Bool {return self._charProperties != nil}
      /// Clears the value of `charProperties`. Subsequent reads from it will return its default value.
      mutating func clearCharProperties() {self._charProperties = nil}

      var paraProperties: TSWP_ParagraphStylePropertiesArchive {
        get {return _paraProperties ?? TSWP_ParagraphStylePropertiesArchive()}
        set {_paraProperties = newValue}
      }
      /// Returns true if `paraProperties` has been explicitly set.
      var hasParaProperties: Bool {return self._paraProperties != nil}
      /// Clears the value of `paraProperties`. Subsequent reads from it will return its default value.
      mutating func clearParaProperties() {self._paraProperties = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _charProperties: TSWP_CharacterStylePropertiesArchive? = nil
      fileprivate var _paraProperties: TSWP_ParagraphStylePropertiesArchive? = nil
    }

    init() {}

    fileprivate var _styleSemanticTag: TSCH_CommandSetFontFamilyArchive.StyleSemanticTag? = nil
    fileprivate var _paragraphStyleIndexProperty: UInt32? = nil
    fileprivate var _forwardMap: TSCH_CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive? = nil
    fileprivate var _reverseMap: TSCH_CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive? = nil
  }

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _rollbackCmd: TSP_Reference? = nil
  fileprivate var _newFontFamily: String? = nil
  fileprivate var _oldFontFamily: String? = nil
  fileprivate var _isBold: Bool? = nil
  fileprivate var _isItalic: Bool? = nil
}

struct TSCH_CommandApplyFillSetArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var chartType: TSCH_ChartType {
    get {return _chartType ?? .undefinedChartType}
    set {_chartType = newValue}
  }
  /// Returns true if `chartType` has been explicitly set.
  var hasChartType: Bool {return self._chartType != nil}
  /// Clears the value of `chartType`. Subsequent reads from it will return its default value.
  mutating func clearChartType() {self._chartType = nil}

  var fillSet: TSCH_ChartFillSetArchive {
    get {return _fillSet ?? TSCH_ChartFillSetArchive()}
    set {_fillSet = newValue}
  }
  /// Returns true if `fillSet` has been explicitly set.
  var hasFillSet: Bool {return self._fillSet != nil}
  /// Clears the value of `fillSet`. Subsequent reads from it will return its default value.
  mutating func clearFillSet() {self._fillSet = nil}

  var oldFillSet: TSCH_ChartFillSetArchive {
    get {return _oldFillSet ?? TSCH_ChartFillSetArchive()}
    set {_oldFillSet = newValue}
  }
  /// Returns true if `oldFillSet` has been explicitly set.
  var hasOldFillSet: Bool {return self._oldFillSet != nil}
  /// Clears the value of `oldFillSet`. Subsequent reads from it will return its default value.
  mutating func clearOldFillSet() {self._oldFillSet = nil}

  var priorLastAppliedFillSetLookupString: String {
    get {return _priorLastAppliedFillSetLookupString ?? String()}
    set {_priorLastAppliedFillSetLookupString = newValue}
  }
  /// Returns true if `priorLastAppliedFillSetLookupString` has been explicitly set.
  var hasPriorLastAppliedFillSetLookupString: Bool {return self._priorLastAppliedFillSetLookupString != nil}
  /// Clears the value of `priorLastAppliedFillSetLookupString`. Subsequent reads from it will return its default value.
  mutating func clearPriorLastAppliedFillSetLookupString() {self._priorLastAppliedFillSetLookupString = nil}

  var rollbackCmd: TSP_Reference {
    get {return _rollbackCmd ?? TSP_Reference()}
    set {_rollbackCmd = newValue}
  }
  /// Returns true if `rollbackCmd` has been explicitly set.
  var hasRollbackCmd: Bool {return self._rollbackCmd != nil}
  /// Clears the value of `rollbackCmd`. Subsequent reads from it will return its default value.
  mutating func clearRollbackCmd() {self._rollbackCmd = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _chartType: TSCH_ChartType? = nil
  fileprivate var _fillSet: TSCH_ChartFillSetArchive? = nil
  fileprivate var _oldFillSet: TSCH_ChartFillSetArchive? = nil
  fileprivate var _priorLastAppliedFillSetLookupString: String? = nil
  fileprivate var _rollbackCmd: TSP_Reference? = nil
}

struct TSCH_CommandSetSeriesNameArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var seriesIndex: UInt32 {
    get {return _seriesIndex ?? 0}
    set {_seriesIndex = newValue}
  }
  /// Returns true if `seriesIndex` has been explicitly set.
  var hasSeriesIndex: Bool {return self._seriesIndex != nil}
  /// Clears the value of `seriesIndex`. Subsequent reads from it will return its default value.
  mutating func clearSeriesIndex() {self._seriesIndex = nil}

  var oldName: String {
    get {return _oldName ?? String()}
    set {_oldName = newValue}
  }
  /// Returns true if `oldName` has been explicitly set.
  var hasOldName: Bool {return self._oldName != nil}
  /// Clears the value of `oldName`. Subsequent reads from it will return its default value.
  mutating func clearOldName() {self._oldName = nil}

  var newName: String {
    get {return _newName ?? String()}
    set {_newName = newValue}
  }
  /// Returns true if `newName` has been explicitly set.
  var hasNewName: Bool {return self._newName != nil}
  /// Clears the value of `newName`. Subsequent reads from it will return its default value.
  mutating func clearNewName() {self._newName = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _seriesIndex: UInt32? = nil
  fileprivate var _oldName: String? = nil
  fileprivate var _newName: String? = nil
}

struct TSCH_CommandSetCategoryNameArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var categoryIndex: UInt32 {
    get {return _categoryIndex ?? 0}
    set {_categoryIndex = newValue}
  }
  /// Returns true if `categoryIndex` has been explicitly set.
  var hasCategoryIndex: Bool {return self._categoryIndex != nil}
  /// Clears the value of `categoryIndex`. Subsequent reads from it will return its default value.
  mutating func clearCategoryIndex() {self._categoryIndex = nil}

  var oldName: String {
    get {return _oldName ?? String()}
    set {_oldName = newValue}
  }
  /// Returns true if `oldName` has been explicitly set.
  var hasOldName: Bool {return self._oldName != nil}
  /// Clears the value of `oldName`. Subsequent reads from it will return its default value.
  mutating func clearOldName() {self._oldName = nil}

  var newName: String {
    get {return _newName ?? String()}
    set {_newName = newValue}
  }
  /// Returns true if `newName` has been explicitly set.
  var hasNewName: Bool {return self._newName != nil}
  /// Clears the value of `newName`. Subsequent reads from it will return its default value.
  mutating func clearNewName() {self._newName = nil}

  var isMultiDataIndex: Bool {
    get {return _isMultiDataIndex ?? false}
    set {_isMultiDataIndex = newValue}
  }
  /// Returns true if `isMultiDataIndex` has been explicitly set.
  var hasIsMultiDataIndex: Bool {return self._isMultiDataIndex != nil}
  /// Clears the value of `isMultiDataIndex`. Subsequent reads from it will return its default value.
  mutating func clearIsMultiDataIndex() {self._isMultiDataIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _categoryIndex: UInt32? = nil
  fileprivate var _oldName: String? = nil
  fileprivate var _newName: String? = nil
  fileprivate var _isMultiDataIndex: Bool? = nil
}

struct TSCH_CommandAddGridRowsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var rowID: TSP_UUID {
    get {return _rowID ?? TSP_UUID()}
    set {_rowID = newValue}
  }
  /// Returns true if `rowID` has been explicitly set.
  var hasRowID: Bool {return self._rowID != nil}
  /// Clears the value of `rowID`. Subsequent reads from it will return its default value.
  mutating func clearRowID() {self._rowID = nil}

  var rowIDList: [TSP_UUID] = []

  var rowNameList: [String] = []

  var undoDeletionStartID: TSP_UUID {
    get {return _undoDeletionStartID ?? TSP_UUID()}
    set {_undoDeletionStartID = newValue}
  }
  /// Returns true if `undoDeletionStartID` has been explicitly set.
  var hasUndoDeletionStartID: Bool {return self._undoDeletionStartID != nil}
  /// Clears the value of `undoDeletionStartID`. Subsequent reads from it will return its default value.
  mutating func clearUndoDeletionStartID() {self._undoDeletionStartID = nil}

  var undoDeletionEndID: TSP_UUID {
    get {return _undoDeletionEndID ?? TSP_UUID()}
    set {_undoDeletionEndID = newValue}
  }
  /// Returns true if `undoDeletionEndID` has been explicitly set.
  var hasUndoDeletionEndID: Bool {return self._undoDeletionEndID != nil}
  /// Clears the value of `undoDeletionEndID`. Subsequent reads from it will return its default value.
  mutating func clearUndoDeletionEndID() {self._undoDeletionEndID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _rowID: TSP_UUID? = nil
  fileprivate var _undoDeletionStartID: TSP_UUID? = nil
  fileprivate var _undoDeletionEndID: TSP_UUID? = nil
}

struct TSCH_CommandAddGridColumnsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var columnID: TSP_UUID {
    get {return _columnID ?? TSP_UUID()}
    set {_columnID = newValue}
  }
  /// Returns true if `columnID` has been explicitly set.
  var hasColumnID: Bool {return self._columnID != nil}
  /// Clears the value of `columnID`. Subsequent reads from it will return its default value.
  mutating func clearColumnID() {self._columnID = nil}

  var columnIDList: [TSP_UUID] = []

  var columnNameList: [String] = []

  var undoDeletionStartID: TSP_UUID {
    get {return _undoDeletionStartID ?? TSP_UUID()}
    set {_undoDeletionStartID = newValue}
  }
  /// Returns true if `undoDeletionStartID` has been explicitly set.
  var hasUndoDeletionStartID: Bool {return self._undoDeletionStartID != nil}
  /// Clears the value of `undoDeletionStartID`. Subsequent reads from it will return its default value.
  mutating func clearUndoDeletionStartID() {self._undoDeletionStartID = nil}

  var undoDeletionEndID: TSP_UUID {
    get {return _undoDeletionEndID ?? TSP_UUID()}
    set {_undoDeletionEndID = newValue}
  }
  /// Returns true if `undoDeletionEndID` has been explicitly set.
  var hasUndoDeletionEndID: Bool {return self._undoDeletionEndID != nil}
  /// Clears the value of `undoDeletionEndID`. Subsequent reads from it will return its default value.
  mutating func clearUndoDeletionEndID() {self._undoDeletionEndID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _columnID: TSP_UUID? = nil
  fileprivate var _undoDeletionStartID: TSP_UUID? = nil
  fileprivate var _undoDeletionEndID: TSP_UUID? = nil
}

struct TSCH_CommandMoveGridRowsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var startRowID: TSP_UUID {
    get {return _startRowID ?? TSP_UUID()}
    set {_startRowID = newValue}
  }
  /// Returns true if `startRowID` has been explicitly set.
  var hasStartRowID: Bool {return self._startRowID != nil}
  /// Clears the value of `startRowID`. Subsequent reads from it will return its default value.
  mutating func clearStartRowID() {self._startRowID = nil}

  var endRowID: TSP_UUID {
    get {return _endRowID ?? TSP_UUID()}
    set {_endRowID = newValue}
  }
  /// Returns true if `endRowID` has been explicitly set.
  var hasEndRowID: Bool {return self._endRowID != nil}
  /// Clears the value of `endRowID`. Subsequent reads from it will return its default value.
  mutating func clearEndRowID() {self._endRowID = nil}

  var afterRowID: TSP_UUID {
    get {return _afterRowID ?? TSP_UUID()}
    set {_afterRowID = newValue}
  }
  /// Returns true if `afterRowID` has been explicitly set.
  var hasAfterRowID: Bool {return self._afterRowID != nil}
  /// Clears the value of `afterRowID`. Subsequent reads from it will return its default value.
  mutating func clearAfterRowID() {self._afterRowID = nil}

  var undoAfterRowID: TSP_UUID {
    get {return _undoAfterRowID ?? TSP_UUID()}
    set {_undoAfterRowID = newValue}
  }
  /// Returns true if `undoAfterRowID` has been explicitly set.
  var hasUndoAfterRowID: Bool {return self._undoAfterRowID != nil}
  /// Clears the value of `undoAfterRowID`. Subsequent reads from it will return its default value.
  mutating func clearUndoAfterRowID() {self._undoAfterRowID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _startRowID: TSP_UUID? = nil
  fileprivate var _endRowID: TSP_UUID? = nil
  fileprivate var _afterRowID: TSP_UUID? = nil
  fileprivate var _undoAfterRowID: TSP_UUID? = nil
}

struct TSCH_CommandMoveGridColumnsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var startColumnID: TSP_UUID {
    get {return _startColumnID ?? TSP_UUID()}
    set {_startColumnID = newValue}
  }
  /// Returns true if `startColumnID` has been explicitly set.
  var hasStartColumnID: Bool {return self._startColumnID != nil}
  /// Clears the value of `startColumnID`. Subsequent reads from it will return its default value.
  mutating func clearStartColumnID() {self._startColumnID = nil}

  var endColumnID: TSP_UUID {
    get {return _endColumnID ?? TSP_UUID()}
    set {_endColumnID = newValue}
  }
  /// Returns true if `endColumnID` has been explicitly set.
  var hasEndColumnID: Bool {return self._endColumnID != nil}
  /// Clears the value of `endColumnID`. Subsequent reads from it will return its default value.
  mutating func clearEndColumnID() {self._endColumnID = nil}

  var afterColumnID: TSP_UUID {
    get {return _afterColumnID ?? TSP_UUID()}
    set {_afterColumnID = newValue}
  }
  /// Returns true if `afterColumnID` has been explicitly set.
  var hasAfterColumnID: Bool {return self._afterColumnID != nil}
  /// Clears the value of `afterColumnID`. Subsequent reads from it will return its default value.
  mutating func clearAfterColumnID() {self._afterColumnID = nil}

  var undoAfterColumnID: TSP_UUID {
    get {return _undoAfterColumnID ?? TSP_UUID()}
    set {_undoAfterColumnID = newValue}
  }
  /// Returns true if `undoAfterColumnID` has been explicitly set.
  var hasUndoAfterColumnID: Bool {return self._undoAfterColumnID != nil}
  /// Clears the value of `undoAfterColumnID`. Subsequent reads from it will return its default value.
  mutating func clearUndoAfterColumnID() {self._undoAfterColumnID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _startColumnID: TSP_UUID? = nil
  fileprivate var _endColumnID: TSP_UUID? = nil
  fileprivate var _afterColumnID: TSP_UUID? = nil
  fileprivate var _undoAfterColumnID: TSP_UUID? = nil
}

struct TSCH_CommandDeleteGridRowsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var startRowID: TSP_UUID {
    get {return _startRowID ?? TSP_UUID()}
    set {_startRowID = newValue}
  }
  /// Returns true if `startRowID` has been explicitly set.
  var hasStartRowID: Bool {return self._startRowID != nil}
  /// Clears the value of `startRowID`. Subsequent reads from it will return its default value.
  mutating func clearStartRowID() {self._startRowID = nil}

  var endRowID: TSP_UUID {
    get {return _endRowID ?? TSP_UUID()}
    set {_endRowID = newValue}
  }
  /// Returns true if `endRowID` has been explicitly set.
  var hasEndRowID: Bool {return self._endRowID != nil}
  /// Clears the value of `endRowID`. Subsequent reads from it will return its default value.
  mutating func clearEndRowID() {self._endRowID = nil}

  var cutRowNames: [String] = []

  var cutValues: [TSCH_GridRow] = []

  var undoDiscardsValues: Bool {
    get {return _undoDiscardsValues ?? false}
    set {_undoDiscardsValues = newValue}
  }
  /// Returns true if `undoDiscardsValues` has been explicitly set.
  var hasUndoDiscardsValues: Bool {return self._undoDiscardsValues != nil}
  /// Clears the value of `undoDiscardsValues`. Subsequent reads from it will return its default value.
  mutating func clearUndoDiscardsValues() {self._undoDiscardsValues = nil}

  var undoColumnInsertionID: TSP_UUID {
    get {return _undoColumnInsertionID ?? TSP_UUID()}
    set {_undoColumnInsertionID = newValue}
  }
  /// Returns true if `undoColumnInsertionID` has been explicitly set.
  var hasUndoColumnInsertionID: Bool {return self._undoColumnInsertionID != nil}
  /// Clears the value of `undoColumnInsertionID`. Subsequent reads from it will return its default value.
  mutating func clearUndoColumnInsertionID() {self._undoColumnInsertionID = nil}

  var undoRowInsertionID: TSP_UUID {
    get {return _undoRowInsertionID ?? TSP_UUID()}
    set {_undoRowInsertionID = newValue}
  }
  /// Returns true if `undoRowInsertionID` has been explicitly set.
  var hasUndoRowInsertionID: Bool {return self._undoRowInsertionID != nil}
  /// Clears the value of `undoRowInsertionID`. Subsequent reads from it will return its default value.
  mutating func clearUndoRowInsertionID() {self._undoRowInsertionID = nil}

  var undoRowIDList: [TSP_UUID] = []

  var cutColumnNames: [String] = []

  var undoColumnIDList: [TSP_UUID] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _startRowID: TSP_UUID? = nil
  fileprivate var _endRowID: TSP_UUID? = nil
  fileprivate var _undoDiscardsValues: Bool? = nil
  fileprivate var _undoColumnInsertionID: TSP_UUID? = nil
  fileprivate var _undoRowInsertionID: TSP_UUID? = nil
}

struct TSCH_CommandDeleteGridColumnsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var startColumnID: TSP_UUID {
    get {return _startColumnID ?? TSP_UUID()}
    set {_startColumnID = newValue}
  }
  /// Returns true if `startColumnID` has been explicitly set.
  var hasStartColumnID: Bool {return self._startColumnID != nil}
  /// Clears the value of `startColumnID`. Subsequent reads from it will return its default value.
  mutating func clearStartColumnID() {self._startColumnID = nil}

  var endColumnID: TSP_UUID {
    get {return _endColumnID ?? TSP_UUID()}
    set {_endColumnID = newValue}
  }
  /// Returns true if `endColumnID` has been explicitly set.
  var hasEndColumnID: Bool {return self._endColumnID != nil}
  /// Clears the value of `endColumnID`. Subsequent reads from it will return its default value.
  mutating func clearEndColumnID() {self._endColumnID = nil}

  var cutNames: [String] = []

  var cutValues: [TSCH_GridRow] = []

  var undoDiscardsValues: Bool {
    get {return _undoDiscardsValues ?? false}
    set {_undoDiscardsValues = newValue}
  }
  /// Returns true if `undoDiscardsValues` has been explicitly set.
  var hasUndoDiscardsValues: Bool {return self._undoDiscardsValues != nil}
  /// Clears the value of `undoDiscardsValues`. Subsequent reads from it will return its default value.
  mutating func clearUndoDiscardsValues() {self._undoDiscardsValues = nil}

  var undoColumnInsertionID: TSP_UUID {
    get {return _undoColumnInsertionID ?? TSP_UUID()}
    set {_undoColumnInsertionID = newValue}
  }
  /// Returns true if `undoColumnInsertionID` has been explicitly set.
  var hasUndoColumnInsertionID: Bool {return self._undoColumnInsertionID != nil}
  /// Clears the value of `undoColumnInsertionID`. Subsequent reads from it will return its default value.
  mutating func clearUndoColumnInsertionID() {self._undoColumnInsertionID = nil}

  var undoRowInsertionID: TSP_UUID {
    get {return _undoRowInsertionID ?? TSP_UUID()}
    set {_undoRowInsertionID = newValue}
  }
  /// Returns true if `undoRowInsertionID` has been explicitly set.
  var hasUndoRowInsertionID: Bool {return self._undoRowInsertionID != nil}
  /// Clears the value of `undoRowInsertionID`. Subsequent reads from it will return its default value.
  mutating func clearUndoRowInsertionID() {self._undoRowInsertionID = nil}

  var undoColumnIDList: [TSP_UUID] = []

  var cutRowNames: [String] = []

  var undoRowIDList: [TSP_UUID] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _startColumnID: TSP_UUID? = nil
  fileprivate var _endColumnID: TSP_UUID? = nil
  fileprivate var _undoDiscardsValues: Bool? = nil
  fileprivate var _undoColumnInsertionID: TSP_UUID? = nil
  fileprivate var _undoRowInsertionID: TSP_UUID? = nil
}

struct TSCH_CommandSetGridValueArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var rowindex: UInt32 {
    get {return _rowindex ?? 0}
    set {_rowindex = newValue}
  }
  /// Returns true if `rowindex` has been explicitly set.
  var hasRowindex: Bool {return self._rowindex != nil}
  /// Clears the value of `rowindex`. Subsequent reads from it will return its default value.
  mutating func clearRowindex() {self._rowindex = nil}

  var columnindex: UInt32 {
    get {return _columnindex ?? 0}
    set {_columnindex = newValue}
  }
  /// Returns true if `columnindex` has been explicitly set.
  var hasColumnindex: Bool {return self._columnindex != nil}
  /// Clears the value of `columnindex`. Subsequent reads from it will return its default value.
  mutating func clearColumnindex() {self._columnindex = nil}

  var oldvalue: Double {
    get {return _oldvalue ?? 0}
    set {_oldvalue = newValue}
  }
  /// Returns true if `oldvalue` has been explicitly set.
  var hasOldvalue: Bool {return self._oldvalue != nil}
  /// Clears the value of `oldvalue`. Subsequent reads from it will return its default value.
  mutating func clearOldvalue() {self._oldvalue = nil}

  var newvalue: Double {
    get {return _newvalue ?? 0}
    set {_newvalue = newValue}
  }
  /// Returns true if `newvalue` has been explicitly set.
  var hasNewvalue: Bool {return self._newvalue != nil}
  /// Clears the value of `newvalue`. Subsequent reads from it will return its default value.
  mutating func clearNewvalue() {self._newvalue = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _rowindex: UInt32? = nil
  fileprivate var _columnindex: UInt32? = nil
  fileprivate var _oldvalue: Double? = nil
  fileprivate var _newvalue: Double? = nil
}

struct TSCH_CommandSetGridDirectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldDirection: UInt32 {
    get {return _oldDirection ?? 0}
    set {_oldDirection = newValue}
  }
  /// Returns true if `oldDirection` has been explicitly set.
  var hasOldDirection: Bool {return self._oldDirection != nil}
  /// Clears the value of `oldDirection`. Subsequent reads from it will return its default value.
  mutating func clearOldDirection() {self._oldDirection = nil}

  var newDirection: UInt32 {
    get {return _newDirection ?? 0}
    set {_newDirection = newValue}
  }
  /// Returns true if `newDirection` has been explicitly set.
  var hasNewDirection: Bool {return self._newDirection != nil}
  /// Clears the value of `newDirection`. Subsequent reads from it will return its default value.
  mutating func clearNewDirection() {self._newDirection = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _oldDirection: UInt32? = nil
  fileprivate var _newDirection: UInt32? = nil
}

struct TSCH_CommandSetSeriesTypeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var seriesindex: UInt32 {
    get {return _seriesindex ?? 0}
    set {_seriesindex = newValue}
  }
  /// Returns true if `seriesindex` has been explicitly set.
  var hasSeriesindex: Bool {return self._seriesindex != nil}
  /// Clears the value of `seriesindex`. Subsequent reads from it will return its default value.
  mutating func clearSeriesindex() {self._seriesindex = nil}

  var oldtype: UInt32 {
    get {return _oldtype ?? 0}
    set {_oldtype = newValue}
  }
  /// Returns true if `oldtype` has been explicitly set.
  var hasOldtype: Bool {return self._oldtype != nil}
  /// Clears the value of `oldtype`. Subsequent reads from it will return its default value.
  mutating func clearOldtype() {self._oldtype = nil}

  var newtype: UInt32 {
    get {return _newtype ?? 0}
    set {_newtype = newValue}
  }
  /// Returns true if `newtype` has been explicitly set.
  var hasNewtype: Bool {return self._newtype != nil}
  /// Clears the value of `newtype`. Subsequent reads from it will return its default value.
  mutating func clearNewtype() {self._newtype = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _seriesindex: UInt32? = nil
  fileprivate var _oldtype: UInt32? = nil
  fileprivate var _newtype: UInt32? = nil
}

struct TSCH_CommandSetScatterFormatArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldformat: UInt32 {
    get {return _oldformat ?? 0}
    set {_oldformat = newValue}
  }
  /// Returns true if `oldformat` has been explicitly set.
  var hasOldformat: Bool {return self._oldformat != nil}
  /// Clears the value of `oldformat`. Subsequent reads from it will return its default value.
  mutating func clearOldformat() {self._oldformat = nil}

  var newformat: UInt32 {
    get {return _newformat ?? 0}
    set {_newformat = newValue}
  }
  /// Returns true if `newformat` has been explicitly set.
  var hasNewformat: Bool {return self._newformat != nil}
  /// Clears the value of `newformat`. Subsequent reads from it will return its default value.
  mutating func clearNewformat() {self._newformat = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _oldformat: UInt32? = nil
  fileprivate var _newformat: UInt32? = nil
}

struct TSCH_CommandSetMultiDataSetIndexArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldindex: UInt32 {
    get {return _oldindex ?? 0}
    set {_oldindex = newValue}
  }
  /// Returns true if `oldindex` has been explicitly set.
  var hasOldindex: Bool {return self._oldindex != nil}
  /// Clears the value of `oldindex`. Subsequent reads from it will return its default value.
  mutating func clearOldindex() {self._oldindex = nil}

  var newindex: UInt32 {
    get {return _newindex ?? 0}
    set {_newindex = newValue}
  }
  /// Returns true if `newindex` has been explicitly set.
  var hasNewindex: Bool {return self._newindex != nil}
  /// Clears the value of `newindex`. Subsequent reads from it will return its default value.
  mutating func clearNewindex() {self._newindex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _oldindex: UInt32? = nil
  fileprivate var _newindex: UInt32? = nil
}

struct TSCH_CommandSetLegendFrameArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldLegendFrame: TSCH_RectArchive {
    get {return _oldLegendFrame ?? TSCH_RectArchive()}
    set {_oldLegendFrame = newValue}
  }
  /// Returns true if `oldLegendFrame` has been explicitly set.
  var hasOldLegendFrame: Bool {return self._oldLegendFrame != nil}
  /// Clears the value of `oldLegendFrame`. Subsequent reads from it will return its default value.
  mutating func clearOldLegendFrame() {self._oldLegendFrame = nil}

  var newLegendFrame: TSCH_RectArchive {
    get {return _newLegendFrame ?? TSCH_RectArchive()}
    set {_newLegendFrame = newValue}
  }
  /// Returns true if `newLegendFrame` has been explicitly set.
  var hasNewLegendFrame: Bool {return self._newLegendFrame != nil}
  /// Clears the value of `newLegendFrame`. Subsequent reads from it will return its default value.
  mutating func clearNewLegendFrame() {self._newLegendFrame = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _oldLegendFrame: TSCH_RectArchive? = nil
  fileprivate var _newLegendFrame: TSCH_RectArchive? = nil
}

struct TSCH_CommandSetPieWedgeExplosion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var seriesIndices: [UInt32] = []

  var wedgeExplosions: [Double] = []

  var oldSeriesIndices: [UInt32] = []

  var oldWedgeExplosions: [Double] = []

  var rollbackCmd: TSP_Reference {
    get {return _rollbackCmd ?? TSP_Reference()}
    set {_rollbackCmd = newValue}
  }
  /// Returns true if `rollbackCmd` has been explicitly set.
  var hasRollbackCmd: Bool {return self._rollbackCmd != nil}
  /// Clears the value of `rollbackCmd`. Subsequent reads from it will return its default value.
  mutating func clearRollbackCmd() {self._rollbackCmd = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _rollbackCmd: TSP_Reference? = nil
}

struct TSCH_CommandChartApplyTheme {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSS_ApplyThemeChildCommandArchive {
    get {return _super ?? TSS_ApplyThemeChildCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var info: TSP_Reference {
    get {return _info ?? TSP_Reference()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {self._info = nil}

  var swapCommand: TSP_Reference {
    get {return _swapCommand ?? TSP_Reference()}
    set {_swapCommand = newValue}
  }
  /// Returns true if `swapCommand` has been explicitly set.
  var hasSwapCommand: Bool {return self._swapCommand != nil}
  /// Clears the value of `swapCommand`. Subsequent reads from it will return its default value.
  mutating func clearSwapCommand() {self._swapCommand = nil}

  var preset: TSP_Reference {
    get {return _preset ?? TSP_Reference()}
    set {_preset = newValue}
  }
  /// Returns true if `preset` has been explicitly set.
  var hasPreset: Bool {return self._preset != nil}
  /// Clears the value of `preset`. Subsequent reads from it will return its default value.
  mutating func clearPreset() {self._preset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSS_ApplyThemeChildCommandArchive? = nil
  fileprivate var _info: TSP_Reference? = nil
  fileprivate var _swapCommand: TSP_Reference? = nil
  fileprivate var _preset: TSP_Reference? = nil
}

struct TSCH_CommandChartApplyPreset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var behavior: TSCH_ApplyPresetBehavior {
    get {return _behavior ?? .removeOverrides}
    set {_behavior = newValue}
  }
  /// Returns true if `behavior` has been explicitly set.
  var hasBehavior: Bool {return self._behavior != nil}
  /// Clears the value of `behavior`. Subsequent reads from it will return its default value.
  mutating func clearBehavior() {self._behavior = nil}

  var preset: TSP_Reference {
    get {return _preset ?? TSP_Reference()}
    set {_preset = newValue}
  }
  /// Returns true if `preset` has been explicitly set.
  var hasPreset: Bool {return self._preset != nil}
  /// Clears the value of `preset`. Subsequent reads from it will return its default value.
  mutating func clearPreset() {self._preset = nil}

  var oldPreset: TSP_Reference {
    get {return _oldPreset ?? TSP_Reference()}
    set {_oldPreset = newValue}
  }
  /// Returns true if `oldPreset` has been explicitly set.
  var hasOldPreset: Bool {return self._oldPreset != nil}
  /// Clears the value of `oldPreset`. Subsequent reads from it will return its default value.
  mutating func clearOldPreset() {self._oldPreset = nil}

  var shouldApplySwapTuples: Bool {
    get {return _shouldApplySwapTuples ?? false}
    set {_shouldApplySwapTuples = newValue}
  }
  /// Returns true if `shouldApplySwapTuples` has been explicitly set.
  var hasShouldApplySwapTuples: Bool {return self._shouldApplySwapTuples != nil}
  /// Clears the value of `shouldApplySwapTuples`. Subsequent reads from it will return its default value.
  mutating func clearShouldApplySwapTuples() {self._shouldApplySwapTuples = nil}

  var areSwapTuplesValid: Bool {
    get {return _areSwapTuplesValid ?? false}
    set {_areSwapTuplesValid = newValue}
  }
  /// Returns true if `areSwapTuplesValid` has been explicitly set.
  var hasAreSwapTuplesValid: Bool {return self._areSwapTuplesValid != nil}
  /// Clears the value of `areSwapTuplesValid`. Subsequent reads from it will return its default value.
  mutating func clearAreSwapTuplesValid() {self._areSwapTuplesValid = nil}

  var swapTuples: [TSCH_StyleSwapUndoTupleArchive] = []

  var inverseSwapTuples: [TSCH_StyleSwapUndoTupleArchive] = []

  var rollbackPreset: TSP_Reference {
    get {return _rollbackPreset ?? TSP_Reference()}
    set {_rollbackPreset = newValue}
  }
  /// Returns true if `rollbackPreset` has been explicitly set.
  var hasRollbackPreset: Bool {return self._rollbackPreset != nil}
  /// Clears the value of `rollbackPreset`. Subsequent reads from it will return its default value.
  mutating func clearRollbackPreset() {self._rollbackPreset = nil}

  var rollbackSwapTuples: [TSCH_StyleSwapUndoTupleArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _behavior: TSCH_ApplyPresetBehavior? = nil
  fileprivate var _preset: TSP_Reference? = nil
  fileprivate var _oldPreset: TSP_Reference? = nil
  fileprivate var _shouldApplySwapTuples: Bool? = nil
  fileprivate var _areSwapTuplesValid: Bool? = nil
  fileprivate var _rollbackPreset: TSP_Reference? = nil
}

struct TSCH_CommandCleanupGeometryArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var infoGeometryCommand: TSP_Reference {
    get {return _infoGeometryCommand ?? TSP_Reference()}
    set {_infoGeometryCommand = newValue}
  }
  /// Returns true if `infoGeometryCommand` has been explicitly set.
  var hasInfoGeometryCommand: Bool {return self._infoGeometryCommand != nil}
  /// Clears the value of `infoGeometryCommand`. Subsequent reads from it will return its default value.
  mutating func clearInfoGeometryCommand() {self._infoGeometryCommand = nil}

  var anchorAttachmentCommand: TSP_Reference {
    get {return _anchorAttachmentCommand ?? TSP_Reference()}
    set {_anchorAttachmentCommand = newValue}
  }
  /// Returns true if `anchorAttachmentCommand` has been explicitly set.
  var hasAnchorAttachmentCommand: Bool {return self._anchorAttachmentCommand != nil}
  /// Clears the value of `anchorAttachmentCommand`. Subsequent reads from it will return its default value.
  mutating func clearAnchorAttachmentCommand() {self._anchorAttachmentCommand = nil}

  var originalLegendRect: TSCH_RectArchive {
    get {return _originalLegendRect ?? TSCH_RectArchive()}
    set {_originalLegendRect = newValue}
  }
  /// Returns true if `originalLegendRect` has been explicitly set.
  var hasOriginalLegendRect: Bool {return self._originalLegendRect != nil}
  /// Clears the value of `originalLegendRect`. Subsequent reads from it will return its default value.
  mutating func clearOriginalLegendRect() {self._originalLegendRect = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _infoGeometryCommand: TSP_Reference? = nil
  fileprivate var _anchorAttachmentCommand: TSP_Reference? = nil
  fileprivate var _originalLegendRect: TSCH_RectArchive? = nil
}

struct TSCH_ChartCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var chartInfo: TSP_Reference {
    get {return _chartInfo ?? TSP_Reference()}
    set {_chartInfo = newValue}
  }
  /// Returns true if `chartInfo` has been explicitly set.
  var hasChartInfo: Bool {return self._chartInfo != nil}
  /// Clears the value of `chartInfo`. Subsequent reads from it will return its default value.
  mutating func clearChartInfo() {self._chartInfo = nil}

  var originalDirtyState: Bool {
    get {return _originalDirtyState ?? false}
    set {_originalDirtyState = newValue}
  }
  /// Returns true if `originalDirtyState` has been explicitly set.
  var hasOriginalDirtyState: Bool {return self._originalDirtyState != nil}
  /// Clears the value of `originalDirtyState`. Subsequent reads from it will return its default value.
  mutating func clearOriginalDirtyState() {self._originalDirtyState = nil}

  var chartInfoIDPath: TSP_UUIDPath {
    get {return _chartInfoIDPath ?? TSP_UUIDPath()}
    set {_chartInfoIDPath = newValue}
  }
  /// Returns true if `chartInfoIDPath` has been explicitly set.
  var hasChartInfoIDPath: Bool {return self._chartInfoIDPath != nil}
  /// Clears the value of `chartInfoIDPath`. Subsequent reads from it will return its default value.
  mutating func clearChartInfoIDPath() {self._chartInfoIDPath = nil}

  var isForForwardUndoRedo: Bool {
    get {return _isForForwardUndoRedo ?? false}
    set {_isForForwardUndoRedo = newValue}
  }
  /// Returns true if `isForForwardUndoRedo` has been explicitly set.
  var hasIsForForwardUndoRedo: Bool {return self._isForForwardUndoRedo != nil}
  /// Clears the value of `isForForwardUndoRedo`. Subsequent reads from it will return its default value.
  mutating func clearIsForForwardUndoRedo() {self._isForForwardUndoRedo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _chartInfo: TSP_Reference? = nil
  fileprivate var _originalDirtyState: Bool? = nil
  fileprivate var _chartInfoIDPath: TSP_UUIDPath? = nil
  fileprivate var _isForForwardUndoRedo: Bool? = nil
}

struct TSCH_CommandReplaceGridValuesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldDataRows: [TSCH_GridRow] = []

  var newDataRows: [TSCH_GridRow] = []

  var oldRowNames: [String] = []

  var newRowNames: [String] = []

  var oldColNames: [String] = []

  var newColNames: [String] = []

  var updateRowUuids: [TSP_UUID] = []

  var updateColumnUuids: [TSP_UUID] = []

  var addRowUuids: [TSP_UUID] = []

  var addColumnUuids: [TSP_UUID] = []

  var deleteRowUuids: [TSP_UUID] = []

  var deleteColumnUuids: [TSP_UUID] = []

  var setSeriesDirection: Bool {
    get {return _setSeriesDirection ?? false}
    set {_setSeriesDirection = newValue}
  }
  /// Returns true if `setSeriesDirection` has been explicitly set.
  var hasSetSeriesDirection: Bool {return self._setSeriesDirection != nil}
  /// Clears the value of `setSeriesDirection`. Subsequent reads from it will return its default value.
  mutating func clearSetSeriesDirection() {self._setSeriesDirection = nil}

  var newSeriesDirection: UInt32 {
    get {return _newSeriesDirection ?? 0}
    set {_newSeriesDirection = newValue}
  }
  /// Returns true if `newSeriesDirection` has been explicitly set.
  var hasNewSeriesDirection: Bool {return self._newSeriesDirection != nil}
  /// Clears the value of `newSeriesDirection`. Subsequent reads from it will return its default value.
  mutating func clearNewSeriesDirection() {self._newSeriesDirection = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _setSeriesDirection: Bool? = nil
  fileprivate var _newSeriesDirection: UInt32? = nil
}

struct TSCH_CommandReplaceThemePresetArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var theme: TSP_Reference {
    get {return _theme ?? TSP_Reference()}
    set {_theme = newValue}
  }
  /// Returns true if `theme` has been explicitly set.
  var hasTheme: Bool {return self._theme != nil}
  /// Clears the value of `theme`. Subsequent reads from it will return its default value.
  mutating func clearTheme() {self._theme = nil}

  var oldPreset: TSP_Reference {
    get {return _oldPreset ?? TSP_Reference()}
    set {_oldPreset = newValue}
  }
  /// Returns true if `oldPreset` has been explicitly set.
  var hasOldPreset: Bool {return self._oldPreset != nil}
  /// Clears the value of `oldPreset`. Subsequent reads from it will return its default value.
  mutating func clearOldPreset() {self._oldPreset = nil}

  var newPreset: TSP_Reference {
    get {return _newPreset ?? TSP_Reference()}
    set {_newPreset = newValue}
  }
  /// Returns true if `newPreset` has been explicitly set.
  var hasNewPreset: Bool {return self._newPreset != nil}
  /// Clears the value of `newPreset`. Subsequent reads from it will return its default value.
  mutating func clearNewPreset() {self._newPreset = nil}

  var identifiers: [TSCH_CommandReplaceThemePresetArchive.StyleAndIdentifierPair] = []

  var oldPresetIndex: UInt64 {
    get {return _oldPresetIndex ?? 0}
    set {_oldPresetIndex = newValue}
  }
  /// Returns true if `oldPresetIndex` has been explicitly set.
  var hasOldPresetIndex: Bool {return self._oldPresetIndex != nil}
  /// Clears the value of `oldPresetIndex`. Subsequent reads from it will return its default value.
  mutating func clearOldPresetIndex() {self._oldPresetIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct StyleAndIdentifierPair {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var style: TSP_Reference {
      get {return _style ?? TSP_Reference()}
      set {_style = newValue}
    }
    /// Returns true if `style` has been explicitly set.
    var hasStyle: Bool {return self._style != nil}
    /// Clears the value of `style`. Subsequent reads from it will return its default value.
    mutating func clearStyle() {self._style = nil}

    var identifier: String {
      get {return _identifier ?? String()}
      set {_identifier = newValue}
    }
    /// Returns true if `identifier` has been explicitly set.
    var hasIdentifier: Bool {return self._identifier != nil}
    /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
    mutating func clearIdentifier() {self._identifier = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _style: TSP_Reference? = nil
    fileprivate var _identifier: String? = nil
  }

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _theme: TSP_Reference? = nil
  fileprivate var _oldPreset: TSP_Reference? = nil
  fileprivate var _newPreset: TSP_Reference? = nil
  fileprivate var _oldPresetIndex: UInt64? = nil
}

struct TSCH_CommandInvalidateWPCaches {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
}

struct TSCH_CommandReplaceCustomFormatArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var rollbackCmd: TSP_Reference {
    get {return _rollbackCmd ?? TSP_Reference()}
    set {_rollbackCmd = newValue}
  }
  /// Returns true if `rollbackCmd` has been explicitly set.
  var hasRollbackCmd: Bool {return self._rollbackCmd != nil}
  /// Clears the value of `rollbackCmd`. Subsequent reads from it will return its default value.
  mutating func clearRollbackCmd() {self._rollbackCmd = nil}

  var oldFormatObject: TSK_FormatStructArchive {
    get {return _oldFormatObject ?? TSK_FormatStructArchive()}
    set {_oldFormatObject = newValue}
  }
  /// Returns true if `oldFormatObject` has been explicitly set.
  var hasOldFormatObject: Bool {return self._oldFormatObject != nil}
  /// Clears the value of `oldFormatObject`. Subsequent reads from it will return its default value.
  mutating func clearOldFormatObject() {self._oldFormatObject = nil}

  var newFormatObject: TSK_FormatStructArchive {
    get {return _newFormatObject ?? TSK_FormatStructArchive()}
    set {_newFormatObject = newValue}
  }
  /// Returns true if `newFormatObject` has been explicitly set.
  var hasNewFormatObject: Bool {return self._newFormatObject != nil}
  /// Clears the value of `newFormatObject`. Subsequent reads from it will return its default value.
  mutating func clearNewFormatObject() {self._newFormatObject = nil}

  var forwardMutations: [TSCH_CommandReplaceCustomFormatArchive.FormatObjectMutation] = []

  var reverseMutations: [TSCH_CommandReplaceCustomFormatArchive.FormatObjectMutation] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct FormatObjectMutation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var styleOwnerType: TSCH_StyleOwnerType {
      get {return _styleOwnerType ?? .chartInfo}
      set {_styleOwnerType = newValue}
    }
    /// Returns true if `styleOwnerType` has been explicitly set.
    var hasStyleOwnerType: Bool {return self._styleOwnerType != nil}
    /// Clears the value of `styleOwnerType`. Subsequent reads from it will return its default value.
    mutating func clearStyleOwnerType() {self._styleOwnerType = nil}

    var styleOwnerIndex: UInt32 {
      get {return _styleOwnerIndex ?? 0}
      set {_styleOwnerIndex = newValue}
    }
    /// Returns true if `styleOwnerIndex` has been explicitly set.
    var hasStyleOwnerIndex: Bool {return self._styleOwnerIndex != nil}
    /// Clears the value of `styleOwnerIndex`. Subsequent reads from it will return its default value.
    mutating func clearStyleOwnerIndex() {self._styleOwnerIndex = nil}

    var formatObjectProperty: UInt32 {
      get {return _formatObjectProperty ?? 0}
      set {_formatObjectProperty = newValue}
    }
    /// Returns true if `formatObjectProperty` has been explicitly set.
    var hasFormatObjectProperty: Bool {return self._formatObjectProperty != nil}
    /// Clears the value of `formatObjectProperty`. Subsequent reads from it will return its default value.
    mutating func clearFormatObjectProperty() {self._formatObjectProperty = nil}

    var formatObject: TSK_FormatStructArchive {
      get {return _formatObject ?? TSK_FormatStructArchive()}
      set {_formatObject = newValue}
    }
    /// Returns true if `formatObject` has been explicitly set.
    var hasFormatObject: Bool {return self._formatObject != nil}
    /// Clears the value of `formatObject`. Subsequent reads from it will return its default value.
    mutating func clearFormatObject() {self._formatObject = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _styleOwnerType: TSCH_StyleOwnerType? = nil
    fileprivate var _styleOwnerIndex: UInt32? = nil
    fileprivate var _formatObjectProperty: UInt32? = nil
    fileprivate var _formatObject: TSK_FormatStructArchive? = nil
  }

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _rollbackCmd: TSP_Reference? = nil
  fileprivate var _oldFormatObject: TSK_FormatStructArchive? = nil
  fileprivate var _newFormatObject: TSK_FormatStructArchive? = nil
}

struct TSCH_CommandAddReferenceLineArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var axisID: TSCH_ChartAxisIDArchive {
    get {return _axisID ?? TSCH_ChartAxisIDArchive()}
    set {_axisID = newValue}
  }
  /// Returns true if `axisID` has been explicitly set.
  var hasAxisID: Bool {return self._axisID != nil}
  /// Clears the value of `axisID`. Subsequent reads from it will return its default value.
  mutating func clearAxisID() {self._axisID = nil}

  var uuid: TSP_UUID {
    get {return _uuid ?? TSP_UUID()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  var nonStyle: TSP_Reference {
    get {return _nonStyle ?? TSP_Reference()}
    set {_nonStyle = newValue}
  }
  /// Returns true if `nonStyle` has been explicitly set.
  var hasNonStyle: Bool {return self._nonStyle != nil}
  /// Clears the value of `nonStyle`. Subsequent reads from it will return its default value.
  mutating func clearNonStyle() {self._nonStyle = nil}

  var style: TSP_Reference {
    get {return _style ?? TSP_Reference()}
    set {_style = newValue}
  }
  /// Returns true if `style` has been explicitly set.
  var hasStyle: Bool {return self._style != nil}
  /// Clears the value of `style`. Subsequent reads from it will return its default value.
  mutating func clearStyle() {self._style = nil}

  var paragraphStyles: [TSP_Reference] = []

  var rollbackCommands: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _axisID: TSCH_ChartAxisIDArchive? = nil
  fileprivate var _uuid: TSP_UUID? = nil
  fileprivate var _nonStyle: TSP_Reference? = nil
  fileprivate var _style: TSP_Reference? = nil
}

struct TSCH_CommandDeleteReferenceLineArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var axisID: TSCH_ChartAxisIDArchive {
    get {return _axisID ?? TSCH_ChartAxisIDArchive()}
    set {_axisID = newValue}
  }
  /// Returns true if `axisID` has been explicitly set.
  var hasAxisID: Bool {return self._axisID != nil}
  /// Clears the value of `axisID`. Subsequent reads from it will return its default value.
  mutating func clearAxisID() {self._axisID = nil}

  var uuid: TSP_UUID {
    get {return _uuid ?? TSP_UUID()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  var nonStyle: TSP_Reference {
    get {return _nonStyle ?? TSP_Reference()}
    set {_nonStyle = newValue}
  }
  /// Returns true if `nonStyle` has been explicitly set.
  var hasNonStyle: Bool {return self._nonStyle != nil}
  /// Clears the value of `nonStyle`. Subsequent reads from it will return its default value.
  mutating func clearNonStyle() {self._nonStyle = nil}

  var style: TSP_Reference {
    get {return _style ?? TSP_Reference()}
    set {_style = newValue}
  }
  /// Returns true if `style` has been explicitly set.
  var hasStyle: Bool {return self._style != nil}
  /// Clears the value of `style`. Subsequent reads from it will return its default value.
  mutating func clearStyle() {self._style = nil}

  var paragraphStyles: [TSP_Reference] = []

  var styleSwapCommand: TSP_Reference {
    get {return _styleSwapCommand ?? TSP_Reference()}
    set {_styleSwapCommand = newValue}
  }
  /// Returns true if `styleSwapCommand` has been explicitly set.
  var hasStyleSwapCommand: Bool {return self._styleSwapCommand != nil}
  /// Clears the value of `styleSwapCommand`. Subsequent reads from it will return its default value.
  mutating func clearStyleSwapCommand() {self._styleSwapCommand = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _axisID: TSCH_ChartAxisIDArchive? = nil
  fileprivate var _uuid: TSP_UUID? = nil
  fileprivate var _nonStyle: TSP_Reference? = nil
  fileprivate var _style: TSP_Reference? = nil
  fileprivate var _styleSwapCommand: TSP_Reference? = nil
}

struct TSCH_CommandPasteStyleArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var styleSwapCommand: TSP_Reference {
    get {return _styleSwapCommand ?? TSP_Reference()}
    set {_styleSwapCommand = newValue}
  }
  /// Returns true if `styleSwapCommand` has been explicitly set.
  var hasStyleSwapCommand: Bool {return self._styleSwapCommand != nil}
  /// Clears the value of `styleSwapCommand`. Subsequent reads from it will return its default value.
  mutating func clearStyleSwapCommand() {self._styleSwapCommand = nil}

  var inverseChartStyleState: TSCH_PropertyValueStorageContainerArchive {
    get {return _inverseChartStyleState ?? TSCH_PropertyValueStorageContainerArchive()}
    set {_inverseChartStyleState = newValue}
  }
  /// Returns true if `inverseChartStyleState` has been explicitly set.
  var hasInverseChartStyleState: Bool {return self._inverseChartStyleState != nil}
  /// Clears the value of `inverseChartStyleState`. Subsequent reads from it will return its default value.
  mutating func clearInverseChartStyleState() {self._inverseChartStyleState = nil}

  var chartStyleState: TSCH_PropertyValueStorageContainerArchive {
    get {return _chartStyleState ?? TSCH_PropertyValueStorageContainerArchive()}
    set {_chartStyleState = newValue}
  }
  /// Returns true if `chartStyleState` has been explicitly set.
  var hasChartStyleState: Bool {return self._chartStyleState != nil}
  /// Clears the value of `chartStyleState`. Subsequent reads from it will return its default value.
  mutating func clearChartStyleState() {self._chartStyleState = nil}

  var shapeStyle: TSP_Reference {
    get {return _shapeStyle ?? TSP_Reference()}
    set {_shapeStyle = newValue}
  }
  /// Returns true if `shapeStyle` has been explicitly set.
  var hasShapeStyle: Bool {return self._shapeStyle != nil}
  /// Clears the value of `shapeStyle`. Subsequent reads from it will return its default value.
  mutating func clearShapeStyle() {self._shapeStyle = nil}

  var subselection: [TSCH_ChartSelectionPathArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _styleSwapCommand: TSP_Reference? = nil
  fileprivate var _inverseChartStyleState: TSCH_PropertyValueStorageContainerArchive? = nil
  fileprivate var _chartStyleState: TSCH_PropertyValueStorageContainerArchive? = nil
  fileprivate var _shapeStyle: TSP_Reference? = nil
}

struct TSCH_CommandReplaceImageDataArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartCommandArchive {
    get {return _super ?? TSCH_ChartCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var styleSwapCommand: TSP_Reference {
    get {return _styleSwapCommand ?? TSP_Reference()}
    set {_styleSwapCommand = newValue}
  }
  /// Returns true if `styleSwapCommand` has been explicitly set.
  var hasStyleSwapCommand: Bool {return self._styleSwapCommand != nil}
  /// Clears the value of `styleSwapCommand`. Subsequent reads from it will return its default value.
  mutating func clearStyleSwapCommand() {self._styleSwapCommand = nil}

  var inverseChartStyleState: TSCH_PropertyValueStorageContainerArchive {
    get {return _inverseChartStyleState ?? TSCH_PropertyValueStorageContainerArchive()}
    set {_inverseChartStyleState = newValue}
  }
  /// Returns true if `inverseChartStyleState` has been explicitly set.
  var hasInverseChartStyleState: Bool {return self._inverseChartStyleState != nil}
  /// Clears the value of `inverseChartStyleState`. Subsequent reads from it will return its default value.
  mutating func clearInverseChartStyleState() {self._inverseChartStyleState = nil}

  var chartStyleState: TSCH_PropertyValueStorageContainerArchive {
    get {return _chartStyleState ?? TSCH_PropertyValueStorageContainerArchive()}
    set {_chartStyleState = newValue}
  }
  /// Returns true if `chartStyleState` has been explicitly set.
  var hasChartStyleState: Bool {return self._chartStyleState != nil}
  /// Clears the value of `chartStyleState`. Subsequent reads from it will return its default value.
  mutating func clearChartStyleState() {self._chartStyleState = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartCommandArchive? = nil
  fileprivate var _styleSwapCommand: TSP_Reference? = nil
  fileprivate var _inverseChartStyleState: TSCH_PropertyValueStorageContainerArchive? = nil
  fileprivate var _chartStyleState: TSCH_PropertyValueStorageContainerArchive? = nil
}

struct TSCH_CommandInducedReplaceChartGrid {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
}

struct TSCH_CommandInduced3DChartGeometry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
}

struct TSCH_ChartTextSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var selection: TSP_Reference {
    get {return _selection ?? TSP_Reference()}
    set {_selection = newValue}
  }
  /// Returns true if `selection` has been explicitly set.
  var hasSelection: Bool {return self._selection != nil}
  /// Clears the value of `selection`. Subsequent reads from it will return its default value.
  mutating func clearSelection() {self._selection = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _selection: TSP_Reference? = nil
}

struct TSCH_ChartDrawableSelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_DrawableSelectionTransformerArchive {
    get {return _super ?? TSD_DrawableSelectionTransformerArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_DrawableSelectionTransformerArchive? = nil
}

struct TSCH_ChartSubselectionTransformerHelperArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var selection: TSP_Reference {
    get {return _selection ?? TSP_Reference()}
    set {_selection = newValue}
  }
  /// Returns true if `selection` has been explicitly set.
  var hasSelection: Bool {return self._selection != nil}
  /// Clears the value of `selection`. Subsequent reads from it will return its default value.
  mutating func clearSelection() {self._selection = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _selection: TSP_Reference? = nil
}

struct TSCH_ChartRefLineSubselectionTransformerHelperArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartSubselectionTransformerHelperArchive {
    get {return _super ?? TSCH_ChartSubselectionTransformerHelperArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var selectedReferenceLineUuids: [TSP_UUID] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartSubselectionTransformerHelperArchive? = nil
}

struct TSCH_ChartSubselectionIdentityTransformerHelperArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_ChartSubselectionTransformerHelperArchive {
    get {return _super ?? TSCH_ChartSubselectionTransformerHelperArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_ChartSubselectionTransformerHelperArchive? = nil
}

struct TSCH_ChartSubselectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var selection: TSP_Reference {
    get {return _selection ?? TSP_Reference()}
    set {_selection = newValue}
  }
  /// Returns true if `selection` has been explicitly set.
  var hasSelection: Bool {return self._selection != nil}
  /// Clears the value of `selection`. Subsequent reads from it will return its default value.
  mutating func clearSelection() {self._selection = nil}

  var helper: TSP_Reference {
    get {return _helper ?? TSP_Reference()}
    set {_helper = newValue}
  }
  /// Returns true if `helper` has been explicitly set.
  var hasHelper: Bool {return self._helper != nil}
  /// Clears the value of `helper`. Subsequent reads from it will return its default value.
  mutating func clearHelper() {self._helper = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _selection: TSP_Reference? = nil
  fileprivate var _helper: TSP_Reference? = nil
}

struct TSCH_CDESelectionTransformerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cdeSelection: TSP_Reference {
    get {return _cdeSelection ?? TSP_Reference()}
    set {_cdeSelection = newValue}
  }
  /// Returns true if `cdeSelection` has been explicitly set.
  var hasCdeSelection: Bool {return self._cdeSelection != nil}
  /// Clears the value of `cdeSelection`. Subsequent reads from it will return its default value.
  mutating func clearCdeSelection() {self._cdeSelection = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _cdeSelection: TSP_Reference? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TSCH"

extension TSCH_StyleOwnerType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chart_info"),
    2: .same(proto: "legend_model"),
    3: .same(proto: "chart_axis"),
    4: .same(proto: "chart_series"),
    5: .same(proto: "reference_line"),
  ]
}

extension TSCH_StyleSwapType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chart_style"),
    2: .same(proto: "chart_non_style"),
    3: .same(proto: "legend_style"),
    4: .same(proto: "legend_non_style"),
    5: .same(proto: "value_axis_style"),
    6: .same(proto: "value_axis_non_style"),
    7: .same(proto: "category_axis_style"),
    8: .same(proto: "category_axis_non_style"),
    9: .same(proto: "series_theme_style"),
    10: .same(proto: "series_private_style"),
    11: .same(proto: "series_non_style"),
    12: .same(proto: "paragraph_style"),
    13: .same(proto: "reference_line_style"),
    14: .same(proto: "reference_line_non_style"),
    15: .same(proto: "reference_line_theme_style"),
  ]
}

extension TSCH_ApplyPresetBehavior: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "remove_overrides"),
    2: .same(proto: "preserve_overrides"),
    3: .same(proto: "preserve_appearance"),
  ]
}

extension TSCH_StyleOwnerPath: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StyleOwnerPath"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuids"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.uuids) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.uuids)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.uuids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_StyleOwnerPath, rhs: TSCH_StyleOwnerPath) -> Bool {
    if lhs.uuids != rhs.uuids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandSetChartTypeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetChartTypeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "new_chart_type"),
    3: .standard(proto: "old_chart_type"),
    4: .standard(proto: "rollback_chart_type"),
    5: .standard(proto: "row_ids"),
    6: .standard(proto: "column_ids"),
    7: .standard(proto: "old_row_ids"),
    8: .standard(proto: "old_column_ids"),
    9: .standard(proto: "rollback_row_ids"),
    10: .standard(proto: "rollback_column_ids"),
    11: .standard(proto: "uses_captured_data"),
    12: .standard(proto: "use_default_data"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.rowIds) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.columnIds) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.oldRowIds) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.oldColumnIds) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.rollbackRowIds) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.rollbackColumnIds) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularEnumField(value: &self._newChartType)
      case 3: try decoder.decodeSingularEnumField(value: &self._oldChartType)
      case 4: try decoder.decodeSingularEnumField(value: &self._rollbackChartType)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.rowIds)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.columnIds)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.oldRowIds)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.oldColumnIds)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.rollbackRowIds)
      case 10: try decoder.decodeRepeatedMessageField(value: &self.rollbackColumnIds)
      case 11: try decoder.decodeSingularBoolField(value: &self._usesCapturedData)
      case 12: try decoder.decodeSingularBoolField(value: &self._useDefaultData)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._newChartType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._oldChartType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._rollbackChartType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    if !self.rowIds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rowIds, fieldNumber: 5)
    }
    if !self.columnIds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.columnIds, fieldNumber: 6)
    }
    if !self.oldRowIds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.oldRowIds, fieldNumber: 7)
    }
    if !self.oldColumnIds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.oldColumnIds, fieldNumber: 8)
    }
    if !self.rollbackRowIds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rollbackRowIds, fieldNumber: 9)
    }
    if !self.rollbackColumnIds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rollbackColumnIds, fieldNumber: 10)
    }
    if let v = self._usesCapturedData {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    }
    if let v = self._useDefaultData {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandSetChartTypeArchive, rhs: TSCH_CommandSetChartTypeArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._newChartType != rhs._newChartType {return false}
    if lhs._oldChartType != rhs._oldChartType {return false}
    if lhs._rollbackChartType != rhs._rollbackChartType {return false}
    if lhs.rowIds != rhs.rowIds {return false}
    if lhs.columnIds != rhs.columnIds {return false}
    if lhs.oldRowIds != rhs.oldRowIds {return false}
    if lhs.oldColumnIds != rhs.oldColumnIds {return false}
    if lhs.rollbackRowIds != rhs.rollbackRowIds {return false}
    if lhs.rollbackColumnIds != rhs.rollbackColumnIds {return false}
    if lhs._usesCapturedData != rhs._usesCapturedData {return false}
    if lhs._useDefaultData != rhs._useDefaultData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_StyleSwapUndoTupleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StyleSwapUndoTupleArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chart_info"),
    2: .standard(proto: "swap_type"),
    3: .same(proto: "index"),
    4: .standard(proto: "old_value"),
    5: .standard(proto: "new_value"),
    6: .standard(proto: "ref_line_uuid"),
  ]

  public var isInitialized: Bool {
    if let v = self._chartInfo, !v.isInitialized {return false}
    if let v = self._oldValue, !v.isInitialized {return false}
    if let v = self._newValue, !v.isInitialized {return false}
    if let v = self._refLineUuid, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._chartInfo)
      case 2: try decoder.decodeSingularEnumField(value: &self._swapType)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._index)
      case 4: try decoder.decodeSingularMessageField(value: &self._oldValue)
      case 5: try decoder.decodeSingularMessageField(value: &self._newValue)
      case 6: try decoder.decodeSingularMessageField(value: &self._refLineUuid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._chartInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._swapType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._index {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._oldValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._newValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._refLineUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_StyleSwapUndoTupleArchive, rhs: TSCH_StyleSwapUndoTupleArchive) -> Bool {
    if lhs._chartInfo != rhs._chartInfo {return false}
    if lhs._swapType != rhs._swapType {return false}
    if lhs._index != rhs._index {return false}
    if lhs._oldValue != rhs._oldValue {return false}
    if lhs._newValue != rhs._newValue {return false}
    if lhs._refLineUuid != rhs._refLineUuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_StyleSwapUndoTuplesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StyleSwapUndoTuplesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "swap_tuples"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.swapTuples) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.swapTuples)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.swapTuples.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.swapTuples, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_StyleSwapUndoTuplesArchive, rhs: TSCH_StyleSwapUndoTuplesArchive) -> Bool {
    if lhs.swapTuples != rhs.swapTuples {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandStyleSwapArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandStyleSwapArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "undo_tuples"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.undoTuples) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.undoTuples)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.undoTuples.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.undoTuples, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandStyleSwapArchive, rhs: TSCH_CommandStyleSwapArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.undoTuples != rhs.undoTuples {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandMutatePropertiesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandMutatePropertiesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "rollback_cmd"),
    3: .standard(proto: "generic_property_delta_maps"),
    4: .standard(proto: "paragraph_style_delta_maps"),
    5: .same(proto: "initiatedOnWeb"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._rollbackCmd, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.genericPropertyDeltaMaps) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.paragraphStyleDeltaMaps) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._rollbackCmd)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.genericPropertyDeltaMaps)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.paragraphStyleDeltaMaps)
      case 5: try decoder.decodeSingularBoolField(value: &self._initiatedOnWeb)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._rollbackCmd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.genericPropertyDeltaMaps.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.genericPropertyDeltaMaps, fieldNumber: 3)
    }
    if !self.paragraphStyleDeltaMaps.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.paragraphStyleDeltaMaps, fieldNumber: 4)
    }
    if let v = self._initiatedOnWeb {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandMutatePropertiesArchive, rhs: TSCH_CommandMutatePropertiesArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._rollbackCmd != rhs._rollbackCmd {return false}
    if lhs.genericPropertyDeltaMaps != rhs.genericPropertyDeltaMaps {return false}
    if lhs.paragraphStyleDeltaMaps != rhs.paragraphStyleDeltaMaps {return false}
    if lhs._initiatedOnWeb != rhs._initiatedOnWeb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandMutatePropertiesArchive.GenericPropertyDeltaMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSCH_CommandMutatePropertiesArchive.protoMessageName + ".GenericPropertyDeltaMap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "style_owner_path"),
    2: .standard(proto: "forward_map"),
    3: .standard(proto: "reverse_map"),
  ]

  public var isInitialized: Bool {
    if let v = self._styleOwnerPath, !v.isInitialized {return false}
    if let v = self._forwardMap, !v.isInitialized {return false}
    if let v = self._reverseMap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._styleOwnerPath)
      case 2: try decoder.decodeSingularMessageField(value: &self._forwardMap)
      case 3: try decoder.decodeSingularMessageField(value: &self._reverseMap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._styleOwnerPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._forwardMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._reverseMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandMutatePropertiesArchive.GenericPropertyDeltaMap, rhs: TSCH_CommandMutatePropertiesArchive.GenericPropertyDeltaMap) -> Bool {
    if lhs._styleOwnerPath != rhs._styleOwnerPath {return false}
    if lhs._forwardMap != rhs._forwardMap {return false}
    if lhs._reverseMap != rhs._reverseMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSCH_CommandMutatePropertiesArchive.GenericPropertyDeltaMap.protoMessageName + ".GenericMapUnion"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "chart_map"),
    3: .standard(proto: "legend_map"),
    4: .standard(proto: "axis_map"),
    5: .standard(proto: "series_map"),
    6: .standard(proto: "reference_line_map"),
  ]

  public var isInitialized: Bool {
    if let v = self._chartMap, !v.isInitialized {return false}
    if let v = self._legendMap, !v.isInitialized {return false}
    if let v = self._axisMap, !v.isInitialized {return false}
    if let v = self._seriesMap, !v.isInitialized {return false}
    if let v = self._referenceLineMap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularMessageField(value: &self._chartMap)
      case 3: try decoder.decodeSingularMessageField(value: &self._legendMap)
      case 4: try decoder.decodeSingularMessageField(value: &self._axisMap)
      case 5: try decoder.decodeSingularMessageField(value: &self._seriesMap)
      case 6: try decoder.decodeSingularMessageField(value: &self._referenceLineMap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._chartMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._legendMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._axisMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._seriesMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._referenceLineMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion, rhs: TSCH_CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion) -> Bool {
    if lhs._chartMap != rhs._chartMap {return false}
    if lhs._legendMap != rhs._legendMap {return false}
    if lhs._axisMap != rhs._axisMap {return false}
    if lhs._seriesMap != rhs._seriesMap {return false}
    if lhs._referenceLineMap != rhs._referenceLineMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandMutatePropertiesArchive.ParagraphStyleDeltaMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSCH_CommandMutatePropertiesArchive.protoMessageName + ".ParagraphStyleDeltaMap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "style_owner_path"),
    2: .standard(proto: "paragraph_style_index_property"),
    3: .standard(proto: "forward_map"),
    4: .standard(proto: "reverse_map"),
  ]

  public var isInitialized: Bool {
    if let v = self._styleOwnerPath, !v.isInitialized {return false}
    if let v = self._forwardMap, !v.isInitialized {return false}
    if let v = self._reverseMap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._styleOwnerPath)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._paragraphStyleIndexProperty)
      case 3: try decoder.decodeSingularMessageField(value: &self._forwardMap)
      case 4: try decoder.decodeSingularMessageField(value: &self._reverseMap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._styleOwnerPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._paragraphStyleIndexProperty {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._forwardMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._reverseMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandMutatePropertiesArchive.ParagraphStyleDeltaMap, rhs: TSCH_CommandMutatePropertiesArchive.ParagraphStyleDeltaMap) -> Bool {
    if lhs._styleOwnerPath != rhs._styleOwnerPath {return false}
    if lhs._paragraphStyleIndexProperty != rhs._paragraphStyleIndexProperty {return false}
    if lhs._forwardMap != rhs._forwardMap {return false}
    if lhs._reverseMap != rhs._reverseMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSCH_CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.protoMessageName + ".ParagraphStylePropertyMapArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "char_properties"),
    2: .standard(proto: "para_properties"),
  ]

  public var isInitialized: Bool {
    if let v = self._charProperties, !v.isInitialized {return false}
    if let v = self._paraProperties, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._charProperties)
      case 2: try decoder.decodeSingularMessageField(value: &self._paraProperties)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._charProperties {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._paraProperties {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive, rhs: TSCH_CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive) -> Bool {
    if lhs._charProperties != rhs._charProperties {return false}
    if lhs._paraProperties != rhs._paraProperties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandScaleAllTextArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandScaleAllTextArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "rollback_cmd"),
    3: .standard(proto: "scale_factor"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._rollbackCmd, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._rollbackCmd)
      case 3: try decoder.decodeSingularDoubleField(value: &self._scaleFactor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._rollbackCmd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._scaleFactor {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandScaleAllTextArchive, rhs: TSCH_CommandScaleAllTextArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._rollbackCmd != rhs._rollbackCmd {return false}
    if lhs._scaleFactor != rhs._scaleFactor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandSetFontFamilyArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetFontFamilyArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "rollback_cmd"),
    3: .standard(proto: "new_font_family"),
    4: .standard(proto: "old_font_family"),
    5: .standard(proto: "paragraph_style_delta_maps"),
    6: .standard(proto: "is_bold"),
    7: .standard(proto: "is_italic"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._isBold == nil {return false}
    if self._isItalic == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._rollbackCmd, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.paragraphStyleDeltaMaps) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._rollbackCmd)
      case 3: try decoder.decodeSingularStringField(value: &self._newFontFamily)
      case 4: try decoder.decodeSingularStringField(value: &self._oldFontFamily)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.paragraphStyleDeltaMaps)
      case 6: try decoder.decodeSingularBoolField(value: &self._isBold)
      case 7: try decoder.decodeSingularBoolField(value: &self._isItalic)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._rollbackCmd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._newFontFamily {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._oldFontFamily {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if !self.paragraphStyleDeltaMaps.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.paragraphStyleDeltaMaps, fieldNumber: 5)
    }
    if let v = self._isBold {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._isItalic {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandSetFontFamilyArchive, rhs: TSCH_CommandSetFontFamilyArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._rollbackCmd != rhs._rollbackCmd {return false}
    if lhs._newFontFamily != rhs._newFontFamily {return false}
    if lhs._oldFontFamily != rhs._oldFontFamily {return false}
    if lhs.paragraphStyleDeltaMaps != rhs.paragraphStyleDeltaMaps {return false}
    if lhs._isBold != rhs._isBold {return false}
    if lhs._isItalic != rhs._isItalic {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandSetFontFamilyArchive.StyleSemanticTag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSCH_CommandSetFontFamilyArchive.protoMessageName + ".StyleSemanticTag"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "swap_type"),
    2: .same(proto: "index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._swapType)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._index)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._swapType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._index {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandSetFontFamilyArchive.StyleSemanticTag, rhs: TSCH_CommandSetFontFamilyArchive.StyleSemanticTag) -> Bool {
    if lhs._swapType != rhs._swapType {return false}
    if lhs._index != rhs._index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSCH_CommandSetFontFamilyArchive.protoMessageName + ".SemanticParagraphStyleMutationMap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "style_semantic_tag"),
    2: .standard(proto: "paragraph_style_index_property"),
    3: .standard(proto: "forward_map"),
    4: .standard(proto: "reverse_map"),
  ]

  public var isInitialized: Bool {
    if let v = self._forwardMap, !v.isInitialized {return false}
    if let v = self._reverseMap, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._styleSemanticTag)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._paragraphStyleIndexProperty)
      case 3: try decoder.decodeSingularMessageField(value: &self._forwardMap)
      case 4: try decoder.decodeSingularMessageField(value: &self._reverseMap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._styleSemanticTag {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._paragraphStyleIndexProperty {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._forwardMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._reverseMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap, rhs: TSCH_CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap) -> Bool {
    if lhs._styleSemanticTag != rhs._styleSemanticTag {return false}
    if lhs._paragraphStyleIndexProperty != rhs._paragraphStyleIndexProperty {return false}
    if lhs._forwardMap != rhs._forwardMap {return false}
    if lhs._reverseMap != rhs._reverseMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSCH_CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.protoMessageName + ".ParagraphStylePropertyMapArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "char_properties"),
    2: .standard(proto: "para_properties"),
  ]

  public var isInitialized: Bool {
    if let v = self._charProperties, !v.isInitialized {return false}
    if let v = self._paraProperties, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._charProperties)
      case 2: try decoder.decodeSingularMessageField(value: &self._paraProperties)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._charProperties {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._paraProperties {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive, rhs: TSCH_CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive) -> Bool {
    if lhs._charProperties != rhs._charProperties {return false}
    if lhs._paraProperties != rhs._paraProperties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandApplyFillSetArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandApplyFillSetArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "chart_type"),
    3: .standard(proto: "fill_set"),
    4: .standard(proto: "old_fill_set"),
    5: .standard(proto: "prior_last_applied_fill_set_lookup_string"),
    6: .standard(proto: "rollback_cmd"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._chartType == nil {return false}
    if self._fillSet == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._fillSet, !v.isInitialized {return false}
    if let v = self._oldFillSet, !v.isInitialized {return false}
    if let v = self._rollbackCmd, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularEnumField(value: &self._chartType)
      case 3: try decoder.decodeSingularMessageField(value: &self._fillSet)
      case 4: try decoder.decodeSingularMessageField(value: &self._oldFillSet)
      case 5: try decoder.decodeSingularStringField(value: &self._priorLastAppliedFillSetLookupString)
      case 6: try decoder.decodeSingularMessageField(value: &self._rollbackCmd)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._chartType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._fillSet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._oldFillSet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._priorLastAppliedFillSetLookupString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._rollbackCmd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandApplyFillSetArchive, rhs: TSCH_CommandApplyFillSetArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._chartType != rhs._chartType {return false}
    if lhs._fillSet != rhs._fillSet {return false}
    if lhs._oldFillSet != rhs._oldFillSet {return false}
    if lhs._priorLastAppliedFillSetLookupString != rhs._priorLastAppliedFillSetLookupString {return false}
    if lhs._rollbackCmd != rhs._rollbackCmd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandSetSeriesNameArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetSeriesNameArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "seriesIndex"),
    3: .same(proto: "oldName"),
    4: .same(proto: "newName"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._seriesIndex == nil {return false}
    if self._newName == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._seriesIndex)
      case 3: try decoder.decodeSingularStringField(value: &self._oldName)
      case 4: try decoder.decodeSingularStringField(value: &self._newName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._seriesIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._oldName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._newName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandSetSeriesNameArchive, rhs: TSCH_CommandSetSeriesNameArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._seriesIndex != rhs._seriesIndex {return false}
    if lhs._oldName != rhs._oldName {return false}
    if lhs._newName != rhs._newName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandSetCategoryNameArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetCategoryNameArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "categoryIndex"),
    3: .same(proto: "oldName"),
    4: .same(proto: "newName"),
    5: .same(proto: "isMultiDataIndex"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._categoryIndex == nil {return false}
    if self._newName == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._categoryIndex)
      case 3: try decoder.decodeSingularStringField(value: &self._oldName)
      case 4: try decoder.decodeSingularStringField(value: &self._newName)
      case 5: try decoder.decodeSingularBoolField(value: &self._isMultiDataIndex)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._categoryIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._oldName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._newName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._isMultiDataIndex {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandSetCategoryNameArchive, rhs: TSCH_CommandSetCategoryNameArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._categoryIndex != rhs._categoryIndex {return false}
    if lhs._oldName != rhs._oldName {return false}
    if lhs._newName != rhs._newName {return false}
    if lhs._isMultiDataIndex != rhs._isMultiDataIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandAddGridRowsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandAddGridRowsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "row_id"),
    3: .standard(proto: "row_id_list"),
    4: .standard(proto: "row_name_list"),
    5: .standard(proto: "undo_deletion_start_id"),
    6: .standard(proto: "undo_deletion_end_id"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._rowID, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.rowIDList) {return false}
    if let v = self._undoDeletionStartID, !v.isInitialized {return false}
    if let v = self._undoDeletionEndID, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._rowID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.rowIDList)
      case 4: try decoder.decodeRepeatedStringField(value: &self.rowNameList)
      case 5: try decoder.decodeSingularMessageField(value: &self._undoDeletionStartID)
      case 6: try decoder.decodeSingularMessageField(value: &self._undoDeletionEndID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._rowID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.rowIDList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rowIDList, fieldNumber: 3)
    }
    if !self.rowNameList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.rowNameList, fieldNumber: 4)
    }
    if let v = self._undoDeletionStartID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._undoDeletionEndID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandAddGridRowsArchive, rhs: TSCH_CommandAddGridRowsArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._rowID != rhs._rowID {return false}
    if lhs.rowIDList != rhs.rowIDList {return false}
    if lhs.rowNameList != rhs.rowNameList {return false}
    if lhs._undoDeletionStartID != rhs._undoDeletionStartID {return false}
    if lhs._undoDeletionEndID != rhs._undoDeletionEndID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandAddGridColumnsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandAddGridColumnsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "column_id"),
    3: .standard(proto: "column_id_list"),
    4: .standard(proto: "column_name_list"),
    5: .standard(proto: "undo_deletion_start_id"),
    6: .standard(proto: "undo_deletion_end_id"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._columnID, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.columnIDList) {return false}
    if let v = self._undoDeletionStartID, !v.isInitialized {return false}
    if let v = self._undoDeletionEndID, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._columnID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.columnIDList)
      case 4: try decoder.decodeRepeatedStringField(value: &self.columnNameList)
      case 5: try decoder.decodeSingularMessageField(value: &self._undoDeletionStartID)
      case 6: try decoder.decodeSingularMessageField(value: &self._undoDeletionEndID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._columnID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.columnIDList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.columnIDList, fieldNumber: 3)
    }
    if !self.columnNameList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.columnNameList, fieldNumber: 4)
    }
    if let v = self._undoDeletionStartID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._undoDeletionEndID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandAddGridColumnsArchive, rhs: TSCH_CommandAddGridColumnsArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._columnID != rhs._columnID {return false}
    if lhs.columnIDList != rhs.columnIDList {return false}
    if lhs.columnNameList != rhs.columnNameList {return false}
    if lhs._undoDeletionStartID != rhs._undoDeletionStartID {return false}
    if lhs._undoDeletionEndID != rhs._undoDeletionEndID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandMoveGridRowsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandMoveGridRowsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "start_row_id"),
    3: .standard(proto: "end_row_id"),
    4: .standard(proto: "after_row_id"),
    5: .standard(proto: "undo_after_row_id"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._startRowID == nil {return false}
    if self._endRowID == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._startRowID, !v.isInitialized {return false}
    if let v = self._endRowID, !v.isInitialized {return false}
    if let v = self._afterRowID, !v.isInitialized {return false}
    if let v = self._undoAfterRowID, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._startRowID)
      case 3: try decoder.decodeSingularMessageField(value: &self._endRowID)
      case 4: try decoder.decodeSingularMessageField(value: &self._afterRowID)
      case 5: try decoder.decodeSingularMessageField(value: &self._undoAfterRowID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._startRowID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._endRowID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._afterRowID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._undoAfterRowID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandMoveGridRowsArchive, rhs: TSCH_CommandMoveGridRowsArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._startRowID != rhs._startRowID {return false}
    if lhs._endRowID != rhs._endRowID {return false}
    if lhs._afterRowID != rhs._afterRowID {return false}
    if lhs._undoAfterRowID != rhs._undoAfterRowID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandMoveGridColumnsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandMoveGridColumnsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "start_column_id"),
    3: .standard(proto: "end_column_id"),
    4: .standard(proto: "after_column_id"),
    5: .standard(proto: "undo_after_column_id"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._startColumnID == nil {return false}
    if self._endColumnID == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._startColumnID, !v.isInitialized {return false}
    if let v = self._endColumnID, !v.isInitialized {return false}
    if let v = self._afterColumnID, !v.isInitialized {return false}
    if let v = self._undoAfterColumnID, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._startColumnID)
      case 3: try decoder.decodeSingularMessageField(value: &self._endColumnID)
      case 4: try decoder.decodeSingularMessageField(value: &self._afterColumnID)
      case 5: try decoder.decodeSingularMessageField(value: &self._undoAfterColumnID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._startColumnID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._endColumnID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._afterColumnID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._undoAfterColumnID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandMoveGridColumnsArchive, rhs: TSCH_CommandMoveGridColumnsArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._startColumnID != rhs._startColumnID {return false}
    if lhs._endColumnID != rhs._endColumnID {return false}
    if lhs._afterColumnID != rhs._afterColumnID {return false}
    if lhs._undoAfterColumnID != rhs._undoAfterColumnID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandDeleteGridRowsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandDeleteGridRowsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "start_row_id"),
    3: .standard(proto: "end_row_id"),
    4: .standard(proto: "cut_row_names"),
    5: .standard(proto: "cut_values"),
    6: .standard(proto: "undo_discards_values"),
    7: .standard(proto: "undo_column_insertion_id"),
    8: .standard(proto: "undo_row_insertion_id"),
    9: .standard(proto: "undo_row_id_list"),
    11: .standard(proto: "cut_column_names"),
    12: .standard(proto: "undo_column_id_list"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._startRowID == nil {return false}
    if self._endRowID == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._startRowID, !v.isInitialized {return false}
    if let v = self._endRowID, !v.isInitialized {return false}
    if let v = self._undoColumnInsertionID, !v.isInitialized {return false}
    if let v = self._undoRowInsertionID, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.undoRowIDList) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.undoColumnIDList) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._startRowID)
      case 3: try decoder.decodeSingularMessageField(value: &self._endRowID)
      case 4: try decoder.decodeRepeatedStringField(value: &self.cutRowNames)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.cutValues)
      case 6: try decoder.decodeSingularBoolField(value: &self._undoDiscardsValues)
      case 7: try decoder.decodeSingularMessageField(value: &self._undoColumnInsertionID)
      case 8: try decoder.decodeSingularMessageField(value: &self._undoRowInsertionID)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.undoRowIDList)
      case 11: try decoder.decodeRepeatedStringField(value: &self.cutColumnNames)
      case 12: try decoder.decodeRepeatedMessageField(value: &self.undoColumnIDList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._startRowID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._endRowID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.cutRowNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.cutRowNames, fieldNumber: 4)
    }
    if !self.cutValues.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cutValues, fieldNumber: 5)
    }
    if let v = self._undoDiscardsValues {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._undoColumnInsertionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._undoRowInsertionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if !self.undoRowIDList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.undoRowIDList, fieldNumber: 9)
    }
    if !self.cutColumnNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.cutColumnNames, fieldNumber: 11)
    }
    if !self.undoColumnIDList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.undoColumnIDList, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandDeleteGridRowsArchive, rhs: TSCH_CommandDeleteGridRowsArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._startRowID != rhs._startRowID {return false}
    if lhs._endRowID != rhs._endRowID {return false}
    if lhs.cutRowNames != rhs.cutRowNames {return false}
    if lhs.cutValues != rhs.cutValues {return false}
    if lhs._undoDiscardsValues != rhs._undoDiscardsValues {return false}
    if lhs._undoColumnInsertionID != rhs._undoColumnInsertionID {return false}
    if lhs._undoRowInsertionID != rhs._undoRowInsertionID {return false}
    if lhs.undoRowIDList != rhs.undoRowIDList {return false}
    if lhs.cutColumnNames != rhs.cutColumnNames {return false}
    if lhs.undoColumnIDList != rhs.undoColumnIDList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandDeleteGridColumnsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandDeleteGridColumnsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "start_column_id"),
    3: .standard(proto: "end_column_id"),
    4: .standard(proto: "cut_names"),
    5: .standard(proto: "cut_values"),
    6: .standard(proto: "undo_discards_values"),
    7: .standard(proto: "undo_column_insertion_id"),
    8: .standard(proto: "undo_row_insertion_id"),
    9: .standard(proto: "undo_column_id_list"),
    11: .standard(proto: "cut_row_names"),
    12: .standard(proto: "undo_row_id_list"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._startColumnID == nil {return false}
    if self._endColumnID == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._startColumnID, !v.isInitialized {return false}
    if let v = self._endColumnID, !v.isInitialized {return false}
    if let v = self._undoColumnInsertionID, !v.isInitialized {return false}
    if let v = self._undoRowInsertionID, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.undoColumnIDList) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.undoRowIDList) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._startColumnID)
      case 3: try decoder.decodeSingularMessageField(value: &self._endColumnID)
      case 4: try decoder.decodeRepeatedStringField(value: &self.cutNames)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.cutValues)
      case 6: try decoder.decodeSingularBoolField(value: &self._undoDiscardsValues)
      case 7: try decoder.decodeSingularMessageField(value: &self._undoColumnInsertionID)
      case 8: try decoder.decodeSingularMessageField(value: &self._undoRowInsertionID)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.undoColumnIDList)
      case 11: try decoder.decodeRepeatedStringField(value: &self.cutRowNames)
      case 12: try decoder.decodeRepeatedMessageField(value: &self.undoRowIDList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._startColumnID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._endColumnID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.cutNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.cutNames, fieldNumber: 4)
    }
    if !self.cutValues.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cutValues, fieldNumber: 5)
    }
    if let v = self._undoDiscardsValues {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._undoColumnInsertionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._undoRowInsertionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if !self.undoColumnIDList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.undoColumnIDList, fieldNumber: 9)
    }
    if !self.cutRowNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.cutRowNames, fieldNumber: 11)
    }
    if !self.undoRowIDList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.undoRowIDList, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandDeleteGridColumnsArchive, rhs: TSCH_CommandDeleteGridColumnsArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._startColumnID != rhs._startColumnID {return false}
    if lhs._endColumnID != rhs._endColumnID {return false}
    if lhs.cutNames != rhs.cutNames {return false}
    if lhs.cutValues != rhs.cutValues {return false}
    if lhs._undoDiscardsValues != rhs._undoDiscardsValues {return false}
    if lhs._undoColumnInsertionID != rhs._undoColumnInsertionID {return false}
    if lhs._undoRowInsertionID != rhs._undoRowInsertionID {return false}
    if lhs.undoColumnIDList != rhs.undoColumnIDList {return false}
    if lhs.cutRowNames != rhs.cutRowNames {return false}
    if lhs.undoRowIDList != rhs.undoRowIDList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandSetGridValueArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetGridValueArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "rowindex"),
    3: .same(proto: "columnindex"),
    4: .same(proto: "oldvalue"),
    5: .same(proto: "newvalue"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._rowindex == nil {return false}
    if self._columnindex == nil {return false}
    if self._oldvalue == nil {return false}
    if self._newvalue == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._rowindex)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._columnindex)
      case 4: try decoder.decodeSingularDoubleField(value: &self._oldvalue)
      case 5: try decoder.decodeSingularDoubleField(value: &self._newvalue)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._rowindex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._columnindex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._oldvalue {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    }
    if let v = self._newvalue {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandSetGridValueArchive, rhs: TSCH_CommandSetGridValueArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._rowindex != rhs._rowindex {return false}
    if lhs._columnindex != rhs._columnindex {return false}
    if lhs._oldvalue != rhs._oldvalue {return false}
    if lhs._newvalue != rhs._newvalue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandSetGridDirectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetGridDirectionArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "old_direction"),
    3: .standard(proto: "new_direction"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._oldDirection == nil {return false}
    if self._newDirection == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._oldDirection)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._newDirection)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldDirection {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._newDirection {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandSetGridDirectionArchive, rhs: TSCH_CommandSetGridDirectionArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldDirection != rhs._oldDirection {return false}
    if lhs._newDirection != rhs._newDirection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandSetSeriesTypeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetSeriesTypeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "seriesindex"),
    3: .same(proto: "oldtype"),
    4: .same(proto: "newtype"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._seriesindex == nil {return false}
    if self._oldtype == nil {return false}
    if self._newtype == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._seriesindex)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._oldtype)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._newtype)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._seriesindex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._oldtype {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._newtype {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandSetSeriesTypeArchive, rhs: TSCH_CommandSetSeriesTypeArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._seriesindex != rhs._seriesindex {return false}
    if lhs._oldtype != rhs._oldtype {return false}
    if lhs._newtype != rhs._newtype {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandSetScatterFormatArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetScatterFormatArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    3: .same(proto: "oldformat"),
    4: .same(proto: "newformat"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._oldformat == nil {return false}
    if self._newformat == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._oldformat)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._newformat)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldformat {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._newformat {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandSetScatterFormatArchive, rhs: TSCH_CommandSetScatterFormatArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldformat != rhs._oldformat {return false}
    if lhs._newformat != rhs._newformat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandSetMultiDataSetIndexArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetMultiDataSetIndexArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "oldindex"),
    3: .same(proto: "newindex"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._oldindex == nil {return false}
    if self._newindex == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._oldindex)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._newindex)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldindex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._newindex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandSetMultiDataSetIndexArchive, rhs: TSCH_CommandSetMultiDataSetIndexArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldindex != rhs._oldindex {return false}
    if lhs._newindex != rhs._newindex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandSetLegendFrameArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetLegendFrameArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "old_legend_frame"),
    3: .standard(proto: "new_legend_frame"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._oldLegendFrame == nil {return false}
    if self._newLegendFrame == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._oldLegendFrame, !v.isInitialized {return false}
    if let v = self._newLegendFrame, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._oldLegendFrame)
      case 3: try decoder.decodeSingularMessageField(value: &self._newLegendFrame)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldLegendFrame {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._newLegendFrame {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandSetLegendFrameArchive, rhs: TSCH_CommandSetLegendFrameArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldLegendFrame != rhs._oldLegendFrame {return false}
    if lhs._newLegendFrame != rhs._newLegendFrame {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandSetPieWedgeExplosion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSetPieWedgeExplosion"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "series_indices"),
    3: .standard(proto: "wedge_explosions"),
    5: .standard(proto: "old_series_indices"),
    6: .standard(proto: "old_wedge_explosions"),
    7: .standard(proto: "rollback_cmd"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._rollbackCmd, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedUInt32Field(value: &self.seriesIndices)
      case 3: try decoder.decodeRepeatedDoubleField(value: &self.wedgeExplosions)
      case 5: try decoder.decodeRepeatedUInt32Field(value: &self.oldSeriesIndices)
      case 6: try decoder.decodeRepeatedDoubleField(value: &self.oldWedgeExplosions)
      case 7: try decoder.decodeSingularMessageField(value: &self._rollbackCmd)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.seriesIndices.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.seriesIndices, fieldNumber: 2)
    }
    if !self.wedgeExplosions.isEmpty {
      try visitor.visitRepeatedDoubleField(value: self.wedgeExplosions, fieldNumber: 3)
    }
    if !self.oldSeriesIndices.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.oldSeriesIndices, fieldNumber: 5)
    }
    if !self.oldWedgeExplosions.isEmpty {
      try visitor.visitRepeatedDoubleField(value: self.oldWedgeExplosions, fieldNumber: 6)
    }
    if let v = self._rollbackCmd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandSetPieWedgeExplosion, rhs: TSCH_CommandSetPieWedgeExplosion) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.seriesIndices != rhs.seriesIndices {return false}
    if lhs.wedgeExplosions != rhs.wedgeExplosions {return false}
    if lhs.oldSeriesIndices != rhs.oldSeriesIndices {return false}
    if lhs.oldWedgeExplosions != rhs.oldWedgeExplosions {return false}
    if lhs._rollbackCmd != rhs._rollbackCmd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandChartApplyTheme: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandChartApplyTheme"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "info"),
    3: .standard(proto: "swap_command"),
    4: .same(proto: "preset"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._info == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._info, !v.isInitialized {return false}
    if let v = self._swapCommand, !v.isInitialized {return false}
    if let v = self._preset, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._info)
      case 3: try decoder.decodeSingularMessageField(value: &self._swapCommand)
      case 4: try decoder.decodeSingularMessageField(value: &self._preset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._swapCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._preset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandChartApplyTheme, rhs: TSCH_CommandChartApplyTheme) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._info != rhs._info {return false}
    if lhs._swapCommand != rhs._swapCommand {return false}
    if lhs._preset != rhs._preset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandChartApplyPreset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandChartApplyPreset"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "behavior"),
    3: .same(proto: "preset"),
    4: .standard(proto: "old_preset"),
    5: .standard(proto: "should_apply_swap_tuples"),
    6: .standard(proto: "are_swap_tuples_valid"),
    7: .standard(proto: "swap_tuples"),
    8: .standard(proto: "inverse_swap_tuples"),
    9: .standard(proto: "rollback_preset"),
    10: .standard(proto: "rollback_swap_tuples"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._preset, !v.isInitialized {return false}
    if let v = self._oldPreset, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.swapTuples) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.inverseSwapTuples) {return false}
    if let v = self._rollbackPreset, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.rollbackSwapTuples) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularEnumField(value: &self._behavior)
      case 3: try decoder.decodeSingularMessageField(value: &self._preset)
      case 4: try decoder.decodeSingularMessageField(value: &self._oldPreset)
      case 5: try decoder.decodeSingularBoolField(value: &self._shouldApplySwapTuples)
      case 6: try decoder.decodeSingularBoolField(value: &self._areSwapTuplesValid)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.swapTuples)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.inverseSwapTuples)
      case 9: try decoder.decodeSingularMessageField(value: &self._rollbackPreset)
      case 10: try decoder.decodeRepeatedMessageField(value: &self.rollbackSwapTuples)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._behavior {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._preset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._oldPreset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._shouldApplySwapTuples {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._areSwapTuplesValid {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if !self.swapTuples.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.swapTuples, fieldNumber: 7)
    }
    if !self.inverseSwapTuples.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inverseSwapTuples, fieldNumber: 8)
    }
    if let v = self._rollbackPreset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if !self.rollbackSwapTuples.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rollbackSwapTuples, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandChartApplyPreset, rhs: TSCH_CommandChartApplyPreset) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._behavior != rhs._behavior {return false}
    if lhs._preset != rhs._preset {return false}
    if lhs._oldPreset != rhs._oldPreset {return false}
    if lhs._shouldApplySwapTuples != rhs._shouldApplySwapTuples {return false}
    if lhs._areSwapTuplesValid != rhs._areSwapTuplesValid {return false}
    if lhs.swapTuples != rhs.swapTuples {return false}
    if lhs.inverseSwapTuples != rhs.inverseSwapTuples {return false}
    if lhs._rollbackPreset != rhs._rollbackPreset {return false}
    if lhs.rollbackSwapTuples != rhs.rollbackSwapTuples {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandCleanupGeometryArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandCleanupGeometryArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "info_geometry_command"),
    3: .standard(proto: "anchor_attachment_command"),
    4: .standard(proto: "original_legend_rect"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._infoGeometryCommand, !v.isInitialized {return false}
    if let v = self._anchorAttachmentCommand, !v.isInitialized {return false}
    if let v = self._originalLegendRect, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._infoGeometryCommand)
      case 3: try decoder.decodeSingularMessageField(value: &self._anchorAttachmentCommand)
      case 4: try decoder.decodeSingularMessageField(value: &self._originalLegendRect)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._infoGeometryCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._anchorAttachmentCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._originalLegendRect {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandCleanupGeometryArchive, rhs: TSCH_CommandCleanupGeometryArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._infoGeometryCommand != rhs._infoGeometryCommand {return false}
    if lhs._anchorAttachmentCommand != rhs._anchorAttachmentCommand {return false}
    if lhs._originalLegendRect != rhs._originalLegendRect {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "chart_info"),
    3: .standard(proto: "original_dirty_state"),
    4: .standard(proto: "chart_info_id_path"),
    5: .standard(proto: "is_for_forward_undo_redo"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._chartInfo, !v.isInitialized {return false}
    if let v = self._chartInfoIDPath, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._chartInfo)
      case 3: try decoder.decodeSingularBoolField(value: &self._originalDirtyState)
      case 4: try decoder.decodeSingularMessageField(value: &self._chartInfoIDPath)
      case 5: try decoder.decodeSingularBoolField(value: &self._isForForwardUndoRedo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._chartInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._originalDirtyState {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._chartInfoIDPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._isForForwardUndoRedo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartCommandArchive, rhs: TSCH_ChartCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._chartInfo != rhs._chartInfo {return false}
    if lhs._originalDirtyState != rhs._originalDirtyState {return false}
    if lhs._chartInfoIDPath != rhs._chartInfoIDPath {return false}
    if lhs._isForForwardUndoRedo != rhs._isForForwardUndoRedo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandReplaceGridValuesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandReplaceGridValuesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    4: .standard(proto: "old_data_rows"),
    5: .standard(proto: "new_data_rows"),
    6: .standard(proto: "old_row_names"),
    7: .standard(proto: "new_row_names"),
    8: .standard(proto: "old_col_names"),
    9: .standard(proto: "new_col_names"),
    10: .standard(proto: "update_row_uuids"),
    11: .standard(proto: "update_column_uuids"),
    12: .standard(proto: "add_row_uuids"),
    13: .standard(proto: "add_column_uuids"),
    14: .standard(proto: "delete_row_uuids"),
    15: .standard(proto: "delete_column_uuids"),
    16: .standard(proto: "set_series_direction"),
    17: .standard(proto: "new_series_direction"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.updateRowUuids) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.updateColumnUuids) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.addRowUuids) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.addColumnUuids) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.deleteRowUuids) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.deleteColumnUuids) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.oldDataRows)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.newDataRows)
      case 6: try decoder.decodeRepeatedStringField(value: &self.oldRowNames)
      case 7: try decoder.decodeRepeatedStringField(value: &self.newRowNames)
      case 8: try decoder.decodeRepeatedStringField(value: &self.oldColNames)
      case 9: try decoder.decodeRepeatedStringField(value: &self.newColNames)
      case 10: try decoder.decodeRepeatedMessageField(value: &self.updateRowUuids)
      case 11: try decoder.decodeRepeatedMessageField(value: &self.updateColumnUuids)
      case 12: try decoder.decodeRepeatedMessageField(value: &self.addRowUuids)
      case 13: try decoder.decodeRepeatedMessageField(value: &self.addColumnUuids)
      case 14: try decoder.decodeRepeatedMessageField(value: &self.deleteRowUuids)
      case 15: try decoder.decodeRepeatedMessageField(value: &self.deleteColumnUuids)
      case 16: try decoder.decodeSingularBoolField(value: &self._setSeriesDirection)
      case 17: try decoder.decodeSingularUInt32Field(value: &self._newSeriesDirection)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.oldDataRows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.oldDataRows, fieldNumber: 4)
    }
    if !self.newDataRows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.newDataRows, fieldNumber: 5)
    }
    if !self.oldRowNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.oldRowNames, fieldNumber: 6)
    }
    if !self.newRowNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.newRowNames, fieldNumber: 7)
    }
    if !self.oldColNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.oldColNames, fieldNumber: 8)
    }
    if !self.newColNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.newColNames, fieldNumber: 9)
    }
    if !self.updateRowUuids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.updateRowUuids, fieldNumber: 10)
    }
    if !self.updateColumnUuids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.updateColumnUuids, fieldNumber: 11)
    }
    if !self.addRowUuids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addRowUuids, fieldNumber: 12)
    }
    if !self.addColumnUuids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addColumnUuids, fieldNumber: 13)
    }
    if !self.deleteRowUuids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deleteRowUuids, fieldNumber: 14)
    }
    if !self.deleteColumnUuids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deleteColumnUuids, fieldNumber: 15)
    }
    if let v = self._setSeriesDirection {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
    }
    if let v = self._newSeriesDirection {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 17)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandReplaceGridValuesArchive, rhs: TSCH_CommandReplaceGridValuesArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.oldDataRows != rhs.oldDataRows {return false}
    if lhs.newDataRows != rhs.newDataRows {return false}
    if lhs.oldRowNames != rhs.oldRowNames {return false}
    if lhs.newRowNames != rhs.newRowNames {return false}
    if lhs.oldColNames != rhs.oldColNames {return false}
    if lhs.newColNames != rhs.newColNames {return false}
    if lhs.updateRowUuids != rhs.updateRowUuids {return false}
    if lhs.updateColumnUuids != rhs.updateColumnUuids {return false}
    if lhs.addRowUuids != rhs.addRowUuids {return false}
    if lhs.addColumnUuids != rhs.addColumnUuids {return false}
    if lhs.deleteRowUuids != rhs.deleteRowUuids {return false}
    if lhs.deleteColumnUuids != rhs.deleteColumnUuids {return false}
    if lhs._setSeriesDirection != rhs._setSeriesDirection {return false}
    if lhs._newSeriesDirection != rhs._newSeriesDirection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandReplaceThemePresetArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandReplaceThemePresetArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "theme"),
    3: .standard(proto: "old_preset"),
    4: .standard(proto: "new_preset"),
    5: .same(proto: "identifiers"),
    6: .standard(proto: "old_preset_index"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._theme == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._theme, !v.isInitialized {return false}
    if let v = self._oldPreset, !v.isInitialized {return false}
    if let v = self._newPreset, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.identifiers) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._theme)
      case 3: try decoder.decodeSingularMessageField(value: &self._oldPreset)
      case 4: try decoder.decodeSingularMessageField(value: &self._newPreset)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.identifiers)
      case 6: try decoder.decodeSingularUInt64Field(value: &self._oldPresetIndex)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._theme {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._oldPreset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._newPreset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.identifiers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.identifiers, fieldNumber: 5)
    }
    if let v = self._oldPresetIndex {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandReplaceThemePresetArchive, rhs: TSCH_CommandReplaceThemePresetArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._theme != rhs._theme {return false}
    if lhs._oldPreset != rhs._oldPreset {return false}
    if lhs._newPreset != rhs._newPreset {return false}
    if lhs.identifiers != rhs.identifiers {return false}
    if lhs._oldPresetIndex != rhs._oldPresetIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandReplaceThemePresetArchive.StyleAndIdentifierPair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSCH_CommandReplaceThemePresetArchive.protoMessageName + ".StyleAndIdentifierPair"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "style"),
    2: .same(proto: "identifier"),
  ]

  public var isInitialized: Bool {
    if self._style == nil {return false}
    if self._identifier == nil {return false}
    if let v = self._style, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._style)
      case 2: try decoder.decodeSingularStringField(value: &self._identifier)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._identifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandReplaceThemePresetArchive.StyleAndIdentifierPair, rhs: TSCH_CommandReplaceThemePresetArchive.StyleAndIdentifierPair) -> Bool {
    if lhs._style != rhs._style {return false}
    if lhs._identifier != rhs._identifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandInvalidateWPCaches: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandInvalidateWPCaches"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandInvalidateWPCaches, rhs: TSCH_CommandInvalidateWPCaches) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandReplaceCustomFormatArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandReplaceCustomFormatArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "rollback_cmd"),
    3: .standard(proto: "old_format_object"),
    4: .standard(proto: "new_format_object"),
    5: .standard(proto: "forward_mutations"),
    6: .standard(proto: "reverse_mutations"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._rollbackCmd, !v.isInitialized {return false}
    if let v = self._oldFormatObject, !v.isInitialized {return false}
    if let v = self._newFormatObject, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.forwardMutations) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.reverseMutations) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._rollbackCmd)
      case 3: try decoder.decodeSingularMessageField(value: &self._oldFormatObject)
      case 4: try decoder.decodeSingularMessageField(value: &self._newFormatObject)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.forwardMutations)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.reverseMutations)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._rollbackCmd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._oldFormatObject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._newFormatObject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.forwardMutations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.forwardMutations, fieldNumber: 5)
    }
    if !self.reverseMutations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reverseMutations, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandReplaceCustomFormatArchive, rhs: TSCH_CommandReplaceCustomFormatArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._rollbackCmd != rhs._rollbackCmd {return false}
    if lhs._oldFormatObject != rhs._oldFormatObject {return false}
    if lhs._newFormatObject != rhs._newFormatObject {return false}
    if lhs.forwardMutations != rhs.forwardMutations {return false}
    if lhs.reverseMutations != rhs.reverseMutations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandReplaceCustomFormatArchive.FormatObjectMutation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSCH_CommandReplaceCustomFormatArchive.protoMessageName + ".FormatObjectMutation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "style_owner_type"),
    2: .standard(proto: "style_owner_index"),
    3: .standard(proto: "format_object_property"),
    4: .standard(proto: "format_object"),
  ]

  public var isInitialized: Bool {
    if let v = self._formatObject, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._styleOwnerType)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._styleOwnerIndex)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._formatObjectProperty)
      case 4: try decoder.decodeSingularMessageField(value: &self._formatObject)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._styleOwnerType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._styleOwnerIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._formatObjectProperty {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._formatObject {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandReplaceCustomFormatArchive.FormatObjectMutation, rhs: TSCH_CommandReplaceCustomFormatArchive.FormatObjectMutation) -> Bool {
    if lhs._styleOwnerType != rhs._styleOwnerType {return false}
    if lhs._styleOwnerIndex != rhs._styleOwnerIndex {return false}
    if lhs._formatObjectProperty != rhs._formatObjectProperty {return false}
    if lhs._formatObject != rhs._formatObject {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandAddReferenceLineArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandAddReferenceLineArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "axis_id"),
    3: .same(proto: "uuid"),
    4: .standard(proto: "non_style"),
    5: .same(proto: "style"),
    6: .standard(proto: "paragraph_styles"),
    7: .standard(proto: "rollback_commands"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._axisID == nil {return false}
    if self._nonStyle == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._uuid, !v.isInitialized {return false}
    if let v = self._nonStyle, !v.isInitialized {return false}
    if let v = self._style, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.paragraphStyles) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.rollbackCommands) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._axisID)
      case 3: try decoder.decodeSingularMessageField(value: &self._uuid)
      case 4: try decoder.decodeSingularMessageField(value: &self._nonStyle)
      case 5: try decoder.decodeSingularMessageField(value: &self._style)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.paragraphStyles)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.rollbackCommands)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._axisID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._uuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._nonStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.paragraphStyles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.paragraphStyles, fieldNumber: 6)
    }
    if !self.rollbackCommands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rollbackCommands, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandAddReferenceLineArchive, rhs: TSCH_CommandAddReferenceLineArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._axisID != rhs._axisID {return false}
    if lhs._uuid != rhs._uuid {return false}
    if lhs._nonStyle != rhs._nonStyle {return false}
    if lhs._style != rhs._style {return false}
    if lhs.paragraphStyles != rhs.paragraphStyles {return false}
    if lhs.rollbackCommands != rhs.rollbackCommands {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandDeleteReferenceLineArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandDeleteReferenceLineArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "axis_id"),
    3: .same(proto: "uuid"),
    4: .standard(proto: "non_style"),
    5: .same(proto: "style"),
    6: .standard(proto: "paragraph_styles"),
    7: .standard(proto: "style_swap_command"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._axisID == nil {return false}
    if self._uuid == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._uuid, !v.isInitialized {return false}
    if let v = self._nonStyle, !v.isInitialized {return false}
    if let v = self._style, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.paragraphStyles) {return false}
    if let v = self._styleSwapCommand, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._axisID)
      case 3: try decoder.decodeSingularMessageField(value: &self._uuid)
      case 4: try decoder.decodeSingularMessageField(value: &self._nonStyle)
      case 5: try decoder.decodeSingularMessageField(value: &self._style)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.paragraphStyles)
      case 7: try decoder.decodeSingularMessageField(value: &self._styleSwapCommand)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._axisID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._uuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._nonStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.paragraphStyles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.paragraphStyles, fieldNumber: 6)
    }
    if let v = self._styleSwapCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandDeleteReferenceLineArchive, rhs: TSCH_CommandDeleteReferenceLineArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._axisID != rhs._axisID {return false}
    if lhs._uuid != rhs._uuid {return false}
    if lhs._nonStyle != rhs._nonStyle {return false}
    if lhs._style != rhs._style {return false}
    if lhs.paragraphStyles != rhs.paragraphStyles {return false}
    if lhs._styleSwapCommand != rhs._styleSwapCommand {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandPasteStyleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandPasteStyleArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "style_swap_command"),
    3: .standard(proto: "inverse_chart_style_state"),
    4: .standard(proto: "chart_style_state"),
    5: .standard(proto: "shape_style"),
    6: .same(proto: "subselection"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._styleSwapCommand, !v.isInitialized {return false}
    if let v = self._inverseChartStyleState, !v.isInitialized {return false}
    if let v = self._chartStyleState, !v.isInitialized {return false}
    if let v = self._shapeStyle, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._styleSwapCommand)
      case 3: try decoder.decodeSingularMessageField(value: &self._inverseChartStyleState)
      case 4: try decoder.decodeSingularMessageField(value: &self._chartStyleState)
      case 5: try decoder.decodeSingularMessageField(value: &self._shapeStyle)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.subselection)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._styleSwapCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._inverseChartStyleState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._chartStyleState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._shapeStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.subselection.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subselection, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandPasteStyleArchive, rhs: TSCH_CommandPasteStyleArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._styleSwapCommand != rhs._styleSwapCommand {return false}
    if lhs._inverseChartStyleState != rhs._inverseChartStyleState {return false}
    if lhs._chartStyleState != rhs._chartStyleState {return false}
    if lhs._shapeStyle != rhs._shapeStyle {return false}
    if lhs.subselection != rhs.subselection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandReplaceImageDataArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandReplaceImageDataArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "style_swap_command"),
    3: .standard(proto: "inverse_chart_style_state"),
    4: .standard(proto: "chart_style_state"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._styleSwapCommand, !v.isInitialized {return false}
    if let v = self._inverseChartStyleState, !v.isInitialized {return false}
    if let v = self._chartStyleState, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._styleSwapCommand)
      case 3: try decoder.decodeSingularMessageField(value: &self._inverseChartStyleState)
      case 4: try decoder.decodeSingularMessageField(value: &self._chartStyleState)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._styleSwapCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._inverseChartStyleState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._chartStyleState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandReplaceImageDataArchive, rhs: TSCH_CommandReplaceImageDataArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._styleSwapCommand != rhs._styleSwapCommand {return false}
    if lhs._inverseChartStyleState != rhs._inverseChartStyleState {return false}
    if lhs._chartStyleState != rhs._chartStyleState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandInducedReplaceChartGrid: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandInducedReplaceChartGrid"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandInducedReplaceChartGrid, rhs: TSCH_CommandInducedReplaceChartGrid) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CommandInduced3DChartGeometry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandInduced3DChartGeometry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CommandInduced3DChartGeometry, rhs: TSCH_CommandInduced3DChartGeometry) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartTextSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartTextSelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "selection"),
  ]

  public var isInitialized: Bool {
    if let v = self._selection, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._selection)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._selection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartTextSelectionTransformerArchive, rhs: TSCH_ChartTextSelectionTransformerArchive) -> Bool {
    if lhs._selection != rhs._selection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartDrawableSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartDrawableSelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartDrawableSelectionTransformerArchive, rhs: TSCH_ChartDrawableSelectionTransformerArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartSubselectionTransformerHelperArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartSubselectionTransformerHelperArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "selection"),
  ]

  public var isInitialized: Bool {
    if let v = self._selection, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._selection)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._selection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartSubselectionTransformerHelperArchive, rhs: TSCH_ChartSubselectionTransformerHelperArchive) -> Bool {
    if lhs._selection != rhs._selection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartRefLineSubselectionTransformerHelperArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartRefLineSubselectionTransformerHelperArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "selected_reference_line_uuids"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.selectedReferenceLineUuids) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.selectedReferenceLineUuids)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.selectedReferenceLineUuids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.selectedReferenceLineUuids, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartRefLineSubselectionTransformerHelperArchive, rhs: TSCH_ChartRefLineSubselectionTransformerHelperArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.selectedReferenceLineUuids != rhs.selectedReferenceLineUuids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartSubselectionIdentityTransformerHelperArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartSubselectionIdentityTransformerHelperArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartSubselectionIdentityTransformerHelperArchive, rhs: TSCH_ChartSubselectionIdentityTransformerHelperArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_ChartSubselectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChartSubselectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "selection"),
    2: .same(proto: "helper"),
  ]

  public var isInitialized: Bool {
    if let v = self._selection, !v.isInitialized {return false}
    if let v = self._helper, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._selection)
      case 2: try decoder.decodeSingularMessageField(value: &self._helper)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._selection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._helper {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_ChartSubselectionTransformerArchive, rhs: TSCH_ChartSubselectionTransformerArchive) -> Bool {
    if lhs._selection != rhs._selection {return false}
    if lhs._helper != rhs._helper {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_CDESelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CDESelectionTransformerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cde_selection"),
  ]

  public var isInitialized: Bool {
    if let v = self._cdeSelection, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._cdeSelection)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._cdeSelection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_CDESelectionTransformerArchive, rhs: TSCH_CDESelectionTransformerArchive) -> Bool {
    if lhs._cdeSelection != rhs._cdeSelection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
