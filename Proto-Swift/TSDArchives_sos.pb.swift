// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TSDArchives_sos.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct TSD_SpecSetFillArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fill: TSD_FillArchive {
    get {return _fill ?? TSD_FillArchive()}
    set {_fill = newValue}
  }
  /// Returns true if `fill` has been explicitly set.
  var hasFill: Bool {return self._fill != nil}
  /// Clears the value of `fill`. Subsequent reads from it will return its default value.
  mutating func clearFill() {self._fill = nil}

  var unset: Bool {
    get {return _unset ?? false}
    set {_unset = newValue}
  }
  /// Returns true if `unset` has been explicitly set.
  var hasUnset: Bool {return self._unset != nil}
  /// Clears the value of `unset`. Subsequent reads from it will return its default value.
  mutating func clearUnset() {self._unset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fill: TSD_FillArchive? = nil
  fileprivate var _unset: Bool? = nil
}

struct TSD_SpecSetLineEndArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lineEnd: TSD_LineEndArchive {
    get {return _lineEnd ?? TSD_LineEndArchive()}
    set {_lineEnd = newValue}
  }
  /// Returns true if `lineEnd` has been explicitly set.
  var hasLineEnd: Bool {return self._lineEnd != nil}
  /// Clears the value of `lineEnd`. Subsequent reads from it will return its default value.
  mutating func clearLineEnd() {self._lineEnd = nil}

  var unset: Bool {
    get {return _unset ?? false}
    set {_unset = newValue}
  }
  /// Returns true if `unset` has been explicitly set.
  var hasUnset: Bool {return self._unset != nil}
  /// Clears the value of `unset`. Subsequent reads from it will return its default value.
  mutating func clearUnset() {self._unset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _lineEnd: TSD_LineEndArchive? = nil
  fileprivate var _unset: Bool? = nil
}

struct TSD_SpecSetReflectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reflection: TSD_ReflectionArchive {
    get {return _reflection ?? TSD_ReflectionArchive()}
    set {_reflection = newValue}
  }
  /// Returns true if `reflection` has been explicitly set.
  var hasReflection: Bool {return self._reflection != nil}
  /// Clears the value of `reflection`. Subsequent reads from it will return its default value.
  mutating func clearReflection() {self._reflection = nil}

  var unset: Bool {
    get {return _unset ?? false}
    set {_unset = newValue}
  }
  /// Returns true if `unset` has been explicitly set.
  var hasUnset: Bool {return self._unset != nil}
  /// Clears the value of `unset`. Subsequent reads from it will return its default value.
  mutating func clearUnset() {self._unset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _reflection: TSD_ReflectionArchive? = nil
  fileprivate var _unset: Bool? = nil
}

struct TSD_SpecSetShadowArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var shadow: TSD_ShadowArchive {
    get {return _shadow ?? TSD_ShadowArchive()}
    set {_shadow = newValue}
  }
  /// Returns true if `shadow` has been explicitly set.
  var hasShadow: Bool {return self._shadow != nil}
  /// Clears the value of `shadow`. Subsequent reads from it will return its default value.
  mutating func clearShadow() {self._shadow = nil}

  var unset: Bool {
    get {return _unset ?? false}
    set {_unset = newValue}
  }
  /// Returns true if `unset` has been explicitly set.
  var hasUnset: Bool {return self._unset != nil}
  /// Clears the value of `unset`. Subsequent reads from it will return its default value.
  mutating func clearUnset() {self._unset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _shadow: TSD_ShadowArchive? = nil
  fileprivate var _unset: Bool? = nil
}

struct TSD_SpecSetStrokeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var stroke: TSD_StrokeArchive {
    get {return _stroke ?? TSD_StrokeArchive()}
    set {_stroke = newValue}
  }
  /// Returns true if `stroke` has been explicitly set.
  var hasStroke: Bool {return self._stroke != nil}
  /// Clears the value of `stroke`. Subsequent reads from it will return its default value.
  mutating func clearStroke() {self._stroke = nil}

  var unset: Bool {
    get {return _unset ?? false}
    set {_unset = newValue}
  }
  /// Returns true if `unset` has been explicitly set.
  var hasUnset: Bool {return self._unset != nil}
  /// Clears the value of `unset`. Subsequent reads from it will return its default value.
  mutating func clearUnset() {self._unset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _stroke: TSD_StrokeArchive? = nil
  fileprivate var _unset: Bool? = nil
}

struct TSD_SpecFillArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var specColorFillSetColor: TSD_SpecColorFillSetColorArchive {
    get {return _specColorFillSetColor ?? TSD_SpecColorFillSetColorArchive()}
    set {_specColorFillSetColor = newValue}
  }
  /// Returns true if `specColorFillSetColor` has been explicitly set.
  var hasSpecColorFillSetColor: Bool {return self._specColorFillSetColor != nil}
  /// Clears the value of `specColorFillSetColor`. Subsequent reads from it will return its default value.
  mutating func clearSpecColorFillSetColor() {self._specColorFillSetColor = nil}

  var specGradientFillSetAngle: TSD_SpecGradientFillSetAngleArchive {
    get {return _specGradientFillSetAngle ?? TSD_SpecGradientFillSetAngleArchive()}
    set {_specGradientFillSetAngle = newValue}
  }
  /// Returns true if `specGradientFillSetAngle` has been explicitly set.
  var hasSpecGradientFillSetAngle: Bool {return self._specGradientFillSetAngle != nil}
  /// Clears the value of `specGradientFillSetAngle`. Subsequent reads from it will return its default value.
  mutating func clearSpecGradientFillSetAngle() {self._specGradientFillSetAngle = nil}

  var specImageFillSetTechnique: TSD_SpecImageFillSetTechniqueArchive {
    get {return _specImageFillSetTechnique ?? TSD_SpecImageFillSetTechniqueArchive()}
    set {_specImageFillSetTechnique = newValue}
  }
  /// Returns true if `specImageFillSetTechnique` has been explicitly set.
  var hasSpecImageFillSetTechnique: Bool {return self._specImageFillSetTechnique != nil}
  /// Clears the value of `specImageFillSetTechnique`. Subsequent reads from it will return its default value.
  mutating func clearSpecImageFillSetTechnique() {self._specImageFillSetTechnique = nil}

  var specSetFill: TSD_SpecSetFillArchive {
    get {return _specSetFill ?? TSD_SpecSetFillArchive()}
    set {_specSetFill = newValue}
  }
  /// Returns true if `specSetFill` has been explicitly set.
  var hasSpecSetFill: Bool {return self._specSetFill != nil}
  /// Clears the value of `specSetFill`. Subsequent reads from it will return its default value.
  mutating func clearSpecSetFill() {self._specSetFill = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _specColorFillSetColor: TSD_SpecColorFillSetColorArchive? = nil
  fileprivate var _specGradientFillSetAngle: TSD_SpecGradientFillSetAngleArchive? = nil
  fileprivate var _specImageFillSetTechnique: TSD_SpecImageFillSetTechniqueArchive? = nil
  fileprivate var _specSetFill: TSD_SpecSetFillArchive? = nil
}

struct TSD_SpecLineEndArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var specSetLineEnd: TSD_SpecSetLineEndArchive {
    get {return _specSetLineEnd ?? TSD_SpecSetLineEndArchive()}
    set {_specSetLineEnd = newValue}
  }
  /// Returns true if `specSetLineEnd` has been explicitly set.
  var hasSpecSetLineEnd: Bool {return self._specSetLineEnd != nil}
  /// Clears the value of `specSetLineEnd`. Subsequent reads from it will return its default value.
  mutating func clearSpecSetLineEnd() {self._specSetLineEnd = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _specSetLineEnd: TSD_SpecSetLineEndArchive? = nil
}

struct TSD_SpecReflectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var specReflectionSetOpacity: TSD_SpecReflectionSetOpacityArchive {
    get {return _specReflectionSetOpacity ?? TSD_SpecReflectionSetOpacityArchive()}
    set {_specReflectionSetOpacity = newValue}
  }
  /// Returns true if `specReflectionSetOpacity` has been explicitly set.
  var hasSpecReflectionSetOpacity: Bool {return self._specReflectionSetOpacity != nil}
  /// Clears the value of `specReflectionSetOpacity`. Subsequent reads from it will return its default value.
  mutating func clearSpecReflectionSetOpacity() {self._specReflectionSetOpacity = nil}

  var specSetReflection: TSD_SpecSetReflectionArchive {
    get {return _specSetReflection ?? TSD_SpecSetReflectionArchive()}
    set {_specSetReflection = newValue}
  }
  /// Returns true if `specSetReflection` has been explicitly set.
  var hasSpecSetReflection: Bool {return self._specSetReflection != nil}
  /// Clears the value of `specSetReflection`. Subsequent reads from it will return its default value.
  mutating func clearSpecSetReflection() {self._specSetReflection = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _specReflectionSetOpacity: TSD_SpecReflectionSetOpacityArchive? = nil
  fileprivate var _specSetReflection: TSD_SpecSetReflectionArchive? = nil
}

struct TSD_SpecShadowArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var specSetShadow: TSD_SpecSetShadowArchive {
    get {return _specSetShadow ?? TSD_SpecSetShadowArchive()}
    set {_specSetShadow = newValue}
  }
  /// Returns true if `specSetShadow` has been explicitly set.
  var hasSpecSetShadow: Bool {return self._specSetShadow != nil}
  /// Clears the value of `specSetShadow`. Subsequent reads from it will return its default value.
  mutating func clearSpecSetShadow() {self._specSetShadow = nil}

  var specShadowSetAngle: TSD_SpecShadowSetAngleArchive {
    get {return _specShadowSetAngle ?? TSD_SpecShadowSetAngleArchive()}
    set {_specShadowSetAngle = newValue}
  }
  /// Returns true if `specShadowSetAngle` has been explicitly set.
  var hasSpecShadowSetAngle: Bool {return self._specShadowSetAngle != nil}
  /// Clears the value of `specShadowSetAngle`. Subsequent reads from it will return its default value.
  mutating func clearSpecShadowSetAngle() {self._specShadowSetAngle = nil}

  var specShadowSetColor: TSD_SpecShadowSetColorArchive {
    get {return _specShadowSetColor ?? TSD_SpecShadowSetColorArchive()}
    set {_specShadowSetColor = newValue}
  }
  /// Returns true if `specShadowSetColor` has been explicitly set.
  var hasSpecShadowSetColor: Bool {return self._specShadowSetColor != nil}
  /// Clears the value of `specShadowSetColor`. Subsequent reads from it will return its default value.
  mutating func clearSpecShadowSetColor() {self._specShadowSetColor = nil}

  var specShadowSetOffset: TSD_SpecShadowSetOffsetArchive {
    get {return _specShadowSetOffset ?? TSD_SpecShadowSetOffsetArchive()}
    set {_specShadowSetOffset = newValue}
  }
  /// Returns true if `specShadowSetOffset` has been explicitly set.
  var hasSpecShadowSetOffset: Bool {return self._specShadowSetOffset != nil}
  /// Clears the value of `specShadowSetOffset`. Subsequent reads from it will return its default value.
  mutating func clearSpecShadowSetOffset() {self._specShadowSetOffset = nil}

  var specShadowSetOpacity: TSD_SpecShadowSetOpacityArchive {
    get {return _specShadowSetOpacity ?? TSD_SpecShadowSetOpacityArchive()}
    set {_specShadowSetOpacity = newValue}
  }
  /// Returns true if `specShadowSetOpacity` has been explicitly set.
  var hasSpecShadowSetOpacity: Bool {return self._specShadowSetOpacity != nil}
  /// Clears the value of `specShadowSetOpacity`. Subsequent reads from it will return its default value.
  mutating func clearSpecShadowSetOpacity() {self._specShadowSetOpacity = nil}

  var specShadowSetRadius: TSD_SpecShadowSetRadiusArchive {
    get {return _specShadowSetRadius ?? TSD_SpecShadowSetRadiusArchive()}
    set {_specShadowSetRadius = newValue}
  }
  /// Returns true if `specShadowSetRadius` has been explicitly set.
  var hasSpecShadowSetRadius: Bool {return self._specShadowSetRadius != nil}
  /// Clears the value of `specShadowSetRadius`. Subsequent reads from it will return its default value.
  mutating func clearSpecShadowSetRadius() {self._specShadowSetRadius = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _specSetShadow: TSD_SpecSetShadowArchive? = nil
  fileprivate var _specShadowSetAngle: TSD_SpecShadowSetAngleArchive? = nil
  fileprivate var _specShadowSetColor: TSD_SpecShadowSetColorArchive? = nil
  fileprivate var _specShadowSetOffset: TSD_SpecShadowSetOffsetArchive? = nil
  fileprivate var _specShadowSetOpacity: TSD_SpecShadowSetOpacityArchive? = nil
  fileprivate var _specShadowSetRadius: TSD_SpecShadowSetRadiusArchive? = nil
}

struct TSD_SpecStrokeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var specFrameSetAssetScale: TSD_SpecFrameSetAssetScaleArchive {
    get {return _specFrameSetAssetScale ?? TSD_SpecFrameSetAssetScaleArchive()}
    set {_specFrameSetAssetScale = newValue}
  }
  /// Returns true if `specFrameSetAssetScale` has been explicitly set.
  var hasSpecFrameSetAssetScale: Bool {return self._specFrameSetAssetScale != nil}
  /// Clears the value of `specFrameSetAssetScale`. Subsequent reads from it will return its default value.
  mutating func clearSpecFrameSetAssetScale() {self._specFrameSetAssetScale = nil}

  var specSetStroke: TSD_SpecSetStrokeArchive {
    get {return _specSetStroke ?? TSD_SpecSetStrokeArchive()}
    set {_specSetStroke = newValue}
  }
  /// Returns true if `specSetStroke` has been explicitly set.
  var hasSpecSetStroke: Bool {return self._specSetStroke != nil}
  /// Clears the value of `specSetStroke`. Subsequent reads from it will return its default value.
  mutating func clearSpecSetStroke() {self._specSetStroke = nil}

  var specStrokeSetColor: TSD_SpecStrokeSetColorArchive {
    get {return _specStrokeSetColor ?? TSD_SpecStrokeSetColorArchive()}
    set {_specStrokeSetColor = newValue}
  }
  /// Returns true if `specStrokeSetColor` has been explicitly set.
  var hasSpecStrokeSetColor: Bool {return self._specStrokeSetColor != nil}
  /// Clears the value of `specStrokeSetColor`. Subsequent reads from it will return its default value.
  mutating func clearSpecStrokeSetColor() {self._specStrokeSetColor = nil}

  var specStrokeSetPattern: TSD_SpecStrokeSetPatternArchive {
    get {return _specStrokeSetPattern ?? TSD_SpecStrokeSetPatternArchive()}
    set {_specStrokeSetPattern = newValue}
  }
  /// Returns true if `specStrokeSetPattern` has been explicitly set.
  var hasSpecStrokeSetPattern: Bool {return self._specStrokeSetPattern != nil}
  /// Clears the value of `specStrokeSetPattern`. Subsequent reads from it will return its default value.
  mutating func clearSpecStrokeSetPattern() {self._specStrokeSetPattern = nil}

  var specStrokeSetWidth: TSD_SpecStrokeSetWidthArchive {
    get {return _specStrokeSetWidth ?? TSD_SpecStrokeSetWidthArchive()}
    set {_specStrokeSetWidth = newValue}
  }
  /// Returns true if `specStrokeSetWidth` has been explicitly set.
  var hasSpecStrokeSetWidth: Bool {return self._specStrokeSetWidth != nil}
  /// Clears the value of `specStrokeSetWidth`. Subsequent reads from it will return its default value.
  mutating func clearSpecStrokeSetWidth() {self._specStrokeSetWidth = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _specFrameSetAssetScale: TSD_SpecFrameSetAssetScaleArchive? = nil
  fileprivate var _specSetStroke: TSD_SpecSetStrokeArchive? = nil
  fileprivate var _specStrokeSetColor: TSD_SpecStrokeSetColorArchive? = nil
  fileprivate var _specStrokeSetPattern: TSD_SpecStrokeSetPatternArchive? = nil
  fileprivate var _specStrokeSetWidth: TSD_SpecStrokeSetWidthArchive? = nil
}

struct TSD_BaseShapeStylePropertyChangeSetArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fill: TSD_SpecFillArchive {
    get {return _fill ?? TSD_SpecFillArchive()}
    set {_fill = newValue}
  }
  /// Returns true if `fill` has been explicitly set.
  var hasFill: Bool {return self._fill != nil}
  /// Clears the value of `fill`. Subsequent reads from it will return its default value.
  mutating func clearFill() {self._fill = nil}

  var fillUndefined: Bool {
    get {return _fillUndefined ?? false}
    set {_fillUndefined = newValue}
  }
  /// Returns true if `fillUndefined` has been explicitly set.
  var hasFillUndefined: Bool {return self._fillUndefined != nil}
  /// Clears the value of `fillUndefined`. Subsequent reads from it will return its default value.
  mutating func clearFillUndefined() {self._fillUndefined = nil}

  var stroke: TSD_SpecStrokeArchive {
    get {return _stroke ?? TSD_SpecStrokeArchive()}
    set {_stroke = newValue}
  }
  /// Returns true if `stroke` has been explicitly set.
  var hasStroke: Bool {return self._stroke != nil}
  /// Clears the value of `stroke`. Subsequent reads from it will return its default value.
  mutating func clearStroke() {self._stroke = nil}

  var strokeUndefined: Bool {
    get {return _strokeUndefined ?? false}
    set {_strokeUndefined = newValue}
  }
  /// Returns true if `strokeUndefined` has been explicitly set.
  var hasStrokeUndefined: Bool {return self._strokeUndefined != nil}
  /// Clears the value of `strokeUndefined`. Subsequent reads from it will return its default value.
  mutating func clearStrokeUndefined() {self._strokeUndefined = nil}

  var opacity: TSS_SpecDoubleArchive {
    get {return _opacity ?? TSS_SpecDoubleArchive()}
    set {_opacity = newValue}
  }
  /// Returns true if `opacity` has been explicitly set.
  var hasOpacity: Bool {return self._opacity != nil}
  /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
  mutating func clearOpacity() {self._opacity = nil}

  var opacityUndefined: Bool {
    get {return _opacityUndefined ?? false}
    set {_opacityUndefined = newValue}
  }
  /// Returns true if `opacityUndefined` has been explicitly set.
  var hasOpacityUndefined: Bool {return self._opacityUndefined != nil}
  /// Clears the value of `opacityUndefined`. Subsequent reads from it will return its default value.
  mutating func clearOpacityUndefined() {self._opacityUndefined = nil}

  var shadow: TSD_SpecShadowArchive {
    get {return _shadow ?? TSD_SpecShadowArchive()}
    set {_shadow = newValue}
  }
  /// Returns true if `shadow` has been explicitly set.
  var hasShadow: Bool {return self._shadow != nil}
  /// Clears the value of `shadow`. Subsequent reads from it will return its default value.
  mutating func clearShadow() {self._shadow = nil}

  var shadowUndefined: Bool {
    get {return _shadowUndefined ?? false}
    set {_shadowUndefined = newValue}
  }
  /// Returns true if `shadowUndefined` has been explicitly set.
  var hasShadowUndefined: Bool {return self._shadowUndefined != nil}
  /// Clears the value of `shadowUndefined`. Subsequent reads from it will return its default value.
  mutating func clearShadowUndefined() {self._shadowUndefined = nil}

  var reflection: TSD_SpecReflectionArchive {
    get {return _reflection ?? TSD_SpecReflectionArchive()}
    set {_reflection = newValue}
  }
  /// Returns true if `reflection` has been explicitly set.
  var hasReflection: Bool {return self._reflection != nil}
  /// Clears the value of `reflection`. Subsequent reads from it will return its default value.
  mutating func clearReflection() {self._reflection = nil}

  var reflectionUndefined: Bool {
    get {return _reflectionUndefined ?? false}
    set {_reflectionUndefined = newValue}
  }
  /// Returns true if `reflectionUndefined` has been explicitly set.
  var hasReflectionUndefined: Bool {return self._reflectionUndefined != nil}
  /// Clears the value of `reflectionUndefined`. Subsequent reads from it will return its default value.
  mutating func clearReflectionUndefined() {self._reflectionUndefined = nil}

  var headLineEnd: TSD_SpecLineEndArchive {
    get {return _headLineEnd ?? TSD_SpecLineEndArchive()}
    set {_headLineEnd = newValue}
  }
  /// Returns true if `headLineEnd` has been explicitly set.
  var hasHeadLineEnd: Bool {return self._headLineEnd != nil}
  /// Clears the value of `headLineEnd`. Subsequent reads from it will return its default value.
  mutating func clearHeadLineEnd() {self._headLineEnd = nil}

  var headLineEndUndefined: Bool {
    get {return _headLineEndUndefined ?? false}
    set {_headLineEndUndefined = newValue}
  }
  /// Returns true if `headLineEndUndefined` has been explicitly set.
  var hasHeadLineEndUndefined: Bool {return self._headLineEndUndefined != nil}
  /// Clears the value of `headLineEndUndefined`. Subsequent reads from it will return its default value.
  mutating func clearHeadLineEndUndefined() {self._headLineEndUndefined = nil}

  var tailLineEnd: TSD_SpecLineEndArchive {
    get {return _tailLineEnd ?? TSD_SpecLineEndArchive()}
    set {_tailLineEnd = newValue}
  }
  /// Returns true if `tailLineEnd` has been explicitly set.
  var hasTailLineEnd: Bool {return self._tailLineEnd != nil}
  /// Clears the value of `tailLineEnd`. Subsequent reads from it will return its default value.
  mutating func clearTailLineEnd() {self._tailLineEnd = nil}

  var tailLineEndUndefined: Bool {
    get {return _tailLineEndUndefined ?? false}
    set {_tailLineEndUndefined = newValue}
  }
  /// Returns true if `tailLineEndUndefined` has been explicitly set.
  var hasTailLineEndUndefined: Bool {return self._tailLineEndUndefined != nil}
  /// Clears the value of `tailLineEndUndefined`. Subsequent reads from it will return its default value.
  mutating func clearTailLineEndUndefined() {self._tailLineEndUndefined = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fill: TSD_SpecFillArchive? = nil
  fileprivate var _fillUndefined: Bool? = nil
  fileprivate var _stroke: TSD_SpecStrokeArchive? = nil
  fileprivate var _strokeUndefined: Bool? = nil
  fileprivate var _opacity: TSS_SpecDoubleArchive? = nil
  fileprivate var _opacityUndefined: Bool? = nil
  fileprivate var _shadow: TSD_SpecShadowArchive? = nil
  fileprivate var _shadowUndefined: Bool? = nil
  fileprivate var _reflection: TSD_SpecReflectionArchive? = nil
  fileprivate var _reflectionUndefined: Bool? = nil
  fileprivate var _headLineEnd: TSD_SpecLineEndArchive? = nil
  fileprivate var _headLineEndUndefined: Bool? = nil
  fileprivate var _tailLineEnd: TSD_SpecLineEndArchive? = nil
  fileprivate var _tailLineEndUndefined: Bool? = nil
}

struct TSD_MediaStylePropertyChangeSetArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var stroke: TSD_SpecStrokeArchive {
    get {return _stroke ?? TSD_SpecStrokeArchive()}
    set {_stroke = newValue}
  }
  /// Returns true if `stroke` has been explicitly set.
  var hasStroke: Bool {return self._stroke != nil}
  /// Clears the value of `stroke`. Subsequent reads from it will return its default value.
  mutating func clearStroke() {self._stroke = nil}

  var strokeUndefined: Bool {
    get {return _strokeUndefined ?? false}
    set {_strokeUndefined = newValue}
  }
  /// Returns true if `strokeUndefined` has been explicitly set.
  var hasStrokeUndefined: Bool {return self._strokeUndefined != nil}
  /// Clears the value of `strokeUndefined`. Subsequent reads from it will return its default value.
  mutating func clearStrokeUndefined() {self._strokeUndefined = nil}

  var opacity: TSS_SpecDoubleArchive {
    get {return _opacity ?? TSS_SpecDoubleArchive()}
    set {_opacity = newValue}
  }
  /// Returns true if `opacity` has been explicitly set.
  var hasOpacity: Bool {return self._opacity != nil}
  /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
  mutating func clearOpacity() {self._opacity = nil}

  var opacityUndefined: Bool {
    get {return _opacityUndefined ?? false}
    set {_opacityUndefined = newValue}
  }
  /// Returns true if `opacityUndefined` has been explicitly set.
  var hasOpacityUndefined: Bool {return self._opacityUndefined != nil}
  /// Clears the value of `opacityUndefined`. Subsequent reads from it will return its default value.
  mutating func clearOpacityUndefined() {self._opacityUndefined = nil}

  var shadow: TSD_SpecShadowArchive {
    get {return _shadow ?? TSD_SpecShadowArchive()}
    set {_shadow = newValue}
  }
  /// Returns true if `shadow` has been explicitly set.
  var hasShadow: Bool {return self._shadow != nil}
  /// Clears the value of `shadow`. Subsequent reads from it will return its default value.
  mutating func clearShadow() {self._shadow = nil}

  var shadowUndefined: Bool {
    get {return _shadowUndefined ?? false}
    set {_shadowUndefined = newValue}
  }
  /// Returns true if `shadowUndefined` has been explicitly set.
  var hasShadowUndefined: Bool {return self._shadowUndefined != nil}
  /// Clears the value of `shadowUndefined`. Subsequent reads from it will return its default value.
  mutating func clearShadowUndefined() {self._shadowUndefined = nil}

  var reflection: TSD_SpecReflectionArchive {
    get {return _reflection ?? TSD_SpecReflectionArchive()}
    set {_reflection = newValue}
  }
  /// Returns true if `reflection` has been explicitly set.
  var hasReflection: Bool {return self._reflection != nil}
  /// Clears the value of `reflection`. Subsequent reads from it will return its default value.
  mutating func clearReflection() {self._reflection = nil}

  var reflectionUndefined: Bool {
    get {return _reflectionUndefined ?? false}
    set {_reflectionUndefined = newValue}
  }
  /// Returns true if `reflectionUndefined` has been explicitly set.
  var hasReflectionUndefined: Bool {return self._reflectionUndefined != nil}
  /// Clears the value of `reflectionUndefined`. Subsequent reads from it will return its default value.
  mutating func clearReflectionUndefined() {self._reflectionUndefined = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _stroke: TSD_SpecStrokeArchive? = nil
  fileprivate var _strokeUndefined: Bool? = nil
  fileprivate var _opacity: TSS_SpecDoubleArchive? = nil
  fileprivate var _opacityUndefined: Bool? = nil
  fileprivate var _shadow: TSD_SpecShadowArchive? = nil
  fileprivate var _shadowUndefined: Bool? = nil
  fileprivate var _reflection: TSD_SpecReflectionArchive? = nil
  fileprivate var _reflectionUndefined: Bool? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TSD"

extension TSD_SpecSetFillArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecSetFillArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fill"),
    2: .same(proto: "unset"),
  ]

  public var isInitialized: Bool {
    if self._unset == nil {return false}
    if let v = self._fill, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._fill)
      case 2: try decoder.decodeSingularBoolField(value: &self._unset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._fill {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._unset {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecSetFillArchive, rhs: TSD_SpecSetFillArchive) -> Bool {
    if lhs._fill != rhs._fill {return false}
    if lhs._unset != rhs._unset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecSetLineEndArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecSetLineEndArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "line_end"),
    2: .same(proto: "unset"),
  ]

  public var isInitialized: Bool {
    if self._unset == nil {return false}
    if let v = self._lineEnd, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._lineEnd)
      case 2: try decoder.decodeSingularBoolField(value: &self._unset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._lineEnd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._unset {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecSetLineEndArchive, rhs: TSD_SpecSetLineEndArchive) -> Bool {
    if lhs._lineEnd != rhs._lineEnd {return false}
    if lhs._unset != rhs._unset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecSetReflectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecSetReflectionArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reflection"),
    2: .same(proto: "unset"),
  ]

  public var isInitialized: Bool {
    if self._unset == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._reflection)
      case 2: try decoder.decodeSingularBoolField(value: &self._unset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._reflection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._unset {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecSetReflectionArchive, rhs: TSD_SpecSetReflectionArchive) -> Bool {
    if lhs._reflection != rhs._reflection {return false}
    if lhs._unset != rhs._unset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecSetShadowArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecSetShadowArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shadow"),
    2: .same(proto: "unset"),
  ]

  public var isInitialized: Bool {
    if self._unset == nil {return false}
    if let v = self._shadow, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._shadow)
      case 2: try decoder.decodeSingularBoolField(value: &self._unset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._shadow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._unset {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecSetShadowArchive, rhs: TSD_SpecSetShadowArchive) -> Bool {
    if lhs._shadow != rhs._shadow {return false}
    if lhs._unset != rhs._unset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecSetStrokeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecSetStrokeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stroke"),
    2: .same(proto: "unset"),
  ]

  public var isInitialized: Bool {
    if self._unset == nil {return false}
    if let v = self._stroke, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._stroke)
      case 2: try decoder.decodeSingularBoolField(value: &self._unset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._stroke {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._unset {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecSetStrokeArchive, rhs: TSD_SpecSetStrokeArchive) -> Bool {
    if lhs._stroke != rhs._stroke {return false}
    if lhs._unset != rhs._unset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecFillArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecFillArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "spec_color_fill_set_color"),
    2: .standard(proto: "spec_gradient_fill_set_angle"),
    3: .standard(proto: "spec_image_fill_set_technique"),
    4: .standard(proto: "spec_set_fill"),
  ]

  public var isInitialized: Bool {
    if let v = self._specColorFillSetColor, !v.isInitialized {return false}
    if let v = self._specGradientFillSetAngle, !v.isInitialized {return false}
    if let v = self._specImageFillSetTechnique, !v.isInitialized {return false}
    if let v = self._specSetFill, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._specColorFillSetColor)
      case 2: try decoder.decodeSingularMessageField(value: &self._specGradientFillSetAngle)
      case 3: try decoder.decodeSingularMessageField(value: &self._specImageFillSetTechnique)
      case 4: try decoder.decodeSingularMessageField(value: &self._specSetFill)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._specColorFillSetColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._specGradientFillSetAngle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._specImageFillSetTechnique {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._specSetFill {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecFillArchive, rhs: TSD_SpecFillArchive) -> Bool {
    if lhs._specColorFillSetColor != rhs._specColorFillSetColor {return false}
    if lhs._specGradientFillSetAngle != rhs._specGradientFillSetAngle {return false}
    if lhs._specImageFillSetTechnique != rhs._specImageFillSetTechnique {return false}
    if lhs._specSetFill != rhs._specSetFill {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecLineEndArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecLineEndArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "spec_set_line_end"),
  ]

  public var isInitialized: Bool {
    if let v = self._specSetLineEnd, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._specSetLineEnd)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._specSetLineEnd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecLineEndArchive, rhs: TSD_SpecLineEndArchive) -> Bool {
    if lhs._specSetLineEnd != rhs._specSetLineEnd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecReflectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecReflectionArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "spec_reflection_set_opacity"),
    2: .standard(proto: "spec_set_reflection"),
  ]

  public var isInitialized: Bool {
    if let v = self._specReflectionSetOpacity, !v.isInitialized {return false}
    if let v = self._specSetReflection, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._specReflectionSetOpacity)
      case 2: try decoder.decodeSingularMessageField(value: &self._specSetReflection)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._specReflectionSetOpacity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._specSetReflection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecReflectionArchive, rhs: TSD_SpecReflectionArchive) -> Bool {
    if lhs._specReflectionSetOpacity != rhs._specReflectionSetOpacity {return false}
    if lhs._specSetReflection != rhs._specSetReflection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecShadowArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecShadowArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "spec_set_shadow"),
    2: .standard(proto: "spec_shadow_set_angle"),
    3: .standard(proto: "spec_shadow_set_color"),
    4: .standard(proto: "spec_shadow_set_offset"),
    5: .standard(proto: "spec_shadow_set_opacity"),
    6: .standard(proto: "spec_shadow_set_radius"),
  ]

  public var isInitialized: Bool {
    if let v = self._specSetShadow, !v.isInitialized {return false}
    if let v = self._specShadowSetAngle, !v.isInitialized {return false}
    if let v = self._specShadowSetColor, !v.isInitialized {return false}
    if let v = self._specShadowSetOffset, !v.isInitialized {return false}
    if let v = self._specShadowSetOpacity, !v.isInitialized {return false}
    if let v = self._specShadowSetRadius, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._specSetShadow)
      case 2: try decoder.decodeSingularMessageField(value: &self._specShadowSetAngle)
      case 3: try decoder.decodeSingularMessageField(value: &self._specShadowSetColor)
      case 4: try decoder.decodeSingularMessageField(value: &self._specShadowSetOffset)
      case 5: try decoder.decodeSingularMessageField(value: &self._specShadowSetOpacity)
      case 6: try decoder.decodeSingularMessageField(value: &self._specShadowSetRadius)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._specSetShadow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._specShadowSetAngle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._specShadowSetColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._specShadowSetOffset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._specShadowSetOpacity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._specShadowSetRadius {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecShadowArchive, rhs: TSD_SpecShadowArchive) -> Bool {
    if lhs._specSetShadow != rhs._specSetShadow {return false}
    if lhs._specShadowSetAngle != rhs._specShadowSetAngle {return false}
    if lhs._specShadowSetColor != rhs._specShadowSetColor {return false}
    if lhs._specShadowSetOffset != rhs._specShadowSetOffset {return false}
    if lhs._specShadowSetOpacity != rhs._specShadowSetOpacity {return false}
    if lhs._specShadowSetRadius != rhs._specShadowSetRadius {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecStrokeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecStrokeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "spec_frame_set_asset_scale"),
    2: .standard(proto: "spec_set_stroke"),
    3: .standard(proto: "spec_stroke_set_color"),
    4: .standard(proto: "spec_stroke_set_pattern"),
    5: .standard(proto: "spec_stroke_set_width"),
  ]

  public var isInitialized: Bool {
    if let v = self._specFrameSetAssetScale, !v.isInitialized {return false}
    if let v = self._specSetStroke, !v.isInitialized {return false}
    if let v = self._specStrokeSetColor, !v.isInitialized {return false}
    if let v = self._specStrokeSetPattern, !v.isInitialized {return false}
    if let v = self._specStrokeSetWidth, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._specFrameSetAssetScale)
      case 2: try decoder.decodeSingularMessageField(value: &self._specSetStroke)
      case 3: try decoder.decodeSingularMessageField(value: &self._specStrokeSetColor)
      case 4: try decoder.decodeSingularMessageField(value: &self._specStrokeSetPattern)
      case 5: try decoder.decodeSingularMessageField(value: &self._specStrokeSetWidth)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._specFrameSetAssetScale {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._specSetStroke {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._specStrokeSetColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._specStrokeSetPattern {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._specStrokeSetWidth {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecStrokeArchive, rhs: TSD_SpecStrokeArchive) -> Bool {
    if lhs._specFrameSetAssetScale != rhs._specFrameSetAssetScale {return false}
    if lhs._specSetStroke != rhs._specSetStroke {return false}
    if lhs._specStrokeSetColor != rhs._specStrokeSetColor {return false}
    if lhs._specStrokeSetPattern != rhs._specStrokeSetPattern {return false}
    if lhs._specStrokeSetWidth != rhs._specStrokeSetWidth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_BaseShapeStylePropertyChangeSetArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BaseShapeStylePropertyChangeSetArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fill"),
    2: .standard(proto: "fill_undefined"),
    3: .same(proto: "stroke"),
    4: .standard(proto: "stroke_undefined"),
    5: .same(proto: "opacity"),
    6: .standard(proto: "opacity_undefined"),
    7: .same(proto: "shadow"),
    8: .standard(proto: "shadow_undefined"),
    9: .same(proto: "reflection"),
    10: .standard(proto: "reflection_undefined"),
    11: .standard(proto: "head_line_end"),
    12: .standard(proto: "head_line_end_undefined"),
    13: .standard(proto: "tail_line_end"),
    14: .standard(proto: "tail_line_end_undefined"),
  ]

  public var isInitialized: Bool {
    if let v = self._fill, !v.isInitialized {return false}
    if let v = self._stroke, !v.isInitialized {return false}
    if let v = self._opacity, !v.isInitialized {return false}
    if let v = self._shadow, !v.isInitialized {return false}
    if let v = self._reflection, !v.isInitialized {return false}
    if let v = self._headLineEnd, !v.isInitialized {return false}
    if let v = self._tailLineEnd, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._fill)
      case 2: try decoder.decodeSingularBoolField(value: &self._fillUndefined)
      case 3: try decoder.decodeSingularMessageField(value: &self._stroke)
      case 4: try decoder.decodeSingularBoolField(value: &self._strokeUndefined)
      case 5: try decoder.decodeSingularMessageField(value: &self._opacity)
      case 6: try decoder.decodeSingularBoolField(value: &self._opacityUndefined)
      case 7: try decoder.decodeSingularMessageField(value: &self._shadow)
      case 8: try decoder.decodeSingularBoolField(value: &self._shadowUndefined)
      case 9: try decoder.decodeSingularMessageField(value: &self._reflection)
      case 10: try decoder.decodeSingularBoolField(value: &self._reflectionUndefined)
      case 11: try decoder.decodeSingularMessageField(value: &self._headLineEnd)
      case 12: try decoder.decodeSingularBoolField(value: &self._headLineEndUndefined)
      case 13: try decoder.decodeSingularMessageField(value: &self._tailLineEnd)
      case 14: try decoder.decodeSingularBoolField(value: &self._tailLineEndUndefined)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._fill {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._fillUndefined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._stroke {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._strokeUndefined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._opacity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._opacityUndefined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._shadow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._shadowUndefined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._reflection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._reflectionUndefined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    }
    if let v = self._headLineEnd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._headLineEndUndefined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
    }
    if let v = self._tailLineEnd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }
    if let v = self._tailLineEndUndefined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_BaseShapeStylePropertyChangeSetArchive, rhs: TSD_BaseShapeStylePropertyChangeSetArchive) -> Bool {
    if lhs._fill != rhs._fill {return false}
    if lhs._fillUndefined != rhs._fillUndefined {return false}
    if lhs._stroke != rhs._stroke {return false}
    if lhs._strokeUndefined != rhs._strokeUndefined {return false}
    if lhs._opacity != rhs._opacity {return false}
    if lhs._opacityUndefined != rhs._opacityUndefined {return false}
    if lhs._shadow != rhs._shadow {return false}
    if lhs._shadowUndefined != rhs._shadowUndefined {return false}
    if lhs._reflection != rhs._reflection {return false}
    if lhs._reflectionUndefined != rhs._reflectionUndefined {return false}
    if lhs._headLineEnd != rhs._headLineEnd {return false}
    if lhs._headLineEndUndefined != rhs._headLineEndUndefined {return false}
    if lhs._tailLineEnd != rhs._tailLineEnd {return false}
    if lhs._tailLineEndUndefined != rhs._tailLineEndUndefined {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_MediaStylePropertyChangeSetArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MediaStylePropertyChangeSetArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stroke"),
    2: .standard(proto: "stroke_undefined"),
    3: .same(proto: "opacity"),
    4: .standard(proto: "opacity_undefined"),
    5: .same(proto: "shadow"),
    6: .standard(proto: "shadow_undefined"),
    7: .same(proto: "reflection"),
    8: .standard(proto: "reflection_undefined"),
  ]

  public var isInitialized: Bool {
    if let v = self._stroke, !v.isInitialized {return false}
    if let v = self._opacity, !v.isInitialized {return false}
    if let v = self._shadow, !v.isInitialized {return false}
    if let v = self._reflection, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._stroke)
      case 2: try decoder.decodeSingularBoolField(value: &self._strokeUndefined)
      case 3: try decoder.decodeSingularMessageField(value: &self._opacity)
      case 4: try decoder.decodeSingularBoolField(value: &self._opacityUndefined)
      case 5: try decoder.decodeSingularMessageField(value: &self._shadow)
      case 6: try decoder.decodeSingularBoolField(value: &self._shadowUndefined)
      case 7: try decoder.decodeSingularMessageField(value: &self._reflection)
      case 8: try decoder.decodeSingularBoolField(value: &self._reflectionUndefined)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._stroke {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._strokeUndefined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._opacity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._opacityUndefined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._shadow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._shadowUndefined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._reflection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._reflectionUndefined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_MediaStylePropertyChangeSetArchive, rhs: TSD_MediaStylePropertyChangeSetArchive) -> Bool {
    if lhs._stroke != rhs._stroke {return false}
    if lhs._strokeUndefined != rhs._strokeUndefined {return false}
    if lhs._opacity != rhs._opacity {return false}
    if lhs._opacityUndefined != rhs._opacityUndefined {return false}
    if lhs._shadow != rhs._shadow {return false}
    if lhs._shadowUndefined != rhs._shadowUndefined {return false}
    if lhs._reflection != rhs._reflection {return false}
    if lhs._reflectionUndefined != rhs._reflectionUndefined {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
