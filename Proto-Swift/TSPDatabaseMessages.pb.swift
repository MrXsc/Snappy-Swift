// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TSPDatabaseMessages.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct TSP_DatabaseData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: TSP_DataReference {
    get {return _data ?? TSP_DataReference()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: TSP_DataReference? = nil
}

struct TSP_DatabaseDataArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: TSP_Reference {
    get {return _data ?? TSP_Reference()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var appRelativePath: String {
    get {return _appRelativePath ?? String()}
    set {_appRelativePath = newValue}
  }
  /// Returns true if `appRelativePath` has been explicitly set.
  var hasAppRelativePath: Bool {return self._appRelativePath != nil}
  /// Clears the value of `appRelativePath`. Subsequent reads from it will return its default value.
  mutating func clearAppRelativePath() {self._appRelativePath = nil}

  var displayName: String {
    get {return _displayName ?? String()}
    set {_displayName = newValue}
  }
  /// Returns true if `displayName` has been explicitly set.
  var hasDisplayName: Bool {return self._displayName != nil}
  /// Clears the value of `displayName`. Subsequent reads from it will return its default value.
  mutating func clearDisplayName() {self._displayName = nil}

  var length: UInt64 {
    get {return _length ?? 0}
    set {_length = newValue}
  }
  /// Returns true if `length` has been explicitly set.
  var hasLength: Bool {return self._length != nil}
  /// Clears the value of `length`. Subsequent reads from it will return its default value.
  mutating func clearLength() {self._length = nil}

  var hash: UInt32 {
    get {return _hash ?? 0}
    set {_hash = newValue}
  }
  /// Returns true if `hash` has been explicitly set.
  var hasHash: Bool {return self._hash != nil}
  /// Clears the value of `hash`. Subsequent reads from it will return its default value.
  mutating func clearHash() {self._hash = nil}

  var sharable: Bool {
    get {return _sharable ?? true}
    set {_sharable = newValue}
  }
  /// Returns true if `sharable` has been explicitly set.
  var hasSharable: Bool {return self._sharable != nil}
  /// Clears the value of `sharable`. Subsequent reads from it will return its default value.
  mutating func clearSharable() {self._sharable = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: TSP_Reference? = nil
  fileprivate var _appRelativePath: String? = nil
  fileprivate var _displayName: String? = nil
  fileprivate var _length: UInt64? = nil
  fileprivate var _hash: UInt32? = nil
  fileprivate var _sharable: Bool? = nil
}

struct TSP_DatabaseImageDataArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSP_DatabaseDataArchive {
    get {return _super ?? TSP_DatabaseDataArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var type: TSP_DatabaseImageDataArchive.ImageType {
    get {return _type ?? .unknown}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ImageType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case bitmap // = 1
    case pdf // = 2

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .bitmap
      case 2: self = .pdf
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .bitmap: return 1
      case .pdf: return 2
      }
    }

  }

  init() {}

  fileprivate var _super: TSP_DatabaseDataArchive? = nil
  fileprivate var _type: TSP_DatabaseImageDataArchive.ImageType? = nil
}

#if swift(>=4.2)

extension TSP_DatabaseImageDataArchive.ImageType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TSP"

extension TSP_DatabaseData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DatabaseData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public var isInitialized: Bool {
    if self._data == nil {return false}
    if let v = self._data, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_DatabaseData, rhs: TSP_DatabaseData) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_DatabaseDataArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DatabaseDataArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .standard(proto: "app_relative_path"),
    3: .standard(proto: "display_name"),
    4: .same(proto: "length"),
    5: .same(proto: "hash"),
    6: .same(proto: "sharable"),
  ]

  public var isInitialized: Bool {
    if self._displayName == nil {return false}
    if self._sharable == nil {return false}
    if let v = self._data, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._data)
      case 2: try decoder.decodeSingularStringField(value: &self._appRelativePath)
      case 3: try decoder.decodeSingularStringField(value: &self._displayName)
      case 4: try decoder.decodeSingularUInt64Field(value: &self._length)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._hash)
      case 6: try decoder.decodeSingularBoolField(value: &self._sharable)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._appRelativePath {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._displayName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._length {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
    }
    if let v = self._hash {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._sharable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_DatabaseDataArchive, rhs: TSP_DatabaseDataArchive) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs._appRelativePath != rhs._appRelativePath {return false}
    if lhs._displayName != rhs._displayName {return false}
    if lhs._length != rhs._length {return false}
    if lhs._hash != rhs._hash {return false}
    if lhs._sharable != rhs._sharable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_DatabaseImageDataArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DatabaseImageDataArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "type"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._type == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularEnumField(value: &self._type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSP_DatabaseImageDataArchive, rhs: TSP_DatabaseImageDataArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSP_DatabaseImageDataArchive.ImageType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "unknown"),
    1: .same(proto: "bitmap"),
    2: .same(proto: "pdf"),
  ]
}
