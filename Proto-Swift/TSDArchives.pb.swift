// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TSDArchives.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum TSD_LineJoin: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case miterJoin // = 0
  case roundJoin // = 1
  case bevelJoin // = 2

  init() {
    self = .miterJoin
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .miterJoin
    case 1: self = .roundJoin
    case 2: self = .bevelJoin
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .miterJoin: return 0
    case .roundJoin: return 1
    case .bevelJoin: return 2
    }
  }

}

#if swift(>=4.2)

extension TSD_LineJoin: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_EdgeInsetsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var top: Float {
    get {return _top ?? 0}
    set {_top = newValue}
  }
  /// Returns true if `top` has been explicitly set.
  var hasTop: Bool {return self._top != nil}
  /// Clears the value of `top`. Subsequent reads from it will return its default value.
  mutating func clearTop() {self._top = nil}

  var left: Float {
    get {return _left ?? 0}
    set {_left = newValue}
  }
  /// Returns true if `left` has been explicitly set.
  var hasLeft: Bool {return self._left != nil}
  /// Clears the value of `left`. Subsequent reads from it will return its default value.
  mutating func clearLeft() {self._left = nil}

  var bottom: Float {
    get {return _bottom ?? 0}
    set {_bottom = newValue}
  }
  /// Returns true if `bottom` has been explicitly set.
  var hasBottom: Bool {return self._bottom != nil}
  /// Clears the value of `bottom`. Subsequent reads from it will return its default value.
  mutating func clearBottom() {self._bottom = nil}

  var right: Float {
    get {return _right ?? 0}
    set {_right = newValue}
  }
  /// Returns true if `right` has been explicitly set.
  var hasRight: Bool {return self._right != nil}
  /// Clears the value of `right`. Subsequent reads from it will return its default value.
  mutating func clearRight() {self._right = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _top: Float? = nil
  fileprivate var _left: Float? = nil
  fileprivate var _bottom: Float? = nil
  fileprivate var _right: Float? = nil
}

struct TSD_GeometryArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var position: TSP_Point {
    get {return _position ?? TSP_Point()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  var size: TSP_Size {
    get {return _size ?? TSP_Size()}
    set {_size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  var hasSize: Bool {return self._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  mutating func clearSize() {self._size = nil}

  var flags: UInt32 {
    get {return _flags ?? 0}
    set {_flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  var hasFlags: Bool {return self._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  mutating func clearFlags() {self._flags = nil}

  var angle: Float {
    get {return _angle ?? 0}
    set {_angle = newValue}
  }
  /// Returns true if `angle` has been explicitly set.
  var hasAngle: Bool {return self._angle != nil}
  /// Clears the value of `angle`. Subsequent reads from it will return its default value.
  mutating func clearAngle() {self._angle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _position: TSP_Point? = nil
  fileprivate var _size: TSP_Size? = nil
  fileprivate var _flags: UInt32? = nil
  fileprivate var _angle: Float? = nil
}

struct TSD_PointPathSourceArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: TSD_PointPathSourceArchive.PointPathSourceType {
    get {return _type ?? .kTsdleftSingleArrow}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var point: TSP_Point {
    get {return _point ?? TSP_Point()}
    set {_point = newValue}
  }
  /// Returns true if `point` has been explicitly set.
  var hasPoint: Bool {return self._point != nil}
  /// Clears the value of `point`. Subsequent reads from it will return its default value.
  mutating func clearPoint() {self._point = nil}

  var naturalSize: TSP_Size {
    get {return _naturalSize ?? TSP_Size()}
    set {_naturalSize = newValue}
  }
  /// Returns true if `naturalSize` has been explicitly set.
  var hasNaturalSize: Bool {return self._naturalSize != nil}
  /// Clears the value of `naturalSize`. Subsequent reads from it will return its default value.
  mutating func clearNaturalSize() {self._naturalSize = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PointPathSourceType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kTsdleftSingleArrow // = 0
    case kTsdrightSingleArrow // = 1
    case kTsddoubleArrow // = 10
    case kTsdstar // = 100
    case kTsdplus // = 200

    init() {
      self = .kTsdleftSingleArrow
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kTsdleftSingleArrow
      case 1: self = .kTsdrightSingleArrow
      case 10: self = .kTsddoubleArrow
      case 100: self = .kTsdstar
      case 200: self = .kTsdplus
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kTsdleftSingleArrow: return 0
      case .kTsdrightSingleArrow: return 1
      case .kTsddoubleArrow: return 10
      case .kTsdstar: return 100
      case .kTsdplus: return 200
      }
    }

  }

  init() {}

  fileprivate var _type: TSD_PointPathSourceArchive.PointPathSourceType? = nil
  fileprivate var _point: TSP_Point? = nil
  fileprivate var _naturalSize: TSP_Size? = nil
}

#if swift(>=4.2)

extension TSD_PointPathSourceArchive.PointPathSourceType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_ScalarPathSourceArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: TSD_ScalarPathSourceArchive.ScalarPathSourceType {
    get {return _type ?? .kTsdroundedRectangle}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var scalar: Float {
    get {return _scalar ?? 0}
    set {_scalar = newValue}
  }
  /// Returns true if `scalar` has been explicitly set.
  var hasScalar: Bool {return self._scalar != nil}
  /// Clears the value of `scalar`. Subsequent reads from it will return its default value.
  mutating func clearScalar() {self._scalar = nil}

  var naturalSize: TSP_Size {
    get {return _naturalSize ?? TSP_Size()}
    set {_naturalSize = newValue}
  }
  /// Returns true if `naturalSize` has been explicitly set.
  var hasNaturalSize: Bool {return self._naturalSize != nil}
  /// Clears the value of `naturalSize`. Subsequent reads from it will return its default value.
  mutating func clearNaturalSize() {self._naturalSize = nil}

  var isCurveContinuous: Bool {
    get {return _isCurveContinuous ?? false}
    set {_isCurveContinuous = newValue}
  }
  /// Returns true if `isCurveContinuous` has been explicitly set.
  var hasIsCurveContinuous: Bool {return self._isCurveContinuous != nil}
  /// Clears the value of `isCurveContinuous`. Subsequent reads from it will return its default value.
  mutating func clearIsCurveContinuous() {self._isCurveContinuous = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ScalarPathSourceType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kTsdroundedRectangle // = 0
    case kTsdregularPolygon // = 1
    case kTsdchevron // = 2

    init() {
      self = .kTsdroundedRectangle
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kTsdroundedRectangle
      case 1: self = .kTsdregularPolygon
      case 2: self = .kTsdchevron
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kTsdroundedRectangle: return 0
      case .kTsdregularPolygon: return 1
      case .kTsdchevron: return 2
      }
    }

  }

  init() {}

  fileprivate var _type: TSD_ScalarPathSourceArchive.ScalarPathSourceType? = nil
  fileprivate var _scalar: Float? = nil
  fileprivate var _naturalSize: TSP_Size? = nil
  fileprivate var _isCurveContinuous: Bool? = nil
}

#if swift(>=4.2)

extension TSD_ScalarPathSourceArchive.ScalarPathSourceType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_BezierPathSourceArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pathString: String {
    get {return _pathString ?? String()}
    set {_pathString = newValue}
  }
  /// Returns true if `pathString` has been explicitly set.
  var hasPathString: Bool {return self._pathString != nil}
  /// Clears the value of `pathString`. Subsequent reads from it will return its default value.
  mutating func clearPathString() {self._pathString = nil}

  var naturalSize: TSP_Size {
    get {return _naturalSize ?? TSP_Size()}
    set {_naturalSize = newValue}
  }
  /// Returns true if `naturalSize` has been explicitly set.
  var hasNaturalSize: Bool {return self._naturalSize != nil}
  /// Clears the value of `naturalSize`. Subsequent reads from it will return its default value.
  mutating func clearNaturalSize() {self._naturalSize = nil}

  var path: TSP_Path {
    get {return _path ?? TSP_Path()}
    set {_path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  var hasPath: Bool {return self._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  mutating func clearPath() {self._path = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pathString: String? = nil
  fileprivate var _naturalSize: TSP_Size? = nil
  fileprivate var _path: TSP_Path? = nil
}

struct TSD_CalloutPathSourceArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var naturalSize: TSP_Size {
    get {return _naturalSize ?? TSP_Size()}
    set {_naturalSize = newValue}
  }
  /// Returns true if `naturalSize` has been explicitly set.
  var hasNaturalSize: Bool {return self._naturalSize != nil}
  /// Clears the value of `naturalSize`. Subsequent reads from it will return its default value.
  mutating func clearNaturalSize() {self._naturalSize = nil}

  var tailPosition: TSP_Point {
    get {return _tailPosition ?? TSP_Point()}
    set {_tailPosition = newValue}
  }
  /// Returns true if `tailPosition` has been explicitly set.
  var hasTailPosition: Bool {return self._tailPosition != nil}
  /// Clears the value of `tailPosition`. Subsequent reads from it will return its default value.
  mutating func clearTailPosition() {self._tailPosition = nil}

  var tailSize: Float {
    get {return _tailSize ?? 0}
    set {_tailSize = newValue}
  }
  /// Returns true if `tailSize` has been explicitly set.
  var hasTailSize: Bool {return self._tailSize != nil}
  /// Clears the value of `tailSize`. Subsequent reads from it will return its default value.
  mutating func clearTailSize() {self._tailSize = nil}

  var cornerRadius: Float {
    get {return _cornerRadius ?? 0}
    set {_cornerRadius = newValue}
  }
  /// Returns true if `cornerRadius` has been explicitly set.
  var hasCornerRadius: Bool {return self._cornerRadius != nil}
  /// Clears the value of `cornerRadius`. Subsequent reads from it will return its default value.
  mutating func clearCornerRadius() {self._cornerRadius = nil}

  var centerTail: Bool {
    get {return _centerTail ?? false}
    set {_centerTail = newValue}
  }
  /// Returns true if `centerTail` has been explicitly set.
  var hasCenterTail: Bool {return self._centerTail != nil}
  /// Clears the value of `centerTail`. Subsequent reads from it will return its default value.
  mutating func clearCenterTail() {self._centerTail = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _naturalSize: TSP_Size? = nil
  fileprivate var _tailPosition: TSP_Point? = nil
  fileprivate var _tailSize: Float? = nil
  fileprivate var _cornerRadius: Float? = nil
  fileprivate var _centerTail: Bool? = nil
}

struct TSD_ConnectionLinePathSourceArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_BezierPathSourceArchive {
    get {return _super ?? TSD_BezierPathSourceArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var type: TSD_ConnectionLinePathSourceArchive.ConnectionLinePathSourceType {
    get {return _type ?? .kTsdconnectionLineTypeQuadratic}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var outsetFrom: Float {
    get {return _outsetFrom ?? 0}
    set {_outsetFrom = newValue}
  }
  /// Returns true if `outsetFrom` has been explicitly set.
  var hasOutsetFrom: Bool {return self._outsetFrom != nil}
  /// Clears the value of `outsetFrom`. Subsequent reads from it will return its default value.
  mutating func clearOutsetFrom() {self._outsetFrom = nil}

  var outsetTo: Float {
    get {return _outsetTo ?? 0}
    set {_outsetTo = newValue}
  }
  /// Returns true if `outsetTo` has been explicitly set.
  var hasOutsetTo: Bool {return self._outsetTo != nil}
  /// Clears the value of `outsetTo`. Subsequent reads from it will return its default value.
  mutating func clearOutsetTo() {self._outsetTo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ConnectionLinePathSourceType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kTsdconnectionLineTypeQuadratic // = 0
    case kTsdconnectionLineTypeOrthogonal // = 1

    init() {
      self = .kTsdconnectionLineTypeQuadratic
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kTsdconnectionLineTypeQuadratic
      case 1: self = .kTsdconnectionLineTypeOrthogonal
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kTsdconnectionLineTypeQuadratic: return 0
      case .kTsdconnectionLineTypeOrthogonal: return 1
      }
    }

  }

  init() {}

  fileprivate var _super: TSD_BezierPathSourceArchive? = nil
  fileprivate var _type: TSD_ConnectionLinePathSourceArchive.ConnectionLinePathSourceType? = nil
  fileprivate var _outsetFrom: Float? = nil
  fileprivate var _outsetTo: Float? = nil
}

#if swift(>=4.2)

extension TSD_ConnectionLinePathSourceArchive.ConnectionLinePathSourceType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_EditableBezierPathSourceArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var subpaths: [TSD_EditableBezierPathSourceArchive.Subpath] = []

  var naturalSize: TSP_Size {
    get {return _naturalSize ?? TSP_Size()}
    set {_naturalSize = newValue}
  }
  /// Returns true if `naturalSize` has been explicitly set.
  var hasNaturalSize: Bool {return self._naturalSize != nil}
  /// Clears the value of `naturalSize`. Subsequent reads from it will return its default value.
  mutating func clearNaturalSize() {self._naturalSize = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum NodeType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case sharp // = 1
    case bezier // = 2
    case smooth // = 3

    init() {
      self = .sharp
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .sharp
      case 2: self = .bezier
      case 3: self = .smooth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .sharp: return 1
      case .bezier: return 2
      case .smooth: return 3
      }
    }

  }

  struct Node {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var inControlPoint: TSP_Point {
      get {return _inControlPoint ?? TSP_Point()}
      set {_inControlPoint = newValue}
    }
    /// Returns true if `inControlPoint` has been explicitly set.
    var hasInControlPoint: Bool {return self._inControlPoint != nil}
    /// Clears the value of `inControlPoint`. Subsequent reads from it will return its default value.
    mutating func clearInControlPoint() {self._inControlPoint = nil}

    var nodePoint: TSP_Point {
      get {return _nodePoint ?? TSP_Point()}
      set {_nodePoint = newValue}
    }
    /// Returns true if `nodePoint` has been explicitly set.
    var hasNodePoint: Bool {return self._nodePoint != nil}
    /// Clears the value of `nodePoint`. Subsequent reads from it will return its default value.
    mutating func clearNodePoint() {self._nodePoint = nil}

    var outControlPoint: TSP_Point {
      get {return _outControlPoint ?? TSP_Point()}
      set {_outControlPoint = newValue}
    }
    /// Returns true if `outControlPoint` has been explicitly set.
    var hasOutControlPoint: Bool {return self._outControlPoint != nil}
    /// Clears the value of `outControlPoint`. Subsequent reads from it will return its default value.
    mutating func clearOutControlPoint() {self._outControlPoint = nil}

    var type: TSD_EditableBezierPathSourceArchive.NodeType {
      get {return _type ?? .sharp}
      set {_type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
    mutating func clearType() {self._type = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _inControlPoint: TSP_Point? = nil
    fileprivate var _nodePoint: TSP_Point? = nil
    fileprivate var _outControlPoint: TSP_Point? = nil
    fileprivate var _type: TSD_EditableBezierPathSourceArchive.NodeType? = nil
  }

  struct Subpath {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var nodes: [TSD_EditableBezierPathSourceArchive.Node] = []

    var closed: Bool {
      get {return _closed ?? false}
      set {_closed = newValue}
    }
    /// Returns true if `closed` has been explicitly set.
    var hasClosed: Bool {return self._closed != nil}
    /// Clears the value of `closed`. Subsequent reads from it will return its default value.
    mutating func clearClosed() {self._closed = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _closed: Bool? = nil
  }

  init() {}

  fileprivate var _naturalSize: TSP_Size? = nil
}

#if swift(>=4.2)

extension TSD_EditableBezierPathSourceArchive.NodeType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_PathSourceArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var horizontalFlip: Bool {
    get {return _horizontalFlip ?? false}
    set {_horizontalFlip = newValue}
  }
  /// Returns true if `horizontalFlip` has been explicitly set.
  var hasHorizontalFlip: Bool {return self._horizontalFlip != nil}
  /// Clears the value of `horizontalFlip`. Subsequent reads from it will return its default value.
  mutating func clearHorizontalFlip() {self._horizontalFlip = nil}

  var verticalFlip: Bool {
    get {return _verticalFlip ?? false}
    set {_verticalFlip = newValue}
  }
  /// Returns true if `verticalFlip` has been explicitly set.
  var hasVerticalFlip: Bool {return self._verticalFlip != nil}
  /// Clears the value of `verticalFlip`. Subsequent reads from it will return its default value.
  mutating func clearVerticalFlip() {self._verticalFlip = nil}

  var pointPathSource: TSD_PointPathSourceArchive {
    get {return _pointPathSource ?? TSD_PointPathSourceArchive()}
    set {_pointPathSource = newValue}
  }
  /// Returns true if `pointPathSource` has been explicitly set.
  var hasPointPathSource: Bool {return self._pointPathSource != nil}
  /// Clears the value of `pointPathSource`. Subsequent reads from it will return its default value.
  mutating func clearPointPathSource() {self._pointPathSource = nil}

  var scalarPathSource: TSD_ScalarPathSourceArchive {
    get {return _scalarPathSource ?? TSD_ScalarPathSourceArchive()}
    set {_scalarPathSource = newValue}
  }
  /// Returns true if `scalarPathSource` has been explicitly set.
  var hasScalarPathSource: Bool {return self._scalarPathSource != nil}
  /// Clears the value of `scalarPathSource`. Subsequent reads from it will return its default value.
  mutating func clearScalarPathSource() {self._scalarPathSource = nil}

  var bezierPathSource: TSD_BezierPathSourceArchive {
    get {return _bezierPathSource ?? TSD_BezierPathSourceArchive()}
    set {_bezierPathSource = newValue}
  }
  /// Returns true if `bezierPathSource` has been explicitly set.
  var hasBezierPathSource: Bool {return self._bezierPathSource != nil}
  /// Clears the value of `bezierPathSource`. Subsequent reads from it will return its default value.
  mutating func clearBezierPathSource() {self._bezierPathSource = nil}

  var calloutPathSource: TSD_CalloutPathSourceArchive {
    get {return _calloutPathSource ?? TSD_CalloutPathSourceArchive()}
    set {_calloutPathSource = newValue}
  }
  /// Returns true if `calloutPathSource` has been explicitly set.
  var hasCalloutPathSource: Bool {return self._calloutPathSource != nil}
  /// Clears the value of `calloutPathSource`. Subsequent reads from it will return its default value.
  mutating func clearCalloutPathSource() {self._calloutPathSource = nil}

  var connectionLinePathSource: TSD_ConnectionLinePathSourceArchive {
    get {return _connectionLinePathSource ?? TSD_ConnectionLinePathSourceArchive()}
    set {_connectionLinePathSource = newValue}
  }
  /// Returns true if `connectionLinePathSource` has been explicitly set.
  var hasConnectionLinePathSource: Bool {return self._connectionLinePathSource != nil}
  /// Clears the value of `connectionLinePathSource`. Subsequent reads from it will return its default value.
  mutating func clearConnectionLinePathSource() {self._connectionLinePathSource = nil}

  var editableBezierPathSource: TSD_EditableBezierPathSourceArchive {
    get {return _editableBezierPathSource ?? TSD_EditableBezierPathSourceArchive()}
    set {_editableBezierPathSource = newValue}
  }
  /// Returns true if `editableBezierPathSource` has been explicitly set.
  var hasEditableBezierPathSource: Bool {return self._editableBezierPathSource != nil}
  /// Clears the value of `editableBezierPathSource`. Subsequent reads from it will return its default value.
  mutating func clearEditableBezierPathSource() {self._editableBezierPathSource = nil}

  var localizationKey: String {
    get {return _localizationKey ?? String()}
    set {_localizationKey = newValue}
  }
  /// Returns true if `localizationKey` has been explicitly set.
  var hasLocalizationKey: Bool {return self._localizationKey != nil}
  /// Clears the value of `localizationKey`. Subsequent reads from it will return its default value.
  mutating func clearLocalizationKey() {self._localizationKey = nil}

  var userDefinedName: String {
    get {return _userDefinedName ?? String()}
    set {_userDefinedName = newValue}
  }
  /// Returns true if `userDefinedName` has been explicitly set.
  var hasUserDefinedName: Bool {return self._userDefinedName != nil}
  /// Clears the value of `userDefinedName`. Subsequent reads from it will return its default value.
  mutating func clearUserDefinedName() {self._userDefinedName = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _horizontalFlip: Bool? = nil
  fileprivate var _verticalFlip: Bool? = nil
  fileprivate var _pointPathSource: TSD_PointPathSourceArchive? = nil
  fileprivate var _scalarPathSource: TSD_ScalarPathSourceArchive? = nil
  fileprivate var _bezierPathSource: TSD_BezierPathSourceArchive? = nil
  fileprivate var _calloutPathSource: TSD_CalloutPathSourceArchive? = nil
  fileprivate var _connectionLinePathSource: TSD_ConnectionLinePathSourceArchive? = nil
  fileprivate var _editableBezierPathSource: TSD_EditableBezierPathSourceArchive? = nil
  fileprivate var _localizationKey: String? = nil
  fileprivate var _userDefinedName: String? = nil
}

struct TSD_AngleGradientArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gradientangle: Float {
    get {return _gradientangle ?? 0}
    set {_gradientangle = newValue}
  }
  /// Returns true if `gradientangle` has been explicitly set.
  var hasGradientangle: Bool {return self._gradientangle != nil}
  /// Clears the value of `gradientangle`. Subsequent reads from it will return its default value.
  mutating func clearGradientangle() {self._gradientangle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _gradientangle: Float? = nil
}

struct TSD_TransformGradientArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var start: TSP_Point {
    get {return _start ?? TSP_Point()}
    set {_start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  var hasStart: Bool {return self._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
  mutating func clearStart() {self._start = nil}

  var end: TSP_Point {
    get {return _end ?? TSP_Point()}
    set {_end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  var hasEnd: Bool {return self._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
  mutating func clearEnd() {self._end = nil}

  var baseNaturalSize: TSP_Size {
    get {return _baseNaturalSize ?? TSP_Size()}
    set {_baseNaturalSize = newValue}
  }
  /// Returns true if `baseNaturalSize` has been explicitly set.
  var hasBaseNaturalSize: Bool {return self._baseNaturalSize != nil}
  /// Clears the value of `baseNaturalSize`. Subsequent reads from it will return its default value.
  mutating func clearBaseNaturalSize() {self._baseNaturalSize = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _start: TSP_Point? = nil
  fileprivate var _end: TSP_Point? = nil
  fileprivate var _baseNaturalSize: TSP_Size? = nil
}

struct TSD_GradientArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: TSD_GradientArchive.GradientType {
    get {return _type ?? .linear}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var stops: [TSD_GradientArchive.GradientStop] = []

  var opacity: Float {
    get {return _opacity ?? 0}
    set {_opacity = newValue}
  }
  /// Returns true if `opacity` has been explicitly set.
  var hasOpacity: Bool {return self._opacity != nil}
  /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
  mutating func clearOpacity() {self._opacity = nil}

  var advancedGradient: Bool {
    get {return _advancedGradient ?? false}
    set {_advancedGradient = newValue}
  }
  /// Returns true if `advancedGradient` has been explicitly set.
  var hasAdvancedGradient: Bool {return self._advancedGradient != nil}
  /// Clears the value of `advancedGradient`. Subsequent reads from it will return its default value.
  mutating func clearAdvancedGradient() {self._advancedGradient = nil}

  var anglegradient: TSD_AngleGradientArchive {
    get {return _anglegradient ?? TSD_AngleGradientArchive()}
    set {_anglegradient = newValue}
  }
  /// Returns true if `anglegradient` has been explicitly set.
  var hasAnglegradient: Bool {return self._anglegradient != nil}
  /// Clears the value of `anglegradient`. Subsequent reads from it will return its default value.
  mutating func clearAnglegradient() {self._anglegradient = nil}

  var transformgradient: TSD_TransformGradientArchive {
    get {return _transformgradient ?? TSD_TransformGradientArchive()}
    set {_transformgradient = newValue}
  }
  /// Returns true if `transformgradient` has been explicitly set.
  var hasTransformgradient: Bool {return self._transformgradient != nil}
  /// Clears the value of `transformgradient`. Subsequent reads from it will return its default value.
  mutating func clearTransformgradient() {self._transformgradient = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum GradientType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case linear // = 0
    case radial // = 1

    init() {
      self = .linear
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .linear
      case 1: self = .radial
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .linear: return 0
      case .radial: return 1
      }
    }

  }

  struct GradientStop {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var color: TSP_Color {
      get {return _color ?? TSP_Color()}
      set {_color = newValue}
    }
    /// Returns true if `color` has been explicitly set.
    var hasColor: Bool {return self._color != nil}
    /// Clears the value of `color`. Subsequent reads from it will return its default value.
    mutating func clearColor() {self._color = nil}

    var fraction: Float {
      get {return _fraction ?? 0}
      set {_fraction = newValue}
    }
    /// Returns true if `fraction` has been explicitly set.
    var hasFraction: Bool {return self._fraction != nil}
    /// Clears the value of `fraction`. Subsequent reads from it will return its default value.
    mutating func clearFraction() {self._fraction = nil}

    var inflection: Float {
      get {return _inflection ?? 0}
      set {_inflection = newValue}
    }
    /// Returns true if `inflection` has been explicitly set.
    var hasInflection: Bool {return self._inflection != nil}
    /// Clears the value of `inflection`. Subsequent reads from it will return its default value.
    mutating func clearInflection() {self._inflection = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _color: TSP_Color? = nil
    fileprivate var _fraction: Float? = nil
    fileprivate var _inflection: Float? = nil
  }

  init() {}

  fileprivate var _type: TSD_GradientArchive.GradientType? = nil
  fileprivate var _opacity: Float? = nil
  fileprivate var _advancedGradient: Bool? = nil
  fileprivate var _anglegradient: TSD_AngleGradientArchive? = nil
  fileprivate var _transformgradient: TSD_TransformGradientArchive? = nil
}

#if swift(>=4.2)

extension TSD_GradientArchive.GradientType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_ImageFillArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var imagedata: TSP_DataReference {
    get {return _imagedata ?? TSP_DataReference()}
    set {_imagedata = newValue}
  }
  /// Returns true if `imagedata` has been explicitly set.
  var hasImagedata: Bool {return self._imagedata != nil}
  /// Clears the value of `imagedata`. Subsequent reads from it will return its default value.
  mutating func clearImagedata() {self._imagedata = nil}

  var technique: TSD_ImageFillArchive.ImageFillTechnique {
    get {return _technique ?? .naturalSize}
    set {_technique = newValue}
  }
  /// Returns true if `technique` has been explicitly set.
  var hasTechnique: Bool {return self._technique != nil}
  /// Clears the value of `technique`. Subsequent reads from it will return its default value.
  mutating func clearTechnique() {self._technique = nil}

  var tint: TSP_Color {
    get {return _tint ?? TSP_Color()}
    set {_tint = newValue}
  }
  /// Returns true if `tint` has been explicitly set.
  var hasTint: Bool {return self._tint != nil}
  /// Clears the value of `tint`. Subsequent reads from it will return its default value.
  mutating func clearTint() {self._tint = nil}

  var fillsize: TSP_Size {
    get {return _fillsize ?? TSP_Size()}
    set {_fillsize = newValue}
  }
  /// Returns true if `fillsize` has been explicitly set.
  var hasFillsize: Bool {return self._fillsize != nil}
  /// Clears the value of `fillsize`. Subsequent reads from it will return its default value.
  mutating func clearFillsize() {self._fillsize = nil}

  var originalimagedata: TSP_DataReference {
    get {return _originalimagedata ?? TSP_DataReference()}
    set {_originalimagedata = newValue}
  }
  /// Returns true if `originalimagedata` has been explicitly set.
  var hasOriginalimagedata: Bool {return self._originalimagedata != nil}
  /// Clears the value of `originalimagedata`. Subsequent reads from it will return its default value.
  mutating func clearOriginalimagedata() {self._originalimagedata = nil}

  var interpretsUntaggedImageDataAsGeneric: Bool {
    get {return _interpretsUntaggedImageDataAsGeneric ?? false}
    set {_interpretsUntaggedImageDataAsGeneric = newValue}
  }
  /// Returns true if `interpretsUntaggedImageDataAsGeneric` has been explicitly set.
  var hasInterpretsUntaggedImageDataAsGeneric: Bool {return self._interpretsUntaggedImageDataAsGeneric != nil}
  /// Clears the value of `interpretsUntaggedImageDataAsGeneric`. Subsequent reads from it will return its default value.
  mutating func clearInterpretsUntaggedImageDataAsGeneric() {self._interpretsUntaggedImageDataAsGeneric = nil}

  var referencecolor: TSP_Color {
    get {return _referencecolor ?? TSP_Color()}
    set {_referencecolor = newValue}
  }
  /// Returns true if `referencecolor` has been explicitly set.
  var hasReferencecolor: Bool {return self._referencecolor != nil}
  /// Clears the value of `referencecolor`. Subsequent reads from it will return its default value.
  mutating func clearReferencecolor() {self._referencecolor = nil}

  var databaseImagedata: TSP_Reference {
    get {return _databaseImagedata ?? TSP_Reference()}
    set {_databaseImagedata = newValue}
  }
  /// Returns true if `databaseImagedata` has been explicitly set.
  var hasDatabaseImagedata: Bool {return self._databaseImagedata != nil}
  /// Clears the value of `databaseImagedata`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseImagedata() {self._databaseImagedata = nil}

  var databaseOriginalimagedata: TSP_Reference {
    get {return _databaseOriginalimagedata ?? TSP_Reference()}
    set {_databaseOriginalimagedata = newValue}
  }
  /// Returns true if `databaseOriginalimagedata` has been explicitly set.
  var hasDatabaseOriginalimagedata: Bool {return self._databaseOriginalimagedata != nil}
  /// Clears the value of `databaseOriginalimagedata`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseOriginalimagedata() {self._databaseOriginalimagedata = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ImageFillTechnique: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case naturalSize // = 0
    case stretch // = 1
    case tile // = 2
    case scaleToFill // = 3
    case scaleToFit // = 4

    init() {
      self = .naturalSize
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .naturalSize
      case 1: self = .stretch
      case 2: self = .tile
      case 3: self = .scaleToFill
      case 4: self = .scaleToFit
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .naturalSize: return 0
      case .stretch: return 1
      case .tile: return 2
      case .scaleToFill: return 3
      case .scaleToFit: return 4
      }
    }

  }

  init() {}

  fileprivate var _imagedata: TSP_DataReference? = nil
  fileprivate var _technique: TSD_ImageFillArchive.ImageFillTechnique? = nil
  fileprivate var _tint: TSP_Color? = nil
  fileprivate var _fillsize: TSP_Size? = nil
  fileprivate var _originalimagedata: TSP_DataReference? = nil
  fileprivate var _interpretsUntaggedImageDataAsGeneric: Bool? = nil
  fileprivate var _referencecolor: TSP_Color? = nil
  fileprivate var _databaseImagedata: TSP_Reference? = nil
  fileprivate var _databaseOriginalimagedata: TSP_Reference? = nil
}

#if swift(>=4.2)

extension TSD_ImageFillArchive.ImageFillTechnique: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_FillArchive: SwiftProtobuf.ExtensibleMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var color: TSP_Color {
    get {return _color ?? TSP_Color()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {self._color = nil}

  var gradient: TSD_GradientArchive {
    get {return _gradient ?? TSD_GradientArchive()}
    set {_gradient = newValue}
  }
  /// Returns true if `gradient` has been explicitly set.
  var hasGradient: Bool {return self._gradient != nil}
  /// Clears the value of `gradient`. Subsequent reads from it will return its default value.
  mutating func clearGradient() {self._gradient = nil}

  var image: TSD_ImageFillArchive {
    get {return _image ?? TSD_ImageFillArchive()}
    set {_image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  var hasImage: Bool {return self._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  mutating func clearImage() {self._image = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _color: TSP_Color? = nil
  fileprivate var _gradient: TSD_GradientArchive? = nil
  fileprivate var _image: TSD_ImageFillArchive? = nil
}

struct TSD_StrokePatternArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: TSD_StrokePatternArchive.StrokePatternType {
    get {return _type ?? .tsdpattern}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var phase: Float {
    get {return _phase ?? 0}
    set {_phase = newValue}
  }
  /// Returns true if `phase` has been explicitly set.
  var hasPhase: Bool {return self._phase != nil}
  /// Clears the value of `phase`. Subsequent reads from it will return its default value.
  mutating func clearPhase() {self._phase = nil}

  var count: UInt32 {
    get {return _count ?? 0}
    set {_count = newValue}
  }
  /// Returns true if `count` has been explicitly set.
  var hasCount: Bool {return self._count != nil}
  /// Clears the value of `count`. Subsequent reads from it will return its default value.
  mutating func clearCount() {self._count = nil}

  var pattern: [Float] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum StrokePatternType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case tsdpattern // = 0
    case tsdsolidPattern // = 1
    case tsdemptyPattern // = 2

    init() {
      self = .tsdpattern
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .tsdpattern
      case 1: self = .tsdsolidPattern
      case 2: self = .tsdemptyPattern
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .tsdpattern: return 0
      case .tsdsolidPattern: return 1
      case .tsdemptyPattern: return 2
      }
    }

  }

  init() {}

  fileprivate var _type: TSD_StrokePatternArchive.StrokePatternType? = nil
  fileprivate var _phase: Float? = nil
  fileprivate var _count: UInt32? = nil
}

#if swift(>=4.2)

extension TSD_StrokePatternArchive.StrokePatternType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_StrokeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var color: TSP_Color {
    get {return _color ?? TSP_Color()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {self._color = nil}

  var width: Float {
    get {return _width ?? 0}
    set {_width = newValue}
  }
  /// Returns true if `width` has been explicitly set.
  var hasWidth: Bool {return self._width != nil}
  /// Clears the value of `width`. Subsequent reads from it will return its default value.
  mutating func clearWidth() {self._width = nil}

  var cap: TSD_StrokeArchive.LineCap {
    get {return _cap ?? .buttCap}
    set {_cap = newValue}
  }
  /// Returns true if `cap` has been explicitly set.
  var hasCap: Bool {return self._cap != nil}
  /// Clears the value of `cap`. Subsequent reads from it will return its default value.
  mutating func clearCap() {self._cap = nil}

  var join: TSD_LineJoin {
    get {return _join ?? .miterJoin}
    set {_join = newValue}
  }
  /// Returns true if `join` has been explicitly set.
  var hasJoin: Bool {return self._join != nil}
  /// Clears the value of `join`. Subsequent reads from it will return its default value.
  mutating func clearJoin() {self._join = nil}

  var miterLimit: Float {
    get {return _miterLimit ?? 0}
    set {_miterLimit = newValue}
  }
  /// Returns true if `miterLimit` has been explicitly set.
  var hasMiterLimit: Bool {return self._miterLimit != nil}
  /// Clears the value of `miterLimit`. Subsequent reads from it will return its default value.
  mutating func clearMiterLimit() {self._miterLimit = nil}

  var pattern: TSD_StrokePatternArchive {
    get {return _pattern ?? TSD_StrokePatternArchive()}
    set {_pattern = newValue}
  }
  /// Returns true if `pattern` has been explicitly set.
  var hasPattern: Bool {return self._pattern != nil}
  /// Clears the value of `pattern`. Subsequent reads from it will return its default value.
  mutating func clearPattern() {self._pattern = nil}

  var smartStroke: TSD_SmartStrokeArchive {
    get {return _smartStroke ?? TSD_SmartStrokeArchive()}
    set {_smartStroke = newValue}
  }
  /// Returns true if `smartStroke` has been explicitly set.
  var hasSmartStroke: Bool {return self._smartStroke != nil}
  /// Clears the value of `smartStroke`. Subsequent reads from it will return its default value.
  mutating func clearSmartStroke() {self._smartStroke = nil}

  var frame: TSD_FrameArchive {
    get {return _frame ?? TSD_FrameArchive()}
    set {_frame = newValue}
  }
  /// Returns true if `frame` has been explicitly set.
  var hasFrame: Bool {return self._frame != nil}
  /// Clears the value of `frame`. Subsequent reads from it will return its default value.
  mutating func clearFrame() {self._frame = nil}

  var patternedStroke: TSD_PatternedStrokeArchive {
    get {return _patternedStroke ?? TSD_PatternedStrokeArchive()}
    set {_patternedStroke = newValue}
  }
  /// Returns true if `patternedStroke` has been explicitly set.
  var hasPatternedStroke: Bool {return self._patternedStroke != nil}
  /// Clears the value of `patternedStroke`. Subsequent reads from it will return its default value.
  mutating func clearPatternedStroke() {self._patternedStroke = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum LineCap: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case buttCap // = 0
    case roundCap // = 1
    case squareCap // = 2

    init() {
      self = .buttCap
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .buttCap
      case 1: self = .roundCap
      case 2: self = .squareCap
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .buttCap: return 0
      case .roundCap: return 1
      case .squareCap: return 2
      }
    }

  }

  init() {}

  fileprivate var _color: TSP_Color? = nil
  fileprivate var _width: Float? = nil
  fileprivate var _cap: TSD_StrokeArchive.LineCap? = nil
  fileprivate var _join: TSD_LineJoin? = nil
  fileprivate var _miterLimit: Float? = nil
  fileprivate var _pattern: TSD_StrokePatternArchive? = nil
  fileprivate var _smartStroke: TSD_SmartStrokeArchive? = nil
  fileprivate var _frame: TSD_FrameArchive? = nil
  fileprivate var _patternedStroke: TSD_PatternedStrokeArchive? = nil
}

#if swift(>=4.2)

extension TSD_StrokeArchive.LineCap: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_SmartStrokeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var strokeName: String {
    get {return _strokeName ?? String()}
    set {_strokeName = newValue}
  }
  /// Returns true if `strokeName` has been explicitly set.
  var hasStrokeName: Bool {return self._strokeName != nil}
  /// Clears the value of `strokeName`. Subsequent reads from it will return its default value.
  mutating func clearStrokeName() {self._strokeName = nil}

  var randomSeed: UInt32 {
    get {return _randomSeed ?? 0}
    set {_randomSeed = newValue}
  }
  /// Returns true if `randomSeed` has been explicitly set.
  var hasRandomSeed: Bool {return self._randomSeed != nil}
  /// Clears the value of `randomSeed`. Subsequent reads from it will return its default value.
  mutating func clearRandomSeed() {self._randomSeed = nil}

  var parameterValues: TSP_ReferenceDictionary {
    get {return _parameterValues ?? TSP_ReferenceDictionary()}
    set {_parameterValues = newValue}
  }
  /// Returns true if `parameterValues` has been explicitly set.
  var hasParameterValues: Bool {return self._parameterValues != nil}
  /// Clears the value of `parameterValues`. Subsequent reads from it will return its default value.
  mutating func clearParameterValues() {self._parameterValues = nil}

  var patternOffsetDistance: Double {
    get {return _patternOffsetDistance ?? 0}
    set {_patternOffsetDistance = newValue}
  }
  /// Returns true if `patternOffsetDistance` has been explicitly set.
  var hasPatternOffsetDistance: Bool {return self._patternOffsetDistance != nil}
  /// Clears the value of `patternOffsetDistance`. Subsequent reads from it will return its default value.
  mutating func clearPatternOffsetDistance() {self._patternOffsetDistance = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _strokeName: String? = nil
  fileprivate var _randomSeed: UInt32? = nil
  fileprivate var _parameterValues: TSP_ReferenceDictionary? = nil
  fileprivate var _patternOffsetDistance: Double? = nil
}

struct TSD_FrameArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var frameName: String {
    get {return _frameName ?? String()}
    set {_frameName = newValue}
  }
  /// Returns true if `frameName` has been explicitly set.
  var hasFrameName: Bool {return self._frameName != nil}
  /// Clears the value of `frameName`. Subsequent reads from it will return its default value.
  mutating func clearFrameName() {self._frameName = nil}

  var assetScale: Float {
    get {return _assetScale ?? 0}
    set {_assetScale = newValue}
  }
  /// Returns true if `assetScale` has been explicitly set.
  var hasAssetScale: Bool {return self._assetScale != nil}
  /// Clears the value of `assetScale`. Subsequent reads from it will return its default value.
  mutating func clearAssetScale() {self._assetScale = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _frameName: String? = nil
  fileprivate var _assetScale: Float? = nil
}

struct TSD_PatternedStrokeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var patternName: String {
    get {return _patternName ?? String()}
    set {_patternName = newValue}
  }
  /// Returns true if `patternName` has been explicitly set.
  var hasPatternName: Bool {return self._patternName != nil}
  /// Clears the value of `patternName`. Subsequent reads from it will return its default value.
  mutating func clearPatternName() {self._patternName = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _patternName: String? = nil
}

struct TSD_LineEndArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var path: TSP_Path {
    get {return _path ?? TSP_Path()}
    set {_path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  var hasPath: Bool {return self._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  mutating func clearPath() {self._path = nil}

  var lineJoin: TSD_LineJoin {
    get {return _lineJoin ?? .miterJoin}
    set {_lineJoin = newValue}
  }
  /// Returns true if `lineJoin` has been explicitly set.
  var hasLineJoin: Bool {return self._lineJoin != nil}
  /// Clears the value of `lineJoin`. Subsequent reads from it will return its default value.
  mutating func clearLineJoin() {self._lineJoin = nil}

  var endPoint: TSP_Point {
    get {return _endPoint ?? TSP_Point()}
    set {_endPoint = newValue}
  }
  /// Returns true if `endPoint` has been explicitly set.
  var hasEndPoint: Bool {return self._endPoint != nil}
  /// Clears the value of `endPoint`. Subsequent reads from it will return its default value.
  mutating func clearEndPoint() {self._endPoint = nil}

  var isFilled: Bool {
    get {return _isFilled ?? false}
    set {_isFilled = newValue}
  }
  /// Returns true if `isFilled` has been explicitly set.
  var hasIsFilled: Bool {return self._isFilled != nil}
  /// Clears the value of `isFilled`. Subsequent reads from it will return its default value.
  mutating func clearIsFilled() {self._isFilled = nil}

  var identifier: String {
    get {return _identifier ?? String()}
    set {_identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return self._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {self._identifier = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _path: TSP_Path? = nil
  fileprivate var _lineJoin: TSD_LineJoin? = nil
  fileprivate var _endPoint: TSP_Point? = nil
  fileprivate var _isFilled: Bool? = nil
  fileprivate var _identifier: String? = nil
}

struct TSD_ShadowArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var color: TSP_Color {
    get {return _color ?? TSP_Color()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {self._color = nil}

  var angle: Float {
    get {return _angle ?? 315}
    set {_angle = newValue}
  }
  /// Returns true if `angle` has been explicitly set.
  var hasAngle: Bool {return self._angle != nil}
  /// Clears the value of `angle`. Subsequent reads from it will return its default value.
  mutating func clearAngle() {self._angle = nil}

  var offset: Float {
    get {return _offset ?? 5}
    set {_offset = newValue}
  }
  /// Returns true if `offset` has been explicitly set.
  var hasOffset: Bool {return self._offset != nil}
  /// Clears the value of `offset`. Subsequent reads from it will return its default value.
  mutating func clearOffset() {self._offset = nil}

  var radius: Int32 {
    get {return _radius ?? 1}
    set {_radius = newValue}
  }
  /// Returns true if `radius` has been explicitly set.
  var hasRadius: Bool {return self._radius != nil}
  /// Clears the value of `radius`. Subsequent reads from it will return its default value.
  mutating func clearRadius() {self._radius = nil}

  var opacity: Float {
    get {return _opacity ?? 1}
    set {_opacity = newValue}
  }
  /// Returns true if `opacity` has been explicitly set.
  var hasOpacity: Bool {return self._opacity != nil}
  /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
  mutating func clearOpacity() {self._opacity = nil}

  var isEnabled: Bool {
    get {return _isEnabled ?? true}
    set {_isEnabled = newValue}
  }
  /// Returns true if `isEnabled` has been explicitly set.
  var hasIsEnabled: Bool {return self._isEnabled != nil}
  /// Clears the value of `isEnabled`. Subsequent reads from it will return its default value.
  mutating func clearIsEnabled() {self._isEnabled = nil}

  var type: TSD_ShadowArchive.ShadowType {
    get {return _type ?? .tsddropShadow}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var dropShadow: TSD_DropShadowArchive {
    get {return _dropShadow ?? TSD_DropShadowArchive()}
    set {_dropShadow = newValue}
  }
  /// Returns true if `dropShadow` has been explicitly set.
  var hasDropShadow: Bool {return self._dropShadow != nil}
  /// Clears the value of `dropShadow`. Subsequent reads from it will return its default value.
  mutating func clearDropShadow() {self._dropShadow = nil}

  var contactShadow: TSD_ContactShadowArchive {
    get {return _contactShadow ?? TSD_ContactShadowArchive()}
    set {_contactShadow = newValue}
  }
  /// Returns true if `contactShadow` has been explicitly set.
  var hasContactShadow: Bool {return self._contactShadow != nil}
  /// Clears the value of `contactShadow`. Subsequent reads from it will return its default value.
  mutating func clearContactShadow() {self._contactShadow = nil}

  var curvedShadow: TSD_CurvedShadowArchive {
    get {return _curvedShadow ?? TSD_CurvedShadowArchive()}
    set {_curvedShadow = newValue}
  }
  /// Returns true if `curvedShadow` has been explicitly set.
  var hasCurvedShadow: Bool {return self._curvedShadow != nil}
  /// Clears the value of `curvedShadow`. Subsequent reads from it will return its default value.
  mutating func clearCurvedShadow() {self._curvedShadow = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ShadowType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case tsddropShadow // = 0
    case tsdcontactShadow // = 1
    case tsdcurvedShadow // = 2

    init() {
      self = .tsddropShadow
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .tsddropShadow
      case 1: self = .tsdcontactShadow
      case 2: self = .tsdcurvedShadow
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .tsddropShadow: return 0
      case .tsdcontactShadow: return 1
      case .tsdcurvedShadow: return 2
      }
    }

  }

  init() {}

  fileprivate var _color: TSP_Color? = nil
  fileprivate var _angle: Float? = nil
  fileprivate var _offset: Float? = nil
  fileprivate var _radius: Int32? = nil
  fileprivate var _opacity: Float? = nil
  fileprivate var _isEnabled: Bool? = nil
  fileprivate var _type: TSD_ShadowArchive.ShadowType? = nil
  fileprivate var _dropShadow: TSD_DropShadowArchive? = nil
  fileprivate var _contactShadow: TSD_ContactShadowArchive? = nil
  fileprivate var _curvedShadow: TSD_CurvedShadowArchive? = nil
}

#if swift(>=4.2)

extension TSD_ShadowArchive.ShadowType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_DropShadowArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSD_ContactShadowArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var height: Float {
    get {return _height ?? 0.2}
    set {_height = newValue}
  }
  /// Returns true if `height` has been explicitly set.
  var hasHeight: Bool {return self._height != nil}
  /// Clears the value of `height`. Subsequent reads from it will return its default value.
  mutating func clearHeight() {self._height = nil}

  var offset: Float {
    get {return _offset ?? 0}
    set {_offset = newValue}
  }
  /// Returns true if `offset` has been explicitly set.
  var hasOffset: Bool {return self._offset != nil}
  /// Clears the value of `offset`. Subsequent reads from it will return its default value.
  mutating func clearOffset() {self._offset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _height: Float? = nil
  fileprivate var _offset: Float? = nil
}

struct TSD_CurvedShadowArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var curve: Float {
    get {return _curve ?? 0.6}
    set {_curve = newValue}
  }
  /// Returns true if `curve` has been explicitly set.
  var hasCurve: Bool {return self._curve != nil}
  /// Clears the value of `curve`. Subsequent reads from it will return its default value.
  mutating func clearCurve() {self._curve = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _curve: Float? = nil
}

struct TSD_ReflectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var opacity: Float {
    get {return _opacity ?? 0.5}
    set {_opacity = newValue}
  }
  /// Returns true if `opacity` has been explicitly set.
  var hasOpacity: Bool {return self._opacity != nil}
  /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
  mutating func clearOpacity() {self._opacity = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _opacity: Float? = nil
}

struct TSD_ImageAdjustmentsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var exposure: Float {
    get {return _exposure ?? 0}
    set {_exposure = newValue}
  }
  /// Returns true if `exposure` has been explicitly set.
  var hasExposure: Bool {return self._exposure != nil}
  /// Clears the value of `exposure`. Subsequent reads from it will return its default value.
  mutating func clearExposure() {self._exposure = nil}

  var saturation: Float {
    get {return _saturation ?? 0}
    set {_saturation = newValue}
  }
  /// Returns true if `saturation` has been explicitly set.
  var hasSaturation: Bool {return self._saturation != nil}
  /// Clears the value of `saturation`. Subsequent reads from it will return its default value.
  mutating func clearSaturation() {self._saturation = nil}

  var contrast: Float {
    get {return _contrast ?? 0}
    set {_contrast = newValue}
  }
  /// Returns true if `contrast` has been explicitly set.
  var hasContrast: Bool {return self._contrast != nil}
  /// Clears the value of `contrast`. Subsequent reads from it will return its default value.
  mutating func clearContrast() {self._contrast = nil}

  var highlights: Float {
    get {return _highlights ?? 0}
    set {_highlights = newValue}
  }
  /// Returns true if `highlights` has been explicitly set.
  var hasHighlights: Bool {return self._highlights != nil}
  /// Clears the value of `highlights`. Subsequent reads from it will return its default value.
  mutating func clearHighlights() {self._highlights = nil}

  var shadows: Float {
    get {return _shadows ?? 0}
    set {_shadows = newValue}
  }
  /// Returns true if `shadows` has been explicitly set.
  var hasShadows: Bool {return self._shadows != nil}
  /// Clears the value of `shadows`. Subsequent reads from it will return its default value.
  mutating func clearShadows() {self._shadows = nil}

  var sharpness: Float {
    get {return _sharpness ?? 0}
    set {_sharpness = newValue}
  }
  /// Returns true if `sharpness` has been explicitly set.
  var hasSharpness: Bool {return self._sharpness != nil}
  /// Clears the value of `sharpness`. Subsequent reads from it will return its default value.
  mutating func clearSharpness() {self._sharpness = nil}

  var denoise: Float {
    get {return _denoise ?? 0}
    set {_denoise = newValue}
  }
  /// Returns true if `denoise` has been explicitly set.
  var hasDenoise: Bool {return self._denoise != nil}
  /// Clears the value of `denoise`. Subsequent reads from it will return its default value.
  mutating func clearDenoise() {self._denoise = nil}

  var temperature: Float {
    get {return _temperature ?? 0}
    set {_temperature = newValue}
  }
  /// Returns true if `temperature` has been explicitly set.
  var hasTemperature: Bool {return self._temperature != nil}
  /// Clears the value of `temperature`. Subsequent reads from it will return its default value.
  mutating func clearTemperature() {self._temperature = nil}

  var tint: Float {
    get {return _tint ?? 0}
    set {_tint = newValue}
  }
  /// Returns true if `tint` has been explicitly set.
  var hasTint: Bool {return self._tint != nil}
  /// Clears the value of `tint`. Subsequent reads from it will return its default value.
  mutating func clearTint() {self._tint = nil}

  var bottomLevel: Float {
    get {return _bottomLevel ?? 0}
    set {_bottomLevel = newValue}
  }
  /// Returns true if `bottomLevel` has been explicitly set.
  var hasBottomLevel: Bool {return self._bottomLevel != nil}
  /// Clears the value of `bottomLevel`. Subsequent reads from it will return its default value.
  mutating func clearBottomLevel() {self._bottomLevel = nil}

  var topLevel: Float {
    get {return _topLevel ?? 1}
    set {_topLevel = newValue}
  }
  /// Returns true if `topLevel` has been explicitly set.
  var hasTopLevel: Bool {return self._topLevel != nil}
  /// Clears the value of `topLevel`. Subsequent reads from it will return its default value.
  mutating func clearTopLevel() {self._topLevel = nil}

  var gamma: Float {
    get {return _gamma ?? 0}
    set {_gamma = newValue}
  }
  /// Returns true if `gamma` has been explicitly set.
  var hasGamma: Bool {return self._gamma != nil}
  /// Clears the value of `gamma`. Subsequent reads from it will return its default value.
  mutating func clearGamma() {self._gamma = nil}

  var enhance: Bool {
    get {return _enhance ?? false}
    set {_enhance = newValue}
  }
  /// Returns true if `enhance` has been explicitly set.
  var hasEnhance: Bool {return self._enhance != nil}
  /// Clears the value of `enhance`. Subsequent reads from it will return its default value.
  mutating func clearEnhance() {self._enhance = nil}

  var representsSageAdjustments: Bool {
    get {return _representsSageAdjustments ?? false}
    set {_representsSageAdjustments = newValue}
  }
  /// Returns true if `representsSageAdjustments` has been explicitly set.
  var hasRepresentsSageAdjustments: Bool {return self._representsSageAdjustments != nil}
  /// Clears the value of `representsSageAdjustments`. Subsequent reads from it will return its default value.
  mutating func clearRepresentsSageAdjustments() {self._representsSageAdjustments = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _exposure: Float? = nil
  fileprivate var _saturation: Float? = nil
  fileprivate var _contrast: Float? = nil
  fileprivate var _highlights: Float? = nil
  fileprivate var _shadows: Float? = nil
  fileprivate var _sharpness: Float? = nil
  fileprivate var _denoise: Float? = nil
  fileprivate var _temperature: Float? = nil
  fileprivate var _tint: Float? = nil
  fileprivate var _bottomLevel: Float? = nil
  fileprivate var _topLevel: Float? = nil
  fileprivate var _gamma: Float? = nil
  fileprivate var _enhance: Bool? = nil
  fileprivate var _representsSageAdjustments: Bool? = nil
}

struct TSD_ShapeStylePropertiesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fill: TSD_FillArchive {
    get {return _fill ?? TSD_FillArchive()}
    set {_fill = newValue}
  }
  /// Returns true if `fill` has been explicitly set.
  var hasFill: Bool {return self._fill != nil}
  /// Clears the value of `fill`. Subsequent reads from it will return its default value.
  mutating func clearFill() {self._fill = nil}

  var stroke: TSD_StrokeArchive {
    get {return _stroke ?? TSD_StrokeArchive()}
    set {_stroke = newValue}
  }
  /// Returns true if `stroke` has been explicitly set.
  var hasStroke: Bool {return self._stroke != nil}
  /// Clears the value of `stroke`. Subsequent reads from it will return its default value.
  mutating func clearStroke() {self._stroke = nil}

  var opacity: Float {
    get {return _opacity ?? 0}
    set {_opacity = newValue}
  }
  /// Returns true if `opacity` has been explicitly set.
  var hasOpacity: Bool {return self._opacity != nil}
  /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
  mutating func clearOpacity() {self._opacity = nil}

  var shadow: TSD_ShadowArchive {
    get {return _shadow ?? TSD_ShadowArchive()}
    set {_shadow = newValue}
  }
  /// Returns true if `shadow` has been explicitly set.
  var hasShadow: Bool {return self._shadow != nil}
  /// Clears the value of `shadow`. Subsequent reads from it will return its default value.
  mutating func clearShadow() {self._shadow = nil}

  var reflection: TSD_ReflectionArchive {
    get {return _reflection ?? TSD_ReflectionArchive()}
    set {_reflection = newValue}
  }
  /// Returns true if `reflection` has been explicitly set.
  var hasReflection: Bool {return self._reflection != nil}
  /// Clears the value of `reflection`. Subsequent reads from it will return its default value.
  mutating func clearReflection() {self._reflection = nil}

  var headLineEnd: TSD_LineEndArchive {
    get {return _headLineEnd ?? TSD_LineEndArchive()}
    set {_headLineEnd = newValue}
  }
  /// Returns true if `headLineEnd` has been explicitly set.
  var hasHeadLineEnd: Bool {return self._headLineEnd != nil}
  /// Clears the value of `headLineEnd`. Subsequent reads from it will return its default value.
  mutating func clearHeadLineEnd() {self._headLineEnd = nil}

  var tailLineEnd: TSD_LineEndArchive {
    get {return _tailLineEnd ?? TSD_LineEndArchive()}
    set {_tailLineEnd = newValue}
  }
  /// Returns true if `tailLineEnd` has been explicitly set.
  var hasTailLineEnd: Bool {return self._tailLineEnd != nil}
  /// Clears the value of `tailLineEnd`. Subsequent reads from it will return its default value.
  mutating func clearTailLineEnd() {self._tailLineEnd = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fill: TSD_FillArchive? = nil
  fileprivate var _stroke: TSD_StrokeArchive? = nil
  fileprivate var _opacity: Float? = nil
  fileprivate var _shadow: TSD_ShadowArchive? = nil
  fileprivate var _reflection: TSD_ReflectionArchive? = nil
  fileprivate var _headLineEnd: TSD_LineEndArchive? = nil
  fileprivate var _tailLineEnd: TSD_LineEndArchive? = nil
}

struct TSD_ShapeStyleArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSS_StyleArchive {
    get {return _super ?? TSS_StyleArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var overrideCount: UInt32 {
    get {return _overrideCount ?? 0}
    set {_overrideCount = newValue}
  }
  /// Returns true if `overrideCount` has been explicitly set.
  var hasOverrideCount: Bool {return self._overrideCount != nil}
  /// Clears the value of `overrideCount`. Subsequent reads from it will return its default value.
  mutating func clearOverrideCount() {self._overrideCount = nil}

  var shapeProperties: TSD_ShapeStylePropertiesArchive {
    get {return _shapeProperties ?? TSD_ShapeStylePropertiesArchive()}
    set {_shapeProperties = newValue}
  }
  /// Returns true if `shapeProperties` has been explicitly set.
  var hasShapeProperties: Bool {return self._shapeProperties != nil}
  /// Clears the value of `shapeProperties`. Subsequent reads from it will return its default value.
  mutating func clearShapeProperties() {self._shapeProperties = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSS_StyleArchive? = nil
  fileprivate var _overrideCount: UInt32? = nil
  fileprivate var _shapeProperties: TSD_ShapeStylePropertiesArchive? = nil
}

struct TSD_MediaStylePropertiesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var stroke: TSD_StrokeArchive {
    get {return _stroke ?? TSD_StrokeArchive()}
    set {_stroke = newValue}
  }
  /// Returns true if `stroke` has been explicitly set.
  var hasStroke: Bool {return self._stroke != nil}
  /// Clears the value of `stroke`. Subsequent reads from it will return its default value.
  mutating func clearStroke() {self._stroke = nil}

  var opacity: Float {
    get {return _opacity ?? 0}
    set {_opacity = newValue}
  }
  /// Returns true if `opacity` has been explicitly set.
  var hasOpacity: Bool {return self._opacity != nil}
  /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
  mutating func clearOpacity() {self._opacity = nil}

  var shadow: TSD_ShadowArchive {
    get {return _shadow ?? TSD_ShadowArchive()}
    set {_shadow = newValue}
  }
  /// Returns true if `shadow` has been explicitly set.
  var hasShadow: Bool {return self._shadow != nil}
  /// Clears the value of `shadow`. Subsequent reads from it will return its default value.
  mutating func clearShadow() {self._shadow = nil}

  var reflection: TSD_ReflectionArchive {
    get {return _reflection ?? TSD_ReflectionArchive()}
    set {_reflection = newValue}
  }
  /// Returns true if `reflection` has been explicitly set.
  var hasReflection: Bool {return self._reflection != nil}
  /// Clears the value of `reflection`. Subsequent reads from it will return its default value.
  mutating func clearReflection() {self._reflection = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _stroke: TSD_StrokeArchive? = nil
  fileprivate var _opacity: Float? = nil
  fileprivate var _shadow: TSD_ShadowArchive? = nil
  fileprivate var _reflection: TSD_ReflectionArchive? = nil
}

struct TSD_MediaStyleArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSS_StyleArchive {
    get {return _super ?? TSS_StyleArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var overrideCount: UInt32 {
    get {return _overrideCount ?? 0}
    set {_overrideCount = newValue}
  }
  /// Returns true if `overrideCount` has been explicitly set.
  var hasOverrideCount: Bool {return self._overrideCount != nil}
  /// Clears the value of `overrideCount`. Subsequent reads from it will return its default value.
  mutating func clearOverrideCount() {self._overrideCount = nil}

  var mediaProperties: TSD_MediaStylePropertiesArchive {
    get {return _mediaProperties ?? TSD_MediaStylePropertiesArchive()}
    set {_mediaProperties = newValue}
  }
  /// Returns true if `mediaProperties` has been explicitly set.
  var hasMediaProperties: Bool {return self._mediaProperties != nil}
  /// Clears the value of `mediaProperties`. Subsequent reads from it will return its default value.
  mutating func clearMediaProperties() {self._mediaProperties = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSS_StyleArchive? = nil
  fileprivate var _overrideCount: UInt32? = nil
  fileprivate var _mediaProperties: TSD_MediaStylePropertiesArchive? = nil
}

struct TSD_ThemePresetsArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gradientFillPresets: [TSD_FillArchive] = []

  var imageFillPresets: [TSD_FillArchive] = []

  var shadowPresets: [TSD_ShadowArchive] = []

  var lineStylePresets: [TSP_Reference] = []

  var shapeStylePresets: [TSP_Reference] = []

  var textboxStylePresets: [TSP_Reference] = []

  var imageStylePresets: [TSP_Reference] = []

  var movieStylePresets: [TSP_Reference] = []

  var drawingLineStylePresets: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSD_ThemeReplaceFillPresetCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var theme: TSP_Reference {
    get {return _theme ?? TSP_Reference()}
    set {_theme = newValue}
  }
  /// Returns true if `theme` has been explicitly set.
  var hasTheme: Bool {return self._theme != nil}
  /// Clears the value of `theme`. Subsequent reads from it will return its default value.
  mutating func clearTheme() {self._theme = nil}

  var fill: TSD_FillArchive {
    get {return _fill ?? TSD_FillArchive()}
    set {_fill = newValue}
  }
  /// Returns true if `fill` has been explicitly set.
  var hasFill: Bool {return self._fill != nil}
  /// Clears the value of `fill`. Subsequent reads from it will return its default value.
  mutating func clearFill() {self._fill = nil}

  var oldFill: TSD_FillArchive {
    get {return _oldFill ?? TSD_FillArchive()}
    set {_oldFill = newValue}
  }
  /// Returns true if `oldFill` has been explicitly set.
  var hasOldFill: Bool {return self._oldFill != nil}
  /// Clears the value of `oldFill`. Subsequent reads from it will return its default value.
  mutating func clearOldFill() {self._oldFill = nil}

  var index: UInt32 {
    get {return _index ?? 0}
    set {_index = newValue}
  }
  /// Returns true if `index` has been explicitly set.
  var hasIndex: Bool {return self._index != nil}
  /// Clears the value of `index`. Subsequent reads from it will return its default value.
  mutating func clearIndex() {self._index = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _theme: TSP_Reference? = nil
  fileprivate var _fill: TSD_FillArchive? = nil
  fileprivate var _oldFill: TSD_FillArchive? = nil
  fileprivate var _index: UInt32? = nil
}

struct TSD_DrawableArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var geometry: TSD_GeometryArchive {
    get {return _geometry ?? TSD_GeometryArchive()}
    set {_geometry = newValue}
  }
  /// Returns true if `geometry` has been explicitly set.
  var hasGeometry: Bool {return self._geometry != nil}
  /// Clears the value of `geometry`. Subsequent reads from it will return its default value.
  mutating func clearGeometry() {self._geometry = nil}

  var parent: TSP_Reference {
    get {return _parent ?? TSP_Reference()}
    set {_parent = newValue}
  }
  /// Returns true if `parent` has been explicitly set.
  var hasParent: Bool {return self._parent != nil}
  /// Clears the value of `parent`. Subsequent reads from it will return its default value.
  mutating func clearParent() {self._parent = nil}

  var exteriorTextWrap: TSD_ExteriorTextWrapArchive {
    get {return _exteriorTextWrap ?? TSD_ExteriorTextWrapArchive()}
    set {_exteriorTextWrap = newValue}
  }
  /// Returns true if `exteriorTextWrap` has been explicitly set.
  var hasExteriorTextWrap: Bool {return self._exteriorTextWrap != nil}
  /// Clears the value of `exteriorTextWrap`. Subsequent reads from it will return its default value.
  mutating func clearExteriorTextWrap() {self._exteriorTextWrap = nil}

  var hyperlinkURL: String {
    get {return _hyperlinkURL ?? String()}
    set {_hyperlinkURL = newValue}
  }
  /// Returns true if `hyperlinkURL` has been explicitly set.
  var hasHyperlinkURL: Bool {return self._hyperlinkURL != nil}
  /// Clears the value of `hyperlinkURL`. Subsequent reads from it will return its default value.
  mutating func clearHyperlinkURL() {self._hyperlinkURL = nil}

  var locked: Bool {
    get {return _locked ?? false}
    set {_locked = newValue}
  }
  /// Returns true if `locked` has been explicitly set.
  var hasLocked: Bool {return self._locked != nil}
  /// Clears the value of `locked`. Subsequent reads from it will return its default value.
  mutating func clearLocked() {self._locked = nil}

  var comment: TSP_Reference {
    get {return _comment ?? TSP_Reference()}
    set {_comment = newValue}
  }
  /// Returns true if `comment` has been explicitly set.
  var hasComment: Bool {return self._comment != nil}
  /// Clears the value of `comment`. Subsequent reads from it will return its default value.
  mutating func clearComment() {self._comment = nil}

  var aspectRatioLocked: Bool {
    get {return _aspectRatioLocked ?? false}
    set {_aspectRatioLocked = newValue}
  }
  /// Returns true if `aspectRatioLocked` has been explicitly set.
  var hasAspectRatioLocked: Bool {return self._aspectRatioLocked != nil}
  /// Clears the value of `aspectRatioLocked`. Subsequent reads from it will return its default value.
  mutating func clearAspectRatioLocked() {self._aspectRatioLocked = nil}

  var accessibilityDescription: String {
    get {return _accessibilityDescription ?? String()}
    set {_accessibilityDescription = newValue}
  }
  /// Returns true if `accessibilityDescription` has been explicitly set.
  var hasAccessibilityDescription: Bool {return self._accessibilityDescription != nil}
  /// Clears the value of `accessibilityDescription`. Subsequent reads from it will return its default value.
  mutating func clearAccessibilityDescription() {self._accessibilityDescription = nil}

  var pencilAnnotations: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _geometry: TSD_GeometryArchive? = nil
  fileprivate var _parent: TSP_Reference? = nil
  fileprivate var _exteriorTextWrap: TSD_ExteriorTextWrapArchive? = nil
  fileprivate var _hyperlinkURL: String? = nil
  fileprivate var _locked: Bool? = nil
  fileprivate var _comment: TSP_Reference? = nil
  fileprivate var _aspectRatioLocked: Bool? = nil
  fileprivate var _accessibilityDescription: String? = nil
}

struct TSD_ContainerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var geometry: TSD_GeometryArchive {
    get {return _geometry ?? TSD_GeometryArchive()}
    set {_geometry = newValue}
  }
  /// Returns true if `geometry` has been explicitly set.
  var hasGeometry: Bool {return self._geometry != nil}
  /// Clears the value of `geometry`. Subsequent reads from it will return its default value.
  mutating func clearGeometry() {self._geometry = nil}

  var parent: TSP_Reference {
    get {return _parent ?? TSP_Reference()}
    set {_parent = newValue}
  }
  /// Returns true if `parent` has been explicitly set.
  var hasParent: Bool {return self._parent != nil}
  /// Clears the value of `parent`. Subsequent reads from it will return its default value.
  mutating func clearParent() {self._parent = nil}

  var children: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _geometry: TSD_GeometryArchive? = nil
  fileprivate var _parent: TSP_Reference? = nil
}

struct TSD_GroupArchive: SwiftProtobuf.ExtensibleMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_DrawableArchive {
    get {return _super ?? TSD_DrawableArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var children: [TSP_Reference] = []

  var fakeShapeForEmptyGroup: TSP_Reference {
    get {return _fakeShapeForEmptyGroup ?? TSP_Reference()}
    set {_fakeShapeForEmptyGroup = newValue}
  }
  /// Returns true if `fakeShapeForEmptyGroup` has been explicitly set.
  var hasFakeShapeForEmptyGroup: Bool {return self._fakeShapeForEmptyGroup != nil}
  /// Clears the value of `fakeShapeForEmptyGroup`. Subsequent reads from it will return its default value.
  mutating func clearFakeShapeForEmptyGroup() {self._fakeShapeForEmptyGroup = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _super: TSD_DrawableArchive? = nil
  fileprivate var _fakeShapeForEmptyGroup: TSP_Reference? = nil
}

struct TSD_FreehandDrawingAnimationArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var duration: Double {
    get {return _duration ?? 0}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var shouldLoop: Bool {
    get {return _shouldLoop ?? false}
    set {_shouldLoop = newValue}
  }
  /// Returns true if `shouldLoop` has been explicitly set.
  var hasShouldLoop: Bool {return self._shouldLoop != nil}
  /// Clears the value of `shouldLoop`. Subsequent reads from it will return its default value.
  mutating func clearShouldLoop() {self._shouldLoop = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _duration: Double? = nil
  fileprivate var _shouldLoop: Bool? = nil
}

struct TSD_FreehandDrawingArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var spacerShape: TSP_Reference {
    get {return _spacerShape ?? TSP_Reference()}
    set {_spacerShape = newValue}
  }
  /// Returns true if `spacerShape` has been explicitly set.
  var hasSpacerShape: Bool {return self._spacerShape != nil}
  /// Clears the value of `spacerShape`. Subsequent reads from it will return its default value.
  mutating func clearSpacerShape() {self._spacerShape = nil}

  var opacity: Double {
    get {return _opacity ?? 0}
    set {_opacity = newValue}
  }
  /// Returns true if `opacity` has been explicitly set.
  var hasOpacity: Bool {return self._opacity != nil}
  /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
  mutating func clearOpacity() {self._opacity = nil}

  var animation: TSD_FreehandDrawingAnimationArchive {
    get {return _animation ?? TSD_FreehandDrawingAnimationArchive()}
    set {_animation = newValue}
  }
  /// Returns true if `animation` has been explicitly set.
  var hasAnimation: Bool {return self._animation != nil}
  /// Clears the value of `animation`. Subsequent reads from it will return its default value.
  mutating func clearAnimation() {self._animation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _spacerShape: TSP_Reference? = nil
  fileprivate var _opacity: Double? = nil
  fileprivate var _animation: TSD_FreehandDrawingAnimationArchive? = nil
}

struct TSD_ShapeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_DrawableArchive {
    get {return _super ?? TSD_DrawableArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var style: TSP_Reference {
    get {return _style ?? TSP_Reference()}
    set {_style = newValue}
  }
  /// Returns true if `style` has been explicitly set.
  var hasStyle: Bool {return self._style != nil}
  /// Clears the value of `style`. Subsequent reads from it will return its default value.
  mutating func clearStyle() {self._style = nil}

  var pathsource: TSD_PathSourceArchive {
    get {return _pathsource ?? TSD_PathSourceArchive()}
    set {_pathsource = newValue}
  }
  /// Returns true if `pathsource` has been explicitly set.
  var hasPathsource: Bool {return self._pathsource != nil}
  /// Clears the value of `pathsource`. Subsequent reads from it will return its default value.
  mutating func clearPathsource() {self._pathsource = nil}

  var headLineEnd: TSD_LineEndArchive {
    get {return _headLineEnd ?? TSD_LineEndArchive()}
    set {_headLineEnd = newValue}
  }
  /// Returns true if `headLineEnd` has been explicitly set.
  var hasHeadLineEnd: Bool {return self._headLineEnd != nil}
  /// Clears the value of `headLineEnd`. Subsequent reads from it will return its default value.
  mutating func clearHeadLineEnd() {self._headLineEnd = nil}

  var tailLineEnd: TSD_LineEndArchive {
    get {return _tailLineEnd ?? TSD_LineEndArchive()}
    set {_tailLineEnd = newValue}
  }
  /// Returns true if `tailLineEnd` has been explicitly set.
  var hasTailLineEnd: Bool {return self._tailLineEnd != nil}
  /// Clears the value of `tailLineEnd`. Subsequent reads from it will return its default value.
  mutating func clearTailLineEnd() {self._tailLineEnd = nil}

  var strokePatternOffsetDistance: Float {
    get {return _strokePatternOffsetDistance ?? 0}
    set {_strokePatternOffsetDistance = newValue}
  }
  /// Returns true if `strokePatternOffsetDistance` has been explicitly set.
  var hasStrokePatternOffsetDistance: Bool {return self._strokePatternOffsetDistance != nil}
  /// Clears the value of `strokePatternOffsetDistance`. Subsequent reads from it will return its default value.
  mutating func clearStrokePatternOffsetDistance() {self._strokePatternOffsetDistance = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_DrawableArchive? = nil
  fileprivate var _style: TSP_Reference? = nil
  fileprivate var _pathsource: TSD_PathSourceArchive? = nil
  fileprivate var _headLineEnd: TSD_LineEndArchive? = nil
  fileprivate var _tailLineEnd: TSD_LineEndArchive? = nil
  fileprivate var _strokePatternOffsetDistance: Float? = nil
}

struct TSD_ConnectionLineArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_ShapeArchive {
    get {return _super ?? TSD_ShapeArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var connectedFrom: TSP_Reference {
    get {return _connectedFrom ?? TSP_Reference()}
    set {_connectedFrom = newValue}
  }
  /// Returns true if `connectedFrom` has been explicitly set.
  var hasConnectedFrom: Bool {return self._connectedFrom != nil}
  /// Clears the value of `connectedFrom`. Subsequent reads from it will return its default value.
  mutating func clearConnectedFrom() {self._connectedFrom = nil}

  var connectedTo: TSP_Reference {
    get {return _connectedTo ?? TSP_Reference()}
    set {_connectedTo = newValue}
  }
  /// Returns true if `connectedTo` has been explicitly set.
  var hasConnectedTo: Bool {return self._connectedTo != nil}
  /// Clears the value of `connectedTo`. Subsequent reads from it will return its default value.
  mutating func clearConnectedTo() {self._connectedTo = nil}

  var connectedToUuid: TSP_UUID {
    get {return _connectedToUuid ?? TSP_UUID()}
    set {_connectedToUuid = newValue}
  }
  /// Returns true if `connectedToUuid` has been explicitly set.
  var hasConnectedToUuid: Bool {return self._connectedToUuid != nil}
  /// Clears the value of `connectedToUuid`. Subsequent reads from it will return its default value.
  mutating func clearConnectedToUuid() {self._connectedToUuid = nil}

  var connectedFromUuid: TSP_UUID {
    get {return _connectedFromUuid ?? TSP_UUID()}
    set {_connectedFromUuid = newValue}
  }
  /// Returns true if `connectedFromUuid` has been explicitly set.
  var hasConnectedFromUuid: Bool {return self._connectedFromUuid != nil}
  /// Clears the value of `connectedFromUuid`. Subsequent reads from it will return its default value.
  mutating func clearConnectedFromUuid() {self._connectedFromUuid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_ShapeArchive? = nil
  fileprivate var _connectedFrom: TSP_Reference? = nil
  fileprivate var _connectedTo: TSP_Reference? = nil
  fileprivate var _connectedToUuid: TSP_UUID? = nil
  fileprivate var _connectedFromUuid: TSP_UUID? = nil
}

struct TSD_ImageArchive: SwiftProtobuf.ExtensibleMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_DrawableArchive {
    get {return _storage._super ?? TSD_DrawableArchive()}
    set {_uniqueStorage()._super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return _storage._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {_uniqueStorage()._super = nil}

  var data: TSP_DataReference {
    get {return _storage._data ?? TSP_DataReference()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {_uniqueStorage()._data = nil}

  var style: TSP_Reference {
    get {return _storage._style ?? TSP_Reference()}
    set {_uniqueStorage()._style = newValue}
  }
  /// Returns true if `style` has been explicitly set.
  var hasStyle: Bool {return _storage._style != nil}
  /// Clears the value of `style`. Subsequent reads from it will return its default value.
  mutating func clearStyle() {_uniqueStorage()._style = nil}

  var originalSize: TSP_Size {
    get {return _storage._originalSize ?? TSP_Size()}
    set {_uniqueStorage()._originalSize = newValue}
  }
  /// Returns true if `originalSize` has been explicitly set.
  var hasOriginalSize: Bool {return _storage._originalSize != nil}
  /// Clears the value of `originalSize`. Subsequent reads from it will return its default value.
  mutating func clearOriginalSize() {_uniqueStorage()._originalSize = nil}

  var mask: TSP_Reference {
    get {return _storage._mask ?? TSP_Reference()}
    set {_uniqueStorage()._mask = newValue}
  }
  /// Returns true if `mask` has been explicitly set.
  var hasMask: Bool {return _storage._mask != nil}
  /// Clears the value of `mask`. Subsequent reads from it will return its default value.
  mutating func clearMask() {_uniqueStorage()._mask = nil}

  var thumbnailData: TSP_DataReference {
    get {return _storage._thumbnailData ?? TSP_DataReference()}
    set {_uniqueStorage()._thumbnailData = newValue}
  }
  /// Returns true if `thumbnailData` has been explicitly set.
  var hasThumbnailData: Bool {return _storage._thumbnailData != nil}
  /// Clears the value of `thumbnailData`. Subsequent reads from it will return its default value.
  mutating func clearThumbnailData() {_uniqueStorage()._thumbnailData = nil}

  var flags: UInt32 {
    get {return _storage._flags ?? 0}
    set {_uniqueStorage()._flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  var hasFlags: Bool {return _storage._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  mutating func clearFlags() {_uniqueStorage()._flags = nil}

  var originalData: TSP_DataReference {
    get {return _storage._originalData ?? TSP_DataReference()}
    set {_uniqueStorage()._originalData = newValue}
  }
  /// Returns true if `originalData` has been explicitly set.
  var hasOriginalData: Bool {return _storage._originalData != nil}
  /// Clears the value of `originalData`. Subsequent reads from it will return its default value.
  mutating func clearOriginalData() {_uniqueStorage()._originalData = nil}

  var naturalSize: TSP_Size {
    get {return _storage._naturalSize ?? TSP_Size()}
    set {_uniqueStorage()._naturalSize = newValue}
  }
  /// Returns true if `naturalSize` has been explicitly set.
  var hasNaturalSize: Bool {return _storage._naturalSize != nil}
  /// Clears the value of `naturalSize`. Subsequent reads from it will return its default value.
  mutating func clearNaturalSize() {_uniqueStorage()._naturalSize = nil}

  var instantAlphaPath: TSP_Path {
    get {return _storage._instantAlphaPath ?? TSP_Path()}
    set {_uniqueStorage()._instantAlphaPath = newValue}
  }
  /// Returns true if `instantAlphaPath` has been explicitly set.
  var hasInstantAlphaPath: Bool {return _storage._instantAlphaPath != nil}
  /// Clears the value of `instantAlphaPath`. Subsequent reads from it will return its default value.
  mutating func clearInstantAlphaPath() {_uniqueStorage()._instantAlphaPath = nil}

  var imageAdjustments: TSD_ImageAdjustmentsArchive {
    get {return _storage._imageAdjustments ?? TSD_ImageAdjustmentsArchive()}
    set {_uniqueStorage()._imageAdjustments = newValue}
  }
  /// Returns true if `imageAdjustments` has been explicitly set.
  var hasImageAdjustments: Bool {return _storage._imageAdjustments != nil}
  /// Clears the value of `imageAdjustments`. Subsequent reads from it will return its default value.
  mutating func clearImageAdjustments() {_uniqueStorage()._imageAdjustments = nil}

  var enhancedImageData: TSP_DataReference {
    get {return _storage._enhancedImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._enhancedImageData = newValue}
  }
  /// Returns true if `enhancedImageData` has been explicitly set.
  var hasEnhancedImageData: Bool {return _storage._enhancedImageData != nil}
  /// Clears the value of `enhancedImageData`. Subsequent reads from it will return its default value.
  mutating func clearEnhancedImageData() {_uniqueStorage()._enhancedImageData = nil}

  var adjustedImageData: TSP_DataReference {
    get {return _storage._adjustedImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._adjustedImageData = newValue}
  }
  /// Returns true if `adjustedImageData` has been explicitly set.
  var hasAdjustedImageData: Bool {return _storage._adjustedImageData != nil}
  /// Clears the value of `adjustedImageData`. Subsequent reads from it will return its default value.
  mutating func clearAdjustedImageData() {_uniqueStorage()._adjustedImageData = nil}

  var thumbnailAdjustedImageData: TSP_DataReference {
    get {return _storage._thumbnailAdjustedImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._thumbnailAdjustedImageData = newValue}
  }
  /// Returns true if `thumbnailAdjustedImageData` has been explicitly set.
  var hasThumbnailAdjustedImageData: Bool {return _storage._thumbnailAdjustedImageData != nil}
  /// Clears the value of `thumbnailAdjustedImageData`. Subsequent reads from it will return its default value.
  mutating func clearThumbnailAdjustedImageData() {_uniqueStorage()._thumbnailAdjustedImageData = nil}

  var interpretsUntaggedImageDataAsGeneric: Bool {
    get {return _storage._interpretsUntaggedImageDataAsGeneric ?? false}
    set {_uniqueStorage()._interpretsUntaggedImageDataAsGeneric = newValue}
  }
  /// Returns true if `interpretsUntaggedImageDataAsGeneric` has been explicitly set.
  var hasInterpretsUntaggedImageDataAsGeneric: Bool {return _storage._interpretsUntaggedImageDataAsGeneric != nil}
  /// Clears the value of `interpretsUntaggedImageDataAsGeneric`. Subsequent reads from it will return its default value.
  mutating func clearInterpretsUntaggedImageDataAsGeneric() {_uniqueStorage()._interpretsUntaggedImageDataAsGeneric = nil}

  var databaseData: TSP_Reference {
    get {return _storage._databaseData ?? TSP_Reference()}
    set {_uniqueStorage()._databaseData = newValue}
  }
  /// Returns true if `databaseData` has been explicitly set.
  var hasDatabaseData: Bool {return _storage._databaseData != nil}
  /// Clears the value of `databaseData`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseData() {_uniqueStorage()._databaseData = nil}

  var databaseThumbnailData: TSP_Reference {
    get {return _storage._databaseThumbnailData ?? TSP_Reference()}
    set {_uniqueStorage()._databaseThumbnailData = newValue}
  }
  /// Returns true if `databaseThumbnailData` has been explicitly set.
  var hasDatabaseThumbnailData: Bool {return _storage._databaseThumbnailData != nil}
  /// Clears the value of `databaseThumbnailData`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseThumbnailData() {_uniqueStorage()._databaseThumbnailData = nil}

  var databaseOriginalData: TSP_Reference {
    get {return _storage._databaseOriginalData ?? TSP_Reference()}
    set {_uniqueStorage()._databaseOriginalData = newValue}
  }
  /// Returns true if `databaseOriginalData` has been explicitly set.
  var hasDatabaseOriginalData: Bool {return _storage._databaseOriginalData != nil}
  /// Clears the value of `databaseOriginalData`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseOriginalData() {_uniqueStorage()._databaseOriginalData = nil}

  var tracedPath: TSP_Path {
    get {return _storage._tracedPath ?? TSP_Path()}
    set {_uniqueStorage()._tracedPath = newValue}
  }
  /// Returns true if `tracedPath` has been explicitly set.
  var hasTracedPath: Bool {return _storage._tracedPath != nil}
  /// Clears the value of `tracedPath`. Subsequent reads from it will return its default value.
  mutating func clearTracedPath() {_uniqueStorage()._tracedPath = nil}

  var attribution: TSD_Attribution {
    get {return _storage._attribution ?? TSD_Attribution()}
    set {_uniqueStorage()._attribution = newValue}
  }
  /// Returns true if `attribution` has been explicitly set.
  var hasAttribution: Bool {return _storage._attribution != nil}
  /// Clears the value of `attribution`. Subsequent reads from it will return its default value.
  mutating func clearAttribution() {_uniqueStorage()._attribution = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSD_MaskArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_DrawableArchive {
    get {return _super ?? TSD_DrawableArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var pathsource: TSD_PathSourceArchive {
    get {return _pathsource ?? TSD_PathSourceArchive()}
    set {_pathsource = newValue}
  }
  /// Returns true if `pathsource` has been explicitly set.
  var hasPathsource: Bool {return self._pathsource != nil}
  /// Clears the value of `pathsource`. Subsequent reads from it will return its default value.
  mutating func clearPathsource() {self._pathsource = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_DrawableArchive? = nil
  fileprivate var _pathsource: TSD_PathSourceArchive? = nil
}

struct TSD_ImageDataAttributes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pixelSize: TSP_Size {
    get {return _pixelSize ?? TSP_Size()}
    set {_pixelSize = newValue}
  }
  /// Returns true if `pixelSize` has been explicitly set.
  var hasPixelSize: Bool {return self._pixelSize != nil}
  /// Clears the value of `pixelSize`. Subsequent reads from it will return its default value.
  mutating func clearPixelSize() {self._pixelSize = nil}

  var imageIsSrgb: Bool {
    get {return _imageIsSrgb ?? false}
    set {_imageIsSrgb = newValue}
  }
  /// Returns true if `imageIsSrgb` has been explicitly set.
  var hasImageIsSrgb: Bool {return self._imageIsSrgb != nil}
  /// Clears the value of `imageIsSrgb`. Subsequent reads from it will return its default value.
  mutating func clearImageIsSrgb() {self._imageIsSrgb = nil}

  var shouldBeInterpretedAsGenericIfUntagged: Bool {
    get {return _shouldBeInterpretedAsGenericIfUntagged ?? false}
    set {_shouldBeInterpretedAsGenericIfUntagged = newValue}
  }
  /// Returns true if `shouldBeInterpretedAsGenericIfUntagged` has been explicitly set.
  var hasShouldBeInterpretedAsGenericIfUntagged: Bool {return self._shouldBeInterpretedAsGenericIfUntagged != nil}
  /// Clears the value of `shouldBeInterpretedAsGenericIfUntagged`. Subsequent reads from it will return its default value.
  mutating func clearShouldBeInterpretedAsGenericIfUntagged() {self._shouldBeInterpretedAsGenericIfUntagged = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pixelSize: TSP_Size? = nil
  fileprivate var _imageIsSrgb: Bool? = nil
  fileprivate var _shouldBeInterpretedAsGenericIfUntagged: Bool? = nil
}

struct TSD_MovieArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_DrawableArchive {
    get {return _storage._super ?? TSD_DrawableArchive()}
    set {_uniqueStorage()._super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return _storage._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {_uniqueStorage()._super = nil}

  var movieData: TSP_DataReference {
    get {return _storage._movieData ?? TSP_DataReference()}
    set {_uniqueStorage()._movieData = newValue}
  }
  /// Returns true if `movieData` has been explicitly set.
  var hasMovieData: Bool {return _storage._movieData != nil}
  /// Clears the value of `movieData`. Subsequent reads from it will return its default value.
  mutating func clearMovieData() {_uniqueStorage()._movieData = nil}

  var importedAuxiliaryMovieData: TSP_DataReference {
    get {return _storage._importedAuxiliaryMovieData ?? TSP_DataReference()}
    set {_uniqueStorage()._importedAuxiliaryMovieData = newValue}
  }
  /// Returns true if `importedAuxiliaryMovieData` has been explicitly set.
  var hasImportedAuxiliaryMovieData: Bool {return _storage._importedAuxiliaryMovieData != nil}
  /// Clears the value of `importedAuxiliaryMovieData`. Subsequent reads from it will return its default value.
  mutating func clearImportedAuxiliaryMovieData() {_uniqueStorage()._importedAuxiliaryMovieData = nil}

  var importedAuxiliaryMovieDataOriginalFilename: String {
    get {return _storage._importedAuxiliaryMovieDataOriginalFilename ?? String()}
    set {_uniqueStorage()._importedAuxiliaryMovieDataOriginalFilename = newValue}
  }
  /// Returns true if `importedAuxiliaryMovieDataOriginalFilename` has been explicitly set.
  var hasImportedAuxiliaryMovieDataOriginalFilename: Bool {return _storage._importedAuxiliaryMovieDataOriginalFilename != nil}
  /// Clears the value of `importedAuxiliaryMovieDataOriginalFilename`. Subsequent reads from it will return its default value.
  mutating func clearImportedAuxiliaryMovieDataOriginalFilename() {_uniqueStorage()._importedAuxiliaryMovieDataOriginalFilename = nil}

  var movieRemoteURL: String {
    get {return _storage._movieRemoteURL ?? String()}
    set {_uniqueStorage()._movieRemoteURL = newValue}
  }
  /// Returns true if `movieRemoteURL` has been explicitly set.
  var hasMovieRemoteURL: Bool {return _storage._movieRemoteURL != nil}
  /// Clears the value of `movieRemoteURL`. Subsequent reads from it will return its default value.
  mutating func clearMovieRemoteURL() {_uniqueStorage()._movieRemoteURL = nil}

  var startTime: Float {
    get {return _storage._startTime ?? 0}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {_uniqueStorage()._startTime = nil}

  var endTime: Float {
    get {return _storage._endTime ?? 0}
    set {_uniqueStorage()._endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {_uniqueStorage()._endTime = nil}

  var posterTime: Float {
    get {return _storage._posterTime ?? 0}
    set {_uniqueStorage()._posterTime = newValue}
  }
  /// Returns true if `posterTime` has been explicitly set.
  var hasPosterTime: Bool {return _storage._posterTime != nil}
  /// Clears the value of `posterTime`. Subsequent reads from it will return its default value.
  mutating func clearPosterTime() {_uniqueStorage()._posterTime = nil}

  var loopOptionAsInteger: UInt32 {
    get {return _storage._loopOptionAsInteger ?? 0}
    set {_uniqueStorage()._loopOptionAsInteger = newValue}
  }
  /// Returns true if `loopOptionAsInteger` has been explicitly set.
  var hasLoopOptionAsInteger: Bool {return _storage._loopOptionAsInteger != nil}
  /// Clears the value of `loopOptionAsInteger`. Subsequent reads from it will return its default value.
  mutating func clearLoopOptionAsInteger() {_uniqueStorage()._loopOptionAsInteger = nil}

  var loopOption: TSD_MovieArchive.MovieLoopOption {
    get {return _storage._loopOption ?? .none}
    set {_uniqueStorage()._loopOption = newValue}
  }
  /// Returns true if `loopOption` has been explicitly set.
  var hasLoopOption: Bool {return _storage._loopOption != nil}
  /// Clears the value of `loopOption`. Subsequent reads from it will return its default value.
  mutating func clearLoopOption() {_uniqueStorage()._loopOption = nil}

  var volume: Float {
    get {return _storage._volume ?? 0}
    set {_uniqueStorage()._volume = newValue}
  }
  /// Returns true if `volume` has been explicitly set.
  var hasVolume: Bool {return _storage._volume != nil}
  /// Clears the value of `volume`. Subsequent reads from it will return its default value.
  mutating func clearVolume() {_uniqueStorage()._volume = nil}

  var autoPlay: Bool {
    get {return _storage._autoPlay ?? false}
    set {_uniqueStorage()._autoPlay = newValue}
  }
  /// Returns true if `autoPlay` has been explicitly set.
  var hasAutoPlay: Bool {return _storage._autoPlay != nil}
  /// Clears the value of `autoPlay`. Subsequent reads from it will return its default value.
  mutating func clearAutoPlay() {_uniqueStorage()._autoPlay = nil}

  var audioOnly: Bool {
    get {return _storage._audioOnly ?? false}
    set {_uniqueStorage()._audioOnly = newValue}
  }
  /// Returns true if `audioOnly` has been explicitly set.
  var hasAudioOnly: Bool {return _storage._audioOnly != nil}
  /// Clears the value of `audioOnly`. Subsequent reads from it will return its default value.
  mutating func clearAudioOnly() {_uniqueStorage()._audioOnly = nil}

  var streaming: Bool {
    get {return _storage._streaming ?? false}
    set {_uniqueStorage()._streaming = newValue}
  }
  /// Returns true if `streaming` has been explicitly set.
  var hasStreaming: Bool {return _storage._streaming != nil}
  /// Clears the value of `streaming`. Subsequent reads from it will return its default value.
  mutating func clearStreaming() {_uniqueStorage()._streaming = nil}

  var nativeAudioRecording: Bool {
    get {return _storage._nativeAudioRecording ?? false}
    set {_uniqueStorage()._nativeAudioRecording = newValue}
  }
  /// Returns true if `nativeAudioRecording` has been explicitly set.
  var hasNativeAudioRecording: Bool {return _storage._nativeAudioRecording != nil}
  /// Clears the value of `nativeAudioRecording`. Subsequent reads from it will return its default value.
  mutating func clearNativeAudioRecording() {_uniqueStorage()._nativeAudioRecording = nil}

  var posterImageData: TSP_DataReference {
    get {return _storage._posterImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._posterImageData = newValue}
  }
  /// Returns true if `posterImageData` has been explicitly set.
  var hasPosterImageData: Bool {return _storage._posterImageData != nil}
  /// Clears the value of `posterImageData`. Subsequent reads from it will return its default value.
  mutating func clearPosterImageData() {_uniqueStorage()._posterImageData = nil}

  var audioOnlyImageData: TSP_DataReference {
    get {return _storage._audioOnlyImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._audioOnlyImageData = newValue}
  }
  /// Returns true if `audioOnlyImageData` has been explicitly set.
  var hasAudioOnlyImageData: Bool {return _storage._audioOnlyImageData != nil}
  /// Clears the value of `audioOnlyImageData`. Subsequent reads from it will return its default value.
  mutating func clearAudioOnlyImageData() {_uniqueStorage()._audioOnlyImageData = nil}

  var posterImageGeneratedWithAlphaSupport: Bool {
    get {return _storage._posterImageGeneratedWithAlphaSupport ?? false}
    set {_uniqueStorage()._posterImageGeneratedWithAlphaSupport = newValue}
  }
  /// Returns true if `posterImageGeneratedWithAlphaSupport` has been explicitly set.
  var hasPosterImageGeneratedWithAlphaSupport: Bool {return _storage._posterImageGeneratedWithAlphaSupport != nil}
  /// Clears the value of `posterImageGeneratedWithAlphaSupport`. Subsequent reads from it will return its default value.
  mutating func clearPosterImageGeneratedWithAlphaSupport() {_uniqueStorage()._posterImageGeneratedWithAlphaSupport = nil}

  var playableState: UInt32 {
    get {return _storage._playableState ?? 0}
    set {_uniqueStorage()._playableState = newValue}
  }
  /// Returns true if `playableState` has been explicitly set.
  var hasPlayableState: Bool {return _storage._playableState != nil}
  /// Clears the value of `playableState`. Subsequent reads from it will return its default value.
  mutating func clearPlayableState() {_uniqueStorage()._playableState = nil}

  var flags: UInt32 {
    get {return _storage._flags ?? 0}
    set {_uniqueStorage()._flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  var hasFlags: Bool {return _storage._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  mutating func clearFlags() {_uniqueStorage()._flags = nil}

  var databaseMovieData: TSP_Reference {
    get {return _storage._databaseMovieData ?? TSP_Reference()}
    set {_uniqueStorage()._databaseMovieData = newValue}
  }
  /// Returns true if `databaseMovieData` has been explicitly set.
  var hasDatabaseMovieData: Bool {return _storage._databaseMovieData != nil}
  /// Clears the value of `databaseMovieData`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseMovieData() {_uniqueStorage()._databaseMovieData = nil}

  var databasePosterImageData: TSP_Reference {
    get {return _storage._databasePosterImageData ?? TSP_Reference()}
    set {_uniqueStorage()._databasePosterImageData = newValue}
  }
  /// Returns true if `databasePosterImageData` has been explicitly set.
  var hasDatabasePosterImageData: Bool {return _storage._databasePosterImageData != nil}
  /// Clears the value of `databasePosterImageData`. Subsequent reads from it will return its default value.
  mutating func clearDatabasePosterImageData() {_uniqueStorage()._databasePosterImageData = nil}

  var databaseAudioOnlyImageData: TSP_Reference {
    get {return _storage._databaseAudioOnlyImageData ?? TSP_Reference()}
    set {_uniqueStorage()._databaseAudioOnlyImageData = newValue}
  }
  /// Returns true if `databaseAudioOnlyImageData` has been explicitly set.
  var hasDatabaseAudioOnlyImageData: Bool {return _storage._databaseAudioOnlyImageData != nil}
  /// Clears the value of `databaseAudioOnlyImageData`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseAudioOnlyImageData() {_uniqueStorage()._databaseAudioOnlyImageData = nil}

  var style: TSP_Reference {
    get {return _storage._style ?? TSP_Reference()}
    set {_uniqueStorage()._style = newValue}
  }
  /// Returns true if `style` has been explicitly set.
  var hasStyle: Bool {return _storage._style != nil}
  /// Clears the value of `style`. Subsequent reads from it will return its default value.
  mutating func clearStyle() {_uniqueStorage()._style = nil}

  var originalSize: TSP_Size {
    get {return _storage._originalSize ?? TSP_Size()}
    set {_uniqueStorage()._originalSize = newValue}
  }
  /// Returns true if `originalSize` has been explicitly set.
  var hasOriginalSize: Bool {return _storage._originalSize != nil}
  /// Clears the value of `originalSize`. Subsequent reads from it will return its default value.
  mutating func clearOriginalSize() {_uniqueStorage()._originalSize = nil}

  var naturalSize: TSP_Size {
    get {return _storage._naturalSize ?? TSP_Size()}
    set {_uniqueStorage()._naturalSize = newValue}
  }
  /// Returns true if `naturalSize` has been explicitly set.
  var hasNaturalSize: Bool {return _storage._naturalSize != nil}
  /// Clears the value of `naturalSize`. Subsequent reads from it will return its default value.
  mutating func clearNaturalSize() {_uniqueStorage()._naturalSize = nil}

  var attribution: TSD_Attribution {
    get {return _storage._attribution ?? TSD_Attribution()}
    set {_uniqueStorage()._attribution = newValue}
  }
  /// Returns true if `attribution` has been explicitly set.
  var hasAttribution: Bool {return _storage._attribution != nil}
  /// Clears the value of `attribution`. Subsequent reads from it will return its default value.
  mutating func clearAttribution() {_uniqueStorage()._attribution = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum MovieLoopOption: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case none // = 0
    case `repeat` // = 1
    case backAndForth // = 2

    init() {
      self = .none
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .repeat
      case 2: self = .backAndForth
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .none: return 0
      case .repeat: return 1
      case .backAndForth: return 2
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension TSD_MovieArchive.MovieLoopOption: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_ExteriorTextWrapArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: UInt32 {
    get {return _type ?? 0}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var direction: UInt32 {
    get {return _direction ?? 0}
    set {_direction = newValue}
  }
  /// Returns true if `direction` has been explicitly set.
  var hasDirection: Bool {return self._direction != nil}
  /// Clears the value of `direction`. Subsequent reads from it will return its default value.
  mutating func clearDirection() {self._direction = nil}

  var fitType: UInt32 {
    get {return _fitType ?? 0}
    set {_fitType = newValue}
  }
  /// Returns true if `fitType` has been explicitly set.
  var hasFitType: Bool {return self._fitType != nil}
  /// Clears the value of `fitType`. Subsequent reads from it will return its default value.
  mutating func clearFitType() {self._fitType = nil}

  var margin: Float {
    get {return _margin ?? 0}
    set {_margin = newValue}
  }
  /// Returns true if `margin` has been explicitly set.
  var hasMargin: Bool {return self._margin != nil}
  /// Clears the value of `margin`. Subsequent reads from it will return its default value.
  mutating func clearMargin() {self._margin = nil}

  var alphaThreshold: Float {
    get {return _alphaThreshold ?? 0}
    set {_alphaThreshold = newValue}
  }
  /// Returns true if `alphaThreshold` has been explicitly set.
  var hasAlphaThreshold: Bool {return self._alphaThreshold != nil}
  /// Clears the value of `alphaThreshold`. Subsequent reads from it will return its default value.
  mutating func clearAlphaThreshold() {self._alphaThreshold = nil}

  var isHtmlWrap: Bool {
    get {return _isHtmlWrap ?? false}
    set {_isHtmlWrap = newValue}
  }
  /// Returns true if `isHtmlWrap` has been explicitly set.
  var hasIsHtmlWrap: Bool {return self._isHtmlWrap != nil}
  /// Clears the value of `isHtmlWrap`. Subsequent reads from it will return its default value.
  mutating func clearIsHtmlWrap() {self._isHtmlWrap = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _type: UInt32? = nil
  fileprivate var _direction: UInt32? = nil
  fileprivate var _fitType: UInt32? = nil
  fileprivate var _margin: Float? = nil
  fileprivate var _alphaThreshold: Float? = nil
  fileprivate var _isHtmlWrap: Bool? = nil
}

struct TSD_DrawableContentDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var elementKind: UInt32 {
    get {return _elementKind ?? 0}
    set {_elementKind = newValue}
  }
  /// Returns true if `elementKind` has been explicitly set.
  var hasElementKind: Bool {return self._elementKind != nil}
  /// Clears the value of `elementKind`. Subsequent reads from it will return its default value.
  mutating func clearElementKind() {self._elementKind = nil}

  var isAnchoredToText: Bool {
    get {return _isAnchoredToText ?? false}
    set {_isAnchoredToText = newValue}
  }
  /// Returns true if `isAnchoredToText` has been explicitly set.
  var hasIsAnchoredToText: Bool {return self._isAnchoredToText != nil}
  /// Clears the value of `isAnchoredToText`. Subsequent reads from it will return its default value.
  mutating func clearIsAnchoredToText() {self._isAnchoredToText = nil}

  var isFloatingAboveText: Bool {
    get {return _isFloatingAboveText ?? false}
    set {_isFloatingAboveText = newValue}
  }
  /// Returns true if `isFloatingAboveText` has been explicitly set.
  var hasIsFloatingAboveText: Bool {return self._isFloatingAboveText != nil}
  /// Clears the value of `isFloatingAboveText`. Subsequent reads from it will return its default value.
  mutating func clearIsFloatingAboveText() {self._isFloatingAboveText = nil}

  var isInlineWithText: Bool {
    get {return _isInlineWithText ?? false}
    set {_isInlineWithText = newValue}
  }
  /// Returns true if `isInlineWithText` has been explicitly set.
  var hasIsInlineWithText: Bool {return self._isInlineWithText != nil}
  /// Clears the value of `isInlineWithText`. Subsequent reads from it will return its default value.
  mutating func clearIsInlineWithText() {self._isInlineWithText = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _elementKind: UInt32? = nil
  fileprivate var _isAnchoredToText: Bool? = nil
  fileprivate var _isFloatingAboveText: Bool? = nil
  fileprivate var _isInlineWithText: Bool? = nil
}

struct TSD_FreehandDrawingContentDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_DrawableContentDescription {
    get {return _super ?? TSD_DrawableContentDescription()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var sourceDocWantedSpacerShape: Bool {
    get {return _sourceDocWantedSpacerShape ?? false}
    set {_sourceDocWantedSpacerShape = newValue}
  }
  /// Returns true if `sourceDocWantedSpacerShape` has been explicitly set.
  var hasSourceDocWantedSpacerShape: Bool {return self._sourceDocWantedSpacerShape != nil}
  /// Clears the value of `sourceDocWantedSpacerShape`. Subsequent reads from it will return its default value.
  mutating func clearSourceDocWantedSpacerShape() {self._sourceDocWantedSpacerShape = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_DrawableContentDescription? = nil
  fileprivate var _sourceDocWantedSpacerShape: Bool? = nil
}

struct TSD_FreehandDrawingToolkitUIState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var currentColor: TSP_Color {
    get {return _currentColor ?? TSP_Color()}
    set {_currentColor = newValue}
  }
  /// Returns true if `currentColor` has been explicitly set.
  var hasCurrentColor: Bool {return self._currentColor != nil}
  /// Clears the value of `currentColor`. Subsequent reads from it will return its default value.
  mutating func clearCurrentColor() {self._currentColor = nil}

  var mostRecentPenToolType: TSD_FreehandDrawingToolkitUIState.FreehandDrawingToolType {
    get {return _mostRecentPenToolType ?? .pen}
    set {_mostRecentPenToolType = newValue}
  }
  /// Returns true if `mostRecentPenToolType` has been explicitly set.
  var hasMostRecentPenToolType: Bool {return self._mostRecentPenToolType != nil}
  /// Clears the value of `mostRecentPenToolType`. Subsequent reads from it will return its default value.
  mutating func clearMostRecentPenToolType() {self._mostRecentPenToolType = nil}

  var penToolOpacity: Float {
    get {return _penToolOpacity ?? 0}
    set {_penToolOpacity = newValue}
  }
  /// Returns true if `penToolOpacity` has been explicitly set.
  var hasPenToolOpacity: Bool {return self._penToolOpacity != nil}
  /// Clears the value of `penToolOpacity`. Subsequent reads from it will return its default value.
  mutating func clearPenToolOpacity() {self._penToolOpacity = nil}

  var penToolUnscaledWidth: Float {
    get {return _penToolUnscaledWidth ?? 0}
    set {_penToolUnscaledWidth = newValue}
  }
  /// Returns true if `penToolUnscaledWidth` has been explicitly set.
  var hasPenToolUnscaledWidth: Bool {return self._penToolUnscaledWidth != nil}
  /// Clears the value of `penToolUnscaledWidth`. Subsequent reads from it will return its default value.
  mutating func clearPenToolUnscaledWidth() {self._penToolUnscaledWidth = nil}

  var pencilToolOpacity: Float {
    get {return _pencilToolOpacity ?? 0}
    set {_pencilToolOpacity = newValue}
  }
  /// Returns true if `pencilToolOpacity` has been explicitly set.
  var hasPencilToolOpacity: Bool {return self._pencilToolOpacity != nil}
  /// Clears the value of `pencilToolOpacity`. Subsequent reads from it will return its default value.
  mutating func clearPencilToolOpacity() {self._pencilToolOpacity = nil}

  var pencilToolUnscaledWidth: Float {
    get {return _pencilToolUnscaledWidth ?? 0}
    set {_pencilToolUnscaledWidth = newValue}
  }
  /// Returns true if `pencilToolUnscaledWidth` has been explicitly set.
  var hasPencilToolUnscaledWidth: Bool {return self._pencilToolUnscaledWidth != nil}
  /// Clears the value of `pencilToolUnscaledWidth`. Subsequent reads from it will return its default value.
  mutating func clearPencilToolUnscaledWidth() {self._pencilToolUnscaledWidth = nil}

  var crayonToolOpacity: Float {
    get {return _crayonToolOpacity ?? 0}
    set {_crayonToolOpacity = newValue}
  }
  /// Returns true if `crayonToolOpacity` has been explicitly set.
  var hasCrayonToolOpacity: Bool {return self._crayonToolOpacity != nil}
  /// Clears the value of `crayonToolOpacity`. Subsequent reads from it will return its default value.
  mutating func clearCrayonToolOpacity() {self._crayonToolOpacity = nil}

  var crayonToolUnscaledWidth: Float {
    get {return _crayonToolUnscaledWidth ?? 0}
    set {_crayonToolUnscaledWidth = newValue}
  }
  /// Returns true if `crayonToolUnscaledWidth` has been explicitly set.
  var hasCrayonToolUnscaledWidth: Bool {return self._crayonToolUnscaledWidth != nil}
  /// Clears the value of `crayonToolUnscaledWidth`. Subsequent reads from it will return its default value.
  mutating func clearCrayonToolUnscaledWidth() {self._crayonToolUnscaledWidth = nil}

  var fillToolOpacity: Float {
    get {return _fillToolOpacity ?? 0}
    set {_fillToolOpacity = newValue}
  }
  /// Returns true if `fillToolOpacity` has been explicitly set.
  var hasFillToolOpacity: Bool {return self._fillToolOpacity != nil}
  /// Clears the value of `fillToolOpacity`. Subsequent reads from it will return its default value.
  mutating func clearFillToolOpacity() {self._fillToolOpacity = nil}

  var eraserToolScaledWidth: Float {
    get {return _eraserToolScaledWidth ?? 0}
    set {_eraserToolScaledWidth = newValue}
  }
  /// Returns true if `eraserToolScaledWidth` has been explicitly set.
  var hasEraserToolScaledWidth: Bool {return self._eraserToolScaledWidth != nil}
  /// Clears the value of `eraserToolScaledWidth`. Subsequent reads from it will return its default value.
  mutating func clearEraserToolScaledWidth() {self._eraserToolScaledWidth = nil}

  var eraserToolErasesWholeObjects: Bool {
    get {return _eraserToolErasesWholeObjects ?? false}
    set {_eraserToolErasesWholeObjects = newValue}
  }
  /// Returns true if `eraserToolErasesWholeObjects` has been explicitly set.
  var hasEraserToolErasesWholeObjects: Bool {return self._eraserToolErasesWholeObjects != nil}
  /// Clears the value of `eraserToolErasesWholeObjects`. Subsequent reads from it will return its default value.
  mutating func clearEraserToolErasesWholeObjects() {self._eraserToolErasesWholeObjects = nil}

  var penToolColor: TSP_Color {
    get {return _penToolColor ?? TSP_Color()}
    set {_penToolColor = newValue}
  }
  /// Returns true if `penToolColor` has been explicitly set.
  var hasPenToolColor: Bool {return self._penToolColor != nil}
  /// Clears the value of `penToolColor`. Subsequent reads from it will return its default value.
  mutating func clearPenToolColor() {self._penToolColor = nil}

  var pencilToolColor: TSP_Color {
    get {return _pencilToolColor ?? TSP_Color()}
    set {_pencilToolColor = newValue}
  }
  /// Returns true if `pencilToolColor` has been explicitly set.
  var hasPencilToolColor: Bool {return self._pencilToolColor != nil}
  /// Clears the value of `pencilToolColor`. Subsequent reads from it will return its default value.
  mutating func clearPencilToolColor() {self._pencilToolColor = nil}

  var crayonToolColor: TSP_Color {
    get {return _crayonToolColor ?? TSP_Color()}
    set {_crayonToolColor = newValue}
  }
  /// Returns true if `crayonToolColor` has been explicitly set.
  var hasCrayonToolColor: Bool {return self._crayonToolColor != nil}
  /// Clears the value of `crayonToolColor`. Subsequent reads from it will return its default value.
  mutating func clearCrayonToolColor() {self._crayonToolColor = nil}

  var fillToolColor: TSP_Color {
    get {return _fillToolColor ?? TSP_Color()}
    set {_fillToolColor = newValue}
  }
  /// Returns true if `fillToolColor` has been explicitly set.
  var hasFillToolColor: Bool {return self._fillToolColor != nil}
  /// Clears the value of `fillToolColor`. Subsequent reads from it will return its default value.
  mutating func clearFillToolColor() {self._fillToolColor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum FreehandDrawingToolType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case pen // = 0
    case pencil // = 1
    case crayon // = 2
    case fill // = 3

    init() {
      self = .pen
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .pen
      case 1: self = .pencil
      case 2: self = .crayon
      case 3: self = .fill
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .pen: return 0
      case .pencil: return 1
      case .crayon: return 2
      case .fill: return 3
      }
    }

  }

  init() {}

  fileprivate var _currentColor: TSP_Color? = nil
  fileprivate var _mostRecentPenToolType: TSD_FreehandDrawingToolkitUIState.FreehandDrawingToolType? = nil
  fileprivate var _penToolOpacity: Float? = nil
  fileprivate var _penToolUnscaledWidth: Float? = nil
  fileprivate var _pencilToolOpacity: Float? = nil
  fileprivate var _pencilToolUnscaledWidth: Float? = nil
  fileprivate var _crayonToolOpacity: Float? = nil
  fileprivate var _crayonToolUnscaledWidth: Float? = nil
  fileprivate var _fillToolOpacity: Float? = nil
  fileprivate var _eraserToolScaledWidth: Float? = nil
  fileprivate var _eraserToolErasesWholeObjects: Bool? = nil
  fileprivate var _penToolColor: TSP_Color? = nil
  fileprivate var _pencilToolColor: TSP_Color? = nil
  fileprivate var _crayonToolColor: TSP_Color? = nil
  fileprivate var _fillToolColor: TSP_Color? = nil
}

#if swift(>=4.2)

extension TSD_FreehandDrawingToolkitUIState.FreehandDrawingToolType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_GuideArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: TSD_GuideArchive.GuideType {
    get {return _type ?? .horizontal}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var offset: Float {
    get {return _offset ?? 0}
    set {_offset = newValue}
  }
  /// Returns true if `offset` has been explicitly set.
  var hasOffset: Bool {return self._offset != nil}
  /// Clears the value of `offset`. Subsequent reads from it will return its default value.
  mutating func clearOffset() {self._offset = nil}

  var start: Float {
    get {return _start ?? 0}
    set {_start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  var hasStart: Bool {return self._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
  mutating func clearStart() {self._start = nil}

  var end: Float {
    get {return _end ?? 0}
    set {_end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  var hasEnd: Bool {return self._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
  mutating func clearEnd() {self._end = nil}

  var dynamic: Bool {
    get {return _dynamic ?? false}
    set {_dynamic = newValue}
  }
  /// Returns true if `dynamic` has been explicitly set.
  var hasDynamic: Bool {return self._dynamic != nil}
  /// Clears the value of `dynamic`. Subsequent reads from it will return its default value.
  mutating func clearDynamic() {self._dynamic = nil}

  var infinite: Bool {
    get {return _infinite ?? false}
    set {_infinite = newValue}
  }
  /// Returns true if `infinite` has been explicitly set.
  var hasInfinite: Bool {return self._infinite != nil}
  /// Clears the value of `infinite`. Subsequent reads from it will return its default value.
  mutating func clearInfinite() {self._infinite = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum GuideType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case horizontal // = 0
    case vertical // = 1

    init() {
      self = .horizontal
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .horizontal
      case 1: self = .vertical
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .horizontal: return 0
      case .vertical: return 1
      }
    }

  }

  init() {}

  fileprivate var _type: TSD_GuideArchive.GuideType? = nil
  fileprivate var _offset: Float? = nil
  fileprivate var _start: Float? = nil
  fileprivate var _end: Float? = nil
  fileprivate var _dynamic: Bool? = nil
  fileprivate var _infinite: Bool? = nil
}

#if swift(>=4.2)

extension TSD_GuideArchive.GuideType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_UserDefinedGuideArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: TSD_UserDefinedGuideArchive.GuideType {
    get {return _type ?? .horizontal}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var position: Float {
    get {return _position ?? 0}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum GuideType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case horizontal // = 0
    case vertical // = 1

    init() {
      self = .horizontal
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .horizontal
      case 1: self = .vertical
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .horizontal: return 0
      case .vertical: return 1
      }
    }

  }

  init() {}

  fileprivate var _type: TSD_UserDefinedGuideArchive.GuideType? = nil
  fileprivate var _position: Float? = nil
}

#if swift(>=4.2)

extension TSD_UserDefinedGuideArchive.GuideType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSD_GuideStorageArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userDefinedGuides: [TSD_UserDefinedGuideArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSD_CanvasSelectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var infos: [TSP_Reference] = []

  var nonInteractiveInfos: [TSP_Reference] = []

  var container: TSP_Reference {
    get {return _container ?? TSP_Reference()}
    set {_container = newValue}
  }
  /// Returns true if `container` has been explicitly set.
  var hasContainer: Bool {return self._container != nil}
  /// Clears the value of `container`. Subsequent reads from it will return its default value.
  mutating func clearContainer() {self._container = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _container: TSP_Reference? = nil
}

struct TSD_DrawableSelectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var infos: [TSP_Reference] = []

  var nonInteractiveInfos: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSD_GroupSelectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSD_DrawableSelectionArchive {
    get {return _super ?? TSD_DrawableSelectionArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var hasSelectedInfosInNonGroupContainer_p: Bool {
    get {return _hasSelectedInfosInNonGroupContainer_p ?? false}
    set {_hasSelectedInfosInNonGroupContainer_p = newValue}
  }
  /// Returns true if `hasSelectedInfosInNonGroupContainer_p` has been explicitly set.
  var hasHasSelectedInfosInNonGroupContainer_p: Bool {return self._hasSelectedInfosInNonGroupContainer_p != nil}
  /// Clears the value of `hasSelectedInfosInNonGroupContainer_p`. Subsequent reads from it will return its default value.
  mutating func clearHasSelectedInfosInNonGroupContainer_p() {self._hasSelectedInfosInNonGroupContainer_p = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSD_DrawableSelectionArchive? = nil
  fileprivate var _hasSelectedInfosInNonGroupContainer_p: Bool? = nil
}

struct TSD_PathSelectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSD_InfoHyperlinkSelectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSD_CommentStorageArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String {
    get {return _text ?? String()}
    set {_text = newValue}
  }
  /// Returns true if `text` has been explicitly set.
  var hasText: Bool {return self._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
  mutating func clearText() {self._text = nil}

  var creationDate: TSP_Date {
    get {return _creationDate ?? TSP_Date()}
    set {_creationDate = newValue}
  }
  /// Returns true if `creationDate` has been explicitly set.
  var hasCreationDate: Bool {return self._creationDate != nil}
  /// Clears the value of `creationDate`. Subsequent reads from it will return its default value.
  mutating func clearCreationDate() {self._creationDate = nil}

  var author: TSP_Reference {
    get {return _author ?? TSP_Reference()}
    set {_author = newValue}
  }
  /// Returns true if `author` has been explicitly set.
  var hasAuthor: Bool {return self._author != nil}
  /// Clears the value of `author`. Subsequent reads from it will return its default value.
  mutating func clearAuthor() {self._author = nil}

  var replies: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _text: String? = nil
  fileprivate var _creationDate: TSP_Date? = nil
  fileprivate var _author: TSP_Reference? = nil
}

struct TSD_ReplaceAnnotationAuthorCommandArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var oldAnnotationAuthor: TSP_Reference {
    get {return _oldAnnotationAuthor ?? TSP_Reference()}
    set {_oldAnnotationAuthor = newValue}
  }
  /// Returns true if `oldAnnotationAuthor` has been explicitly set.
  var hasOldAnnotationAuthor: Bool {return self._oldAnnotationAuthor != nil}
  /// Clears the value of `oldAnnotationAuthor`. Subsequent reads from it will return its default value.
  mutating func clearOldAnnotationAuthor() {self._oldAnnotationAuthor = nil}

  var newAnnotationAuthor: TSP_Reference {
    get {return _newAnnotationAuthor ?? TSP_Reference()}
    set {_newAnnotationAuthor = newValue}
  }
  /// Returns true if `newAnnotationAuthor` has been explicitly set.
  var hasNewAnnotationAuthor: Bool {return self._newAnnotationAuthor != nil}
  /// Clears the value of `newAnnotationAuthor`. Subsequent reads from it will return its default value.
  mutating func clearNewAnnotationAuthor() {self._newAnnotationAuthor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _oldAnnotationAuthor: TSP_Reference? = nil
  fileprivate var _newAnnotationAuthor: TSP_Reference? = nil
}

struct TSD_PencilAnnotationArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pencilAnnotationStorage: TSP_Reference {
    get {return _pencilAnnotationStorage ?? TSP_Reference()}
    set {_pencilAnnotationStorage = newValue}
  }
  /// Returns true if `pencilAnnotationStorage` has been explicitly set.
  var hasPencilAnnotationStorage: Bool {return self._pencilAnnotationStorage != nil}
  /// Clears the value of `pencilAnnotationStorage`. Subsequent reads from it will return its default value.
  mutating func clearPencilAnnotationStorage() {self._pencilAnnotationStorage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pencilAnnotationStorage: TSP_Reference? = nil
}

struct TSD_PencilAnnotationSelectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pencilAnnotation: TSP_Reference {
    get {return _pencilAnnotation ?? TSP_Reference()}
    set {_pencilAnnotation = newValue}
  }
  /// Returns true if `pencilAnnotation` has been explicitly set.
  var hasPencilAnnotation: Bool {return self._pencilAnnotation != nil}
  /// Clears the value of `pencilAnnotation`. Subsequent reads from it will return its default value.
  mutating func clearPencilAnnotation() {self._pencilAnnotation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pencilAnnotation: TSP_Reference? = nil
}

struct TSD_PencilAnnotationStorageArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var attachedLocation: Int32 {
    get {return _storage._attachedLocation ?? 0}
    set {_uniqueStorage()._attachedLocation = newValue}
  }
  /// Returns true if `attachedLocation` has been explicitly set.
  var hasAttachedLocation: Bool {return _storage._attachedLocation != nil}
  /// Clears the value of `attachedLocation`. Subsequent reads from it will return its default value.
  mutating func clearAttachedLocation() {_uniqueStorage()._attachedLocation = nil}

  var markupOffset: TSP_Point {
    get {return _storage._markupOffset ?? TSP_Point()}
    set {_uniqueStorage()._markupOffset = newValue}
  }
  /// Returns true if `markupOffset` has been explicitly set.
  var hasMarkupOffset: Bool {return _storage._markupOffset != nil}
  /// Clears the value of `markupOffset`. Subsequent reads from it will return its default value.
  mutating func clearMarkupOffset() {_uniqueStorage()._markupOffset = nil}

  var rasterizedImage: TSP_DataReference {
    get {return _storage._rasterizedImage ?? TSP_DataReference()}
    set {_uniqueStorage()._rasterizedImage = newValue}
  }
  /// Returns true if `rasterizedImage` has been explicitly set.
  var hasRasterizedImage: Bool {return _storage._rasterizedImage != nil}
  /// Clears the value of `rasterizedImage`. Subsequent reads from it will return its default value.
  mutating func clearRasterizedImage() {_uniqueStorage()._rasterizedImage = nil}

  var legacyEncodedDrawing: TSP_DataReference {
    get {return _storage._legacyEncodedDrawing ?? TSP_DataReference()}
    set {_uniqueStorage()._legacyEncodedDrawing = newValue}
  }
  /// Returns true if `legacyEncodedDrawing` has been explicitly set.
  var hasLegacyEncodedDrawing: Bool {return _storage._legacyEncodedDrawing != nil}
  /// Clears the value of `legacyEncodedDrawing`. Subsequent reads from it will return its default value.
  mutating func clearLegacyEncodedDrawing() {_uniqueStorage()._legacyEncodedDrawing = nil}

  var drawingPath: TSP_Path {
    get {return _storage._drawingPath ?? TSP_Path()}
    set {_uniqueStorage()._drawingPath = newValue}
  }
  /// Returns true if `drawingPath` has been explicitly set.
  var hasDrawingPath: Bool {return _storage._drawingPath != nil}
  /// Clears the value of `drawingPath`. Subsequent reads from it will return its default value.
  mutating func clearDrawingPath() {_uniqueStorage()._drawingPath = nil}

  var strokesBoundingBoxOrigin: TSP_Point {
    get {return _storage._strokesBoundingBoxOrigin ?? TSP_Point()}
    set {_uniqueStorage()._strokesBoundingBoxOrigin = newValue}
  }
  /// Returns true if `strokesBoundingBoxOrigin` has been explicitly set.
  var hasStrokesBoundingBoxOrigin: Bool {return _storage._strokesBoundingBoxOrigin != nil}
  /// Clears the value of `strokesBoundingBoxOrigin`. Subsequent reads from it will return its default value.
  mutating func clearStrokesBoundingBoxOrigin() {_uniqueStorage()._strokesBoundingBoxOrigin = nil}

  var strokesBoundingBoxSize: TSP_Size {
    get {return _storage._strokesBoundingBoxSize ?? TSP_Size()}
    set {_uniqueStorage()._strokesBoundingBoxSize = newValue}
  }
  /// Returns true if `strokesBoundingBoxSize` has been explicitly set.
  var hasStrokesBoundingBoxSize: Bool {return _storage._strokesBoundingBoxSize != nil}
  /// Clears the value of `strokesBoundingBoxSize`. Subsequent reads from it will return its default value.
  mutating func clearStrokesBoundingBoxSize() {_uniqueStorage()._strokesBoundingBoxSize = nil}

  var attachedType: Int32 {
    get {return _storage._attachedType ?? 0}
    set {_uniqueStorage()._attachedType = newValue}
  }
  /// Returns true if `attachedType` has been explicitly set.
  var hasAttachedType: Bool {return _storage._attachedType != nil}
  /// Clears the value of `attachedType`. Subsequent reads from it will return its default value.
  mutating func clearAttachedType() {_uniqueStorage()._attachedType = nil}

  var originalAttachedSize: TSP_Size {
    get {return _storage._originalAttachedSize ?? TSP_Size()}
    set {_uniqueStorage()._originalAttachedSize = newValue}
  }
  /// Returns true if `originalAttachedSize` has been explicitly set.
  var hasOriginalAttachedSize: Bool {return _storage._originalAttachedSize != nil}
  /// Clears the value of `originalAttachedSize`. Subsequent reads from it will return its default value.
  mutating func clearOriginalAttachedSize() {_uniqueStorage()._originalAttachedSize = nil}

  var percentOfPaContainedInParentRep: Double {
    get {return _storage._percentOfPaContainedInParentRep ?? 0}
    set {_uniqueStorage()._percentOfPaContainedInParentRep = newValue}
  }
  /// Returns true if `percentOfPaContainedInParentRep` has been explicitly set.
  var hasPercentOfPaContainedInParentRep: Bool {return _storage._percentOfPaContainedInParentRep != nil}
  /// Clears the value of `percentOfPaContainedInParentRep`. Subsequent reads from it will return its default value.
  mutating func clearPercentOfPaContainedInParentRep() {_uniqueStorage()._percentOfPaContainedInParentRep = nil}

  var textBaselinesTouchedCount: UInt64 {
    get {return _storage._textBaselinesTouchedCount ?? 0}
    set {_uniqueStorage()._textBaselinesTouchedCount = newValue}
  }
  /// Returns true if `textBaselinesTouchedCount` has been explicitly set.
  var hasTextBaselinesTouchedCount: Bool {return _storage._textBaselinesTouchedCount != nil}
  /// Clears the value of `textBaselinesTouchedCount`. Subsequent reads from it will return its default value.
  mutating func clearTextBaselinesTouchedCount() {_uniqueStorage()._textBaselinesTouchedCount = nil}

  var visibleStrokesCount: UInt64 {
    get {return _storage._visibleStrokesCount ?? 0}
    set {_uniqueStorage()._visibleStrokesCount = newValue}
  }
  /// Returns true if `visibleStrokesCount` has been explicitly set.
  var hasVisibleStrokesCount: Bool {return _storage._visibleStrokesCount != nil}
  /// Clears the value of `visibleStrokesCount`. Subsequent reads from it will return its default value.
  mutating func clearVisibleStrokesCount() {_uniqueStorage()._visibleStrokesCount = nil}

  var penColor: TSP_Color {
    get {return _storage._penColor ?? TSP_Color()}
    set {_uniqueStorage()._penColor = newValue}
  }
  /// Returns true if `penColor` has been explicitly set.
  var hasPenColor: Bool {return _storage._penColor != nil}
  /// Clears the value of `penColor`. Subsequent reads from it will return its default value.
  mutating func clearPenColor() {_uniqueStorage()._penColor = nil}

  var toolType: Int32 {
    get {return _storage._toolType ?? 0}
    set {_uniqueStorage()._toolType = newValue}
  }
  /// Returns true if `toolType` has been explicitly set.
  var hasToolType: Bool {return _storage._toolType != nil}
  /// Clears the value of `toolType`. Subsequent reads from it will return its default value.
  mutating func clearToolType() {_uniqueStorage()._toolType = nil}

  var calloutSubStorages: [TSP_Reference] {
    get {return _storage._calloutSubStorages}
    set {_uniqueStorage()._calloutSubStorages = newValue}
  }

  var creationDate: TSP_Date {
    get {return _storage._creationDate ?? TSP_Date()}
    set {_uniqueStorage()._creationDate = newValue}
  }
  /// Returns true if `creationDate` has been explicitly set.
  var hasCreationDate: Bool {return _storage._creationDate != nil}
  /// Clears the value of `creationDate`. Subsequent reads from it will return its default value.
  mutating func clearCreationDate() {_uniqueStorage()._creationDate = nil}

  var pencilAnnotationDrawingScale: Double {
    get {return _storage._pencilAnnotationDrawingScale ?? 0}
    set {_uniqueStorage()._pencilAnnotationDrawingScale = newValue}
  }
  /// Returns true if `pencilAnnotationDrawingScale` has been explicitly set.
  var hasPencilAnnotationDrawingScale: Bool {return _storage._pencilAnnotationDrawingScale != nil}
  /// Clears the value of `pencilAnnotationDrawingScale`. Subsequent reads from it will return its default value.
  mutating func clearPencilAnnotationDrawingScale() {_uniqueStorage()._pencilAnnotationDrawingScale = nil}

  var compoundAnnotationType: Int32 {
    get {return _storage._compoundAnnotationType ?? 0}
    set {_uniqueStorage()._compoundAnnotationType = newValue}
  }
  /// Returns true if `compoundAnnotationType` has been explicitly set.
  var hasCompoundAnnotationType: Bool {return _storage._compoundAnnotationType != nil}
  /// Clears the value of `compoundAnnotationType`. Subsequent reads from it will return its default value.
  mutating func clearCompoundAnnotationType() {_uniqueStorage()._compoundAnnotationType = nil}

  var subStorages: [TSP_Reference] {
    get {return _storage._subStorages}
    set {_uniqueStorage()._subStorages = newValue}
  }

  var encodedDrawing: TSP_DataReference {
    get {return _storage._encodedDrawing ?? TSP_DataReference()}
    set {_uniqueStorage()._encodedDrawing = newValue}
  }
  /// Returns true if `encodedDrawing` has been explicitly set.
  var hasEncodedDrawing: Bool {return _storage._encodedDrawing != nil}
  /// Clears the value of `encodedDrawing`. Subsequent reads from it will return its default value.
  mutating func clearEncodedDrawing() {_uniqueStorage()._encodedDrawing = nil}

  var strokePointsFrameOrigin: TSP_Point {
    get {return _storage._strokePointsFrameOrigin ?? TSP_Point()}
    set {_uniqueStorage()._strokePointsFrameOrigin = newValue}
  }
  /// Returns true if `strokePointsFrameOrigin` has been explicitly set.
  var hasStrokePointsFrameOrigin: Bool {return _storage._strokePointsFrameOrigin != nil}
  /// Clears the value of `strokePointsFrameOrigin`. Subsequent reads from it will return its default value.
  mutating func clearStrokePointsFrameOrigin() {_uniqueStorage()._strokePointsFrameOrigin = nil}

  var strokePointsFrameSize: TSP_Size {
    get {return _storage._strokePointsFrameSize ?? TSP_Size()}
    set {_uniqueStorage()._strokePointsFrameSize = newValue}
  }
  /// Returns true if `strokePointsFrameSize` has been explicitly set.
  var hasStrokePointsFrameSize: Bool {return _storage._strokePointsFrameSize != nil}
  /// Clears the value of `strokePointsFrameSize`. Subsequent reads from it will return its default value.
  mutating func clearStrokePointsFrameSize() {_uniqueStorage()._strokePointsFrameSize = nil}

  var renderedFrameOrigin: TSP_Point {
    get {return _storage._renderedFrameOrigin ?? TSP_Point()}
    set {_uniqueStorage()._renderedFrameOrigin = newValue}
  }
  /// Returns true if `renderedFrameOrigin` has been explicitly set.
  var hasRenderedFrameOrigin: Bool {return _storage._renderedFrameOrigin != nil}
  /// Clears the value of `renderedFrameOrigin`. Subsequent reads from it will return its default value.
  mutating func clearRenderedFrameOrigin() {_uniqueStorage()._renderedFrameOrigin = nil}

  var renderedFrameSize: TSP_Size {
    get {return _storage._renderedFrameSize ?? TSP_Size()}
    set {_uniqueStorage()._renderedFrameSize = newValue}
  }
  /// Returns true if `renderedFrameSize` has been explicitly set.
  var hasRenderedFrameSize: Bool {return _storage._renderedFrameSize != nil}
  /// Clears the value of `renderedFrameSize`. Subsequent reads from it will return its default value.
  mutating func clearRenderedFrameSize() {_uniqueStorage()._renderedFrameSize = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSD_SpecColorFillSetColorArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var color: TSP_Color {
    get {return _color ?? TSP_Color()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {self._color = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _color: TSP_Color? = nil
}

struct TSD_SpecFrameSetAssetScaleArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var assetScale: Double {
    get {return _assetScale ?? 0}
    set {_assetScale = newValue}
  }
  /// Returns true if `assetScale` has been explicitly set.
  var hasAssetScale: Bool {return self._assetScale != nil}
  /// Clears the value of `assetScale`. Subsequent reads from it will return its default value.
  mutating func clearAssetScale() {self._assetScale = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _assetScale: Double? = nil
}

struct TSD_SpecGradientFillSetAngleArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var angle: Double {
    get {return _angle ?? 0}
    set {_angle = newValue}
  }
  /// Returns true if `angle` has been explicitly set.
  var hasAngle: Bool {return self._angle != nil}
  /// Clears the value of `angle`. Subsequent reads from it will return its default value.
  mutating func clearAngle() {self._angle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _angle: Double? = nil
}

struct TSD_SpecImageFillSetTechniqueArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var technique: Int32 {
    get {return _technique ?? 0}
    set {_technique = newValue}
  }
  /// Returns true if `technique` has been explicitly set.
  var hasTechnique: Bool {return self._technique != nil}
  /// Clears the value of `technique`. Subsequent reads from it will return its default value.
  mutating func clearTechnique() {self._technique = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _technique: Int32? = nil
}

struct TSD_SpecReflectionSetOpacityArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var opacity: Double {
    get {return _opacity ?? 0}
    set {_opacity = newValue}
  }
  /// Returns true if `opacity` has been explicitly set.
  var hasOpacity: Bool {return self._opacity != nil}
  /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
  mutating func clearOpacity() {self._opacity = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _opacity: Double? = nil
}

struct TSD_SpecShadowSetAngleArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var angle: Double {
    get {return _angle ?? 0}
    set {_angle = newValue}
  }
  /// Returns true if `angle` has been explicitly set.
  var hasAngle: Bool {return self._angle != nil}
  /// Clears the value of `angle`. Subsequent reads from it will return its default value.
  mutating func clearAngle() {self._angle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _angle: Double? = nil
}

struct TSD_SpecShadowSetColorArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var color: TSP_Color {
    get {return _color ?? TSP_Color()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {self._color = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _color: TSP_Color? = nil
}

struct TSD_SpecShadowSetOffsetArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var offset: Double {
    get {return _offset ?? 0}
    set {_offset = newValue}
  }
  /// Returns true if `offset` has been explicitly set.
  var hasOffset: Bool {return self._offset != nil}
  /// Clears the value of `offset`. Subsequent reads from it will return its default value.
  mutating func clearOffset() {self._offset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _offset: Double? = nil
}

struct TSD_SpecShadowSetOpacityArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var opacity: Double {
    get {return _opacity ?? 0}
    set {_opacity = newValue}
  }
  /// Returns true if `opacity` has been explicitly set.
  var hasOpacity: Bool {return self._opacity != nil}
  /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
  mutating func clearOpacity() {self._opacity = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _opacity: Double? = nil
}

struct TSD_SpecShadowSetRadiusArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var radius: Int32 {
    get {return _radius ?? 0}
    set {_radius = newValue}
  }
  /// Returns true if `radius` has been explicitly set.
  var hasRadius: Bool {return self._radius != nil}
  /// Clears the value of `radius`. Subsequent reads from it will return its default value.
  mutating func clearRadius() {self._radius = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _radius: Int32? = nil
}

struct TSD_SpecStrokeSetColorArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var color: TSP_Color {
    get {return _color ?? TSP_Color()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {self._color = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _color: TSP_Color? = nil
}

struct TSD_SpecStrokeSetPatternArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lineCap: Int32 {
    get {return _lineCap ?? 0}
    set {_lineCap = newValue}
  }
  /// Returns true if `lineCap` has been explicitly set.
  var hasLineCap: Bool {return self._lineCap != nil}
  /// Clears the value of `lineCap`. Subsequent reads from it will return its default value.
  mutating func clearLineCap() {self._lineCap = nil}

  var lineJoin: Int32 {
    get {return _lineJoin ?? 0}
    set {_lineJoin = newValue}
  }
  /// Returns true if `lineJoin` has been explicitly set.
  var hasLineJoin: Bool {return self._lineJoin != nil}
  /// Clears the value of `lineJoin`. Subsequent reads from it will return its default value.
  mutating func clearLineJoin() {self._lineJoin = nil}

  var miterLimit: Double {
    get {return _miterLimit ?? 0}
    set {_miterLimit = newValue}
  }
  /// Returns true if `miterLimit` has been explicitly set.
  var hasMiterLimit: Bool {return self._miterLimit != nil}
  /// Clears the value of `miterLimit`. Subsequent reads from it will return its default value.
  mutating func clearMiterLimit() {self._miterLimit = nil}

  var width: Double {
    get {return _width ?? 0}
    set {_width = newValue}
  }
  /// Returns true if `width` has been explicitly set.
  var hasWidth: Bool {return self._width != nil}
  /// Clears the value of `width`. Subsequent reads from it will return its default value.
  mutating func clearWidth() {self._width = nil}

  var color: TSP_Color {
    get {return _color ?? TSP_Color()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {self._color = nil}

  var pattern: TSD_StrokePatternArchive {
    get {return _pattern ?? TSD_StrokePatternArchive()}
    set {_pattern = newValue}
  }
  /// Returns true if `pattern` has been explicitly set.
  var hasPattern: Bool {return self._pattern != nil}
  /// Clears the value of `pattern`. Subsequent reads from it will return its default value.
  mutating func clearPattern() {self._pattern = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _lineCap: Int32? = nil
  fileprivate var _lineJoin: Int32? = nil
  fileprivate var _miterLimit: Double? = nil
  fileprivate var _width: Double? = nil
  fileprivate var _color: TSP_Color? = nil
  fileprivate var _pattern: TSD_StrokePatternArchive? = nil
}

struct TSD_SpecStrokeSetWidthArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var width: Double {
    get {return _width ?? 0}
    set {_width = newValue}
  }
  /// Returns true if `width` has been explicitly set.
  var hasWidth: Bool {return self._width != nil}
  /// Clears the value of `width`. Subsequent reads from it will return its default value.
  mutating func clearWidth() {self._width = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _width: Double? = nil
}

struct TSD_Attribution {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var descriptionText: String {
    get {return _descriptionText ?? String()}
    set {_descriptionText = newValue}
  }
  /// Returns true if `descriptionText` has been explicitly set.
  var hasDescriptionText: Bool {return self._descriptionText != nil}
  /// Clears the value of `descriptionText`. Subsequent reads from it will return its default value.
  mutating func clearDescriptionText() {self._descriptionText = nil}

  var externalURL: String {
    get {return _externalURL ?? String()}
    set {_externalURL = newValue}
  }
  /// Returns true if `externalURL` has been explicitly set.
  var hasExternalURL: Bool {return self._externalURL != nil}
  /// Clears the value of `externalURL`. Subsequent reads from it will return its default value.
  mutating func clearExternalURL() {self._externalURL = nil}

  var authorName: String {
    get {return _authorName ?? String()}
    set {_authorName = newValue}
  }
  /// Returns true if `authorName` has been explicitly set.
  var hasAuthorName: Bool {return self._authorName != nil}
  /// Clears the value of `authorName`. Subsequent reads from it will return its default value.
  mutating func clearAuthorName() {self._authorName = nil}

  var authorURL: String {
    get {return _authorURL ?? String()}
    set {_authorURL = newValue}
  }
  /// Returns true if `authorURL` has been explicitly set.
  var hasAuthorURL: Bool {return self._authorURL != nil}
  /// Clears the value of `authorURL`. Subsequent reads from it will return its default value.
  mutating func clearAuthorURL() {self._authorURL = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _title: String? = nil
  fileprivate var _descriptionText: String? = nil
  fileprivate var _externalURL: String? = nil
  fileprivate var _authorName: String? = nil
  fileprivate var _authorURL: String? = nil
}

// MARK: - Extension support defined in TSDArchives.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension TSD_GroupArchive {

  var TSD_FreehandDrawingArchive_freehandDrawingArchive: TSD_FreehandDrawingArchive {
    get {return getExtensionValue(ext: TSD_FreehandDrawingArchive.Extensions.freehand_drawing_archive) ?? TSD_FreehandDrawingArchive()}
    set {setExtensionValue(ext: TSD_FreehandDrawingArchive.Extensions.freehand_drawing_archive, value: newValue)}
  }
  /// Returns true if extension `TSD_FreehandDrawingArchive.Extensions.freehand_drawing_archive`
  /// has been explicitly set.
  var hasTSD_FreehandDrawingArchive_freehandDrawingArchive: Bool {
    return hasExtensionValue(ext: TSD_FreehandDrawingArchive.Extensions.freehand_drawing_archive)
  }
  /// Clears the value of extension `TSD_FreehandDrawingArchive.Extensions.freehand_drawing_archive`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSD_FreehandDrawingArchive_freehandDrawingArchive() {
    clearExtensionValue(ext: TSD_FreehandDrawingArchive.Extensions.freehand_drawing_archive)
  }
}

extension TSP_DataAttributes {

  var TSD_ImageDataAttributes_imageDataAttributes: TSD_ImageDataAttributes {
    get {return getExtensionValue(ext: TSD_ImageDataAttributes.Extensions.image_data_attributes) ?? TSD_ImageDataAttributes()}
    set {setExtensionValue(ext: TSD_ImageDataAttributes.Extensions.image_data_attributes, value: newValue)}
  }
  /// Returns true if extension `TSD_ImageDataAttributes.Extensions.image_data_attributes`
  /// has been explicitly set.
  var hasTSD_ImageDataAttributes_imageDataAttributes: Bool {
    return hasExtensionValue(ext: TSD_ImageDataAttributes.Extensions.image_data_attributes)
  }
  /// Clears the value of extension `TSD_ImageDataAttributes.Extensions.image_data_attributes`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSD_ImageDataAttributes_imageDataAttributes() {
    clearExtensionValue(ext: TSD_ImageDataAttributes.Extensions.image_data_attributes)
  }
}

extension TSS_CommandPropertyEntryArchive {

  var TSD_fill: TSD_FillArchive {
    get {return getExtensionValue(ext: TSD_Extensions_fill) ?? TSD_FillArchive()}
    set {setExtensionValue(ext: TSD_Extensions_fill, value: newValue)}
  }
  /// Returns true if extension `TSD_Extensions_fill`
  /// has been explicitly set.
  var hasTSD_fill: Bool {
    return hasExtensionValue(ext: TSD_Extensions_fill)
  }
  /// Clears the value of extension `TSD_Extensions_fill`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSD_fill() {
    clearExtensionValue(ext: TSD_Extensions_fill)
  }

  var TSD_stroke: TSD_StrokeArchive {
    get {return getExtensionValue(ext: TSD_Extensions_stroke) ?? TSD_StrokeArchive()}
    set {setExtensionValue(ext: TSD_Extensions_stroke, value: newValue)}
  }
  /// Returns true if extension `TSD_Extensions_stroke`
  /// has been explicitly set.
  var hasTSD_stroke: Bool {
    return hasExtensionValue(ext: TSD_Extensions_stroke)
  }
  /// Clears the value of extension `TSD_Extensions_stroke`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSD_stroke() {
    clearExtensionValue(ext: TSD_Extensions_stroke)
  }
}

extension TSS_ThemeArchive {

  var TSD_ThemePresetsArchive_extension: TSD_ThemePresetsArchive {
    get {return getExtensionValue(ext: TSD_ThemePresetsArchive.Extensions.extension) ?? TSD_ThemePresetsArchive()}
    set {setExtensionValue(ext: TSD_ThemePresetsArchive.Extensions.extension, value: newValue)}
  }
  /// Returns true if extension `TSD_ThemePresetsArchive.Extensions.extension`
  /// has been explicitly set.
  var hasTSD_ThemePresetsArchive_extension: Bool {
    return hasExtensionValue(ext: TSD_ThemePresetsArchive.Extensions.extension)
  }
  /// Clears the value of extension `TSD_ThemePresetsArchive.Extensions.extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSD_ThemePresetsArchive_extension() {
    clearExtensionValue(ext: TSD_ThemePresetsArchive.Extensions.extension)
  }

}

// MARK: - File's ExtensionMap: TSD_Tsdarchives_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let TSD_Tsdarchives_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  TSD_Extensions_fill,
  TSD_Extensions_stroke,
  TSD_ThemePresetsArchive.Extensions.extension,
  TSD_FreehandDrawingArchive.Extensions.freehand_drawing_archive,
  TSD_ImageDataAttributes.Extensions.image_data_attributes
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

let TSD_Extensions_fill = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TSD_FillArchive>, TSS_CommandPropertyEntryArchive>(
  _protobuf_fieldNumber: 200,
  fieldName: "TSD.fill"
)

let TSD_Extensions_stroke = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TSD_StrokeArchive>, TSS_CommandPropertyEntryArchive>(
  _protobuf_fieldNumber: 201,
  fieldName: "TSD.stroke"
)

extension TSD_ThemePresetsArchive {
  enum Extensions {
    static let `extension` = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TSD_ThemePresetsArchive>, TSS_ThemeArchive>(
      _protobuf_fieldNumber: 100,
      fieldName: "TSD.ThemePresetsArchive.extension"
    )
  }
}

extension TSD_FreehandDrawingArchive {
  enum Extensions {
    static let freehand_drawing_archive = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TSD_FreehandDrawingArchive>, TSD_GroupArchive>(
      _protobuf_fieldNumber: 100,
      fieldName: "TSD.FreehandDrawingArchive.freehand_drawing_archive"
    )
  }
}

extension TSD_ImageDataAttributes {
  enum Extensions {
    static let image_data_attributes = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TSD_ImageDataAttributes>, TSP_DataAttributes>(
      _protobuf_fieldNumber: 100,
      fieldName: "TSD.ImageDataAttributes.image_data_attributes"
    )
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TSD"

extension TSD_LineJoin: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MiterJoin"),
    1: .same(proto: "RoundJoin"),
    2: .same(proto: "BevelJoin"),
  ]
}

extension TSD_EdgeInsetsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EdgeInsetsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "top"),
    2: .same(proto: "left"),
    3: .same(proto: "bottom"),
    4: .same(proto: "right"),
  ]

  public var isInitialized: Bool {
    if self._top == nil {return false}
    if self._left == nil {return false}
    if self._bottom == nil {return false}
    if self._right == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self._top)
      case 2: try decoder.decodeSingularFloatField(value: &self._left)
      case 3: try decoder.decodeSingularFloatField(value: &self._bottom)
      case 4: try decoder.decodeSingularFloatField(value: &self._right)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._top {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    }
    if let v = self._left {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._bottom {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }
    if let v = self._right {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_EdgeInsetsArchive, rhs: TSD_EdgeInsetsArchive) -> Bool {
    if lhs._top != rhs._top {return false}
    if lhs._left != rhs._left {return false}
    if lhs._bottom != rhs._bottom {return false}
    if lhs._right != rhs._right {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_GeometryArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GeometryArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .same(proto: "size"),
    3: .same(proto: "flags"),
    4: .same(proto: "angle"),
  ]

  public var isInitialized: Bool {
    if let v = self._position, !v.isInitialized {return false}
    if let v = self._size, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._position)
      case 2: try decoder.decodeSingularMessageField(value: &self._size)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._flags)
      case 4: try decoder.decodeSingularFloatField(value: &self._angle)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._size {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._flags {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._angle {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_GeometryArchive, rhs: TSD_GeometryArchive) -> Bool {
    if lhs._position != rhs._position {return false}
    if lhs._size != rhs._size {return false}
    if lhs._flags != rhs._flags {return false}
    if lhs._angle != rhs._angle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_PointPathSourceArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PointPathSourceArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "point"),
    3: .same(proto: "naturalSize"),
  ]

  public var isInitialized: Bool {
    if let v = self._point, !v.isInitialized {return false}
    if let v = self._naturalSize, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularMessageField(value: &self._point)
      case 3: try decoder.decodeSingularMessageField(value: &self._naturalSize)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._point {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._naturalSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_PointPathSourceArchive, rhs: TSD_PointPathSourceArchive) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._point != rhs._point {return false}
    if lhs._naturalSize != rhs._naturalSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_PointPathSourceArchive.PointPathSourceType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kTSDLeftSingleArrow"),
    1: .same(proto: "kTSDRightSingleArrow"),
    10: .same(proto: "kTSDDoubleArrow"),
    100: .same(proto: "kTSDStar"),
    200: .same(proto: "kTSDPlus"),
  ]
}

extension TSD_ScalarPathSourceArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ScalarPathSourceArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "scalar"),
    3: .same(proto: "naturalSize"),
    4: .standard(proto: "is_curve_continuous"),
  ]

  public var isInitialized: Bool {
    if let v = self._naturalSize, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularFloatField(value: &self._scalar)
      case 3: try decoder.decodeSingularMessageField(value: &self._naturalSize)
      case 4: try decoder.decodeSingularBoolField(value: &self._isCurveContinuous)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._scalar {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._naturalSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._isCurveContinuous {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ScalarPathSourceArchive, rhs: TSD_ScalarPathSourceArchive) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._scalar != rhs._scalar {return false}
    if lhs._naturalSize != rhs._naturalSize {return false}
    if lhs._isCurveContinuous != rhs._isCurveContinuous {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ScalarPathSourceArchive.ScalarPathSourceType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kTSDRoundedRectangle"),
    1: .same(proto: "kTSDRegularPolygon"),
    2: .same(proto: "kTSDChevron"),
  ]
}

extension TSD_BezierPathSourceArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BezierPathSourceArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "path_string"),
    2: .same(proto: "naturalSize"),
    3: .same(proto: "path"),
  ]

  public var isInitialized: Bool {
    if let v = self._naturalSize, !v.isInitialized {return false}
    if let v = self._path, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._pathString)
      case 2: try decoder.decodeSingularMessageField(value: &self._naturalSize)
      case 3: try decoder.decodeSingularMessageField(value: &self._path)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._pathString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._naturalSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._path {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_BezierPathSourceArchive, rhs: TSD_BezierPathSourceArchive) -> Bool {
    if lhs._pathString != rhs._pathString {return false}
    if lhs._naturalSize != rhs._naturalSize {return false}
    if lhs._path != rhs._path {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_CalloutPathSourceArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CalloutPathSourceArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "natural_size"),
    2: .standard(proto: "tail_position"),
    3: .standard(proto: "tail_size"),
    4: .standard(proto: "corner_radius"),
    5: .standard(proto: "center_tail"),
  ]

  public var isInitialized: Bool {
    if let v = self._naturalSize, !v.isInitialized {return false}
    if let v = self._tailPosition, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._naturalSize)
      case 2: try decoder.decodeSingularMessageField(value: &self._tailPosition)
      case 3: try decoder.decodeSingularFloatField(value: &self._tailSize)
      case 4: try decoder.decodeSingularFloatField(value: &self._cornerRadius)
      case 5: try decoder.decodeSingularBoolField(value: &self._centerTail)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._naturalSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._tailPosition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._tailSize {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }
    if let v = self._cornerRadius {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    if let v = self._centerTail {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_CalloutPathSourceArchive, rhs: TSD_CalloutPathSourceArchive) -> Bool {
    if lhs._naturalSize != rhs._naturalSize {return false}
    if lhs._tailPosition != rhs._tailPosition {return false}
    if lhs._tailSize != rhs._tailSize {return false}
    if lhs._cornerRadius != rhs._cornerRadius {return false}
    if lhs._centerTail != rhs._centerTail {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ConnectionLinePathSourceArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectionLinePathSourceArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "type"),
    3: .standard(proto: "outset_from"),
    4: .standard(proto: "outset_to"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularEnumField(value: &self._type)
      case 3: try decoder.decodeSingularFloatField(value: &self._outsetFrom)
      case 4: try decoder.decodeSingularFloatField(value: &self._outsetTo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._outsetFrom {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }
    if let v = self._outsetTo {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ConnectionLinePathSourceArchive, rhs: TSD_ConnectionLinePathSourceArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._type != rhs._type {return false}
    if lhs._outsetFrom != rhs._outsetFrom {return false}
    if lhs._outsetTo != rhs._outsetTo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ConnectionLinePathSourceArchive.ConnectionLinePathSourceType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kTSDConnectionLineTypeQuadratic"),
    1: .same(proto: "kTSDConnectionLineTypeOrthogonal"),
  ]
}

extension TSD_EditableBezierPathSourceArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EditableBezierPathSourceArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subpaths"),
    2: .same(proto: "naturalSize"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.subpaths) {return false}
    if let v = self._naturalSize, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.subpaths)
      case 2: try decoder.decodeSingularMessageField(value: &self._naturalSize)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subpaths.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subpaths, fieldNumber: 1)
    }
    if let v = self._naturalSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_EditableBezierPathSourceArchive, rhs: TSD_EditableBezierPathSourceArchive) -> Bool {
    if lhs.subpaths != rhs.subpaths {return false}
    if lhs._naturalSize != rhs._naturalSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_EditableBezierPathSourceArchive.NodeType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sharp"),
    2: .same(proto: "bezier"),
    3: .same(proto: "smooth"),
  ]
}

extension TSD_EditableBezierPathSourceArchive.Node: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSD_EditableBezierPathSourceArchive.protoMessageName + ".Node"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inControlPoint"),
    2: .same(proto: "nodePoint"),
    3: .same(proto: "outControlPoint"),
    4: .same(proto: "type"),
  ]

  public var isInitialized: Bool {
    if self._inControlPoint == nil {return false}
    if self._nodePoint == nil {return false}
    if self._outControlPoint == nil {return false}
    if self._type == nil {return false}
    if let v = self._inControlPoint, !v.isInitialized {return false}
    if let v = self._nodePoint, !v.isInitialized {return false}
    if let v = self._outControlPoint, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._inControlPoint)
      case 2: try decoder.decodeSingularMessageField(value: &self._nodePoint)
      case 3: try decoder.decodeSingularMessageField(value: &self._outControlPoint)
      case 4: try decoder.decodeSingularEnumField(value: &self._type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._inControlPoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._nodePoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._outControlPoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_EditableBezierPathSourceArchive.Node, rhs: TSD_EditableBezierPathSourceArchive.Node) -> Bool {
    if lhs._inControlPoint != rhs._inControlPoint {return false}
    if lhs._nodePoint != rhs._nodePoint {return false}
    if lhs._outControlPoint != rhs._outControlPoint {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_EditableBezierPathSourceArchive.Subpath: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSD_EditableBezierPathSourceArchive.protoMessageName + ".Subpath"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nodes"),
    2: .same(proto: "closed"),
  ]

  public var isInitialized: Bool {
    if self._closed == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.nodes) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.nodes)
      case 2: try decoder.decodeSingularBoolField(value: &self._closed)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nodes, fieldNumber: 1)
    }
    if let v = self._closed {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_EditableBezierPathSourceArchive.Subpath, rhs: TSD_EditableBezierPathSourceArchive.Subpath) -> Bool {
    if lhs.nodes != rhs.nodes {return false}
    if lhs._closed != rhs._closed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_PathSourceArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PathSourceArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "horizontalFlip"),
    2: .same(proto: "verticalFlip"),
    3: .standard(proto: "point_path_source"),
    4: .standard(proto: "scalar_path_source"),
    5: .standard(proto: "bezier_path_source"),
    6: .standard(proto: "callout_path_source"),
    7: .standard(proto: "connection_line_path_source"),
    8: .standard(proto: "editable_bezier_path_source"),
    9: .same(proto: "localizationKey"),
    10: .same(proto: "userDefinedName"),
  ]

  public var isInitialized: Bool {
    if let v = self._pointPathSource, !v.isInitialized {return false}
    if let v = self._scalarPathSource, !v.isInitialized {return false}
    if let v = self._bezierPathSource, !v.isInitialized {return false}
    if let v = self._calloutPathSource, !v.isInitialized {return false}
    if let v = self._connectionLinePathSource, !v.isInitialized {return false}
    if let v = self._editableBezierPathSource, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._horizontalFlip)
      case 2: try decoder.decodeSingularBoolField(value: &self._verticalFlip)
      case 3: try decoder.decodeSingularMessageField(value: &self._pointPathSource)
      case 4: try decoder.decodeSingularMessageField(value: &self._scalarPathSource)
      case 5: try decoder.decodeSingularMessageField(value: &self._bezierPathSource)
      case 6: try decoder.decodeSingularMessageField(value: &self._calloutPathSource)
      case 7: try decoder.decodeSingularMessageField(value: &self._connectionLinePathSource)
      case 8: try decoder.decodeSingularMessageField(value: &self._editableBezierPathSource)
      case 9: try decoder.decodeSingularStringField(value: &self._localizationKey)
      case 10: try decoder.decodeSingularStringField(value: &self._userDefinedName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._horizontalFlip {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._verticalFlip {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._pointPathSource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._scalarPathSource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._bezierPathSource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._calloutPathSource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._connectionLinePathSource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._editableBezierPathSource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._localizationKey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }
    if let v = self._userDefinedName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_PathSourceArchive, rhs: TSD_PathSourceArchive) -> Bool {
    if lhs._horizontalFlip != rhs._horizontalFlip {return false}
    if lhs._verticalFlip != rhs._verticalFlip {return false}
    if lhs._pointPathSource != rhs._pointPathSource {return false}
    if lhs._scalarPathSource != rhs._scalarPathSource {return false}
    if lhs._bezierPathSource != rhs._bezierPathSource {return false}
    if lhs._calloutPathSource != rhs._calloutPathSource {return false}
    if lhs._connectionLinePathSource != rhs._connectionLinePathSource {return false}
    if lhs._editableBezierPathSource != rhs._editableBezierPathSource {return false}
    if lhs._localizationKey != rhs._localizationKey {return false}
    if lhs._userDefinedName != rhs._userDefinedName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_AngleGradientArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AngleGradientArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "gradientangle"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularFloatField(value: &self._gradientangle)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._gradientangle {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_AngleGradientArchive, rhs: TSD_AngleGradientArchive) -> Bool {
    if lhs._gradientangle != rhs._gradientangle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_TransformGradientArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransformGradientArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "end"),
    3: .same(proto: "baseNaturalSize"),
  ]

  public var isInitialized: Bool {
    if let v = self._start, !v.isInitialized {return false}
    if let v = self._end, !v.isInitialized {return false}
    if let v = self._baseNaturalSize, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._start)
      case 2: try decoder.decodeSingularMessageField(value: &self._end)
      case 3: try decoder.decodeSingularMessageField(value: &self._baseNaturalSize)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._start {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._end {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._baseNaturalSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_TransformGradientArchive, rhs: TSD_TransformGradientArchive) -> Bool {
    if lhs._start != rhs._start {return false}
    if lhs._end != rhs._end {return false}
    if lhs._baseNaturalSize != rhs._baseNaturalSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_GradientArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GradientArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "stops"),
    3: .same(proto: "opacity"),
    4: .same(proto: "advancedGradient"),
    5: .same(proto: "anglegradient"),
    6: .same(proto: "transformgradient"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.stops) {return false}
    if let v = self._transformgradient, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.stops)
      case 3: try decoder.decodeSingularFloatField(value: &self._opacity)
      case 4: try decoder.decodeSingularBoolField(value: &self._advancedGradient)
      case 5: try decoder.decodeSingularMessageField(value: &self._anglegradient)
      case 6: try decoder.decodeSingularMessageField(value: &self._transformgradient)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.stops.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.stops, fieldNumber: 2)
    }
    if let v = self._opacity {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }
    if let v = self._advancedGradient {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._anglegradient {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._transformgradient {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_GradientArchive, rhs: TSD_GradientArchive) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs.stops != rhs.stops {return false}
    if lhs._opacity != rhs._opacity {return false}
    if lhs._advancedGradient != rhs._advancedGradient {return false}
    if lhs._anglegradient != rhs._anglegradient {return false}
    if lhs._transformgradient != rhs._transformgradient {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_GradientArchive.GradientType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Linear"),
    1: .same(proto: "Radial"),
  ]
}

extension TSD_GradientArchive.GradientStop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSD_GradientArchive.protoMessageName + ".GradientStop"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "color"),
    2: .same(proto: "fraction"),
    3: .same(proto: "inflection"),
  ]

  public var isInitialized: Bool {
    if let v = self._color, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._color)
      case 2: try decoder.decodeSingularFloatField(value: &self._fraction)
      case 3: try decoder.decodeSingularFloatField(value: &self._inflection)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._fraction {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._inflection {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_GradientArchive.GradientStop, rhs: TSD_GradientArchive.GradientStop) -> Bool {
    if lhs._color != rhs._color {return false}
    if lhs._fraction != rhs._fraction {return false}
    if lhs._inflection != rhs._inflection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ImageFillArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ImageFillArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .same(proto: "imagedata"),
    2: .same(proto: "technique"),
    3: .same(proto: "tint"),
    4: .same(proto: "fillsize"),
    7: .same(proto: "originalimagedata"),
    8: .same(proto: "interpretsUntaggedImageDataAsGeneric"),
    9: .same(proto: "referencecolor"),
    1: .standard(proto: "database_imagedata"),
    5: .standard(proto: "database_originalimagedata"),
  ]

  public var isInitialized: Bool {
    if let v = self._imagedata, !v.isInitialized {return false}
    if let v = self._tint, !v.isInitialized {return false}
    if let v = self._fillsize, !v.isInitialized {return false}
    if let v = self._originalimagedata, !v.isInitialized {return false}
    if let v = self._referencecolor, !v.isInitialized {return false}
    if let v = self._databaseImagedata, !v.isInitialized {return false}
    if let v = self._databaseOriginalimagedata, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._databaseImagedata)
      case 2: try decoder.decodeSingularEnumField(value: &self._technique)
      case 3: try decoder.decodeSingularMessageField(value: &self._tint)
      case 4: try decoder.decodeSingularMessageField(value: &self._fillsize)
      case 5: try decoder.decodeSingularMessageField(value: &self._databaseOriginalimagedata)
      case 6: try decoder.decodeSingularMessageField(value: &self._imagedata)
      case 7: try decoder.decodeSingularMessageField(value: &self._originalimagedata)
      case 8: try decoder.decodeSingularBoolField(value: &self._interpretsUntaggedImageDataAsGeneric)
      case 9: try decoder.decodeSingularMessageField(value: &self._referencecolor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._databaseImagedata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._technique {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._tint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._fillsize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._databaseOriginalimagedata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._imagedata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._originalimagedata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._interpretsUntaggedImageDataAsGeneric {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._referencecolor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ImageFillArchive, rhs: TSD_ImageFillArchive) -> Bool {
    if lhs._imagedata != rhs._imagedata {return false}
    if lhs._technique != rhs._technique {return false}
    if lhs._tint != rhs._tint {return false}
    if lhs._fillsize != rhs._fillsize {return false}
    if lhs._originalimagedata != rhs._originalimagedata {return false}
    if lhs._interpretsUntaggedImageDataAsGeneric != rhs._interpretsUntaggedImageDataAsGeneric {return false}
    if lhs._referencecolor != rhs._referencecolor {return false}
    if lhs._databaseImagedata != rhs._databaseImagedata {return false}
    if lhs._databaseOriginalimagedata != rhs._databaseOriginalimagedata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ImageFillArchive.ImageFillTechnique: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NaturalSize"),
    1: .same(proto: "Stretch"),
    2: .same(proto: "Tile"),
    3: .same(proto: "ScaleToFill"),
    4: .same(proto: "ScaleToFit"),
  ]
}

extension TSD_FillArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FillArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "color"),
    2: .same(proto: "gradient"),
    3: .same(proto: "image"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if let v = self._color, !v.isInitialized {return false}
    if let v = self._gradient, !v.isInitialized {return false}
    if let v = self._image, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._color)
      case 2: try decoder.decodeSingularMessageField(value: &self._gradient)
      case 3: try decoder.decodeSingularMessageField(value: &self._image)
      case 100..<536870912:
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: TSD_FillArchive.self, fieldNumber: fieldNumber)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._gradient {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._image {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_FillArchive, rhs: TSD_FillArchive) -> Bool {
    if lhs._color != rhs._color {return false}
    if lhs._gradient != rhs._gradient {return false}
    if lhs._image != rhs._image {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension TSD_StrokePatternArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StrokePatternArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "phase"),
    3: .same(proto: "count"),
    4: .same(proto: "pattern"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularFloatField(value: &self._phase)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._count)
      case 4: try decoder.decodeRepeatedFloatField(value: &self.pattern)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._phase {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._count {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if !self.pattern.isEmpty {
      try visitor.visitRepeatedFloatField(value: self.pattern, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_StrokePatternArchive, rhs: TSD_StrokePatternArchive) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._phase != rhs._phase {return false}
    if lhs._count != rhs._count {return false}
    if lhs.pattern != rhs.pattern {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_StrokePatternArchive.StrokePatternType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TSDPattern"),
    1: .same(proto: "TSDSolidPattern"),
    2: .same(proto: "TSDEmptyPattern"),
  ]
}

extension TSD_StrokeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StrokeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "color"),
    2: .same(proto: "width"),
    3: .same(proto: "cap"),
    4: .same(proto: "join"),
    5: .standard(proto: "miter_limit"),
    6: .same(proto: "pattern"),
    7: .standard(proto: "smart_stroke"),
    8: .same(proto: "frame"),
    9: .standard(proto: "patterned_stroke"),
  ]

  public var isInitialized: Bool {
    if let v = self._color, !v.isInitialized {return false}
    if let v = self._smartStroke, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._color)
      case 2: try decoder.decodeSingularFloatField(value: &self._width)
      case 3: try decoder.decodeSingularEnumField(value: &self._cap)
      case 4: try decoder.decodeSingularEnumField(value: &self._join)
      case 5: try decoder.decodeSingularFloatField(value: &self._miterLimit)
      case 6: try decoder.decodeSingularMessageField(value: &self._pattern)
      case 7: try decoder.decodeSingularMessageField(value: &self._smartStroke)
      case 8: try decoder.decodeSingularMessageField(value: &self._frame)
      case 9: try decoder.decodeSingularMessageField(value: &self._patternedStroke)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._width {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._cap {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._join {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    if let v = self._miterLimit {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
    }
    if let v = self._pattern {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._smartStroke {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._frame {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._patternedStroke {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_StrokeArchive, rhs: TSD_StrokeArchive) -> Bool {
    if lhs._color != rhs._color {return false}
    if lhs._width != rhs._width {return false}
    if lhs._cap != rhs._cap {return false}
    if lhs._join != rhs._join {return false}
    if lhs._miterLimit != rhs._miterLimit {return false}
    if lhs._pattern != rhs._pattern {return false}
    if lhs._smartStroke != rhs._smartStroke {return false}
    if lhs._frame != rhs._frame {return false}
    if lhs._patternedStroke != rhs._patternedStroke {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_StrokeArchive.LineCap: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ButtCap"),
    1: .same(proto: "RoundCap"),
    2: .same(proto: "SquareCap"),
  ]
}

extension TSD_SmartStrokeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SmartStrokeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "stroke_name"),
    3: .standard(proto: "random_seed"),
    4: .same(proto: "parameterValues"),
    5: .standard(proto: "pattern_offset_distance"),
  ]

  public var isInitialized: Bool {
    if let v = self._parameterValues, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self._strokeName)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._randomSeed)
      case 4: try decoder.decodeSingularMessageField(value: &self._parameterValues)
      case 5: try decoder.decodeSingularDoubleField(value: &self._patternOffsetDistance)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._strokeName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._randomSeed {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._parameterValues {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._patternOffsetDistance {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SmartStrokeArchive, rhs: TSD_SmartStrokeArchive) -> Bool {
    if lhs._strokeName != rhs._strokeName {return false}
    if lhs._randomSeed != rhs._randomSeed {return false}
    if lhs._parameterValues != rhs._parameterValues {return false}
    if lhs._patternOffsetDistance != rhs._patternOffsetDistance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_FrameArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FrameArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "frameName"),
    3: .same(proto: "assetScale"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self._frameName)
      case 3: try decoder.decodeSingularFloatField(value: &self._assetScale)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._frameName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._assetScale {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_FrameArchive, rhs: TSD_FrameArchive) -> Bool {
    if lhs._frameName != rhs._frameName {return false}
    if lhs._assetScale != rhs._assetScale {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_PatternedStrokeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PatternedStrokeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "pattern_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self._patternName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._patternName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_PatternedStrokeArchive, rhs: TSD_PatternedStrokeArchive) -> Bool {
    if lhs._patternName != rhs._patternName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_LineEndArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LineEndArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .standard(proto: "line_join"),
    3: .standard(proto: "end_point"),
    4: .standard(proto: "is_filled"),
    5: .same(proto: "identifier"),
  ]

  public var isInitialized: Bool {
    if let v = self._path, !v.isInitialized {return false}
    if let v = self._endPoint, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._path)
      case 2: try decoder.decodeSingularEnumField(value: &self._lineJoin)
      case 3: try decoder.decodeSingularMessageField(value: &self._endPoint)
      case 4: try decoder.decodeSingularBoolField(value: &self._isFilled)
      case 5: try decoder.decodeSingularStringField(value: &self._identifier)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._path {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._lineJoin {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._endPoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._isFilled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._identifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_LineEndArchive, rhs: TSD_LineEndArchive) -> Bool {
    if lhs._path != rhs._path {return false}
    if lhs._lineJoin != rhs._lineJoin {return false}
    if lhs._endPoint != rhs._endPoint {return false}
    if lhs._isFilled != rhs._isFilled {return false}
    if lhs._identifier != rhs._identifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ShadowArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShadowArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "color"),
    2: .same(proto: "angle"),
    3: .same(proto: "offset"),
    4: .same(proto: "radius"),
    5: .same(proto: "opacity"),
    6: .standard(proto: "is_enabled"),
    7: .same(proto: "type"),
    8: .same(proto: "dropShadow"),
    9: .same(proto: "contactShadow"),
    10: .same(proto: "curvedShadow"),
  ]

  public var isInitialized: Bool {
    if let v = self._color, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._color)
      case 2: try decoder.decodeSingularFloatField(value: &self._angle)
      case 3: try decoder.decodeSingularFloatField(value: &self._offset)
      case 4: try decoder.decodeSingularInt32Field(value: &self._radius)
      case 5: try decoder.decodeSingularFloatField(value: &self._opacity)
      case 6: try decoder.decodeSingularBoolField(value: &self._isEnabled)
      case 7: try decoder.decodeSingularEnumField(value: &self._type)
      case 8: try decoder.decodeSingularMessageField(value: &self._dropShadow)
      case 9: try decoder.decodeSingularMessageField(value: &self._contactShadow)
      case 10: try decoder.decodeSingularMessageField(value: &self._curvedShadow)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._angle {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._offset {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }
    if let v = self._radius {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._opacity {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
    }
    if let v = self._isEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
    }
    if let v = self._dropShadow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._contactShadow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._curvedShadow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ShadowArchive, rhs: TSD_ShadowArchive) -> Bool {
    if lhs._color != rhs._color {return false}
    if lhs._angle != rhs._angle {return false}
    if lhs._offset != rhs._offset {return false}
    if lhs._radius != rhs._radius {return false}
    if lhs._opacity != rhs._opacity {return false}
    if lhs._isEnabled != rhs._isEnabled {return false}
    if lhs._type != rhs._type {return false}
    if lhs._dropShadow != rhs._dropShadow {return false}
    if lhs._contactShadow != rhs._contactShadow {return false}
    if lhs._curvedShadow != rhs._curvedShadow {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ShadowArchive.ShadowType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TSDDropShadow"),
    1: .same(proto: "TSDContactShadow"),
    2: .same(proto: "TSDCurvedShadow"),
  ]
}

extension TSD_DropShadowArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DropShadowArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_DropShadowArchive, rhs: TSD_DropShadowArchive) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ContactShadowArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContactShadowArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "height"),
    4: .same(proto: "offset"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularFloatField(value: &self._height)
      case 4: try decoder.decodeSingularFloatField(value: &self._offset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._height {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._offset {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ContactShadowArchive, rhs: TSD_ContactShadowArchive) -> Bool {
    if lhs._height != rhs._height {return false}
    if lhs._offset != rhs._offset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_CurvedShadowArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CurvedShadowArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "curve"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self._curve)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._curve {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_CurvedShadowArchive, rhs: TSD_CurvedShadowArchive) -> Bool {
    if lhs._curve != rhs._curve {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ReflectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReflectionArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "opacity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self._opacity)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._opacity {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ReflectionArchive, rhs: TSD_ReflectionArchive) -> Bool {
    if lhs._opacity != rhs._opacity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ImageAdjustmentsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ImageAdjustmentsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "exposure"),
    2: .same(proto: "saturation"),
    3: .same(proto: "contrast"),
    4: .same(proto: "highlights"),
    5: .same(proto: "shadows"),
    6: .same(proto: "sharpness"),
    7: .same(proto: "denoise"),
    8: .same(proto: "temperature"),
    9: .same(proto: "tint"),
    10: .standard(proto: "bottom_level"),
    11: .standard(proto: "top_level"),
    12: .same(proto: "gamma"),
    13: .same(proto: "enhance"),
    14: .standard(proto: "represents_sage_adjustments"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self._exposure)
      case 2: try decoder.decodeSingularFloatField(value: &self._saturation)
      case 3: try decoder.decodeSingularFloatField(value: &self._contrast)
      case 4: try decoder.decodeSingularFloatField(value: &self._highlights)
      case 5: try decoder.decodeSingularFloatField(value: &self._shadows)
      case 6: try decoder.decodeSingularFloatField(value: &self._sharpness)
      case 7: try decoder.decodeSingularFloatField(value: &self._denoise)
      case 8: try decoder.decodeSingularFloatField(value: &self._temperature)
      case 9: try decoder.decodeSingularFloatField(value: &self._tint)
      case 10: try decoder.decodeSingularFloatField(value: &self._bottomLevel)
      case 11: try decoder.decodeSingularFloatField(value: &self._topLevel)
      case 12: try decoder.decodeSingularFloatField(value: &self._gamma)
      case 13: try decoder.decodeSingularBoolField(value: &self._enhance)
      case 14: try decoder.decodeSingularBoolField(value: &self._representsSageAdjustments)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._exposure {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    }
    if let v = self._saturation {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._contrast {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }
    if let v = self._highlights {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    if let v = self._shadows {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
    }
    if let v = self._sharpness {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 6)
    }
    if let v = self._denoise {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 7)
    }
    if let v = self._temperature {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 8)
    }
    if let v = self._tint {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 9)
    }
    if let v = self._bottomLevel {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 10)
    }
    if let v = self._topLevel {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
    }
    if let v = self._gamma {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 12)
    }
    if let v = self._enhance {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
    }
    if let v = self._representsSageAdjustments {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ImageAdjustmentsArchive, rhs: TSD_ImageAdjustmentsArchive) -> Bool {
    if lhs._exposure != rhs._exposure {return false}
    if lhs._saturation != rhs._saturation {return false}
    if lhs._contrast != rhs._contrast {return false}
    if lhs._highlights != rhs._highlights {return false}
    if lhs._shadows != rhs._shadows {return false}
    if lhs._sharpness != rhs._sharpness {return false}
    if lhs._denoise != rhs._denoise {return false}
    if lhs._temperature != rhs._temperature {return false}
    if lhs._tint != rhs._tint {return false}
    if lhs._bottomLevel != rhs._bottomLevel {return false}
    if lhs._topLevel != rhs._topLevel {return false}
    if lhs._gamma != rhs._gamma {return false}
    if lhs._enhance != rhs._enhance {return false}
    if lhs._representsSageAdjustments != rhs._representsSageAdjustments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ShapeStylePropertiesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShapeStylePropertiesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fill"),
    2: .same(proto: "stroke"),
    3: .same(proto: "opacity"),
    4: .same(proto: "shadow"),
    5: .same(proto: "reflection"),
    6: .standard(proto: "head_line_end"),
    7: .standard(proto: "tail_line_end"),
  ]

  public var isInitialized: Bool {
    if let v = self._fill, !v.isInitialized {return false}
    if let v = self._stroke, !v.isInitialized {return false}
    if let v = self._shadow, !v.isInitialized {return false}
    if let v = self._headLineEnd, !v.isInitialized {return false}
    if let v = self._tailLineEnd, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._fill)
      case 2: try decoder.decodeSingularMessageField(value: &self._stroke)
      case 3: try decoder.decodeSingularFloatField(value: &self._opacity)
      case 4: try decoder.decodeSingularMessageField(value: &self._shadow)
      case 5: try decoder.decodeSingularMessageField(value: &self._reflection)
      case 6: try decoder.decodeSingularMessageField(value: &self._headLineEnd)
      case 7: try decoder.decodeSingularMessageField(value: &self._tailLineEnd)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._fill {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._stroke {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._opacity {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }
    if let v = self._shadow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._reflection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._headLineEnd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._tailLineEnd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ShapeStylePropertiesArchive, rhs: TSD_ShapeStylePropertiesArchive) -> Bool {
    if lhs._fill != rhs._fill {return false}
    if lhs._stroke != rhs._stroke {return false}
    if lhs._opacity != rhs._opacity {return false}
    if lhs._shadow != rhs._shadow {return false}
    if lhs._reflection != rhs._reflection {return false}
    if lhs._headLineEnd != rhs._headLineEnd {return false}
    if lhs._tailLineEnd != rhs._tailLineEnd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ShapeStyleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShapeStyleArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    10: .standard(proto: "override_count"),
    11: .standard(proto: "shape_properties"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._shapeProperties, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 10: try decoder.decodeSingularUInt32Field(value: &self._overrideCount)
      case 11: try decoder.decodeSingularMessageField(value: &self._shapeProperties)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._overrideCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
    }
    if let v = self._shapeProperties {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ShapeStyleArchive, rhs: TSD_ShapeStyleArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._overrideCount != rhs._overrideCount {return false}
    if lhs._shapeProperties != rhs._shapeProperties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_MediaStylePropertiesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MediaStylePropertiesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stroke"),
    2: .same(proto: "opacity"),
    3: .same(proto: "shadow"),
    4: .same(proto: "reflection"),
  ]

  public var isInitialized: Bool {
    if let v = self._stroke, !v.isInitialized {return false}
    if let v = self._shadow, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._stroke)
      case 2: try decoder.decodeSingularFloatField(value: &self._opacity)
      case 3: try decoder.decodeSingularMessageField(value: &self._shadow)
      case 4: try decoder.decodeSingularMessageField(value: &self._reflection)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._stroke {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._opacity {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._shadow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._reflection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_MediaStylePropertiesArchive, rhs: TSD_MediaStylePropertiesArchive) -> Bool {
    if lhs._stroke != rhs._stroke {return false}
    if lhs._opacity != rhs._opacity {return false}
    if lhs._shadow != rhs._shadow {return false}
    if lhs._reflection != rhs._reflection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_MediaStyleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MediaStyleArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    10: .standard(proto: "override_count"),
    11: .standard(proto: "media_properties"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._mediaProperties, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 10: try decoder.decodeSingularUInt32Field(value: &self._overrideCount)
      case 11: try decoder.decodeSingularMessageField(value: &self._mediaProperties)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._overrideCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
    }
    if let v = self._mediaProperties {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_MediaStyleArchive, rhs: TSD_MediaStyleArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._overrideCount != rhs._overrideCount {return false}
    if lhs._mediaProperties != rhs._mediaProperties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ThemePresetsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThemePresetsArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gradient_fill_presets"),
    2: .standard(proto: "image_fill_presets"),
    3: .standard(proto: "shadow_presets"),
    4: .standard(proto: "line_style_presets"),
    5: .standard(proto: "shape_style_presets"),
    6: .standard(proto: "textbox_style_presets"),
    7: .standard(proto: "image_style_presets"),
    8: .standard(proto: "movie_style_presets"),
    9: .standard(proto: "drawing_line_style_presets"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.gradientFillPresets) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.imageFillPresets) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.shadowPresets) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.lineStylePresets) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.shapeStylePresets) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.textboxStylePresets) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.imageStylePresets) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.movieStylePresets) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.drawingLineStylePresets) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.gradientFillPresets)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.imageFillPresets)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.shadowPresets)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.lineStylePresets)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.shapeStylePresets)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.textboxStylePresets)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.imageStylePresets)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.movieStylePresets)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.drawingLineStylePresets)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gradientFillPresets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gradientFillPresets, fieldNumber: 1)
    }
    if !self.imageFillPresets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.imageFillPresets, fieldNumber: 2)
    }
    if !self.shadowPresets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shadowPresets, fieldNumber: 3)
    }
    if !self.lineStylePresets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lineStylePresets, fieldNumber: 4)
    }
    if !self.shapeStylePresets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shapeStylePresets, fieldNumber: 5)
    }
    if !self.textboxStylePresets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.textboxStylePresets, fieldNumber: 6)
    }
    if !self.imageStylePresets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.imageStylePresets, fieldNumber: 7)
    }
    if !self.movieStylePresets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.movieStylePresets, fieldNumber: 8)
    }
    if !self.drawingLineStylePresets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.drawingLineStylePresets, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ThemePresetsArchive, rhs: TSD_ThemePresetsArchive) -> Bool {
    if lhs.gradientFillPresets != rhs.gradientFillPresets {return false}
    if lhs.imageFillPresets != rhs.imageFillPresets {return false}
    if lhs.shadowPresets != rhs.shadowPresets {return false}
    if lhs.lineStylePresets != rhs.lineStylePresets {return false}
    if lhs.shapeStylePresets != rhs.shapeStylePresets {return false}
    if lhs.textboxStylePresets != rhs.textboxStylePresets {return false}
    if lhs.imageStylePresets != rhs.imageStylePresets {return false}
    if lhs.movieStylePresets != rhs.movieStylePresets {return false}
    if lhs.drawingLineStylePresets != rhs.drawingLineStylePresets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ThemeReplaceFillPresetCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThemeReplaceFillPresetCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "theme"),
    3: .same(proto: "fill"),
    4: .standard(proto: "old_fill"),
    5: .same(proto: "index"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._theme == nil {return false}
    if self._fill == nil {return false}
    if self._oldFill == nil {return false}
    if self._index == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._theme, !v.isInitialized {return false}
    if let v = self._fill, !v.isInitialized {return false}
    if let v = self._oldFill, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._theme)
      case 3: try decoder.decodeSingularMessageField(value: &self._fill)
      case 4: try decoder.decodeSingularMessageField(value: &self._oldFill)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._index)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._theme {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._fill {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._oldFill {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._index {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ThemeReplaceFillPresetCommandArchive, rhs: TSD_ThemeReplaceFillPresetCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._theme != rhs._theme {return false}
    if lhs._fill != rhs._fill {return false}
    if lhs._oldFill != rhs._oldFill {return false}
    if lhs._index != rhs._index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_DrawableArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DrawableArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "geometry"),
    2: .same(proto: "parent"),
    3: .standard(proto: "exterior_text_wrap"),
    4: .standard(proto: "hyperlink_url"),
    5: .same(proto: "locked"),
    6: .same(proto: "comment"),
    7: .standard(proto: "aspect_ratio_locked"),
    8: .standard(proto: "accessibility_description"),
    9: .standard(proto: "pencil_annotations"),
  ]

  public var isInitialized: Bool {
    if let v = self._geometry, !v.isInitialized {return false}
    if let v = self._parent, !v.isInitialized {return false}
    if let v = self._comment, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.pencilAnnotations) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._geometry)
      case 2: try decoder.decodeSingularMessageField(value: &self._parent)
      case 3: try decoder.decodeSingularMessageField(value: &self._exteriorTextWrap)
      case 4: try decoder.decodeSingularStringField(value: &self._hyperlinkURL)
      case 5: try decoder.decodeSingularBoolField(value: &self._locked)
      case 6: try decoder.decodeSingularMessageField(value: &self._comment)
      case 7: try decoder.decodeSingularBoolField(value: &self._aspectRatioLocked)
      case 8: try decoder.decodeSingularStringField(value: &self._accessibilityDescription)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.pencilAnnotations)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._geometry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._parent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._exteriorTextWrap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._hyperlinkURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._locked {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._comment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._aspectRatioLocked {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    if let v = self._accessibilityDescription {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }
    if !self.pencilAnnotations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pencilAnnotations, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_DrawableArchive, rhs: TSD_DrawableArchive) -> Bool {
    if lhs._geometry != rhs._geometry {return false}
    if lhs._parent != rhs._parent {return false}
    if lhs._exteriorTextWrap != rhs._exteriorTextWrap {return false}
    if lhs._hyperlinkURL != rhs._hyperlinkURL {return false}
    if lhs._locked != rhs._locked {return false}
    if lhs._comment != rhs._comment {return false}
    if lhs._aspectRatioLocked != rhs._aspectRatioLocked {return false}
    if lhs._accessibilityDescription != rhs._accessibilityDescription {return false}
    if lhs.pencilAnnotations != rhs.pencilAnnotations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ContainerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContainerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "geometry"),
    2: .same(proto: "parent"),
    3: .same(proto: "children"),
  ]

  public var isInitialized: Bool {
    if let v = self._geometry, !v.isInitialized {return false}
    if let v = self._parent, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.children) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._geometry)
      case 2: try decoder.decodeSingularMessageField(value: &self._parent)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.children)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._geometry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._parent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.children.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.children, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ContainerArchive, rhs: TSD_ContainerArchive) -> Bool {
    if lhs._geometry != rhs._geometry {return false}
    if lhs._parent != rhs._parent {return false}
    if lhs.children != rhs.children {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_GroupArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "children"),
    3: .standard(proto: "fake_shape_for_empty_group"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.children) {return false}
    if let v = self._fakeShapeForEmptyGroup, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.children)
      case 3: try decoder.decodeSingularMessageField(value: &self._fakeShapeForEmptyGroup)
      case 100..<536870912:
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: TSD_GroupArchive.self, fieldNumber: fieldNumber)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.children.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.children, fieldNumber: 2)
    }
    if let v = self._fakeShapeForEmptyGroup {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_GroupArchive, rhs: TSD_GroupArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.children != rhs.children {return false}
    if lhs._fakeShapeForEmptyGroup != rhs._fakeShapeForEmptyGroup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension TSD_FreehandDrawingAnimationArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FreehandDrawingAnimationArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "duration"),
    2: .standard(proto: "should_loop"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._duration)
      case 2: try decoder.decodeSingularBoolField(value: &self._shouldLoop)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._duration {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    if let v = self._shouldLoop {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_FreehandDrawingAnimationArchive, rhs: TSD_FreehandDrawingAnimationArchive) -> Bool {
    if lhs._duration != rhs._duration {return false}
    if lhs._shouldLoop != rhs._shouldLoop {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_FreehandDrawingArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FreehandDrawingArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "spacer_shape"),
    2: .same(proto: "opacity"),
    3: .same(proto: "animation"),
  ]

  public var isInitialized: Bool {
    if let v = self._spacerShape, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._spacerShape)
      case 2: try decoder.decodeSingularDoubleField(value: &self._opacity)
      case 3: try decoder.decodeSingularMessageField(value: &self._animation)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._spacerShape {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._opacity {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    if let v = self._animation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_FreehandDrawingArchive, rhs: TSD_FreehandDrawingArchive) -> Bool {
    if lhs._spacerShape != rhs._spacerShape {return false}
    if lhs._opacity != rhs._opacity {return false}
    if lhs._animation != rhs._animation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ShapeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShapeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "style"),
    3: .same(proto: "pathsource"),
    4: .standard(proto: "head_line_end"),
    5: .standard(proto: "tail_line_end"),
    6: .same(proto: "strokePatternOffsetDistance"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._style, !v.isInitialized {return false}
    if let v = self._pathsource, !v.isInitialized {return false}
    if let v = self._headLineEnd, !v.isInitialized {return false}
    if let v = self._tailLineEnd, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._style)
      case 3: try decoder.decodeSingularMessageField(value: &self._pathsource)
      case 4: try decoder.decodeSingularMessageField(value: &self._headLineEnd)
      case 5: try decoder.decodeSingularMessageField(value: &self._tailLineEnd)
      case 6: try decoder.decodeSingularFloatField(value: &self._strokePatternOffsetDistance)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._pathsource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._headLineEnd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._tailLineEnd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._strokePatternOffsetDistance {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ShapeArchive, rhs: TSD_ShapeArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._style != rhs._style {return false}
    if lhs._pathsource != rhs._pathsource {return false}
    if lhs._headLineEnd != rhs._headLineEnd {return false}
    if lhs._tailLineEnd != rhs._tailLineEnd {return false}
    if lhs._strokePatternOffsetDistance != rhs._strokePatternOffsetDistance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ConnectionLineArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectionLineArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "connected_from"),
    3: .standard(proto: "connected_to"),
    4: .standard(proto: "connected_to_uuid"),
    5: .standard(proto: "connected_from_uuid"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._connectedFrom, !v.isInitialized {return false}
    if let v = self._connectedTo, !v.isInitialized {return false}
    if let v = self._connectedToUuid, !v.isInitialized {return false}
    if let v = self._connectedFromUuid, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._connectedFrom)
      case 3: try decoder.decodeSingularMessageField(value: &self._connectedTo)
      case 4: try decoder.decodeSingularMessageField(value: &self._connectedToUuid)
      case 5: try decoder.decodeSingularMessageField(value: &self._connectedFromUuid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._connectedFrom {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._connectedTo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._connectedToUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._connectedFromUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ConnectionLineArchive, rhs: TSD_ConnectionLineArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._connectedFrom != rhs._connectedFrom {return false}
    if lhs._connectedTo != rhs._connectedTo {return false}
    if lhs._connectedToUuid != rhs._connectedToUuid {return false}
    if lhs._connectedFromUuid != rhs._connectedFromUuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ImageArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ImageArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    11: .same(proto: "data"),
    3: .same(proto: "style"),
    4: .same(proto: "originalSize"),
    5: .same(proto: "mask"),
    12: .same(proto: "thumbnailData"),
    7: .same(proto: "flags"),
    13: .same(proto: "originalData"),
    9: .same(proto: "naturalSize"),
    10: .same(proto: "instantAlphaPath"),
    14: .same(proto: "imageAdjustments"),
    17: .same(proto: "enhancedImageData"),
    15: .same(proto: "adjustedImageData"),
    16: .same(proto: "thumbnailAdjustedImageData"),
    18: .same(proto: "interpretsUntaggedImageDataAsGeneric"),
    2: .standard(proto: "database_data"),
    6: .standard(proto: "database_thumbnailData"),
    8: .standard(proto: "database_originalData"),
    19: .standard(proto: "traced_path"),
    20: .same(proto: "attribution"),
  ]

  fileprivate class _StorageClass {
    var _super: TSD_DrawableArchive? = nil
    var _data: TSP_DataReference? = nil
    var _style: TSP_Reference? = nil
    var _originalSize: TSP_Size? = nil
    var _mask: TSP_Reference? = nil
    var _thumbnailData: TSP_DataReference? = nil
    var _flags: UInt32? = nil
    var _originalData: TSP_DataReference? = nil
    var _naturalSize: TSP_Size? = nil
    var _instantAlphaPath: TSP_Path? = nil
    var _imageAdjustments: TSD_ImageAdjustmentsArchive? = nil
    var _enhancedImageData: TSP_DataReference? = nil
    var _adjustedImageData: TSP_DataReference? = nil
    var _thumbnailAdjustedImageData: TSP_DataReference? = nil
    var _interpretsUntaggedImageDataAsGeneric: Bool? = nil
    var _databaseData: TSP_Reference? = nil
    var _databaseThumbnailData: TSP_Reference? = nil
    var _databaseOriginalData: TSP_Reference? = nil
    var _tracedPath: TSP_Path? = nil
    var _attribution: TSD_Attribution? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _super = source._super
      _data = source._data
      _style = source._style
      _originalSize = source._originalSize
      _mask = source._mask
      _thumbnailData = source._thumbnailData
      _flags = source._flags
      _originalData = source._originalData
      _naturalSize = source._naturalSize
      _instantAlphaPath = source._instantAlphaPath
      _imageAdjustments = source._imageAdjustments
      _enhancedImageData = source._enhancedImageData
      _adjustedImageData = source._adjustedImageData
      _thumbnailAdjustedImageData = source._thumbnailAdjustedImageData
      _interpretsUntaggedImageDataAsGeneric = source._interpretsUntaggedImageDataAsGeneric
      _databaseData = source._databaseData
      _databaseThumbnailData = source._databaseThumbnailData
      _databaseOriginalData = source._databaseOriginalData
      _tracedPath = source._tracedPath
      _attribution = source._attribution
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._super == nil {return false}
      if let v = _storage._super, !v.isInitialized {return false}
      if let v = _storage._data, !v.isInitialized {return false}
      if let v = _storage._style, !v.isInitialized {return false}
      if let v = _storage._originalSize, !v.isInitialized {return false}
      if let v = _storage._mask, !v.isInitialized {return false}
      if let v = _storage._thumbnailData, !v.isInitialized {return false}
      if let v = _storage._originalData, !v.isInitialized {return false}
      if let v = _storage._naturalSize, !v.isInitialized {return false}
      if let v = _storage._instantAlphaPath, !v.isInitialized {return false}
      if let v = _storage._enhancedImageData, !v.isInitialized {return false}
      if let v = _storage._adjustedImageData, !v.isInitialized {return false}
      if let v = _storage._thumbnailAdjustedImageData, !v.isInitialized {return false}
      if let v = _storage._databaseData, !v.isInitialized {return false}
      if let v = _storage._databaseThumbnailData, !v.isInitialized {return false}
      if let v = _storage._databaseOriginalData, !v.isInitialized {return false}
      if let v = _storage._tracedPath, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._super)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._databaseData)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._style)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._originalSize)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._mask)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._databaseThumbnailData)
        case 7: try decoder.decodeSingularUInt32Field(value: &_storage._flags)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._databaseOriginalData)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._naturalSize)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._instantAlphaPath)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._data)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._thumbnailData)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._originalData)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._imageAdjustments)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._adjustedImageData)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._thumbnailAdjustedImageData)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._enhancedImageData)
        case 18: try decoder.decodeSingularBoolField(value: &_storage._interpretsUntaggedImageDataAsGeneric)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._tracedPath)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._attribution)
        case 100..<1000:
          try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: TSD_ImageArchive.self, fieldNumber: fieldNumber)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._super {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._databaseData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._style {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._originalSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._mask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._databaseThumbnailData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._flags {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._databaseOriginalData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._naturalSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._instantAlphaPath {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._thumbnailData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._originalData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._imageAdjustments {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._adjustedImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._thumbnailAdjustedImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._enhancedImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._interpretsUntaggedImageDataAsGeneric {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      }
      if let v = _storage._tracedPath {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._attribution {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 1000)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ImageArchive, rhs: TSD_ImageArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._super != rhs_storage._super {return false}
        if _storage._data != rhs_storage._data {return false}
        if _storage._style != rhs_storage._style {return false}
        if _storage._originalSize != rhs_storage._originalSize {return false}
        if _storage._mask != rhs_storage._mask {return false}
        if _storage._thumbnailData != rhs_storage._thumbnailData {return false}
        if _storage._flags != rhs_storage._flags {return false}
        if _storage._originalData != rhs_storage._originalData {return false}
        if _storage._naturalSize != rhs_storage._naturalSize {return false}
        if _storage._instantAlphaPath != rhs_storage._instantAlphaPath {return false}
        if _storage._imageAdjustments != rhs_storage._imageAdjustments {return false}
        if _storage._enhancedImageData != rhs_storage._enhancedImageData {return false}
        if _storage._adjustedImageData != rhs_storage._adjustedImageData {return false}
        if _storage._thumbnailAdjustedImageData != rhs_storage._thumbnailAdjustedImageData {return false}
        if _storage._interpretsUntaggedImageDataAsGeneric != rhs_storage._interpretsUntaggedImageDataAsGeneric {return false}
        if _storage._databaseData != rhs_storage._databaseData {return false}
        if _storage._databaseThumbnailData != rhs_storage._databaseThumbnailData {return false}
        if _storage._databaseOriginalData != rhs_storage._databaseOriginalData {return false}
        if _storage._tracedPath != rhs_storage._tracedPath {return false}
        if _storage._attribution != rhs_storage._attribution {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension TSD_MaskArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MaskArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "pathsource"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._pathsource, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._pathsource)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._pathsource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_MaskArchive, rhs: TSD_MaskArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._pathsource != rhs._pathsource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ImageDataAttributes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ImageDataAttributes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pixel_size"),
    2: .standard(proto: "image_is_srgb"),
    3: .standard(proto: "should_be_interpreted_as_generic_if_untagged"),
  ]

  public var isInitialized: Bool {
    if let v = self._pixelSize, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._pixelSize)
      case 2: try decoder.decodeSingularBoolField(value: &self._imageIsSrgb)
      case 3: try decoder.decodeSingularBoolField(value: &self._shouldBeInterpretedAsGenericIfUntagged)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._pixelSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._imageIsSrgb {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._shouldBeInterpretedAsGenericIfUntagged {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ImageDataAttributes, rhs: TSD_ImageDataAttributes) -> Bool {
    if lhs._pixelSize != rhs._pixelSize {return false}
    if lhs._imageIsSrgb != rhs._imageIsSrgb {return false}
    if lhs._shouldBeInterpretedAsGenericIfUntagged != rhs._shouldBeInterpretedAsGenericIfUntagged {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_MovieArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MovieArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    14: .same(proto: "movieData"),
    22: .same(proto: "importedAuxiliaryMovieData"),
    25: .standard(proto: "imported_auxiliary_movie_data_original_filename"),
    17: .same(proto: "movieRemoteURL"),
    3: .same(proto: "startTime"),
    4: .same(proto: "endTime"),
    5: .same(proto: "posterTime"),
    6: .same(proto: "loopOptionAsInteger"),
    24: .standard(proto: "loop_option"),
    7: .same(proto: "volume"),
    8: .same(proto: "autoPlay"),
    9: .same(proto: "audioOnly"),
    18: .same(proto: "streaming"),
    27: .same(proto: "nativeAudioRecording"),
    15: .same(proto: "posterImageData"),
    16: .same(proto: "audioOnlyImageData"),
    23: .standard(proto: "poster_image_generated_with_alpha_support"),
    12: .same(proto: "playableState"),
    13: .same(proto: "flags"),
    2: .standard(proto: "database_movieData"),
    10: .standard(proto: "database_posterImageData"),
    11: .standard(proto: "database_audioOnlyImageData"),
    19: .same(proto: "style"),
    20: .same(proto: "originalSize"),
    21: .same(proto: "naturalSize"),
    26: .same(proto: "attribution"),
  ]

  fileprivate class _StorageClass {
    var _super: TSD_DrawableArchive? = nil
    var _movieData: TSP_DataReference? = nil
    var _importedAuxiliaryMovieData: TSP_DataReference? = nil
    var _importedAuxiliaryMovieDataOriginalFilename: String? = nil
    var _movieRemoteURL: String? = nil
    var _startTime: Float? = nil
    var _endTime: Float? = nil
    var _posterTime: Float? = nil
    var _loopOptionAsInteger: UInt32? = nil
    var _loopOption: TSD_MovieArchive.MovieLoopOption? = nil
    var _volume: Float? = nil
    var _autoPlay: Bool? = nil
    var _audioOnly: Bool? = nil
    var _streaming: Bool? = nil
    var _nativeAudioRecording: Bool? = nil
    var _posterImageData: TSP_DataReference? = nil
    var _audioOnlyImageData: TSP_DataReference? = nil
    var _posterImageGeneratedWithAlphaSupport: Bool? = nil
    var _playableState: UInt32? = nil
    var _flags: UInt32? = nil
    var _databaseMovieData: TSP_Reference? = nil
    var _databasePosterImageData: TSP_Reference? = nil
    var _databaseAudioOnlyImageData: TSP_Reference? = nil
    var _style: TSP_Reference? = nil
    var _originalSize: TSP_Size? = nil
    var _naturalSize: TSP_Size? = nil
    var _attribution: TSD_Attribution? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _super = source._super
      _movieData = source._movieData
      _importedAuxiliaryMovieData = source._importedAuxiliaryMovieData
      _importedAuxiliaryMovieDataOriginalFilename = source._importedAuxiliaryMovieDataOriginalFilename
      _movieRemoteURL = source._movieRemoteURL
      _startTime = source._startTime
      _endTime = source._endTime
      _posterTime = source._posterTime
      _loopOptionAsInteger = source._loopOptionAsInteger
      _loopOption = source._loopOption
      _volume = source._volume
      _autoPlay = source._autoPlay
      _audioOnly = source._audioOnly
      _streaming = source._streaming
      _nativeAudioRecording = source._nativeAudioRecording
      _posterImageData = source._posterImageData
      _audioOnlyImageData = source._audioOnlyImageData
      _posterImageGeneratedWithAlphaSupport = source._posterImageGeneratedWithAlphaSupport
      _playableState = source._playableState
      _flags = source._flags
      _databaseMovieData = source._databaseMovieData
      _databasePosterImageData = source._databasePosterImageData
      _databaseAudioOnlyImageData = source._databaseAudioOnlyImageData
      _style = source._style
      _originalSize = source._originalSize
      _naturalSize = source._naturalSize
      _attribution = source._attribution
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._super == nil {return false}
      if let v = _storage._super, !v.isInitialized {return false}
      if let v = _storage._movieData, !v.isInitialized {return false}
      if let v = _storage._importedAuxiliaryMovieData, !v.isInitialized {return false}
      if let v = _storage._posterImageData, !v.isInitialized {return false}
      if let v = _storage._audioOnlyImageData, !v.isInitialized {return false}
      if let v = _storage._databaseMovieData, !v.isInitialized {return false}
      if let v = _storage._databasePosterImageData, !v.isInitialized {return false}
      if let v = _storage._databaseAudioOnlyImageData, !v.isInitialized {return false}
      if let v = _storage._style, !v.isInitialized {return false}
      if let v = _storage._originalSize, !v.isInitialized {return false}
      if let v = _storage._naturalSize, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._super)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._databaseMovieData)
        case 3: try decoder.decodeSingularFloatField(value: &_storage._startTime)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._endTime)
        case 5: try decoder.decodeSingularFloatField(value: &_storage._posterTime)
        case 6: try decoder.decodeSingularUInt32Field(value: &_storage._loopOptionAsInteger)
        case 7: try decoder.decodeSingularFloatField(value: &_storage._volume)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._autoPlay)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._audioOnly)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._databasePosterImageData)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._databaseAudioOnlyImageData)
        case 12: try decoder.decodeSingularUInt32Field(value: &_storage._playableState)
        case 13: try decoder.decodeSingularUInt32Field(value: &_storage._flags)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._movieData)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._posterImageData)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._audioOnlyImageData)
        case 17: try decoder.decodeSingularStringField(value: &_storage._movieRemoteURL)
        case 18: try decoder.decodeSingularBoolField(value: &_storage._streaming)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._style)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._originalSize)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._naturalSize)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._importedAuxiliaryMovieData)
        case 23: try decoder.decodeSingularBoolField(value: &_storage._posterImageGeneratedWithAlphaSupport)
        case 24: try decoder.decodeSingularEnumField(value: &_storage._loopOption)
        case 25: try decoder.decodeSingularStringField(value: &_storage._importedAuxiliaryMovieDataOriginalFilename)
        case 26: try decoder.decodeSingularMessageField(value: &_storage._attribution)
        case 27: try decoder.decodeSingularBoolField(value: &_storage._nativeAudioRecording)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._super {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._databaseMovieData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
      }
      if let v = _storage._endTime {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
      }
      if let v = _storage._posterTime {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
      }
      if let v = _storage._loopOptionAsInteger {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._volume {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 7)
      }
      if let v = _storage._autoPlay {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      }
      if let v = _storage._audioOnly {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      }
      if let v = _storage._databasePosterImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._databaseAudioOnlyImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._playableState {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
      }
      if let v = _storage._flags {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 13)
      }
      if let v = _storage._movieData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._posterImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._audioOnlyImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._movieRemoteURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 17)
      }
      if let v = _storage._streaming {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      }
      if let v = _storage._style {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._originalSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._naturalSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._importedAuxiliaryMovieData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if let v = _storage._posterImageGeneratedWithAlphaSupport {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      }
      if let v = _storage._loopOption {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 24)
      }
      if let v = _storage._importedAuxiliaryMovieDataOriginalFilename {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      }
      if let v = _storage._attribution {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if let v = _storage._nativeAudioRecording {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 27)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_MovieArchive, rhs: TSD_MovieArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._super != rhs_storage._super {return false}
        if _storage._movieData != rhs_storage._movieData {return false}
        if _storage._importedAuxiliaryMovieData != rhs_storage._importedAuxiliaryMovieData {return false}
        if _storage._importedAuxiliaryMovieDataOriginalFilename != rhs_storage._importedAuxiliaryMovieDataOriginalFilename {return false}
        if _storage._movieRemoteURL != rhs_storage._movieRemoteURL {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._endTime != rhs_storage._endTime {return false}
        if _storage._posterTime != rhs_storage._posterTime {return false}
        if _storage._loopOptionAsInteger != rhs_storage._loopOptionAsInteger {return false}
        if _storage._loopOption != rhs_storage._loopOption {return false}
        if _storage._volume != rhs_storage._volume {return false}
        if _storage._autoPlay != rhs_storage._autoPlay {return false}
        if _storage._audioOnly != rhs_storage._audioOnly {return false}
        if _storage._streaming != rhs_storage._streaming {return false}
        if _storage._nativeAudioRecording != rhs_storage._nativeAudioRecording {return false}
        if _storage._posterImageData != rhs_storage._posterImageData {return false}
        if _storage._audioOnlyImageData != rhs_storage._audioOnlyImageData {return false}
        if _storage._posterImageGeneratedWithAlphaSupport != rhs_storage._posterImageGeneratedWithAlphaSupport {return false}
        if _storage._playableState != rhs_storage._playableState {return false}
        if _storage._flags != rhs_storage._flags {return false}
        if _storage._databaseMovieData != rhs_storage._databaseMovieData {return false}
        if _storage._databasePosterImageData != rhs_storage._databasePosterImageData {return false}
        if _storage._databaseAudioOnlyImageData != rhs_storage._databaseAudioOnlyImageData {return false}
        if _storage._style != rhs_storage._style {return false}
        if _storage._originalSize != rhs_storage._originalSize {return false}
        if _storage._naturalSize != rhs_storage._naturalSize {return false}
        if _storage._attribution != rhs_storage._attribution {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_MovieArchive.MovieLoopOption: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "None"),
    1: .same(proto: "Repeat"),
    2: .same(proto: "BackAndForth"),
  ]
}

extension TSD_ExteriorTextWrapArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExteriorTextWrapArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "direction"),
    3: .standard(proto: "fit_type"),
    4: .same(proto: "margin"),
    5: .standard(proto: "alpha_threshold"),
    6: .standard(proto: "is_html_wrap"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._type)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._direction)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._fitType)
      case 4: try decoder.decodeSingularFloatField(value: &self._margin)
      case 5: try decoder.decodeSingularFloatField(value: &self._alphaThreshold)
      case 6: try decoder.decodeSingularBoolField(value: &self._isHtmlWrap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._direction {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._fitType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._margin {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    if let v = self._alphaThreshold {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
    }
    if let v = self._isHtmlWrap {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ExteriorTextWrapArchive, rhs: TSD_ExteriorTextWrapArchive) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._direction != rhs._direction {return false}
    if lhs._fitType != rhs._fitType {return false}
    if lhs._margin != rhs._margin {return false}
    if lhs._alphaThreshold != rhs._alphaThreshold {return false}
    if lhs._isHtmlWrap != rhs._isHtmlWrap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_DrawableContentDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DrawableContentDescription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "element_kind"),
    2: .standard(proto: "is_anchored_to_text"),
    3: .standard(proto: "is_floating_above_text"),
    4: .standard(proto: "is_inline_with_text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._elementKind)
      case 2: try decoder.decodeSingularBoolField(value: &self._isAnchoredToText)
      case 3: try decoder.decodeSingularBoolField(value: &self._isFloatingAboveText)
      case 4: try decoder.decodeSingularBoolField(value: &self._isInlineWithText)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._elementKind {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._isAnchoredToText {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._isFloatingAboveText {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._isInlineWithText {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_DrawableContentDescription, rhs: TSD_DrawableContentDescription) -> Bool {
    if lhs._elementKind != rhs._elementKind {return false}
    if lhs._isAnchoredToText != rhs._isAnchoredToText {return false}
    if lhs._isFloatingAboveText != rhs._isFloatingAboveText {return false}
    if lhs._isInlineWithText != rhs._isInlineWithText {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_FreehandDrawingContentDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FreehandDrawingContentDescription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "source_doc_wanted_spacer_shape"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularBoolField(value: &self._sourceDocWantedSpacerShape)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._sourceDocWantedSpacerShape {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_FreehandDrawingContentDescription, rhs: TSD_FreehandDrawingContentDescription) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._sourceDocWantedSpacerShape != rhs._sourceDocWantedSpacerShape {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_FreehandDrawingToolkitUIState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FreehandDrawingToolkitUIState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_color"),
    2: .standard(proto: "most_recent_pen_tool_type"),
    3: .standard(proto: "pen_tool_opacity"),
    4: .standard(proto: "pen_tool_unscaled_width"),
    5: .standard(proto: "pencil_tool_opacity"),
    6: .standard(proto: "pencil_tool_unscaled_width"),
    7: .standard(proto: "crayon_tool_opacity"),
    8: .standard(proto: "crayon_tool_unscaled_width"),
    9: .standard(proto: "fill_tool_opacity"),
    10: .standard(proto: "eraser_tool_scaled_width"),
    11: .standard(proto: "eraser_tool_erases_whole_objects"),
    12: .standard(proto: "pen_tool_color"),
    13: .standard(proto: "pencil_tool_color"),
    14: .standard(proto: "crayon_tool_color"),
    15: .standard(proto: "fill_tool_color"),
  ]

  public var isInitialized: Bool {
    if let v = self._currentColor, !v.isInitialized {return false}
    if let v = self._penToolColor, !v.isInitialized {return false}
    if let v = self._pencilToolColor, !v.isInitialized {return false}
    if let v = self._crayonToolColor, !v.isInitialized {return false}
    if let v = self._fillToolColor, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._currentColor)
      case 2: try decoder.decodeSingularEnumField(value: &self._mostRecentPenToolType)
      case 3: try decoder.decodeSingularFloatField(value: &self._penToolOpacity)
      case 4: try decoder.decodeSingularFloatField(value: &self._penToolUnscaledWidth)
      case 5: try decoder.decodeSingularFloatField(value: &self._pencilToolOpacity)
      case 6: try decoder.decodeSingularFloatField(value: &self._pencilToolUnscaledWidth)
      case 7: try decoder.decodeSingularFloatField(value: &self._crayonToolOpacity)
      case 8: try decoder.decodeSingularFloatField(value: &self._crayonToolUnscaledWidth)
      case 9: try decoder.decodeSingularFloatField(value: &self._fillToolOpacity)
      case 10: try decoder.decodeSingularFloatField(value: &self._eraserToolScaledWidth)
      case 11: try decoder.decodeSingularBoolField(value: &self._eraserToolErasesWholeObjects)
      case 12: try decoder.decodeSingularMessageField(value: &self._penToolColor)
      case 13: try decoder.decodeSingularMessageField(value: &self._pencilToolColor)
      case 14: try decoder.decodeSingularMessageField(value: &self._crayonToolColor)
      case 15: try decoder.decodeSingularMessageField(value: &self._fillToolColor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._currentColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._mostRecentPenToolType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._penToolOpacity {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }
    if let v = self._penToolUnscaledWidth {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    if let v = self._pencilToolOpacity {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
    }
    if let v = self._pencilToolUnscaledWidth {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 6)
    }
    if let v = self._crayonToolOpacity {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 7)
    }
    if let v = self._crayonToolUnscaledWidth {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 8)
    }
    if let v = self._fillToolOpacity {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 9)
    }
    if let v = self._eraserToolScaledWidth {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 10)
    }
    if let v = self._eraserToolErasesWholeObjects {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    }
    if let v = self._penToolColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }
    if let v = self._pencilToolColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }
    if let v = self._crayonToolColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }
    if let v = self._fillToolColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_FreehandDrawingToolkitUIState, rhs: TSD_FreehandDrawingToolkitUIState) -> Bool {
    if lhs._currentColor != rhs._currentColor {return false}
    if lhs._mostRecentPenToolType != rhs._mostRecentPenToolType {return false}
    if lhs._penToolOpacity != rhs._penToolOpacity {return false}
    if lhs._penToolUnscaledWidth != rhs._penToolUnscaledWidth {return false}
    if lhs._pencilToolOpacity != rhs._pencilToolOpacity {return false}
    if lhs._pencilToolUnscaledWidth != rhs._pencilToolUnscaledWidth {return false}
    if lhs._crayonToolOpacity != rhs._crayonToolOpacity {return false}
    if lhs._crayonToolUnscaledWidth != rhs._crayonToolUnscaledWidth {return false}
    if lhs._fillToolOpacity != rhs._fillToolOpacity {return false}
    if lhs._eraserToolScaledWidth != rhs._eraserToolScaledWidth {return false}
    if lhs._eraserToolErasesWholeObjects != rhs._eraserToolErasesWholeObjects {return false}
    if lhs._penToolColor != rhs._penToolColor {return false}
    if lhs._pencilToolColor != rhs._pencilToolColor {return false}
    if lhs._crayonToolColor != rhs._crayonToolColor {return false}
    if lhs._fillToolColor != rhs._fillToolColor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_FreehandDrawingToolkitUIState.FreehandDrawingToolType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Pen"),
    1: .same(proto: "Pencil"),
    2: .same(proto: "Crayon"),
    3: .same(proto: "Fill"),
  ]
}

extension TSD_GuideArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GuideArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "offset"),
    3: .same(proto: "start"),
    4: .same(proto: "end"),
    5: .same(proto: "dynamic"),
    6: .same(proto: "infinite"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularFloatField(value: &self._offset)
      case 3: try decoder.decodeSingularFloatField(value: &self._start)
      case 4: try decoder.decodeSingularFloatField(value: &self._end)
      case 5: try decoder.decodeSingularBoolField(value: &self._dynamic)
      case 6: try decoder.decodeSingularBoolField(value: &self._infinite)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._offset {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._start {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }
    if let v = self._end {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    if let v = self._dynamic {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._infinite {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_GuideArchive, rhs: TSD_GuideArchive) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._offset != rhs._offset {return false}
    if lhs._start != rhs._start {return false}
    if lhs._end != rhs._end {return false}
    if lhs._dynamic != rhs._dynamic {return false}
    if lhs._infinite != rhs._infinite {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_GuideArchive.GuideType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Horizontal"),
    1: .same(proto: "Vertical"),
  ]
}

extension TSD_UserDefinedGuideArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserDefinedGuideArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "position"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularFloatField(value: &self._position)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._position {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_UserDefinedGuideArchive, rhs: TSD_UserDefinedGuideArchive) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._position != rhs._position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_UserDefinedGuideArchive.GuideType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Horizontal"),
    1: .same(proto: "Vertical"),
  ]
}

extension TSD_GuideStorageArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GuideStorageArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userDefinedGuides"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.userDefinedGuides)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userDefinedGuides.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userDefinedGuides, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_GuideStorageArchive, rhs: TSD_GuideStorageArchive) -> Bool {
    if lhs.userDefinedGuides != rhs.userDefinedGuides {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_CanvasSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CanvasSelectionArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "infos"),
    3: .standard(proto: "non_interactive_infos"),
    2: .same(proto: "container"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.infos) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.nonInteractiveInfos) {return false}
    if let v = self._container, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.infos)
      case 2: try decoder.decodeSingularMessageField(value: &self._container)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.nonInteractiveInfos)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.infos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.infos, fieldNumber: 1)
    }
    if let v = self._container {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.nonInteractiveInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nonInteractiveInfos, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_CanvasSelectionArchive, rhs: TSD_CanvasSelectionArchive) -> Bool {
    if lhs.infos != rhs.infos {return false}
    if lhs.nonInteractiveInfos != rhs.nonInteractiveInfos {return false}
    if lhs._container != rhs._container {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_DrawableSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DrawableSelectionArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "infos"),
    3: .standard(proto: "non_interactive_infos"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.infos) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.nonInteractiveInfos) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedMessageField(value: &self.infos)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.nonInteractiveInfos)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.infos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.infos, fieldNumber: 2)
    }
    if !self.nonInteractiveInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nonInteractiveInfos, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_DrawableSelectionArchive, rhs: TSD_DrawableSelectionArchive) -> Bool {
    if lhs.infos != rhs.infos {return false}
    if lhs.nonInteractiveInfos != rhs.nonInteractiveInfos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_GroupSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupSelectionArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "has_selected_infos_in_non_group_container"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularBoolField(value: &self._hasSelectedInfosInNonGroupContainer_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._hasSelectedInfosInNonGroupContainer_p {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_GroupSelectionArchive, rhs: TSD_GroupSelectionArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._hasSelectedInfosInNonGroupContainer_p != rhs._hasSelectedInfosInNonGroupContainer_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_PathSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PathSelectionArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_PathSelectionArchive, rhs: TSD_PathSelectionArchive) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_InfoHyperlinkSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InfoHyperlinkSelectionArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_InfoHyperlinkSelectionArchive, rhs: TSD_InfoHyperlinkSelectionArchive) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_CommentStorageArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommentStorageArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .standard(proto: "creation_date"),
    3: .same(proto: "author"),
    4: .same(proto: "replies"),
  ]

  public var isInitialized: Bool {
    if let v = self._creationDate, !v.isInitialized {return false}
    if let v = self._author, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.replies) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._text)
      case 2: try decoder.decodeSingularMessageField(value: &self._creationDate)
      case 3: try decoder.decodeSingularMessageField(value: &self._author)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.replies)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._text {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._creationDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._author {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.replies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.replies, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_CommentStorageArchive, rhs: TSD_CommentStorageArchive) -> Bool {
    if lhs._text != rhs._text {return false}
    if lhs._creationDate != rhs._creationDate {return false}
    if lhs._author != rhs._author {return false}
    if lhs.replies != rhs.replies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_ReplaceAnnotationAuthorCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReplaceAnnotationAuthorCommandArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "old_annotation_author"),
    3: .standard(proto: "new_annotation_author"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._oldAnnotationAuthor, !v.isInitialized {return false}
    if let v = self._newAnnotationAuthor, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularMessageField(value: &self._oldAnnotationAuthor)
      case 3: try decoder.decodeSingularMessageField(value: &self._newAnnotationAuthor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._oldAnnotationAuthor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._newAnnotationAuthor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_ReplaceAnnotationAuthorCommandArchive, rhs: TSD_ReplaceAnnotationAuthorCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._oldAnnotationAuthor != rhs._oldAnnotationAuthor {return false}
    if lhs._newAnnotationAuthor != rhs._newAnnotationAuthor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_PencilAnnotationArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PencilAnnotationArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pencil_annotation_storage"),
  ]

  public var isInitialized: Bool {
    if let v = self._pencilAnnotationStorage, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._pencilAnnotationStorage)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._pencilAnnotationStorage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_PencilAnnotationArchive, rhs: TSD_PencilAnnotationArchive) -> Bool {
    if lhs._pencilAnnotationStorage != rhs._pencilAnnotationStorage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_PencilAnnotationSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PencilAnnotationSelectionArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pencil_annotation"),
  ]

  public var isInitialized: Bool {
    if let v = self._pencilAnnotation, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._pencilAnnotation)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._pencilAnnotation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_PencilAnnotationSelectionArchive, rhs: TSD_PencilAnnotationSelectionArchive) -> Bool {
    if lhs._pencilAnnotation != rhs._pencilAnnotation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_PencilAnnotationStorageArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PencilAnnotationStorageArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "attached_location"),
    2: .standard(proto: "markup_offset"),
    3: .standard(proto: "rasterized_image"),
    4: .standard(proto: "legacy_encoded_drawing"),
    5: .standard(proto: "drawing_path"),
    6: .standard(proto: "strokes_bounding_box_origin"),
    7: .standard(proto: "strokes_bounding_box_size"),
    8: .standard(proto: "attached_type"),
    9: .standard(proto: "original_attached_size"),
    10: .standard(proto: "percent_of_pa_contained_in_parent_rep"),
    11: .standard(proto: "text_baselines_touched_count"),
    12: .standard(proto: "visible_strokes_count"),
    13: .standard(proto: "pen_color"),
    14: .standard(proto: "tool_type"),
    15: .standard(proto: "callout_sub_storages"),
    16: .standard(proto: "creation_date"),
    17: .standard(proto: "pencil_annotation_drawing_scale"),
    18: .standard(proto: "compound_annotation_type"),
    19: .standard(proto: "sub_storages"),
    20: .standard(proto: "encoded_drawing"),
    21: .standard(proto: "stroke_points_frame_origin"),
    22: .standard(proto: "stroke_points_frame_size"),
    23: .standard(proto: "rendered_frame_origin"),
    24: .standard(proto: "rendered_frame_size"),
  ]

  fileprivate class _StorageClass {
    var _attachedLocation: Int32? = nil
    var _markupOffset: TSP_Point? = nil
    var _rasterizedImage: TSP_DataReference? = nil
    var _legacyEncodedDrawing: TSP_DataReference? = nil
    var _drawingPath: TSP_Path? = nil
    var _strokesBoundingBoxOrigin: TSP_Point? = nil
    var _strokesBoundingBoxSize: TSP_Size? = nil
    var _attachedType: Int32? = nil
    var _originalAttachedSize: TSP_Size? = nil
    var _percentOfPaContainedInParentRep: Double? = nil
    var _textBaselinesTouchedCount: UInt64? = nil
    var _visibleStrokesCount: UInt64? = nil
    var _penColor: TSP_Color? = nil
    var _toolType: Int32? = nil
    var _calloutSubStorages: [TSP_Reference] = []
    var _creationDate: TSP_Date? = nil
    var _pencilAnnotationDrawingScale: Double? = nil
    var _compoundAnnotationType: Int32? = nil
    var _subStorages: [TSP_Reference] = []
    var _encodedDrawing: TSP_DataReference? = nil
    var _strokePointsFrameOrigin: TSP_Point? = nil
    var _strokePointsFrameSize: TSP_Size? = nil
    var _renderedFrameOrigin: TSP_Point? = nil
    var _renderedFrameSize: TSP_Size? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _attachedLocation = source._attachedLocation
      _markupOffset = source._markupOffset
      _rasterizedImage = source._rasterizedImage
      _legacyEncodedDrawing = source._legacyEncodedDrawing
      _drawingPath = source._drawingPath
      _strokesBoundingBoxOrigin = source._strokesBoundingBoxOrigin
      _strokesBoundingBoxSize = source._strokesBoundingBoxSize
      _attachedType = source._attachedType
      _originalAttachedSize = source._originalAttachedSize
      _percentOfPaContainedInParentRep = source._percentOfPaContainedInParentRep
      _textBaselinesTouchedCount = source._textBaselinesTouchedCount
      _visibleStrokesCount = source._visibleStrokesCount
      _penColor = source._penColor
      _toolType = source._toolType
      _calloutSubStorages = source._calloutSubStorages
      _creationDate = source._creationDate
      _pencilAnnotationDrawingScale = source._pencilAnnotationDrawingScale
      _compoundAnnotationType = source._compoundAnnotationType
      _subStorages = source._subStorages
      _encodedDrawing = source._encodedDrawing
      _strokePointsFrameOrigin = source._strokePointsFrameOrigin
      _strokePointsFrameSize = source._strokePointsFrameSize
      _renderedFrameOrigin = source._renderedFrameOrigin
      _renderedFrameSize = source._renderedFrameSize
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._markupOffset, !v.isInitialized {return false}
      if let v = _storage._rasterizedImage, !v.isInitialized {return false}
      if let v = _storage._legacyEncodedDrawing, !v.isInitialized {return false}
      if let v = _storage._drawingPath, !v.isInitialized {return false}
      if let v = _storage._strokesBoundingBoxOrigin, !v.isInitialized {return false}
      if let v = _storage._strokesBoundingBoxSize, !v.isInitialized {return false}
      if let v = _storage._originalAttachedSize, !v.isInitialized {return false}
      if let v = _storage._penColor, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._calloutSubStorages) {return false}
      if let v = _storage._creationDate, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._subStorages) {return false}
      if let v = _storage._encodedDrawing, !v.isInitialized {return false}
      if let v = _storage._strokePointsFrameOrigin, !v.isInitialized {return false}
      if let v = _storage._strokePointsFrameSize, !v.isInitialized {return false}
      if let v = _storage._renderedFrameOrigin, !v.isInitialized {return false}
      if let v = _storage._renderedFrameSize, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._attachedLocation)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._markupOffset)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._rasterizedImage)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._legacyEncodedDrawing)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._drawingPath)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._strokesBoundingBoxOrigin)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._strokesBoundingBoxSize)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._attachedType)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._originalAttachedSize)
        case 10: try decoder.decodeSingularDoubleField(value: &_storage._percentOfPaContainedInParentRep)
        case 11: try decoder.decodeSingularUInt64Field(value: &_storage._textBaselinesTouchedCount)
        case 12: try decoder.decodeSingularUInt64Field(value: &_storage._visibleStrokesCount)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._penColor)
        case 14: try decoder.decodeSingularInt32Field(value: &_storage._toolType)
        case 15: try decoder.decodeRepeatedMessageField(value: &_storage._calloutSubStorages)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._creationDate)
        case 17: try decoder.decodeSingularDoubleField(value: &_storage._pencilAnnotationDrawingScale)
        case 18: try decoder.decodeSingularInt32Field(value: &_storage._compoundAnnotationType)
        case 19: try decoder.decodeRepeatedMessageField(value: &_storage._subStorages)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._encodedDrawing)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._strokePointsFrameOrigin)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._strokePointsFrameSize)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._renderedFrameOrigin)
        case 24: try decoder.decodeSingularMessageField(value: &_storage._renderedFrameSize)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._attachedLocation {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._markupOffset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._rasterizedImage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._legacyEncodedDrawing {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._drawingPath {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._strokesBoundingBoxOrigin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._strokesBoundingBoxSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._attachedType {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._originalAttachedSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._percentOfPaContainedInParentRep {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 10)
      }
      if let v = _storage._textBaselinesTouchedCount {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 11)
      }
      if let v = _storage._visibleStrokesCount {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 12)
      }
      if let v = _storage._penColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._toolType {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
      }
      if !_storage._calloutSubStorages.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._calloutSubStorages, fieldNumber: 15)
      }
      if let v = _storage._creationDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._pencilAnnotationDrawingScale {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 17)
      }
      if let v = _storage._compoundAnnotationType {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 18)
      }
      if !_storage._subStorages.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._subStorages, fieldNumber: 19)
      }
      if let v = _storage._encodedDrawing {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._strokePointsFrameOrigin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._strokePointsFrameSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if let v = _storage._renderedFrameOrigin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if let v = _storage._renderedFrameSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_PencilAnnotationStorageArchive, rhs: TSD_PencilAnnotationStorageArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._attachedLocation != rhs_storage._attachedLocation {return false}
        if _storage._markupOffset != rhs_storage._markupOffset {return false}
        if _storage._rasterizedImage != rhs_storage._rasterizedImage {return false}
        if _storage._legacyEncodedDrawing != rhs_storage._legacyEncodedDrawing {return false}
        if _storage._drawingPath != rhs_storage._drawingPath {return false}
        if _storage._strokesBoundingBoxOrigin != rhs_storage._strokesBoundingBoxOrigin {return false}
        if _storage._strokesBoundingBoxSize != rhs_storage._strokesBoundingBoxSize {return false}
        if _storage._attachedType != rhs_storage._attachedType {return false}
        if _storage._originalAttachedSize != rhs_storage._originalAttachedSize {return false}
        if _storage._percentOfPaContainedInParentRep != rhs_storage._percentOfPaContainedInParentRep {return false}
        if _storage._textBaselinesTouchedCount != rhs_storage._textBaselinesTouchedCount {return false}
        if _storage._visibleStrokesCount != rhs_storage._visibleStrokesCount {return false}
        if _storage._penColor != rhs_storage._penColor {return false}
        if _storage._toolType != rhs_storage._toolType {return false}
        if _storage._calloutSubStorages != rhs_storage._calloutSubStorages {return false}
        if _storage._creationDate != rhs_storage._creationDate {return false}
        if _storage._pencilAnnotationDrawingScale != rhs_storage._pencilAnnotationDrawingScale {return false}
        if _storage._compoundAnnotationType != rhs_storage._compoundAnnotationType {return false}
        if _storage._subStorages != rhs_storage._subStorages {return false}
        if _storage._encodedDrawing != rhs_storage._encodedDrawing {return false}
        if _storage._strokePointsFrameOrigin != rhs_storage._strokePointsFrameOrigin {return false}
        if _storage._strokePointsFrameSize != rhs_storage._strokePointsFrameSize {return false}
        if _storage._renderedFrameOrigin != rhs_storage._renderedFrameOrigin {return false}
        if _storage._renderedFrameSize != rhs_storage._renderedFrameSize {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecColorFillSetColorArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecColorFillSetColorArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "color"),
  ]

  public var isInitialized: Bool {
    if self._color == nil {return false}
    if let v = self._color, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._color)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecColorFillSetColorArchive, rhs: TSD_SpecColorFillSetColorArchive) -> Bool {
    if lhs._color != rhs._color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecFrameSetAssetScaleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecFrameSetAssetScaleArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_scale"),
  ]

  public var isInitialized: Bool {
    if self._assetScale == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._assetScale)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._assetScale {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecFrameSetAssetScaleArchive, rhs: TSD_SpecFrameSetAssetScaleArchive) -> Bool {
    if lhs._assetScale != rhs._assetScale {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecGradientFillSetAngleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecGradientFillSetAngleArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "angle"),
  ]

  public var isInitialized: Bool {
    if self._angle == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._angle)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._angle {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecGradientFillSetAngleArchive, rhs: TSD_SpecGradientFillSetAngleArchive) -> Bool {
    if lhs._angle != rhs._angle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecImageFillSetTechniqueArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecImageFillSetTechniqueArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "technique"),
  ]

  public var isInitialized: Bool {
    if self._technique == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._technique)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._technique {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecImageFillSetTechniqueArchive, rhs: TSD_SpecImageFillSetTechniqueArchive) -> Bool {
    if lhs._technique != rhs._technique {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecReflectionSetOpacityArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecReflectionSetOpacityArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "opacity"),
  ]

  public var isInitialized: Bool {
    if self._opacity == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._opacity)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._opacity {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecReflectionSetOpacityArchive, rhs: TSD_SpecReflectionSetOpacityArchive) -> Bool {
    if lhs._opacity != rhs._opacity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecShadowSetAngleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecShadowSetAngleArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "angle"),
  ]

  public var isInitialized: Bool {
    if self._angle == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._angle)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._angle {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecShadowSetAngleArchive, rhs: TSD_SpecShadowSetAngleArchive) -> Bool {
    if lhs._angle != rhs._angle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecShadowSetColorArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecShadowSetColorArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "color"),
  ]

  public var isInitialized: Bool {
    if self._color == nil {return false}
    if let v = self._color, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._color)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecShadowSetColorArchive, rhs: TSD_SpecShadowSetColorArchive) -> Bool {
    if lhs._color != rhs._color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecShadowSetOffsetArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecShadowSetOffsetArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "offset"),
  ]

  public var isInitialized: Bool {
    if self._offset == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._offset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._offset {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecShadowSetOffsetArchive, rhs: TSD_SpecShadowSetOffsetArchive) -> Bool {
    if lhs._offset != rhs._offset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecShadowSetOpacityArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecShadowSetOpacityArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "opacity"),
  ]

  public var isInitialized: Bool {
    if self._opacity == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._opacity)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._opacity {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecShadowSetOpacityArchive, rhs: TSD_SpecShadowSetOpacityArchive) -> Bool {
    if lhs._opacity != rhs._opacity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecShadowSetRadiusArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecShadowSetRadiusArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "radius"),
  ]

  public var isInitialized: Bool {
    if self._radius == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._radius)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._radius {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecShadowSetRadiusArchive, rhs: TSD_SpecShadowSetRadiusArchive) -> Bool {
    if lhs._radius != rhs._radius {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecStrokeSetColorArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecStrokeSetColorArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "color"),
  ]

  public var isInitialized: Bool {
    if self._color == nil {return false}
    if let v = self._color, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._color)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecStrokeSetColorArchive, rhs: TSD_SpecStrokeSetColorArchive) -> Bool {
    if lhs._color != rhs._color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecStrokeSetPatternArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecStrokeSetPatternArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "line_cap"),
    2: .standard(proto: "line_join"),
    3: .standard(proto: "miter_limit"),
    4: .same(proto: "width"),
    5: .same(proto: "color"),
    6: .same(proto: "pattern"),
  ]

  public var isInitialized: Bool {
    if self._pattern == nil {return false}
    if let v = self._color, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._lineCap)
      case 2: try decoder.decodeSingularInt32Field(value: &self._lineJoin)
      case 3: try decoder.decodeSingularDoubleField(value: &self._miterLimit)
      case 4: try decoder.decodeSingularDoubleField(value: &self._width)
      case 5: try decoder.decodeSingularMessageField(value: &self._color)
      case 6: try decoder.decodeSingularMessageField(value: &self._pattern)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._lineCap {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._lineJoin {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._miterLimit {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }
    if let v = self._width {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    }
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._pattern {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecStrokeSetPatternArchive, rhs: TSD_SpecStrokeSetPatternArchive) -> Bool {
    if lhs._lineCap != rhs._lineCap {return false}
    if lhs._lineJoin != rhs._lineJoin {return false}
    if lhs._miterLimit != rhs._miterLimit {return false}
    if lhs._width != rhs._width {return false}
    if lhs._color != rhs._color {return false}
    if lhs._pattern != rhs._pattern {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_SpecStrokeSetWidthArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecStrokeSetWidthArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "width"),
  ]

  public var isInitialized: Bool {
    if self._width == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._width)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._width {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_SpecStrokeSetWidthArchive, rhs: TSD_SpecStrokeSetWidthArchive) -> Bool {
    if lhs._width != rhs._width {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSD_Attribution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Attribution"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .standard(proto: "description_text"),
    3: .standard(proto: "external_url"),
    4: .standard(proto: "author_name"),
    5: .standard(proto: "author_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._title)
      case 2: try decoder.decodeSingularStringField(value: &self._descriptionText)
      case 3: try decoder.decodeSingularStringField(value: &self._externalURL)
      case 4: try decoder.decodeSingularStringField(value: &self._authorName)
      case 5: try decoder.decodeSingularStringField(value: &self._authorURL)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._descriptionText {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._externalURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._authorName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._authorURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSD_Attribution, rhs: TSD_Attribution) -> Bool {
    if lhs._title != rhs._title {return false}
    if lhs._descriptionText != rhs._descriptionText {return false}
    if lhs._externalURL != rhs._externalURL {return false}
    if lhs._authorName != rhs._authorName {return false}
    if lhs._authorURL != rhs._authorURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
