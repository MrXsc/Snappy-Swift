// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TSSArchives_sos.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct TSS_SpecSetBoolArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Bool {
    get {return _value ?? false}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unset: Bool {
    get {return _unset ?? false}
    set {_unset = newValue}
  }
  /// Returns true if `unset` has been explicitly set.
  var hasUnset: Bool {return self._unset != nil}
  /// Clears the value of `unset`. Subsequent reads from it will return its default value.
  mutating func clearUnset() {self._unset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _value: Bool? = nil
  fileprivate var _unset: Bool? = nil
}

struct TSS_SpecSetColorArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var color: TSP_Color {
    get {return _color ?? TSP_Color()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {self._color = nil}

  var unset: Bool {
    get {return _unset ?? false}
    set {_unset = newValue}
  }
  /// Returns true if `unset` has been explicitly set.
  var hasUnset: Bool {return self._unset != nil}
  /// Clears the value of `unset`. Subsequent reads from it will return its default value.
  mutating func clearUnset() {self._unset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _color: TSP_Color? = nil
  fileprivate var _unset: Bool? = nil
}

struct TSS_SpecSetDoubleArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Double {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unset: Bool {
    get {return _unset ?? false}
    set {_unset = newValue}
  }
  /// Returns true if `unset` has been explicitly set.
  var hasUnset: Bool {return self._unset != nil}
  /// Clears the value of `unset`. Subsequent reads from it will return its default value.
  mutating func clearUnset() {self._unset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _value: Double? = nil
  fileprivate var _unset: Bool? = nil
}

struct TSS_SpecSetIntegerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Int32 {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unset: Bool {
    get {return _unset ?? false}
    set {_unset = newValue}
  }
  /// Returns true if `unset` has been explicitly set.
  var hasUnset: Bool {return self._unset != nil}
  /// Clears the value of `unset`. Subsequent reads from it will return its default value.
  mutating func clearUnset() {self._unset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _value: Int32? = nil
  fileprivate var _unset: Bool? = nil
}

struct TSS_SpecSetStringArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: String {
    get {return _value ?? String()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unset: Bool {
    get {return _unset ?? false}
    set {_unset = newValue}
  }
  /// Returns true if `unset` has been explicitly set.
  var hasUnset: Bool {return self._unset != nil}
  /// Clears the value of `unset`. Subsequent reads from it will return its default value.
  mutating func clearUnset() {self._unset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _value: String? = nil
  fileprivate var _unset: Bool? = nil
}

struct TSS_SpecBoolArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var specSetBool: TSS_SpecSetBoolArchive {
    get {return _specSetBool ?? TSS_SpecSetBoolArchive()}
    set {_specSetBool = newValue}
  }
  /// Returns true if `specSetBool` has been explicitly set.
  var hasSpecSetBool: Bool {return self._specSetBool != nil}
  /// Clears the value of `specSetBool`. Subsequent reads from it will return its default value.
  mutating func clearSpecSetBool() {self._specSetBool = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _specSetBool: TSS_SpecSetBoolArchive? = nil
}

struct TSS_SpecColorArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var specSetColor: TSS_SpecSetColorArchive {
    get {return _specSetColor ?? TSS_SpecSetColorArchive()}
    set {_specSetColor = newValue}
  }
  /// Returns true if `specSetColor` has been explicitly set.
  var hasSpecSetColor: Bool {return self._specSetColor != nil}
  /// Clears the value of `specSetColor`. Subsequent reads from it will return its default value.
  mutating func clearSpecSetColor() {self._specSetColor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _specSetColor: TSS_SpecSetColorArchive? = nil
}

struct TSS_SpecDoubleArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var specSetDouble: TSS_SpecSetDoubleArchive {
    get {return _specSetDouble ?? TSS_SpecSetDoubleArchive()}
    set {_specSetDouble = newValue}
  }
  /// Returns true if `specSetDouble` has been explicitly set.
  var hasSpecSetDouble: Bool {return self._specSetDouble != nil}
  /// Clears the value of `specSetDouble`. Subsequent reads from it will return its default value.
  mutating func clearSpecSetDouble() {self._specSetDouble = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _specSetDouble: TSS_SpecSetDoubleArchive? = nil
}

struct TSS_SpecIntegerArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var specSetInteger: TSS_SpecSetIntegerArchive {
    get {return _specSetInteger ?? TSS_SpecSetIntegerArchive()}
    set {_specSetInteger = newValue}
  }
  /// Returns true if `specSetInteger` has been explicitly set.
  var hasSpecSetInteger: Bool {return self._specSetInteger != nil}
  /// Clears the value of `specSetInteger`. Subsequent reads from it will return its default value.
  mutating func clearSpecSetInteger() {self._specSetInteger = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _specSetInteger: TSS_SpecSetIntegerArchive? = nil
}

struct TSS_SpecStringArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var specSetString: TSS_SpecSetStringArchive {
    get {return _specSetString ?? TSS_SpecSetStringArchive()}
    set {_specSetString = newValue}
  }
  /// Returns true if `specSetString` has been explicitly set.
  var hasSpecSetString: Bool {return self._specSetString != nil}
  /// Clears the value of `specSetString`. Subsequent reads from it will return its default value.
  mutating func clearSpecSetString() {self._specSetString = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _specSetString: TSS_SpecSetStringArchive? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TSS"

extension TSS_SpecSetBoolArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecSetBoolArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "unset"),
  ]

  public var isInitialized: Bool {
    if self._value == nil {return false}
    if self._unset == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._value)
      case 2: try decoder.decodeSingularBoolField(value: &self._unset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._unset {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_SpecSetBoolArchive, rhs: TSS_SpecSetBoolArchive) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs._unset != rhs._unset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_SpecSetColorArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecSetColorArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "color"),
    2: .same(proto: "unset"),
  ]

  public var isInitialized: Bool {
    if self._unset == nil {return false}
    if let v = self._color, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._color)
      case 2: try decoder.decodeSingularBoolField(value: &self._unset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._unset {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_SpecSetColorArchive, rhs: TSS_SpecSetColorArchive) -> Bool {
    if lhs._color != rhs._color {return false}
    if lhs._unset != rhs._unset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_SpecSetDoubleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecSetDoubleArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "unset"),
  ]

  public var isInitialized: Bool {
    if self._value == nil {return false}
    if self._unset == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._value)
      case 2: try decoder.decodeSingularBoolField(value: &self._unset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    if let v = self._unset {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_SpecSetDoubleArchive, rhs: TSS_SpecSetDoubleArchive) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs._unset != rhs._unset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_SpecSetIntegerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecSetIntegerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "unset"),
  ]

  public var isInitialized: Bool {
    if self._value == nil {return false}
    if self._unset == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._value)
      case 2: try decoder.decodeSingularBoolField(value: &self._unset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._unset {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_SpecSetIntegerArchive, rhs: TSS_SpecSetIntegerArchive) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs._unset != rhs._unset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_SpecSetStringArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecSetStringArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "unset"),
  ]

  public var isInitialized: Bool {
    if self._unset == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._value)
      case 2: try decoder.decodeSingularBoolField(value: &self._unset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._unset {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_SpecSetStringArchive, rhs: TSS_SpecSetStringArchive) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs._unset != rhs._unset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_SpecBoolArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecBoolArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "spec_set_bool"),
  ]

  public var isInitialized: Bool {
    if let v = self._specSetBool, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._specSetBool)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._specSetBool {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_SpecBoolArchive, rhs: TSS_SpecBoolArchive) -> Bool {
    if lhs._specSetBool != rhs._specSetBool {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_SpecColorArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecColorArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "spec_set_color"),
  ]

  public var isInitialized: Bool {
    if let v = self._specSetColor, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._specSetColor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._specSetColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_SpecColorArchive, rhs: TSS_SpecColorArchive) -> Bool {
    if lhs._specSetColor != rhs._specSetColor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_SpecDoubleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecDoubleArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "spec_set_double"),
  ]

  public var isInitialized: Bool {
    if let v = self._specSetDouble, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._specSetDouble)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._specSetDouble {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_SpecDoubleArchive, rhs: TSS_SpecDoubleArchive) -> Bool {
    if lhs._specSetDouble != rhs._specSetDouble {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_SpecIntegerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecIntegerArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "spec_set_integer"),
  ]

  public var isInitialized: Bool {
    if let v = self._specSetInteger, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._specSetInteger)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._specSetInteger {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_SpecIntegerArchive, rhs: TSS_SpecIntegerArchive) -> Bool {
    if lhs._specSetInteger != rhs._specSetInteger {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_SpecStringArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecStringArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "spec_set_string"),
  ]

  public var isInitialized: Bool {
    if let v = self._specSetString, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._specSetString)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._specSetString {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_SpecStringArchive, rhs: TSS_SpecStringArchive) -> Bool {
    if lhs._specSetString != rhs._specSetString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
