// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TSCH3DArchives.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum TSCH_TextureTilingMode: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case tallest // = 1

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .tallest
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .tallest: return 1
    }
  }

}

#if swift(>=4.2)

extension TSCH_TextureTilingMode: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum TSCH_TextureTilingFace: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case all // = 0
  case topAndBottom // = 1
  case side // = 2

  init() {
    self = .all
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .all
    case 1: self = .topAndBottom
    case 2: self = .side
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .all: return 0
    case .topAndBottom: return 1
    case .side: return 2
    }
  }

}

#if swift(>=4.2)

extension TSCH_TextureTilingFace: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum TSCH_TextureTilingWrap: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case projected // = 0
  case faceWrap // = 1

  init() {
    self = .projected
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .projected
    case 1: self = .faceWrap
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .projected: return 0
    case .faceWrap: return 1
    }
  }

}

#if swift(>=4.2)

extension TSCH_TextureTilingWrap: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum TSCH_TextureTilingXPosition: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case left // = 0
  case center // = 1
  case right // = 2

  init() {
    self = .left
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .left
    case 1: self = .center
    case 2: self = .right
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .left: return 0
    case .center: return 1
    case .right: return 2
    }
  }

}

#if swift(>=4.2)

extension TSCH_TextureTilingXPosition: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum TSCH_TextureTilingYPosition: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case top // = 0
  case middle // = 1
  case bottom // = 2

  init() {
    self = .top
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .top
    case 1: self = .middle
    case 2: self = .bottom
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .top: return 0
    case .middle: return 1
    case .bottom: return 2
    }
  }

}

#if swift(>=4.2)

extension TSCH_TextureTilingYPosition: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum TSCH_TextureTilingContinuity: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case global // = 1
  case series // = 2
  case jittered // = 3

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .global
    case 2: self = .series
    case 3: self = .jittered
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .global: return 1
    case .series: return 2
    case .jittered: return 3
    }
  }

}

#if swift(>=4.2)

extension TSCH_TextureTilingContinuity: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum TSCH_FillPropertyType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case undefined // = 0
  case area // = 1
  case bar // = 2
  case column // = 3
  case line // = 4
  case pie // = 5

  init() {
    self = .undefined
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .area
    case 2: self = .bar
    case 3: self = .column
    case 4: self = .line
    case 5: self = .pie
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .area: return 1
    case .bar: return 2
    case .column: return 3
    case .line: return 4
    case .pie: return 5
    }
  }

}

#if swift(>=4.2)

extension TSCH_FillPropertyType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TSCH_Chart3DEnvironmentPackageArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var materials: [TSCH_Chart3DEnvironmentMaterialArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TSCH_Chart3DFillArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lightingmodel: TSCH_Chart3DLightingModelArchive {
    get {return _lightingmodel ?? TSCH_Chart3DLightingModelArchive()}
    set {_lightingmodel = newValue}
  }
  /// Returns true if `lightingmodel` has been explicitly set.
  var hasLightingmodel: Bool {return self._lightingmodel != nil}
  /// Clears the value of `lightingmodel`. Subsequent reads from it will return its default value.
  mutating func clearLightingmodel() {self._lightingmodel = nil}

  var texturesetID: String {
    get {return _texturesetID ?? String()}
    set {_texturesetID = newValue}
  }
  /// Returns true if `texturesetID` has been explicitly set.
  var hasTexturesetID: Bool {return self._texturesetID != nil}
  /// Clears the value of `texturesetID`. Subsequent reads from it will return its default value.
  mutating func clearTexturesetID() {self._texturesetID = nil}

  var fillType: TSCH_FillPropertyType {
    get {return _fillType ?? .undefined}
    set {_fillType = newValue}
  }
  /// Returns true if `fillType` has been explicitly set.
  var hasFillType: Bool {return self._fillType != nil}
  /// Clears the value of `fillType`. Subsequent reads from it will return its default value.
  mutating func clearFillType() {self._fillType = nil}

  var seriesIndex: UInt32 {
    get {return _seriesIndex ?? 0}
    set {_seriesIndex = newValue}
  }
  /// Returns true if `seriesIndex` has been explicitly set.
  var hasSeriesIndex: Bool {return self._seriesIndex != nil}
  /// Clears the value of `seriesIndex`. Subsequent reads from it will return its default value.
  mutating func clearSeriesIndex() {self._seriesIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _lightingmodel: TSCH_Chart3DLightingModelArchive? = nil
  fileprivate var _texturesetID: String? = nil
  fileprivate var _fillType: TSCH_FillPropertyType? = nil
  fileprivate var _seriesIndex: UInt32? = nil
}

struct TSCH_Chart3DPointLightArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var position: TSCH_Chart3DVectorArchive {
    get {return _position ?? TSCH_Chart3DVectorArchive()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _position: TSCH_Chart3DVectorArchive? = nil
}

struct TSCH_Chart3DDirectionalLightArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var direction: TSCH_Chart3DVectorArchive {
    get {return _direction ?? TSCH_Chart3DVectorArchive()}
    set {_direction = newValue}
  }
  /// Returns true if `direction` has been explicitly set.
  var hasDirection: Bool {return self._direction != nil}
  /// Clears the value of `direction`. Subsequent reads from it will return its default value.
  mutating func clearDirection() {self._direction = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _direction: TSCH_Chart3DVectorArchive? = nil
}

struct TSCH_Chart3DSpotLightArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var position: TSCH_Chart3DVectorArchive {
    get {return _position ?? TSCH_Chart3DVectorArchive()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  var direction: TSCH_Chart3DVectorArchive {
    get {return _direction ?? TSCH_Chart3DVectorArchive()}
    set {_direction = newValue}
  }
  /// Returns true if `direction` has been explicitly set.
  var hasDirection: Bool {return self._direction != nil}
  /// Clears the value of `direction`. Subsequent reads from it will return its default value.
  mutating func clearDirection() {self._direction = nil}

  var cutoff: Float {
    get {return _cutoff ?? 0}
    set {_cutoff = newValue}
  }
  /// Returns true if `cutoff` has been explicitly set.
  var hasCutoff: Bool {return self._cutoff != nil}
  /// Clears the value of `cutoff`. Subsequent reads from it will return its default value.
  mutating func clearCutoff() {self._cutoff = nil}

  var dropoff: Float {
    get {return _dropoff ?? 0}
    set {_dropoff = newValue}
  }
  /// Returns true if `dropoff` has been explicitly set.
  var hasDropoff: Bool {return self._dropoff != nil}
  /// Clears the value of `dropoff`. Subsequent reads from it will return its default value.
  mutating func clearDropoff() {self._dropoff = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _position: TSCH_Chart3DVectorArchive? = nil
  fileprivate var _direction: TSCH_Chart3DVectorArchive? = nil
  fileprivate var _cutoff: Float? = nil
  fileprivate var _dropoff: Float? = nil
}

struct TSCH_Chart3DLightArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var ambientColor: TSCH_Chart3DVectorArchive {
    get {return _ambientColor ?? TSCH_Chart3DVectorArchive()}
    set {_ambientColor = newValue}
  }
  /// Returns true if `ambientColor` has been explicitly set.
  var hasAmbientColor: Bool {return self._ambientColor != nil}
  /// Clears the value of `ambientColor`. Subsequent reads from it will return its default value.
  mutating func clearAmbientColor() {self._ambientColor = nil}

  var diffuseColor: TSCH_Chart3DVectorArchive {
    get {return _diffuseColor ?? TSCH_Chart3DVectorArchive()}
    set {_diffuseColor = newValue}
  }
  /// Returns true if `diffuseColor` has been explicitly set.
  var hasDiffuseColor: Bool {return self._diffuseColor != nil}
  /// Clears the value of `diffuseColor`. Subsequent reads from it will return its default value.
  mutating func clearDiffuseColor() {self._diffuseColor = nil}

  var specularColor: TSCH_Chart3DVectorArchive {
    get {return _specularColor ?? TSCH_Chart3DVectorArchive()}
    set {_specularColor = newValue}
  }
  /// Returns true if `specularColor` has been explicitly set.
  var hasSpecularColor: Bool {return self._specularColor != nil}
  /// Clears the value of `specularColor`. Subsequent reads from it will return its default value.
  mutating func clearSpecularColor() {self._specularColor = nil}

  var intensity: Float {
    get {return _intensity ?? 0}
    set {_intensity = newValue}
  }
  /// Returns true if `intensity` has been explicitly set.
  var hasIntensity: Bool {return self._intensity != nil}
  /// Clears the value of `intensity`. Subsequent reads from it will return its default value.
  mutating func clearIntensity() {self._intensity = nil}

  var attenuation: TSCH_Chart3DVectorArchive {
    get {return _attenuation ?? TSCH_Chart3DVectorArchive()}
    set {_attenuation = newValue}
  }
  /// Returns true if `attenuation` has been explicitly set.
  var hasAttenuation: Bool {return self._attenuation != nil}
  /// Clears the value of `attenuation`. Subsequent reads from it will return its default value.
  mutating func clearAttenuation() {self._attenuation = nil}

  var coordinateSpace: UInt32 {
    get {return _coordinateSpace ?? 0}
    set {_coordinateSpace = newValue}
  }
  /// Returns true if `coordinateSpace` has been explicitly set.
  var hasCoordinateSpace: Bool {return self._coordinateSpace != nil}
  /// Clears the value of `coordinateSpace`. Subsequent reads from it will return its default value.
  mutating func clearCoordinateSpace() {self._coordinateSpace = nil}

  var enabled: Bool {
    get {return _enabled ?? false}
    set {_enabled = newValue}
  }
  /// Returns true if `enabled` has been explicitly set.
  var hasEnabled: Bool {return self._enabled != nil}
  /// Clears the value of `enabled`. Subsequent reads from it will return its default value.
  mutating func clearEnabled() {self._enabled = nil}

  var pointLight: TSCH_Chart3DPointLightArchive {
    get {return _pointLight ?? TSCH_Chart3DPointLightArchive()}
    set {_pointLight = newValue}
  }
  /// Returns true if `pointLight` has been explicitly set.
  var hasPointLight: Bool {return self._pointLight != nil}
  /// Clears the value of `pointLight`. Subsequent reads from it will return its default value.
  mutating func clearPointLight() {self._pointLight = nil}

  var directionalLight: TSCH_Chart3DDirectionalLightArchive {
    get {return _directionalLight ?? TSCH_Chart3DDirectionalLightArchive()}
    set {_directionalLight = newValue}
  }
  /// Returns true if `directionalLight` has been explicitly set.
  var hasDirectionalLight: Bool {return self._directionalLight != nil}
  /// Clears the value of `directionalLight`. Subsequent reads from it will return its default value.
  mutating func clearDirectionalLight() {self._directionalLight = nil}

  var spotLight: TSCH_Chart3DSpotLightArchive {
    get {return _spotLight ?? TSCH_Chart3DSpotLightArchive()}
    set {_spotLight = newValue}
  }
  /// Returns true if `spotLight` has been explicitly set.
  var hasSpotLight: Bool {return self._spotLight != nil}
  /// Clears the value of `spotLight`. Subsequent reads from it will return its default value.
  mutating func clearSpotLight() {self._spotLight = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _ambientColor: TSCH_Chart3DVectorArchive? = nil
  fileprivate var _diffuseColor: TSCH_Chart3DVectorArchive? = nil
  fileprivate var _specularColor: TSCH_Chart3DVectorArchive? = nil
  fileprivate var _intensity: Float? = nil
  fileprivate var _attenuation: TSCH_Chart3DVectorArchive? = nil
  fileprivate var _coordinateSpace: UInt32? = nil
  fileprivate var _enabled: Bool? = nil
  fileprivate var _pointLight: TSCH_Chart3DPointLightArchive? = nil
  fileprivate var _directionalLight: TSCH_Chart3DDirectionalLightArchive? = nil
  fileprivate var _spotLight: TSCH_Chart3DSpotLightArchive? = nil
}

struct TSCH_Chart3DLightingModelArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var phong: TSCH_Chart3DPhongLightingModelArchive {
    get {return _phong ?? TSCH_Chart3DPhongLightingModelArchive()}
    set {_phong = newValue}
  }
  /// Returns true if `phong` has been explicitly set.
  var hasPhong: Bool {return self._phong != nil}
  /// Clears the value of `phong`. Subsequent reads from it will return its default value.
  mutating func clearPhong() {self._phong = nil}

  var fixedFunction: TSCH_Chart3DFixedFunctionLightingModelArchive {
    get {return _fixedFunction ?? TSCH_Chart3DFixedFunctionLightingModelArchive()}
    set {_fixedFunction = newValue}
  }
  /// Returns true if `fixedFunction` has been explicitly set.
  var hasFixedFunction: Bool {return self._fixedFunction != nil}
  /// Clears the value of `fixedFunction`. Subsequent reads from it will return its default value.
  mutating func clearFixedFunction() {self._fixedFunction = nil}

  var environment: TSCH_Chart3DEnvironmentPackageArchive {
    get {return _environment ?? TSCH_Chart3DEnvironmentPackageArchive()}
    set {_environment = newValue}
  }
  /// Returns true if `environment` has been explicitly set.
  var hasEnvironment: Bool {return self._environment != nil}
  /// Clears the value of `environment`. Subsequent reads from it will return its default value.
  mutating func clearEnvironment() {self._environment = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _phong: TSCH_Chart3DPhongLightingModelArchive? = nil
  fileprivate var _fixedFunction: TSCH_Chart3DFixedFunctionLightingModelArchive? = nil
  fileprivate var _environment: TSCH_Chart3DEnvironmentPackageArchive? = nil
}

struct TSCH_Chart3DLightingPackageArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var lights: [TSCH_Chart3DLightArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
}

struct TSCH_Chart3DTexturesMaterialArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var color: TSCH_Chart3DVectorArchive {
    get {return _color ?? TSCH_Chart3DVectorArchive()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {self._color = nil}

  var textures: [TSCH_Chart3DTSPImageDataTextureArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _color: TSCH_Chart3DVectorArchive? = nil
}

struct TSCH_Chart3DEmissiveMaterialArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_Chart3DTexturesMaterialArchive {
    get {return _super ?? TSCH_Chart3DTexturesMaterialArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var tilings: [TSCH_Chart3DImageTextureTilingArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_Chart3DTexturesMaterialArchive? = nil
}

struct TSCH_Chart3DDiffuseMaterialArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_Chart3DTexturesMaterialArchive {
    get {return _super ?? TSCH_Chart3DTexturesMaterialArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var tilings: [TSCH_Chart3DImageTextureTilingArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_Chart3DTexturesMaterialArchive? = nil
}

struct TSCH_Chart3DModulateMaterialArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_Chart3DTexturesMaterialArchive {
    get {return _super ?? TSCH_Chart3DTexturesMaterialArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var tilings: [TSCH_Chart3DImageTextureTilingArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_Chart3DTexturesMaterialArchive? = nil
}

struct TSCH_Chart3DSpecularMaterialArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_Chart3DTexturesMaterialArchive {
    get {return _super ?? TSCH_Chart3DTexturesMaterialArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var tilings: [TSCH_Chart3DImageTextureTilingArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_Chart3DTexturesMaterialArchive? = nil
}

struct TSCH_Chart3DShininessMaterialArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_Chart3DTexturesMaterialArchive {
    get {return _super ?? TSCH_Chart3DTexturesMaterialArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var tilings: [TSCH_Chart3DImageTextureTilingArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_Chart3DTexturesMaterialArchive? = nil
}

struct TSCH_Chart3DEnvironmentMaterialArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_Chart3DTexturesMaterialArchive {
    get {return _super ?? TSCH_Chart3DTexturesMaterialArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var obsoleteTilings: [TSCH_Chart3DBaseImageTextureTilingArchive] = []

  var decalMode: Bool {
    get {return _decalMode ?? false}
    set {_decalMode = newValue}
  }
  /// Returns true if `decalMode` has been explicitly set.
  var hasDecalMode: Bool {return self._decalMode != nil}
  /// Clears the value of `decalMode`. Subsequent reads from it will return its default value.
  mutating func clearDecalMode() {self._decalMode = nil}

  var tilings: [TSCH_Chart3DImageTextureTilingArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_Chart3DTexturesMaterialArchive? = nil
  fileprivate var _decalMode: Bool? = nil
}

struct TSCH_Chart3DFixedFunctionLightingModelArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var materials: TSCH_Chart3DPhongMaterialPackageArchive {
    get {return _materials ?? TSCH_Chart3DPhongMaterialPackageArchive()}
    set {_materials = newValue}
  }
  /// Returns true if `materials` has been explicitly set.
  var hasMaterials: Bool {return self._materials != nil}
  /// Clears the value of `materials`. Subsequent reads from it will return its default value.
  mutating func clearMaterials() {self._materials = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _materials: TSCH_Chart3DPhongMaterialPackageArchive? = nil
}

struct TSCH_Chart3DPhongLightingModelArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var materials: TSCH_Chart3DPhongMaterialPackageArchive {
    get {return _materials ?? TSCH_Chart3DPhongMaterialPackageArchive()}
    set {_materials = newValue}
  }
  /// Returns true if `materials` has been explicitly set.
  var hasMaterials: Bool {return self._materials != nil}
  /// Clears the value of `materials`. Subsequent reads from it will return its default value.
  mutating func clearMaterials() {self._materials = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _materials: TSCH_Chart3DPhongMaterialPackageArchive? = nil
}

struct TSCH_Chart3DPhongMaterialPackageArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var emissive: TSCH_Chart3DEmissiveMaterialArchive {
    get {return _emissive ?? TSCH_Chart3DEmissiveMaterialArchive()}
    set {_emissive = newValue}
  }
  /// Returns true if `emissive` has been explicitly set.
  var hasEmissive: Bool {return self._emissive != nil}
  /// Clears the value of `emissive`. Subsequent reads from it will return its default value.
  mutating func clearEmissive() {self._emissive = nil}

  var diffuse: TSCH_Chart3DDiffuseMaterialArchive {
    get {return _diffuse ?? TSCH_Chart3DDiffuseMaterialArchive()}
    set {_diffuse = newValue}
  }
  /// Returns true if `diffuse` has been explicitly set.
  var hasDiffuse: Bool {return self._diffuse != nil}
  /// Clears the value of `diffuse`. Subsequent reads from it will return its default value.
  mutating func clearDiffuse() {self._diffuse = nil}

  var modulate: TSCH_Chart3DModulateMaterialArchive {
    get {return _modulate ?? TSCH_Chart3DModulateMaterialArchive()}
    set {_modulate = newValue}
  }
  /// Returns true if `modulate` has been explicitly set.
  var hasModulate: Bool {return self._modulate != nil}
  /// Clears the value of `modulate`. Subsequent reads from it will return its default value.
  mutating func clearModulate() {self._modulate = nil}

  var specular: TSCH_Chart3DSpecularMaterialArchive {
    get {return _specular ?? TSCH_Chart3DSpecularMaterialArchive()}
    set {_specular = newValue}
  }
  /// Returns true if `specular` has been explicitly set.
  var hasSpecular: Bool {return self._specular != nil}
  /// Clears the value of `specular`. Subsequent reads from it will return its default value.
  mutating func clearSpecular() {self._specular = nil}

  var shininess: TSCH_Chart3DShininessMaterialArchive {
    get {return _shininess ?? TSCH_Chart3DShininessMaterialArchive()}
    set {_shininess = newValue}
  }
  /// Returns true if `shininess` has been explicitly set.
  var hasShininess: Bool {return self._shininess != nil}
  /// Clears the value of `shininess`. Subsequent reads from it will return its default value.
  mutating func clearShininess() {self._shininess = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _emissive: TSCH_Chart3DEmissiveMaterialArchive? = nil
  fileprivate var _diffuse: TSCH_Chart3DDiffuseMaterialArchive? = nil
  fileprivate var _modulate: TSCH_Chart3DModulateMaterialArchive? = nil
  fileprivate var _specular: TSCH_Chart3DSpecularMaterialArchive? = nil
  fileprivate var _shininess: TSCH_Chart3DShininessMaterialArchive? = nil
}

struct TSCH_Chart3DTSPImageDataTextureArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: TSP_DataReference {
    get {return _data ?? TSP_DataReference()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var mipmapdata: TSP_DataReference {
    get {return _mipmapdata ?? TSP_DataReference()}
    set {_mipmapdata = newValue}
  }
  /// Returns true if `mipmapdata` has been explicitly set.
  var hasMipmapdata: Bool {return self._mipmapdata != nil}
  /// Clears the value of `mipmapdata`. Subsequent reads from it will return its default value.
  mutating func clearMipmapdata() {self._mipmapdata = nil}

  var databaseData: TSP_Reference {
    get {return _databaseData ?? TSP_Reference()}
    set {_databaseData = newValue}
  }
  /// Returns true if `databaseData` has been explicitly set.
  var hasDatabaseData: Bool {return self._databaseData != nil}
  /// Clears the value of `databaseData`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseData() {self._databaseData = nil}

  var databaseMipmapdata: TSP_Reference {
    get {return _databaseMipmapdata ?? TSP_Reference()}
    set {_databaseMipmapdata = newValue}
  }
  /// Returns true if `databaseMipmapdata` has been explicitly set.
  var hasDatabaseMipmapdata: Bool {return self._databaseMipmapdata != nil}
  /// Clears the value of `databaseMipmapdata`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseMipmapdata() {self._databaseMipmapdata = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: TSP_DataReference? = nil
  fileprivate var _mipmapdata: TSP_DataReference? = nil
  fileprivate var _databaseData: TSP_Reference? = nil
  fileprivate var _databaseMipmapdata: TSP_Reference? = nil
}

struct TSCH_Chart3DBaseImageTextureTilingArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var scale: TSCH_Chart3DVectorArchive {
    get {return _scale ?? TSCH_Chart3DVectorArchive()}
    set {_scale = newValue}
  }
  /// Returns true if `scale` has been explicitly set.
  var hasScale: Bool {return self._scale != nil}
  /// Clears the value of `scale`. Subsequent reads from it will return its default value.
  mutating func clearScale() {self._scale = nil}

  var rotation: Float {
    get {return _rotation ?? 0}
    set {_rotation = newValue}
  }
  /// Returns true if `rotation` has been explicitly set.
  var hasRotation: Bool {return self._rotation != nil}
  /// Clears the value of `rotation`. Subsequent reads from it will return its default value.
  mutating func clearRotation() {self._rotation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _scale: TSCH_Chart3DVectorArchive? = nil
  fileprivate var _rotation: Float? = nil
}

struct TSCH_Chart3DImageTextureTilingArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSCH_Chart3DBaseImageTextureTilingArchive {
    get {return _super ?? TSCH_Chart3DBaseImageTextureTilingArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var mode: TSCH_TextureTilingMode {
    get {return _mode ?? .none}
    set {_mode = newValue}
  }
  /// Returns true if `mode` has been explicitly set.
  var hasMode: Bool {return self._mode != nil}
  /// Clears the value of `mode`. Subsequent reads from it will return its default value.
  mutating func clearMode() {self._mode = nil}

  var wrap: TSCH_TextureTilingWrap {
    get {return _wrap ?? .projected}
    set {_wrap = newValue}
  }
  /// Returns true if `wrap` has been explicitly set.
  var hasWrap: Bool {return self._wrap != nil}
  /// Clears the value of `wrap`. Subsequent reads from it will return its default value.
  mutating func clearWrap() {self._wrap = nil}

  var face: TSCH_TextureTilingFace {
    get {return _face ?? .all}
    set {_face = newValue}
  }
  /// Returns true if `face` has been explicitly set.
  var hasFace: Bool {return self._face != nil}
  /// Clears the value of `face`. Subsequent reads from it will return its default value.
  mutating func clearFace() {self._face = nil}

  var xposition: TSCH_TextureTilingXPosition {
    get {return _xposition ?? .left}
    set {_xposition = newValue}
  }
  /// Returns true if `xposition` has been explicitly set.
  var hasXposition: Bool {return self._xposition != nil}
  /// Clears the value of `xposition`. Subsequent reads from it will return its default value.
  mutating func clearXposition() {self._xposition = nil}

  var yposition: TSCH_TextureTilingYPosition {
    get {return _yposition ?? .top}
    set {_yposition = newValue}
  }
  /// Returns true if `yposition` has been explicitly set.
  var hasYposition: Bool {return self._yposition != nil}
  /// Clears the value of `yposition`. Subsequent reads from it will return its default value.
  mutating func clearYposition() {self._yposition = nil}

  var scontinuity: TSCH_TextureTilingContinuity {
    get {return _scontinuity ?? .none}
    set {_scontinuity = newValue}
  }
  /// Returns true if `scontinuity` has been explicitly set.
  var hasScontinuity: Bool {return self._scontinuity != nil}
  /// Clears the value of `scontinuity`. Subsequent reads from it will return its default value.
  mutating func clearScontinuity() {self._scontinuity = nil}

  var tcontinuity: TSCH_TextureTilingContinuity {
    get {return _tcontinuity ?? .none}
    set {_tcontinuity = newValue}
  }
  /// Returns true if `tcontinuity` has been explicitly set.
  var hasTcontinuity: Bool {return self._tcontinuity != nil}
  /// Clears the value of `tcontinuity`. Subsequent reads from it will return its default value.
  mutating func clearTcontinuity() {self._tcontinuity = nil}

  var reveal: Bool {
    get {return _reveal ?? false}
    set {_reveal = newValue}
  }
  /// Returns true if `reveal` has been explicitly set.
  var hasReveal: Bool {return self._reveal != nil}
  /// Clears the value of `reveal`. Subsequent reads from it will return its default value.
  mutating func clearReveal() {self._reveal = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSCH_Chart3DBaseImageTextureTilingArchive? = nil
  fileprivate var _mode: TSCH_TextureTilingMode? = nil
  fileprivate var _wrap: TSCH_TextureTilingWrap? = nil
  fileprivate var _face: TSCH_TextureTilingFace? = nil
  fileprivate var _xposition: TSCH_TextureTilingXPosition? = nil
  fileprivate var _yposition: TSCH_TextureTilingYPosition? = nil
  fileprivate var _scontinuity: TSCH_TextureTilingContinuity? = nil
  fileprivate var _tcontinuity: TSCH_TextureTilingContinuity? = nil
  fileprivate var _reveal: Bool? = nil
}

struct TSCH_Chart3DVectorArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var x: Float {
    get {return _x ?? 0}
    set {_x = newValue}
  }
  /// Returns true if `x` has been explicitly set.
  var hasX: Bool {return self._x != nil}
  /// Clears the value of `x`. Subsequent reads from it will return its default value.
  mutating func clearX() {self._x = nil}

  var y: Float {
    get {return _y ?? 0}
    set {_y = newValue}
  }
  /// Returns true if `y` has been explicitly set.
  var hasY: Bool {return self._y != nil}
  /// Clears the value of `y`. Subsequent reads from it will return its default value.
  mutating func clearY() {self._y = nil}

  var z: Float {
    get {return _z ?? 0}
    set {_z = newValue}
  }
  /// Returns true if `z` has been explicitly set.
  var hasZ: Bool {return self._z != nil}
  /// Clears the value of `z`. Subsequent reads from it will return its default value.
  mutating func clearZ() {self._z = nil}

  var w: Float {
    get {return _w ?? 0}
    set {_w = newValue}
  }
  /// Returns true if `w` has been explicitly set.
  var hasW: Bool {return self._w != nil}
  /// Clears the value of `w`. Subsequent reads from it will return its default value.
  mutating func clearW() {self._w = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _x: Float? = nil
  fileprivate var _y: Float? = nil
  fileprivate var _z: Float? = nil
  fileprivate var _w: Float? = nil
}

// MARK: - Extension support defined in TSCH3DArchives.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension TSD_FillArchive {

  var TSCH_fill3D: TSCH_Chart3DFillArchive {
    get {return getExtensionValue(ext: TSCH_Extensions_fill3d) ?? TSCH_Chart3DFillArchive()}
    set {setExtensionValue(ext: TSCH_Extensions_fill3d, value: newValue)}
  }
  /// Returns true if extension `TSCH_Extensions_fill3d`
  /// has been explicitly set.
  var hasTSCH_fill3D: Bool {
    return hasExtensionValue(ext: TSCH_Extensions_fill3d)
  }
  /// Clears the value of extension `TSCH_Extensions_fill3d`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSCH_fill3D() {
    clearExtensionValue(ext: TSCH_Extensions_fill3d)
  }

}

// MARK: - File's ExtensionMap: TSCH_Tsch3Darchives_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let TSCH_Tsch3Darchives_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  TSCH_Extensions_fill3d
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

let TSCH_Extensions_fill3d = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TSCH_Chart3DFillArchive>, TSD_FillArchive>(
  _protobuf_fieldNumber: 100,
  fieldName: "TSCH.fill3d"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TSCH"

extension TSCH_TextureTilingMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "textureTilingModeNone"),
    1: .same(proto: "textureTilingModeTallest"),
  ]
}

extension TSCH_TextureTilingFace: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "textureTilingFaceAll"),
    1: .same(proto: "textureTilingFaceTopAndBottom"),
    2: .same(proto: "textureTilingFaceSide"),
  ]
}

extension TSCH_TextureTilingWrap: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "textureTilingWrapProjected"),
    1: .same(proto: "textureTilingWrapFaceWrap"),
  ]
}

extension TSCH_TextureTilingXPosition: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "textureTilingXPositionLeft"),
    1: .same(proto: "textureTilingXPositionCenter"),
    2: .same(proto: "textureTilingXPositionRight"),
  ]
}

extension TSCH_TextureTilingYPosition: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "textureTilingYPositionTop"),
    1: .same(proto: "textureTilingYPositionMiddle"),
    2: .same(proto: "textureTilingYPositionBottom"),
  ]
}

extension TSCH_TextureTilingContinuity: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "textureTilingContinuityNone"),
    1: .same(proto: "textureTilingContinuityGlobal"),
    2: .same(proto: "textureTilingContinuitySeries"),
    3: .same(proto: "textureTilingContinuityJittered"),
  ]
}

extension TSCH_FillPropertyType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "fillPropertyTypeUndefined"),
    1: .same(proto: "fillPropertyTypeArea"),
    2: .same(proto: "fillPropertyTypeBar"),
    3: .same(proto: "fillPropertyTypeColumn"),
    4: .same(proto: "fillPropertyTypeLine"),
    5: .same(proto: "fillPropertyTypePie"),
  ]
}

extension TSCH_Chart3DEnvironmentPackageArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DEnvironmentPackageArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "materials"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.materials) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.materials)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.materials.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.materials, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DEnvironmentPackageArchive, rhs: TSCH_Chart3DEnvironmentPackageArchive) -> Bool {
    if lhs.materials != rhs.materials {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DFillArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DFillArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lightingmodel"),
    2: .standard(proto: "textureset_id"),
    3: .standard(proto: "fill_type"),
    4: .standard(proto: "series_index"),
  ]

  public var isInitialized: Bool {
    if let v = self._lightingmodel, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._lightingmodel)
      case 2: try decoder.decodeSingularStringField(value: &self._texturesetID)
      case 3: try decoder.decodeSingularEnumField(value: &self._fillType)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._seriesIndex)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._lightingmodel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._texturesetID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._fillType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._seriesIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DFillArchive, rhs: TSCH_Chart3DFillArchive) -> Bool {
    if lhs._lightingmodel != rhs._lightingmodel {return false}
    if lhs._texturesetID != rhs._texturesetID {return false}
    if lhs._fillType != rhs._fillType {return false}
    if lhs._seriesIndex != rhs._seriesIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DPointLightArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DPointLightArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
  ]

  public var isInitialized: Bool {
    if self._position == nil {return false}
    if let v = self._position, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._position)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DPointLightArchive, rhs: TSCH_Chart3DPointLightArchive) -> Bool {
    if lhs._position != rhs._position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DDirectionalLightArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DDirectionalLightArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "direction"),
  ]

  public var isInitialized: Bool {
    if self._direction == nil {return false}
    if let v = self._direction, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._direction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._direction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DDirectionalLightArchive, rhs: TSCH_Chart3DDirectionalLightArchive) -> Bool {
    if lhs._direction != rhs._direction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DSpotLightArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DSpotLightArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .same(proto: "direction"),
    3: .same(proto: "cutoff"),
    4: .same(proto: "dropoff"),
  ]

  public var isInitialized: Bool {
    if self._position == nil {return false}
    if self._direction == nil {return false}
    if self._cutoff == nil {return false}
    if self._dropoff == nil {return false}
    if let v = self._position, !v.isInitialized {return false}
    if let v = self._direction, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._position)
      case 2: try decoder.decodeSingularMessageField(value: &self._direction)
      case 3: try decoder.decodeSingularFloatField(value: &self._cutoff)
      case 4: try decoder.decodeSingularFloatField(value: &self._dropoff)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._direction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._cutoff {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }
    if let v = self._dropoff {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DSpotLightArchive, rhs: TSCH_Chart3DSpotLightArchive) -> Bool {
    if lhs._position != rhs._position {return false}
    if lhs._direction != rhs._direction {return false}
    if lhs._cutoff != rhs._cutoff {return false}
    if lhs._dropoff != rhs._dropoff {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DLightArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DLightArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "ambient_color"),
    3: .standard(proto: "diffuse_color"),
    4: .standard(proto: "specular_color"),
    5: .same(proto: "intensity"),
    6: .same(proto: "attenuation"),
    7: .standard(proto: "coordinate_space"),
    8: .same(proto: "enabled"),
    9: .standard(proto: "point_light"),
    10: .standard(proto: "directional_light"),
    11: .standard(proto: "spot_light"),
  ]

  public var isInitialized: Bool {
    if self._name == nil {return false}
    if self._ambientColor == nil {return false}
    if self._diffuseColor == nil {return false}
    if self._specularColor == nil {return false}
    if self._intensity == nil {return false}
    if self._attenuation == nil {return false}
    if self._coordinateSpace == nil {return false}
    if self._enabled == nil {return false}
    if let v = self._ambientColor, !v.isInitialized {return false}
    if let v = self._diffuseColor, !v.isInitialized {return false}
    if let v = self._specularColor, !v.isInitialized {return false}
    if let v = self._attenuation, !v.isInitialized {return false}
    if let v = self._pointLight, !v.isInitialized {return false}
    if let v = self._directionalLight, !v.isInitialized {return false}
    if let v = self._spotLight, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeSingularMessageField(value: &self._ambientColor)
      case 3: try decoder.decodeSingularMessageField(value: &self._diffuseColor)
      case 4: try decoder.decodeSingularMessageField(value: &self._specularColor)
      case 5: try decoder.decodeSingularFloatField(value: &self._intensity)
      case 6: try decoder.decodeSingularMessageField(value: &self._attenuation)
      case 7: try decoder.decodeSingularUInt32Field(value: &self._coordinateSpace)
      case 8: try decoder.decodeSingularBoolField(value: &self._enabled)
      case 9: try decoder.decodeSingularMessageField(value: &self._pointLight)
      case 10: try decoder.decodeSingularMessageField(value: &self._directionalLight)
      case 11: try decoder.decodeSingularMessageField(value: &self._spotLight)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._ambientColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._diffuseColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._specularColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._intensity {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
    }
    if let v = self._attenuation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._coordinateSpace {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._enabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._pointLight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._directionalLight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._spotLight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DLightArchive, rhs: TSCH_Chart3DLightArchive) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._ambientColor != rhs._ambientColor {return false}
    if lhs._diffuseColor != rhs._diffuseColor {return false}
    if lhs._specularColor != rhs._specularColor {return false}
    if lhs._intensity != rhs._intensity {return false}
    if lhs._attenuation != rhs._attenuation {return false}
    if lhs._coordinateSpace != rhs._coordinateSpace {return false}
    if lhs._enabled != rhs._enabled {return false}
    if lhs._pointLight != rhs._pointLight {return false}
    if lhs._directionalLight != rhs._directionalLight {return false}
    if lhs._spotLight != rhs._spotLight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DLightingModelArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DLightingModelArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "phong"),
    2: .standard(proto: "fixed_function"),
    3: .same(proto: "environment"),
  ]

  public var isInitialized: Bool {
    if let v = self._phong, !v.isInitialized {return false}
    if let v = self._fixedFunction, !v.isInitialized {return false}
    if let v = self._environment, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._phong)
      case 2: try decoder.decodeSingularMessageField(value: &self._fixedFunction)
      case 3: try decoder.decodeSingularMessageField(value: &self._environment)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._phong {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._fixedFunction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._environment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DLightingModelArchive, rhs: TSCH_Chart3DLightingModelArchive) -> Bool {
    if lhs._phong != rhs._phong {return false}
    if lhs._fixedFunction != rhs._fixedFunction {return false}
    if lhs._environment != rhs._environment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DLightingPackageArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DLightingPackageArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "lights"),
  ]

  public var isInitialized: Bool {
    if self._name == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.lights) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.lights)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.lights.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lights, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DLightingPackageArchive, rhs: TSCH_Chart3DLightingPackageArchive) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs.lights != rhs.lights {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DTexturesMaterialArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DTexturesMaterialArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "color"),
    2: .same(proto: "textures"),
  ]

  public var isInitialized: Bool {
    if self._color == nil {return false}
    if let v = self._color, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.textures) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._color)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.textures)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.textures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.textures, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DTexturesMaterialArchive, rhs: TSCH_Chart3DTexturesMaterialArchive) -> Bool {
    if lhs._color != rhs._color {return false}
    if lhs.textures != rhs.textures {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DEmissiveMaterialArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DEmissiveMaterialArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "tilings"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.tilings) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.tilings)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.tilings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tilings, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DEmissiveMaterialArchive, rhs: TSCH_Chart3DEmissiveMaterialArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.tilings != rhs.tilings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DDiffuseMaterialArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DDiffuseMaterialArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "tilings"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.tilings) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.tilings)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.tilings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tilings, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DDiffuseMaterialArchive, rhs: TSCH_Chart3DDiffuseMaterialArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.tilings != rhs.tilings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DModulateMaterialArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DModulateMaterialArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "tilings"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.tilings) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.tilings)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.tilings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tilings, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DModulateMaterialArchive, rhs: TSCH_Chart3DModulateMaterialArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.tilings != rhs.tilings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DSpecularMaterialArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DSpecularMaterialArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "tilings"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.tilings) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.tilings)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.tilings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tilings, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DSpecularMaterialArchive, rhs: TSCH_Chart3DSpecularMaterialArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.tilings != rhs.tilings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DShininessMaterialArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DShininessMaterialArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "tilings"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.tilings) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.tilings)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.tilings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tilings, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DShininessMaterialArchive, rhs: TSCH_Chart3DShininessMaterialArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.tilings != rhs.tilings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DEnvironmentMaterialArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DEnvironmentMaterialArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .standard(proto: "OBSOLETE_tilings"),
    3: .same(proto: "decalMode"),
    4: .same(proto: "tilings"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.obsoleteTilings) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.tilings) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.obsoleteTilings)
      case 3: try decoder.decodeSingularBoolField(value: &self._decalMode)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.tilings)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.obsoleteTilings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.obsoleteTilings, fieldNumber: 2)
    }
    if let v = self._decalMode {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if !self.tilings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tilings, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DEnvironmentMaterialArchive, rhs: TSCH_Chart3DEnvironmentMaterialArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.obsoleteTilings != rhs.obsoleteTilings {return false}
    if lhs._decalMode != rhs._decalMode {return false}
    if lhs.tilings != rhs.tilings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DFixedFunctionLightingModelArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DFixedFunctionLightingModelArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "materials"),
  ]

  public var isInitialized: Bool {
    if self._materials == nil {return false}
    if let v = self._materials, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._materials)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._materials {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DFixedFunctionLightingModelArchive, rhs: TSCH_Chart3DFixedFunctionLightingModelArchive) -> Bool {
    if lhs._materials != rhs._materials {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DPhongLightingModelArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DPhongLightingModelArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "materials"),
  ]

  public var isInitialized: Bool {
    if self._materials == nil {return false}
    if let v = self._materials, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._materials)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._materials {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DPhongLightingModelArchive, rhs: TSCH_Chart3DPhongLightingModelArchive) -> Bool {
    if lhs._materials != rhs._materials {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DPhongMaterialPackageArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DPhongMaterialPackageArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "emissive"),
    2: .same(proto: "diffuse"),
    3: .same(proto: "modulate"),
    4: .same(proto: "specular"),
    5: .same(proto: "shininess"),
  ]

  public var isInitialized: Bool {
    if let v = self._emissive, !v.isInitialized {return false}
    if let v = self._diffuse, !v.isInitialized {return false}
    if let v = self._modulate, !v.isInitialized {return false}
    if let v = self._specular, !v.isInitialized {return false}
    if let v = self._shininess, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._emissive)
      case 2: try decoder.decodeSingularMessageField(value: &self._diffuse)
      case 3: try decoder.decodeSingularMessageField(value: &self._modulate)
      case 4: try decoder.decodeSingularMessageField(value: &self._specular)
      case 5: try decoder.decodeSingularMessageField(value: &self._shininess)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._emissive {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._diffuse {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._modulate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._specular {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._shininess {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DPhongMaterialPackageArchive, rhs: TSCH_Chart3DPhongMaterialPackageArchive) -> Bool {
    if lhs._emissive != rhs._emissive {return false}
    if lhs._diffuse != rhs._diffuse {return false}
    if lhs._modulate != rhs._modulate {return false}
    if lhs._specular != rhs._specular {return false}
    if lhs._shininess != rhs._shininess {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DTSPImageDataTextureArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DTSPImageDataTextureArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "data"),
    4: .same(proto: "mipmapdata"),
    1: .standard(proto: "database_data"),
    2: .standard(proto: "database_mipmapdata"),
  ]

  public var isInitialized: Bool {
    if let v = self._data, !v.isInitialized {return false}
    if let v = self._mipmapdata, !v.isInitialized {return false}
    if let v = self._databaseData, !v.isInitialized {return false}
    if let v = self._databaseMipmapdata, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._databaseData)
      case 2: try decoder.decodeSingularMessageField(value: &self._databaseMipmapdata)
      case 3: try decoder.decodeSingularMessageField(value: &self._data)
      case 4: try decoder.decodeSingularMessageField(value: &self._mipmapdata)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._databaseData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._databaseMipmapdata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._mipmapdata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DTSPImageDataTextureArchive, rhs: TSCH_Chart3DTSPImageDataTextureArchive) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs._mipmapdata != rhs._mipmapdata {return false}
    if lhs._databaseData != rhs._databaseData {return false}
    if lhs._databaseMipmapdata != rhs._databaseMipmapdata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DBaseImageTextureTilingArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DBaseImageTextureTilingArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scale"),
    2: .same(proto: "rotation"),
  ]

  public var isInitialized: Bool {
    if let v = self._scale, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._scale)
      case 2: try decoder.decodeSingularFloatField(value: &self._rotation)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._scale {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._rotation {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DBaseImageTextureTilingArchive, rhs: TSCH_Chart3DBaseImageTextureTilingArchive) -> Bool {
    if lhs._scale != rhs._scale {return false}
    if lhs._rotation != rhs._rotation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DImageTextureTilingArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DImageTextureTilingArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "mode"),
    3: .same(proto: "wrap"),
    4: .same(proto: "face"),
    5: .same(proto: "xposition"),
    6: .same(proto: "yposition"),
    7: .same(proto: "scontinuity"),
    8: .same(proto: "tcontinuity"),
    9: .same(proto: "reveal"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularEnumField(value: &self._mode)
      case 3: try decoder.decodeSingularEnumField(value: &self._wrap)
      case 4: try decoder.decodeSingularEnumField(value: &self._face)
      case 5: try decoder.decodeSingularEnumField(value: &self._xposition)
      case 6: try decoder.decodeSingularEnumField(value: &self._yposition)
      case 7: try decoder.decodeSingularEnumField(value: &self._scontinuity)
      case 8: try decoder.decodeSingularEnumField(value: &self._tcontinuity)
      case 9: try decoder.decodeSingularBoolField(value: &self._reveal)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._mode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._wrap {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._face {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    if let v = self._xposition {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    }
    if let v = self._yposition {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    }
    if let v = self._scontinuity {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
    }
    if let v = self._tcontinuity {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
    }
    if let v = self._reveal {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DImageTextureTilingArchive, rhs: TSCH_Chart3DImageTextureTilingArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._mode != rhs._mode {return false}
    if lhs._wrap != rhs._wrap {return false}
    if lhs._face != rhs._face {return false}
    if lhs._xposition != rhs._xposition {return false}
    if lhs._yposition != rhs._yposition {return false}
    if lhs._scontinuity != rhs._scontinuity {return false}
    if lhs._tcontinuity != rhs._tcontinuity {return false}
    if lhs._reveal != rhs._reveal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSCH_Chart3DVectorArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart3DVectorArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
    4: .same(proto: "w"),
  ]

  public var isInitialized: Bool {
    if self._x == nil {return false}
    if self._y == nil {return false}
    if self._z == nil {return false}
    if self._w == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self._x)
      case 2: try decoder.decodeSingularFloatField(value: &self._y)
      case 3: try decoder.decodeSingularFloatField(value: &self._z)
      case 4: try decoder.decodeSingularFloatField(value: &self._w)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._x {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    }
    if let v = self._y {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._z {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }
    if let v = self._w {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSCH_Chart3DVectorArchive, rhs: TSCH_Chart3DVectorArchive) -> Bool {
    if lhs._x != rhs._x {return false}
    if lhs._y != rhs._y {return false}
    if lhs._z != rhs._z {return false}
    if lhs._w != rhs._w {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
