// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: KNArchives.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct KN_AnimationAttributesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var animationType: String {
    get {return _animationType ?? String()}
    set {_animationType = newValue}
  }
  /// Returns true if `animationType` has been explicitly set.
  var hasAnimationType: Bool {return self._animationType != nil}
  /// Clears the value of `animationType`. Subsequent reads from it will return its default value.
  mutating func clearAnimationType() {self._animationType = nil}

  var effect: String {
    get {return _effect ?? String()}
    set {_effect = newValue}
  }
  /// Returns true if `effect` has been explicitly set.
  var hasEffect: Bool {return self._effect != nil}
  /// Clears the value of `effect`. Subsequent reads from it will return its default value.
  mutating func clearEffect() {self._effect = nil}

  var duration: Double {
    get {return _duration ?? 0}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var direction: UInt32 {
    get {return _direction ?? 0}
    set {_direction = newValue}
  }
  /// Returns true if `direction` has been explicitly set.
  var hasDirection: Bool {return self._direction != nil}
  /// Clears the value of `direction`. Subsequent reads from it will return its default value.
  mutating func clearDirection() {self._direction = nil}

  var delay: Double {
    get {return _delay ?? 0}
    set {_delay = newValue}
  }
  /// Returns true if `delay` has been explicitly set.
  var hasDelay: Bool {return self._delay != nil}
  /// Clears the value of `delay`. Subsequent reads from it will return its default value.
  mutating func clearDelay() {self._delay = nil}

  var isAutomatic: Bool {
    get {return _isAutomatic ?? false}
    set {_isAutomatic = newValue}
  }
  /// Returns true if `isAutomatic` has been explicitly set.
  var hasIsAutomatic: Bool {return self._isAutomatic != nil}
  /// Clears the value of `isAutomatic`. Subsequent reads from it will return its default value.
  mutating func clearIsAutomatic() {self._isAutomatic = nil}

  var color: TSP_Color {
    get {return _color ?? TSP_Color()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {self._color = nil}

  var customEffectTimingCurve1: TSD_PathSourceArchive {
    get {return _customEffectTimingCurve1 ?? TSD_PathSourceArchive()}
    set {_customEffectTimingCurve1 = newValue}
  }
  /// Returns true if `customEffectTimingCurve1` has been explicitly set.
  var hasCustomEffectTimingCurve1: Bool {return self._customEffectTimingCurve1 != nil}
  /// Clears the value of `customEffectTimingCurve1`. Subsequent reads from it will return its default value.
  mutating func clearCustomEffectTimingCurve1() {self._customEffectTimingCurve1 = nil}

  var customEffectTimingCurve2: TSD_PathSourceArchive {
    get {return _customEffectTimingCurve2 ?? TSD_PathSourceArchive()}
    set {_customEffectTimingCurve2 = newValue}
  }
  /// Returns true if `customEffectTimingCurve2` has been explicitly set.
  var hasCustomEffectTimingCurve2: Bool {return self._customEffectTimingCurve2 != nil}
  /// Clears the value of `customEffectTimingCurve2`. Subsequent reads from it will return its default value.
  mutating func clearCustomEffectTimingCurve2() {self._customEffectTimingCurve2 = nil}

  var customEffectTimingCurve3: TSD_PathSourceArchive {
    get {return _customEffectTimingCurve3 ?? TSD_PathSourceArchive()}
    set {_customEffectTimingCurve3 = newValue}
  }
  /// Returns true if `customEffectTimingCurve3` has been explicitly set.
  var hasCustomEffectTimingCurve3: Bool {return self._customEffectTimingCurve3 != nil}
  /// Clears the value of `customEffectTimingCurve3`. Subsequent reads from it will return its default value.
  mutating func clearCustomEffectTimingCurve3() {self._customEffectTimingCurve3 = nil}

  var randomNumberSeed: UInt32 {
    get {return _randomNumberSeed ?? 0}
    set {_randomNumberSeed = newValue}
  }
  /// Returns true if `randomNumberSeed` has been explicitly set.
  var hasRandomNumberSeed: Bool {return self._randomNumberSeed != nil}
  /// Clears the value of `randomNumberSeed`. Subsequent reads from it will return its default value.
  mutating func clearRandomNumberSeed() {self._randomNumberSeed = nil}

  var customDetail: Double {
    get {return _customDetail ?? 0}
    set {_customDetail = newValue}
  }
  /// Returns true if `customDetail` has been explicitly set.
  var hasCustomDetail: Bool {return self._customDetail != nil}
  /// Clears the value of `customDetail`. Subsequent reads from it will return its default value.
  mutating func clearCustomDetail() {self._customDetail = nil}

  var customEffectTimingCurveThemeName1: String {
    get {return _customEffectTimingCurveThemeName1 ?? String()}
    set {_customEffectTimingCurveThemeName1 = newValue}
  }
  /// Returns true if `customEffectTimingCurveThemeName1` has been explicitly set.
  var hasCustomEffectTimingCurveThemeName1: Bool {return self._customEffectTimingCurveThemeName1 != nil}
  /// Clears the value of `customEffectTimingCurveThemeName1`. Subsequent reads from it will return its default value.
  mutating func clearCustomEffectTimingCurveThemeName1() {self._customEffectTimingCurveThemeName1 = nil}

  var customEffectTimingCurveThemeName2: String {
    get {return _customEffectTimingCurveThemeName2 ?? String()}
    set {_customEffectTimingCurveThemeName2 = newValue}
  }
  /// Returns true if `customEffectTimingCurveThemeName2` has been explicitly set.
  var hasCustomEffectTimingCurveThemeName2: Bool {return self._customEffectTimingCurveThemeName2 != nil}
  /// Clears the value of `customEffectTimingCurveThemeName2`. Subsequent reads from it will return its default value.
  mutating func clearCustomEffectTimingCurveThemeName2() {self._customEffectTimingCurveThemeName2 = nil}

  var customEffectTimingCurveThemeName3: String {
    get {return _customEffectTimingCurveThemeName3 ?? String()}
    set {_customEffectTimingCurveThemeName3 = newValue}
  }
  /// Returns true if `customEffectTimingCurveThemeName3` has been explicitly set.
  var hasCustomEffectTimingCurveThemeName3: Bool {return self._customEffectTimingCurveThemeName3 != nil}
  /// Clears the value of `customEffectTimingCurveThemeName3`. Subsequent reads from it will return its default value.
  mutating func clearCustomEffectTimingCurveThemeName3() {self._customEffectTimingCurveThemeName3 = nil}

  var writingDirectionIsRtl: Bool {
    get {return _writingDirectionIsRtl ?? false}
    set {_writingDirectionIsRtl = newValue}
  }
  /// Returns true if `writingDirectionIsRtl` has been explicitly set.
  var hasWritingDirectionIsRtl: Bool {return self._writingDirectionIsRtl != nil}
  /// Clears the value of `writingDirectionIsRtl`. Subsequent reads from it will return its default value.
  mutating func clearWritingDirectionIsRtl() {self._writingDirectionIsRtl = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _animationType: String? = nil
  fileprivate var _effect: String? = nil
  fileprivate var _duration: Double? = nil
  fileprivate var _direction: UInt32? = nil
  fileprivate var _delay: Double? = nil
  fileprivate var _isAutomatic: Bool? = nil
  fileprivate var _color: TSP_Color? = nil
  fileprivate var _customEffectTimingCurve1: TSD_PathSourceArchive? = nil
  fileprivate var _customEffectTimingCurve2: TSD_PathSourceArchive? = nil
  fileprivate var _customEffectTimingCurve3: TSD_PathSourceArchive? = nil
  fileprivate var _randomNumberSeed: UInt32? = nil
  fileprivate var _customDetail: Double? = nil
  fileprivate var _customEffectTimingCurveThemeName1: String? = nil
  fileprivate var _customEffectTimingCurveThemeName2: String? = nil
  fileprivate var _customEffectTimingCurveThemeName3: String? = nil
  fileprivate var _writingDirectionIsRtl: Bool? = nil
}

struct KN_TransitionAttributesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var animationAttributes: KN_AnimationAttributesArchive {
    get {return _storage._animationAttributes ?? KN_AnimationAttributesArchive()}
    set {_uniqueStorage()._animationAttributes = newValue}
  }
  /// Returns true if `animationAttributes` has been explicitly set.
  var hasAnimationAttributes: Bool {return _storage._animationAttributes != nil}
  /// Clears the value of `animationAttributes`. Subsequent reads from it will return its default value.
  mutating func clearAnimationAttributes() {_uniqueStorage()._animationAttributes = nil}

  var customTwist: Float {
    get {return _storage._customTwist ?? 0}
    set {_uniqueStorage()._customTwist = newValue}
  }
  /// Returns true if `customTwist` has been explicitly set.
  var hasCustomTwist: Bool {return _storage._customTwist != nil}
  /// Clears the value of `customTwist`. Subsequent reads from it will return its default value.
  mutating func clearCustomTwist() {_uniqueStorage()._customTwist = nil}

  var customMosaicSize: UInt32 {
    get {return _storage._customMosaicSize ?? 0}
    set {_uniqueStorage()._customMosaicSize = newValue}
  }
  /// Returns true if `customMosaicSize` has been explicitly set.
  var hasCustomMosaicSize: Bool {return _storage._customMosaicSize != nil}
  /// Clears the value of `customMosaicSize`. Subsequent reads from it will return its default value.
  mutating func clearCustomMosaicSize() {_uniqueStorage()._customMosaicSize = nil}

  var customMosaicType: UInt32 {
    get {return _storage._customMosaicType ?? 0}
    set {_uniqueStorage()._customMosaicType = newValue}
  }
  /// Returns true if `customMosaicType` has been explicitly set.
  var hasCustomMosaicType: Bool {return _storage._customMosaicType != nil}
  /// Clears the value of `customMosaicType`. Subsequent reads from it will return its default value.
  mutating func clearCustomMosaicType() {_uniqueStorage()._customMosaicType = nil}

  var customBounce: Bool {
    get {return _storage._customBounce ?? false}
    set {_uniqueStorage()._customBounce = newValue}
  }
  /// Returns true if `customBounce` has been explicitly set.
  var hasCustomBounce: Bool {return _storage._customBounce != nil}
  /// Clears the value of `customBounce`. Subsequent reads from it will return its default value.
  mutating func clearCustomBounce() {_uniqueStorage()._customBounce = nil}

  var customMagicMoveFadeUnmatchedObjects: Bool {
    get {return _storage._customMagicMoveFadeUnmatchedObjects ?? false}
    set {_uniqueStorage()._customMagicMoveFadeUnmatchedObjects = newValue}
  }
  /// Returns true if `customMagicMoveFadeUnmatchedObjects` has been explicitly set.
  var hasCustomMagicMoveFadeUnmatchedObjects: Bool {return _storage._customMagicMoveFadeUnmatchedObjects != nil}
  /// Clears the value of `customMagicMoveFadeUnmatchedObjects`. Subsequent reads from it will return its default value.
  mutating func clearCustomMagicMoveFadeUnmatchedObjects() {_uniqueStorage()._customMagicMoveFadeUnmatchedObjects = nil}

  var customTimingCurve: KN_TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType {
    get {return _storage._customTimingCurve ?? .linear}
    set {_uniqueStorage()._customTimingCurve = newValue}
  }
  /// Returns true if `customTimingCurve` has been explicitly set.
  var hasCustomTimingCurve: Bool {return _storage._customTimingCurve != nil}
  /// Clears the value of `customTimingCurve`. Subsequent reads from it will return its default value.
  mutating func clearCustomTimingCurve() {_uniqueStorage()._customTimingCurve = nil}

  var customTextDeliveryType: KN_TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType {
    get {return _storage._customTextDeliveryType ?? .byObject}
    set {_uniqueStorage()._customTextDeliveryType = newValue}
  }
  /// Returns true if `customTextDeliveryType` has been explicitly set.
  var hasCustomTextDeliveryType: Bool {return _storage._customTextDeliveryType != nil}
  /// Clears the value of `customTextDeliveryType`. Subsequent reads from it will return its default value.
  mutating func clearCustomTextDeliveryType() {_uniqueStorage()._customTextDeliveryType = nil}

  var customMotionBlur: Bool {
    get {return _storage._customMotionBlur ?? false}
    set {_uniqueStorage()._customMotionBlur = newValue}
  }
  /// Returns true if `customMotionBlur` has been explicitly set.
  var hasCustomMotionBlur: Bool {return _storage._customMotionBlur != nil}
  /// Clears the value of `customMotionBlur`. Subsequent reads from it will return its default value.
  mutating func clearCustomMotionBlur() {_uniqueStorage()._customMotionBlur = nil}

  var customTravelDistance: Float {
    get {return _storage._customTravelDistance ?? 0}
    set {_uniqueStorage()._customTravelDistance = newValue}
  }
  /// Returns true if `customTravelDistance` has been explicitly set.
  var hasCustomTravelDistance: Bool {return _storage._customTravelDistance != nil}
  /// Clears the value of `customTravelDistance`. Subsequent reads from it will return its default value.
  mutating func clearCustomTravelDistance() {_uniqueStorage()._customTravelDistance = nil}

  var databaseAnimationType: String {
    get {return _storage._databaseAnimationType ?? String()}
    set {_uniqueStorage()._databaseAnimationType = newValue}
  }
  /// Returns true if `databaseAnimationType` has been explicitly set.
  var hasDatabaseAnimationType: Bool {return _storage._databaseAnimationType != nil}
  /// Clears the value of `databaseAnimationType`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseAnimationType() {_uniqueStorage()._databaseAnimationType = nil}

  var databaseEffect: String {
    get {return _storage._databaseEffect ?? String()}
    set {_uniqueStorage()._databaseEffect = newValue}
  }
  /// Returns true if `databaseEffect` has been explicitly set.
  var hasDatabaseEffect: Bool {return _storage._databaseEffect != nil}
  /// Clears the value of `databaseEffect`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseEffect() {_uniqueStorage()._databaseEffect = nil}

  var databaseDuration: Double {
    get {return _storage._databaseDuration ?? 0}
    set {_uniqueStorage()._databaseDuration = newValue}
  }
  /// Returns true if `databaseDuration` has been explicitly set.
  var hasDatabaseDuration: Bool {return _storage._databaseDuration != nil}
  /// Clears the value of `databaseDuration`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseDuration() {_uniqueStorage()._databaseDuration = nil}

  var databaseDirection: UInt32 {
    get {return _storage._databaseDirection ?? 0}
    set {_uniqueStorage()._databaseDirection = newValue}
  }
  /// Returns true if `databaseDirection` has been explicitly set.
  var hasDatabaseDirection: Bool {return _storage._databaseDirection != nil}
  /// Clears the value of `databaseDirection`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseDirection() {_uniqueStorage()._databaseDirection = nil}

  var databaseDelay: Float {
    get {return _storage._databaseDelay ?? 0}
    set {_uniqueStorage()._databaseDelay = newValue}
  }
  /// Returns true if `databaseDelay` has been explicitly set.
  var hasDatabaseDelay: Bool {return _storage._databaseDelay != nil}
  /// Clears the value of `databaseDelay`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseDelay() {_uniqueStorage()._databaseDelay = nil}

  var databaseIsAutomatic: Bool {
    get {return _storage._databaseIsAutomatic ?? false}
    set {_uniqueStorage()._databaseIsAutomatic = newValue}
  }
  /// Returns true if `databaseIsAutomatic` has been explicitly set.
  var hasDatabaseIsAutomatic: Bool {return _storage._databaseIsAutomatic != nil}
  /// Clears the value of `databaseIsAutomatic`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseIsAutomatic() {_uniqueStorage()._databaseIsAutomatic = nil}

  var databaseColor: TSP_Color {
    get {return _storage._databaseColor ?? TSP_Color()}
    set {_uniqueStorage()._databaseColor = newValue}
  }
  /// Returns true if `databaseColor` has been explicitly set.
  var hasDatabaseColor: Bool {return _storage._databaseColor != nil}
  /// Clears the value of `databaseColor`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseColor() {_uniqueStorage()._databaseColor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TransitionCustomAttributesTimingCurveType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case linear // = 1
    case easeIn // = 2
    case easeOut // = 3
    case easeInEaseOut // = 4
    case custom // = 5

    init() {
      self = .linear
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .linear
      case 2: self = .easeIn
      case 3: self = .easeOut
      case 4: self = .easeInEaseOut
      case 5: self = .custom
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .linear: return 1
      case .easeIn: return 2
      case .easeOut: return 3
      case .easeInEaseOut: return 4
      case .custom: return 5
      }
    }

  }

  enum TransitionCustomAttributesTextDeliveryType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case byObject // = 1
    case byWord // = 2
    case byCharacter // = 3
    case byLine // = 4

    init() {
      self = .byObject
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .byObject
      case 2: self = .byWord
      case 3: self = .byCharacter
      case 4: self = .byLine
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .byObject: return 1
      case .byWord: return 2
      case .byCharacter: return 3
      case .byLine: return 4
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension KN_TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType: CaseIterable {
  // Support synthesized by the compiler.
}

extension KN_TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct KN_TransitionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var attributes: KN_TransitionAttributesArchive {
    get {return _attributes ?? KN_TransitionAttributesArchive()}
    set {_attributes = newValue}
  }
  /// Returns true if `attributes` has been explicitly set.
  var hasAttributes: Bool {return self._attributes != nil}
  /// Clears the value of `attributes`. Subsequent reads from it will return its default value.
  mutating func clearAttributes() {self._attributes = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _attributes: KN_TransitionAttributesArchive? = nil
}

struct KN_BuildChunkArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var build: TSP_Reference {
    get {return _build ?? TSP_Reference()}
    set {_build = newValue}
  }
  /// Returns true if `build` has been explicitly set.
  var hasBuild: Bool {return self._build != nil}
  /// Clears the value of `build`. Subsequent reads from it will return its default value.
  mutating func clearBuild() {self._build = nil}

  var index: UInt32 {
    get {return _index ?? 0}
    set {_index = newValue}
  }
  /// Returns true if `index` has been explicitly set.
  var hasIndex: Bool {return self._index != nil}
  /// Clears the value of `index`. Subsequent reads from it will return its default value.
  mutating func clearIndex() {self._index = nil}

  var delay: Double {
    get {return _delay ?? 0}
    set {_delay = newValue}
  }
  /// Returns true if `delay` has been explicitly set.
  var hasDelay: Bool {return self._delay != nil}
  /// Clears the value of `delay`. Subsequent reads from it will return its default value.
  mutating func clearDelay() {self._delay = nil}

  var duration: Double {
    get {return _duration ?? 0}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var automatic: Bool {
    get {return _automatic ?? false}
    set {_automatic = newValue}
  }
  /// Returns true if `automatic` has been explicitly set.
  var hasAutomatic: Bool {return self._automatic != nil}
  /// Clears the value of `automatic`. Subsequent reads from it will return its default value.
  mutating func clearAutomatic() {self._automatic = nil}

  var referent: Bool {
    get {return _referent ?? false}
    set {_referent = newValue}
  }
  /// Returns true if `referent` has been explicitly set.
  var hasReferent: Bool {return self._referent != nil}
  /// Clears the value of `referent`. Subsequent reads from it will return its default value.
  mutating func clearReferent() {self._referent = nil}

  var buildChunkIdentifier: KN_BuildChunkIdentifierArchive {
    get {return _buildChunkIdentifier ?? KN_BuildChunkIdentifierArchive()}
    set {_buildChunkIdentifier = newValue}
  }
  /// Returns true if `buildChunkIdentifier` has been explicitly set.
  var hasBuildChunkIdentifier: Bool {return self._buildChunkIdentifier != nil}
  /// Clears the value of `buildChunkIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearBuildChunkIdentifier() {self._buildChunkIdentifier = nil}

  var buildID: TSP_UUID {
    get {return _buildID ?? TSP_UUID()}
    set {_buildID = newValue}
  }
  /// Returns true if `buildID` has been explicitly set.
  var hasBuildID: Bool {return self._buildID != nil}
  /// Clears the value of `buildID`. Subsequent reads from it will return its default value.
  mutating func clearBuildID() {self._buildID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _build: TSP_Reference? = nil
  fileprivate var _index: UInt32? = nil
  fileprivate var _delay: Double? = nil
  fileprivate var _duration: Double? = nil
  fileprivate var _automatic: Bool? = nil
  fileprivate var _referent: Bool? = nil
  fileprivate var _buildChunkIdentifier: KN_BuildChunkIdentifierArchive? = nil
  fileprivate var _buildID: TSP_UUID? = nil
}

struct KN_BuildChunkIdentifierArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var buildID: TSP_UUID {
    get {return _buildID ?? TSP_UUID()}
    set {_buildID = newValue}
  }
  /// Returns true if `buildID` has been explicitly set.
  var hasBuildID: Bool {return self._buildID != nil}
  /// Clears the value of `buildID`. Subsequent reads from it will return its default value.
  mutating func clearBuildID() {self._buildID = nil}

  var buildChunkID: Int32 {
    get {return _buildChunkID ?? 0}
    set {_buildChunkID = newValue}
  }
  /// Returns true if `buildChunkID` has been explicitly set.
  var hasBuildChunkID: Bool {return self._buildChunkID != nil}
  /// Clears the value of `buildChunkID`. Subsequent reads from it will return its default value.
  mutating func clearBuildChunkID() {self._buildChunkID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _buildID: TSP_UUID? = nil
  fileprivate var _buildChunkID: Int32? = nil
}

struct KN_BuildAttributeValueArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var integerValue: UInt32 {
    get {return _integerValue ?? 0}
    set {_integerValue = newValue}
  }
  /// Returns true if `integerValue` has been explicitly set.
  var hasIntegerValue: Bool {return self._integerValue != nil}
  /// Clears the value of `integerValue`. Subsequent reads from it will return its default value.
  mutating func clearIntegerValue() {self._integerValue = nil}

  var doubleValue: Double {
    get {return _doubleValue ?? 0}
    set {_doubleValue = newValue}
  }
  /// Returns true if `doubleValue` has been explicitly set.
  var hasDoubleValue: Bool {return self._doubleValue != nil}
  /// Clears the value of `doubleValue`. Subsequent reads from it will return its default value.
  mutating func clearDoubleValue() {self._doubleValue = nil}

  var boolValue: Bool {
    get {return _boolValue ?? false}
    set {_boolValue = newValue}
  }
  /// Returns true if `boolValue` has been explicitly set.
  var hasBoolValue: Bool {return self._boolValue != nil}
  /// Clears the value of `boolValue`. Subsequent reads from it will return its default value.
  mutating func clearBoolValue() {self._boolValue = nil}

  var stringValue: String {
    get {return _stringValue ?? String()}
    set {_stringValue = newValue}
  }
  /// Returns true if `stringValue` has been explicitly set.
  var hasStringValue: Bool {return self._stringValue != nil}
  /// Clears the value of `stringValue`. Subsequent reads from it will return its default value.
  mutating func clearStringValue() {self._stringValue = nil}

  var pathSourceValue: TSD_PathSourceArchive {
    get {return _pathSourceValue ?? TSD_PathSourceArchive()}
    set {_pathSourceValue = newValue}
  }
  /// Returns true if `pathSourceValue` has been explicitly set.
  var hasPathSourceValue: Bool {return self._pathSourceValue != nil}
  /// Clears the value of `pathSourceValue`. Subsequent reads from it will return its default value.
  mutating func clearPathSourceValue() {self._pathSourceValue = nil}

  var colorValue: TSP_Color {
    get {return _colorValue ?? TSP_Color()}
    set {_colorValue = newValue}
  }
  /// Returns true if `colorValue` has been explicitly set.
  var hasColorValue: Bool {return self._colorValue != nil}
  /// Clears the value of `colorValue`. Subsequent reads from it will return its default value.
  mutating func clearColorValue() {self._colorValue = nil}

  var type: KN_BuildAttributeValueArchive.BuildAttributeValueType {
    get {return _type ?? .kInteger}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum BuildAttributeValueType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kInteger // = 0
    case kDouble // = 2
    case kBool // = 3
    case kString // = 4
    case kPathSource // = 5
    case kColor // = 6

    init() {
      self = .kInteger
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kInteger
      case 2: self = .kDouble
      case 3: self = .kBool
      case 4: self = .kString
      case 5: self = .kPathSource
      case 6: self = .kColor
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kInteger: return 0
      case .kDouble: return 2
      case .kBool: return 3
      case .kString: return 4
      case .kPathSource: return 5
      case .kColor: return 6
      }
    }

  }

  init() {}

  fileprivate var _integerValue: UInt32? = nil
  fileprivate var _doubleValue: Double? = nil
  fileprivate var _boolValue: Bool? = nil
  fileprivate var _stringValue: String? = nil
  fileprivate var _pathSourceValue: TSD_PathSourceArchive? = nil
  fileprivate var _colorValue: TSP_Color? = nil
  fileprivate var _type: KN_BuildAttributeValueArchive.BuildAttributeValueType? = nil
}

#if swift(>=4.2)

extension KN_BuildAttributeValueArchive.BuildAttributeValueType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct KN_BuildAttributeTupleArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var property: String {
    get {return _property ?? String()}
    set {_property = newValue}
  }
  /// Returns true if `property` has been explicitly set.
  var hasProperty: Bool {return self._property != nil}
  /// Clears the value of `property`. Subsequent reads from it will return its default value.
  mutating func clearProperty() {self._property = nil}

  var value: KN_BuildAttributeValueArchive {
    get {return _value ?? KN_BuildAttributeValueArchive()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var buildID: TSP_UUID {
    get {return _buildID ?? TSP_UUID()}
    set {_buildID = newValue}
  }
  /// Returns true if `buildID` has been explicitly set.
  var hasBuildID: Bool {return self._buildID != nil}
  /// Clears the value of `buildID`. Subsequent reads from it will return its default value.
  mutating func clearBuildID() {self._buildID = nil}

  var buildChunkIdentifier: KN_BuildChunkIdentifierArchive {
    get {return _buildChunkIdentifier ?? KN_BuildChunkIdentifierArchive()}
    set {_buildChunkIdentifier = newValue}
  }
  /// Returns true if `buildChunkIdentifier` has been explicitly set.
  var hasBuildChunkIdentifier: Bool {return self._buildChunkIdentifier != nil}
  /// Clears the value of `buildChunkIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearBuildChunkIdentifier() {self._buildChunkIdentifier = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _property: String? = nil
  fileprivate var _value: KN_BuildAttributeValueArchive? = nil
  fileprivate var _buildID: TSP_UUID? = nil
  fileprivate var _buildChunkIdentifier: KN_BuildChunkIdentifierArchive? = nil
}

struct KN_BuildAttributesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var animationAttributes: KN_AnimationAttributesArchive {
    get {return _storage._animationAttributes ?? KN_AnimationAttributesArchive()}
    set {_uniqueStorage()._animationAttributes = newValue}
  }
  /// Returns true if `animationAttributes` has been explicitly set.
  var hasAnimationAttributes: Bool {return _storage._animationAttributes != nil}
  /// Clears the value of `animationAttributes`. Subsequent reads from it will return its default value.
  mutating func clearAnimationAttributes() {_uniqueStorage()._animationAttributes = nil}

  var eventTrigger: UInt32 {
    get {return _storage._eventTrigger ?? 0}
    set {_uniqueStorage()._eventTrigger = newValue}
  }
  /// Returns true if `eventTrigger` has been explicitly set.
  var hasEventTrigger: Bool {return _storage._eventTrigger != nil}
  /// Clears the value of `eventTrigger`. Subsequent reads from it will return its default value.
  mutating func clearEventTrigger() {_uniqueStorage()._eventTrigger = nil}

  var delayAutomaticAfter: Double {
    get {return _storage._delayAutomaticAfter ?? 0}
    set {_uniqueStorage()._delayAutomaticAfter = newValue}
  }
  /// Returns true if `delayAutomaticAfter` has been explicitly set.
  var hasDelayAutomaticAfter: Bool {return _storage._delayAutomaticAfter != nil}
  /// Clears the value of `delayAutomaticAfter`. Subsequent reads from it will return its default value.
  mutating func clearDelayAutomaticAfter() {_uniqueStorage()._delayAutomaticAfter = nil}

  var delayAutomaticWith: Double {
    get {return _storage._delayAutomaticWith ?? 0}
    set {_uniqueStorage()._delayAutomaticWith = newValue}
  }
  /// Returns true if `delayAutomaticWith` has been explicitly set.
  var hasDelayAutomaticWith: Bool {return _storage._delayAutomaticWith != nil}
  /// Clears the value of `delayAutomaticWith`. Subsequent reads from it will return its default value.
  mutating func clearDelayAutomaticWith() {_uniqueStorage()._delayAutomaticWith = nil}

  var curveStyle: KN_BuildAttributesArchive.BuildAttributesCurveStyle {
    get {return _storage._curveStyle ?? .kStraight}
    set {_uniqueStorage()._curveStyle = newValue}
  }
  /// Returns true if `curveStyle` has been explicitly set.
  var hasCurveStyle: Bool {return _storage._curveStyle != nil}
  /// Clears the value of `curveStyle`. Subsequent reads from it will return its default value.
  mutating func clearCurveStyle() {_uniqueStorage()._curveStyle = nil}

  var chartRotation3D: Double {
    get {return _storage._chartRotation3D ?? 0}
    set {_uniqueStorage()._chartRotation3D = newValue}
  }
  /// Returns true if `chartRotation3D` has been explicitly set.
  var hasChartRotation3D: Bool {return _storage._chartRotation3D != nil}
  /// Clears the value of `chartRotation3D`. Subsequent reads from it will return its default value.
  mutating func clearChartRotation3D() {_uniqueStorage()._chartRotation3D = nil}

  var startOffset: UInt32 {
    get {return _storage._startOffset ?? 0}
    set {_uniqueStorage()._startOffset = newValue}
  }
  /// Returns true if `startOffset` has been explicitly set.
  var hasStartOffset: Bool {return _storage._startOffset != nil}
  /// Clears the value of `startOffset`. Subsequent reads from it will return its default value.
  mutating func clearStartOffset() {_uniqueStorage()._startOffset = nil}

  var endOffset: UInt32 {
    get {return _storage._endOffset ?? 0}
    set {_uniqueStorage()._endOffset = newValue}
  }
  /// Returns true if `endOffset` has been explicitly set.
  var hasEndOffset: Bool {return _storage._endOffset != nil}
  /// Clears the value of `endOffset`. Subsequent reads from it will return its default value.
  mutating func clearEndOffset() {_uniqueStorage()._endOffset = nil}

  var actionRotationAngle: Double {
    get {return _storage._actionRotationAngle ?? 0}
    set {_uniqueStorage()._actionRotationAngle = newValue}
  }
  /// Returns true if `actionRotationAngle` has been explicitly set.
  var hasActionRotationAngle: Bool {return _storage._actionRotationAngle != nil}
  /// Clears the value of `actionRotationAngle`. Subsequent reads from it will return its default value.
  mutating func clearActionRotationAngle() {_uniqueStorage()._actionRotationAngle = nil}

  var actionRotationDirection: KN_BuildAttributesArchive.BuildAttributesRotationDirection {
    get {return _storage._actionRotationDirection ?? .kClockwise}
    set {_uniqueStorage()._actionRotationDirection = newValue}
  }
  /// Returns true if `actionRotationDirection` has been explicitly set.
  var hasActionRotationDirection: Bool {return _storage._actionRotationDirection != nil}
  /// Clears the value of `actionRotationDirection`. Subsequent reads from it will return its default value.
  mutating func clearActionRotationDirection() {_uniqueStorage()._actionRotationDirection = nil}

  var actionScaleSize: Double {
    get {return _storage._actionScaleSize ?? 0}
    set {_uniqueStorage()._actionScaleSize = newValue}
  }
  /// Returns true if `actionScaleSize` has been explicitly set.
  var hasActionScaleSize: Bool {return _storage._actionScaleSize != nil}
  /// Clears the value of `actionScaleSize`. Subsequent reads from it will return its default value.
  mutating func clearActionScaleSize() {_uniqueStorage()._actionScaleSize = nil}

  var actionColorAlpha: Double {
    get {return _storage._actionColorAlpha ?? 0}
    set {_uniqueStorage()._actionColorAlpha = newValue}
  }
  /// Returns true if `actionColorAlpha` has been explicitly set.
  var hasActionColorAlpha: Bool {return _storage._actionColorAlpha != nil}
  /// Clears the value of `actionColorAlpha`. Subsequent reads from it will return its default value.
  mutating func clearActionColorAlpha() {_uniqueStorage()._actionColorAlpha = nil}

  var actionAcceleration: KN_BuildAttributesArchive.BuildAttributesAcceleration {
    get {return _storage._actionAcceleration ?? .kNone}
    set {_uniqueStorage()._actionAcceleration = newValue}
  }
  /// Returns true if `actionAcceleration` has been explicitly set.
  var hasActionAcceleration: Bool {return _storage._actionAcceleration != nil}
  /// Clears the value of `actionAcceleration`. Subsequent reads from it will return its default value.
  mutating func clearActionAcceleration() {_uniqueStorage()._actionAcceleration = nil}

  var actionMotionPathSource: TSD_PathSourceArchive {
    get {return _storage._actionMotionPathSource ?? TSD_PathSourceArchive()}
    set {_uniqueStorage()._actionMotionPathSource = newValue}
  }
  /// Returns true if `actionMotionPathSource` has been explicitly set.
  var hasActionMotionPathSource: Bool {return _storage._actionMotionPathSource != nil}
  /// Clears the value of `actionMotionPathSource`. Subsequent reads from it will return its default value.
  mutating func clearActionMotionPathSource() {_uniqueStorage()._actionMotionPathSource = nil}

  var customBounce: Bool {
    get {return _storage._customBounce ?? false}
    set {_uniqueStorage()._customBounce = newValue}
  }
  /// Returns true if `customBounce` has been explicitly set.
  var hasCustomBounce: Bool {return _storage._customBounce != nil}
  /// Clears the value of `customBounce`. Subsequent reads from it will return its default value.
  mutating func clearCustomBounce() {_uniqueStorage()._customBounce = nil}

  var customTextDelivery: KN_BuildAttributesArchive.BuildAttributesTextDelivery {
    get {return _storage._customTextDelivery ?? .kTextDeliveryUndefined}
    set {_uniqueStorage()._customTextDelivery = newValue}
  }
  /// Returns true if `customTextDelivery` has been explicitly set.
  var hasCustomTextDelivery: Bool {return _storage._customTextDelivery != nil}
  /// Clears the value of `customTextDelivery`. Subsequent reads from it will return its default value.
  mutating func clearCustomTextDelivery() {_uniqueStorage()._customTextDelivery = nil}

  var customDeliveryOption: KN_BuildAttributesArchive.BuildAttributesDeliveryOption {
    get {return _storage._customDeliveryOption ?? .kDeliveryOptionUndefined}
    set {_uniqueStorage()._customDeliveryOption = newValue}
  }
  /// Returns true if `customDeliveryOption` has been explicitly set.
  var hasCustomDeliveryOption: Bool {return _storage._customDeliveryOption != nil}
  /// Clears the value of `customDeliveryOption`. Subsequent reads from it will return its default value.
  mutating func clearCustomDeliveryOption() {_uniqueStorage()._customDeliveryOption = nil}

  var customActionDecay: Bool {
    get {return _storage._customActionDecay ?? false}
    set {_uniqueStorage()._customActionDecay = newValue}
  }
  /// Returns true if `customActionDecay` has been explicitly set.
  var hasCustomActionDecay: Bool {return _storage._customActionDecay != nil}
  /// Clears the value of `customActionDecay`. Subsequent reads from it will return its default value.
  mutating func clearCustomActionDecay() {_uniqueStorage()._customActionDecay = nil}

  var customActionRepeatCount: UInt32 {
    get {return _storage._customActionRepeatCount ?? 0}
    set {_uniqueStorage()._customActionRepeatCount = newValue}
  }
  /// Returns true if `customActionRepeatCount` has been explicitly set.
  var hasCustomActionRepeatCount: Bool {return _storage._customActionRepeatCount != nil}
  /// Clears the value of `customActionRepeatCount`. Subsequent reads from it will return its default value.
  mutating func clearCustomActionRepeatCount() {_uniqueStorage()._customActionRepeatCount = nil}

  var customActionScale: Double {
    get {return _storage._customActionScale ?? 0}
    set {_uniqueStorage()._customActionScale = newValue}
  }
  /// Returns true if `customActionScale` has been explicitly set.
  var hasCustomActionScale: Bool {return _storage._customActionScale != nil}
  /// Clears the value of `customActionScale`. Subsequent reads from it will return its default value.
  mutating func clearCustomActionScale() {_uniqueStorage()._customActionScale = nil}

  var customActionJiggleIntensity: KN_BuildAttributesArchive.ActionBuildAttributesJiggleIntensity {
    get {return _storage._customActionJiggleIntensity ?? .kJiggleIntensitySmall}
    set {_uniqueStorage()._customActionJiggleIntensity = newValue}
  }
  /// Returns true if `customActionJiggleIntensity` has been explicitly set.
  var hasCustomActionJiggleIntensity: Bool {return _storage._customActionJiggleIntensity != nil}
  /// Clears the value of `customActionJiggleIntensity`. Subsequent reads from it will return its default value.
  mutating func clearCustomActionJiggleIntensity() {_uniqueStorage()._customActionJiggleIntensity = nil}

  var customMotionBlur: Bool {
    get {return _storage._customMotionBlur ?? false}
    set {_uniqueStorage()._customMotionBlur = newValue}
  }
  /// Returns true if `customMotionBlur` has been explicitly set.
  var hasCustomMotionBlur: Bool {return _storage._customMotionBlur != nil}
  /// Clears the value of `customMotionBlur`. Subsequent reads from it will return its default value.
  mutating func clearCustomMotionBlur() {_uniqueStorage()._customMotionBlur = nil}

  var customIncludeEndpoints: Bool {
    get {return _storage._customIncludeEndpoints ?? false}
    set {_uniqueStorage()._customIncludeEndpoints = newValue}
  }
  /// Returns true if `customIncludeEndpoints` has been explicitly set.
  var hasCustomIncludeEndpoints: Bool {return _storage._customIncludeEndpoints != nil}
  /// Clears the value of `customIncludeEndpoints`. Subsequent reads from it will return its default value.
  mutating func clearCustomIncludeEndpoints() {_uniqueStorage()._customIncludeEndpoints = nil}

  var customShine: Bool {
    get {return _storage._customShine ?? false}
    set {_uniqueStorage()._customShine = newValue}
  }
  /// Returns true if `customShine` has been explicitly set.
  var hasCustomShine: Bool {return _storage._customShine != nil}
  /// Clears the value of `customShine`. Subsequent reads from it will return its default value.
  mutating func clearCustomShine() {_uniqueStorage()._customShine = nil}

  var customScaleAmount: Double {
    get {return _storage._customScaleAmount ?? 0}
    set {_uniqueStorage()._customScaleAmount = newValue}
  }
  /// Returns true if `customScaleAmount` has been explicitly set.
  var hasCustomScaleAmount: Bool {return _storage._customScaleAmount != nil}
  /// Clears the value of `customScaleAmount`. Subsequent reads from it will return its default value.
  mutating func clearCustomScaleAmount() {_uniqueStorage()._customScaleAmount = nil}

  var customTravelDistance: Double {
    get {return _storage._customTravelDistance ?? 0}
    set {_uniqueStorage()._customTravelDistance = newValue}
  }
  /// Returns true if `customTravelDistance` has been explicitly set.
  var hasCustomTravelDistance: Bool {return _storage._customTravelDistance != nil}
  /// Clears the value of `customTravelDistance`. Subsequent reads from it will return its default value.
  mutating func clearCustomTravelDistance() {_uniqueStorage()._customTravelDistance = nil}

  var customCursor: Bool {
    get {return _storage._customCursor ?? false}
    set {_uniqueStorage()._customCursor = newValue}
  }
  /// Returns true if `customCursor` has been explicitly set.
  var hasCustomCursor: Bool {return _storage._customCursor != nil}
  /// Clears the value of `customCursor`. Subsequent reads from it will return its default value.
  mutating func clearCustomCursor() {_uniqueStorage()._customCursor = nil}

  var databaseAnimationType: String {
    get {return _storage._databaseAnimationType ?? String()}
    set {_uniqueStorage()._databaseAnimationType = newValue}
  }
  /// Returns true if `databaseAnimationType` has been explicitly set.
  var hasDatabaseAnimationType: Bool {return _storage._databaseAnimationType != nil}
  /// Clears the value of `databaseAnimationType`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseAnimationType() {_uniqueStorage()._databaseAnimationType = nil}

  var databaseEffect: String {
    get {return _storage._databaseEffect ?? String()}
    set {_uniqueStorage()._databaseEffect = newValue}
  }
  /// Returns true if `databaseEffect` has been explicitly set.
  var hasDatabaseEffect: Bool {return _storage._databaseEffect != nil}
  /// Clears the value of `databaseEffect`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseEffect() {_uniqueStorage()._databaseEffect = nil}

  var databaseDirection: UInt32 {
    get {return _storage._databaseDirection ?? 0}
    set {_uniqueStorage()._databaseDirection = newValue}
  }
  /// Returns true if `databaseDirection` has been explicitly set.
  var hasDatabaseDirection: Bool {return _storage._databaseDirection != nil}
  /// Clears the value of `databaseDirection`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseDirection() {_uniqueStorage()._databaseDirection = nil}

  var databaseDelay: Double {
    get {return _storage._databaseDelay ?? 0}
    set {_uniqueStorage()._databaseDelay = newValue}
  }
  /// Returns true if `databaseDelay` has been explicitly set.
  var hasDatabaseDelay: Bool {return _storage._databaseDelay != nil}
  /// Clears the value of `databaseDelay`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseDelay() {_uniqueStorage()._databaseDelay = nil}

  var databaseDuration: Double {
    get {return _storage._databaseDuration ?? 0}
    set {_uniqueStorage()._databaseDuration = newValue}
  }
  /// Returns true if `databaseDuration` has been explicitly set.
  var hasDatabaseDuration: Bool {return _storage._databaseDuration != nil}
  /// Clears the value of `databaseDuration`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseDuration() {_uniqueStorage()._databaseDuration = nil}

  var databaseColor: TSP_Color {
    get {return _storage._databaseColor ?? TSP_Color()}
    set {_uniqueStorage()._databaseColor = newValue}
  }
  /// Returns true if `databaseColor` has been explicitly set.
  var hasDatabaseColor: Bool {return _storage._databaseColor != nil}
  /// Clears the value of `databaseColor`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseColor() {_uniqueStorage()._databaseColor = nil}

  var motionPathString: String {
    get {return _storage._motionPathString ?? String()}
    set {_uniqueStorage()._motionPathString = newValue}
  }
  /// Returns true if `motionPathString` has been explicitly set.
  var hasMotionPathString: Bool {return _storage._motionPathString != nil}
  /// Clears the value of `motionPathString`. Subsequent reads from it will return its default value.
  mutating func clearMotionPathString() {_uniqueStorage()._motionPathString = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum BuildAttributesAcceleration: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kNone // = 0
    case kEaseIn // = 1
    case kEaseOut // = 2
    case kEaseBoth // = 3
    case kCustom // = 4

    init() {
      self = .kNone
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kNone
      case 1: self = .kEaseIn
      case 2: self = .kEaseOut
      case 3: self = .kEaseBoth
      case 4: self = .kCustom
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kNone: return 0
      case .kEaseIn: return 1
      case .kEaseOut: return 2
      case .kEaseBoth: return 3
      case .kCustom: return 4
      }
    }

  }

  enum BuildAttributesRotationDirection: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kClockwise // = 31
    case kCounterclockwise // = 32

    init() {
      self = .kClockwise
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 31: self = .kClockwise
      case 32: self = .kCounterclockwise
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kClockwise: return 31
      case .kCounterclockwise: return 32
      }
    }

  }

  enum BuildAttributesCurveStyle: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kStraight // = 0
    case kCurved // = 1

    init() {
      self = .kStraight
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kStraight
      case 1: self = .kCurved
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kStraight: return 0
      case .kCurved: return 1
      }
    }

  }

  enum BuildAttributesTextDelivery: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kTextDeliveryUndefined // = 0
    case kTextDeliveryByObject // = 1
    case kTextDeliveryByWord // = 2
    case kTextDeliveryByCharacter // = 3
    case kTextDeliveryByLine // = 4

    init() {
      self = .kTextDeliveryUndefined
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kTextDeliveryUndefined
      case 1: self = .kTextDeliveryByObject
      case 2: self = .kTextDeliveryByWord
      case 3: self = .kTextDeliveryByCharacter
      case 4: self = .kTextDeliveryByLine
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kTextDeliveryUndefined: return 0
      case .kTextDeliveryByObject: return 1
      case .kTextDeliveryByWord: return 2
      case .kTextDeliveryByCharacter: return 3
      case .kTextDeliveryByLine: return 4
      }
    }

  }

  enum BuildAttributesDeliveryOption: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kDeliveryOptionUndefined // = 0
    case kDeliveryOptionForward // = 1
    case kDeliveryOptionBackward // = 2
    case kDeliveryOptionFromCenter // = 3
    case kDeliveryOptionFromEdges // = 4
    case kDeliveryOptionRandom // = 5

    init() {
      self = .kDeliveryOptionUndefined
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kDeliveryOptionUndefined
      case 1: self = .kDeliveryOptionForward
      case 2: self = .kDeliveryOptionBackward
      case 3: self = .kDeliveryOptionFromCenter
      case 4: self = .kDeliveryOptionFromEdges
      case 5: self = .kDeliveryOptionRandom
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kDeliveryOptionUndefined: return 0
      case .kDeliveryOptionForward: return 1
      case .kDeliveryOptionBackward: return 2
      case .kDeliveryOptionFromCenter: return 3
      case .kDeliveryOptionFromEdges: return 4
      case .kDeliveryOptionRandom: return 5
      }
    }

  }

  enum ActionBuildAttributesJiggleIntensity: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kJiggleIntensitySmall // = 0
    case kJiggleIntensityMedium // = 1
    case kJiggleIntensityLarge // = 2

    init() {
      self = .kJiggleIntensitySmall
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kJiggleIntensitySmall
      case 1: self = .kJiggleIntensityMedium
      case 2: self = .kJiggleIntensityLarge
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kJiggleIntensitySmall: return 0
      case .kJiggleIntensityMedium: return 1
      case .kJiggleIntensityLarge: return 2
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension KN_BuildAttributesArchive.BuildAttributesAcceleration: CaseIterable {
  // Support synthesized by the compiler.
}

extension KN_BuildAttributesArchive.BuildAttributesRotationDirection: CaseIterable {
  // Support synthesized by the compiler.
}

extension KN_BuildAttributesArchive.BuildAttributesCurveStyle: CaseIterable {
  // Support synthesized by the compiler.
}

extension KN_BuildAttributesArchive.BuildAttributesTextDelivery: CaseIterable {
  // Support synthesized by the compiler.
}

extension KN_BuildAttributesArchive.BuildAttributesDeliveryOption: CaseIterable {
  // Support synthesized by the compiler.
}

extension KN_BuildAttributesArchive.ActionBuildAttributesJiggleIntensity: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct KN_BuildArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var drawable: TSP_Reference {
    get {return _drawable ?? TSP_Reference()}
    set {_drawable = newValue}
  }
  /// Returns true if `drawable` has been explicitly set.
  var hasDrawable: Bool {return self._drawable != nil}
  /// Clears the value of `drawable`. Subsequent reads from it will return its default value.
  mutating func clearDrawable() {self._drawable = nil}

  var delivery: String {
    get {return _delivery ?? String()}
    set {_delivery = newValue}
  }
  /// Returns true if `delivery` has been explicitly set.
  var hasDelivery: Bool {return self._delivery != nil}
  /// Clears the value of `delivery`. Subsequent reads from it will return its default value.
  mutating func clearDelivery() {self._delivery = nil}

  var duration: Double {
    get {return _duration ?? 0}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var attributes: KN_BuildAttributesArchive {
    get {return _attributes ?? KN_BuildAttributesArchive()}
    set {_attributes = newValue}
  }
  /// Returns true if `attributes` has been explicitly set.
  var hasAttributes: Bool {return self._attributes != nil}
  /// Clears the value of `attributes`. Subsequent reads from it will return its default value.
  mutating func clearAttributes() {self._attributes = nil}

  var chunkIDSeed: Int32 {
    get {return _chunkIDSeed ?? 0}
    set {_chunkIDSeed = newValue}
  }
  /// Returns true if `chunkIDSeed` has been explicitly set.
  var hasChunkIDSeed: Bool {return self._chunkIDSeed != nil}
  /// Clears the value of `chunkIDSeed`. Subsequent reads from it will return its default value.
  mutating func clearChunkIDSeed() {self._chunkIDSeed = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _drawable: TSP_Reference? = nil
  fileprivate var _delivery: String? = nil
  fileprivate var _duration: Double? = nil
  fileprivate var _attributes: KN_BuildAttributesArchive? = nil
  fileprivate var _chunkIDSeed: Int32? = nil
}

struct KN_PlaceholderArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSWP_ShapeInfoArchive {
    get {return _super ?? TSWP_ShapeInfoArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var kind: KN_PlaceholderArchive.Kind {
    get {return _kind ?? .kKindPlaceholder}
    set {_kind = newValue}
  }
  /// Returns true if `kind` has been explicitly set.
  var hasKind: Bool {return self._kind != nil}
  /// Clears the value of `kind`. Subsequent reads from it will return its default value.
  mutating func clearKind() {self._kind = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Kind: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kKindPlaceholder // = 0
    case kKindSlideNumberPlaceholder // = 1
    case kKindTitlePlaceholder // = 2
    case kKindBodyPlaceholder // = 3
    case kKindObjectPlaceholder // = 4

    init() {
      self = .kKindPlaceholder
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kKindPlaceholder
      case 1: self = .kKindSlideNumberPlaceholder
      case 2: self = .kKindTitlePlaceholder
      case 3: self = .kKindBodyPlaceholder
      case 4: self = .kKindObjectPlaceholder
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kKindPlaceholder: return 0
      case .kKindSlideNumberPlaceholder: return 1
      case .kKindTitlePlaceholder: return 2
      case .kKindBodyPlaceholder: return 3
      case .kKindObjectPlaceholder: return 4
      }
    }

  }

  init() {}

  fileprivate var _super: TSWP_ShapeInfoArchive? = nil
  fileprivate var _kind: KN_PlaceholderArchive.Kind? = nil
}

#if swift(>=4.2)

extension KN_PlaceholderArchive.Kind: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct KN_NoteArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var containedStorage: TSP_Reference {
    get {return _containedStorage ?? TSP_Reference()}
    set {_containedStorage = newValue}
  }
  /// Returns true if `containedStorage` has been explicitly set.
  var hasContainedStorage: Bool {return self._containedStorage != nil}
  /// Clears the value of `containedStorage`. Subsequent reads from it will return its default value.
  mutating func clearContainedStorage() {self._containedStorage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _containedStorage: TSP_Reference? = nil
}

struct KN_ClassicStylesheetRecordArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identifierToStyleMap: [TSS_StylesheetArchive.IdentifiedStyleEntry] = []

  var deprecatedTheme: TSP_Reference {
    get {return _deprecatedTheme ?? TSP_Reference()}
    set {_deprecatedTheme = newValue}
  }
  /// Returns true if `deprecatedTheme` has been explicitly set.
  var hasDeprecatedTheme: Bool {return self._deprecatedTheme != nil}
  /// Clears the value of `deprecatedTheme`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedTheme() {self._deprecatedTheme = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _deprecatedTheme: TSP_Reference? = nil
}

struct KN_ClassicThemeRecordArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: String {
    get {return _uuid ?? String()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  var stylesheetRecord: TSP_Reference {
    get {return _stylesheetRecord ?? TSP_Reference()}
    set {_stylesheetRecord = newValue}
  }
  /// Returns true if `stylesheetRecord` has been explicitly set.
  var hasStylesheetRecord: Bool {return self._stylesheetRecord != nil}
  /// Clears the value of `stylesheetRecord`. Subsequent reads from it will return its default value.
  mutating func clearStylesheetRecord() {self._stylesheetRecord = nil}

  var masters: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _uuid: String? = nil
  fileprivate var _stylesheetRecord: TSP_Reference? = nil
}

public struct KN_SlideArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var style: TSP_Reference {
    get {return _storage._style ?? TSP_Reference()}
    set {_uniqueStorage()._style = newValue}
  }
  /// Returns true if `style` has been explicitly set.
  var hasStyle: Bool {return _storage._style != nil}
  /// Clears the value of `style`. Subsequent reads from it will return its default value.
  mutating func clearStyle() {_uniqueStorage()._style = nil}

  var builds: [TSP_Reference] {
    get {return _storage._builds}
    set {_uniqueStorage()._builds = newValue}
  }

  var buildChunkArchives: [KN_BuildChunkArchive] {
    get {return _storage._buildChunkArchives}
    set {_uniqueStorage()._buildChunkArchives = newValue}
  }

  var buildChunks: [TSP_Reference] {
    get {return _storage._buildChunks}
    set {_uniqueStorage()._buildChunks = newValue}
  }

  var transition: KN_TransitionArchive {
    get {return _storage._transition ?? KN_TransitionArchive()}
    set {_uniqueStorage()._transition = newValue}
  }
  /// Returns true if `transition` has been explicitly set.
  var hasTransition: Bool {return _storage._transition != nil}
  /// Clears the value of `transition`. Subsequent reads from it will return its default value.
  mutating func clearTransition() {_uniqueStorage()._transition = nil}

  var titlePlaceholder: TSP_Reference {
    get {return _storage._titlePlaceholder ?? TSP_Reference()}
    set {_uniqueStorage()._titlePlaceholder = newValue}
  }
  /// Returns true if `titlePlaceholder` has been explicitly set.
  var hasTitlePlaceholder: Bool {return _storage._titlePlaceholder != nil}
  /// Clears the value of `titlePlaceholder`. Subsequent reads from it will return its default value.
  mutating func clearTitlePlaceholder() {_uniqueStorage()._titlePlaceholder = nil}

  var bodyPlaceholder: TSP_Reference {
    get {return _storage._bodyPlaceholder ?? TSP_Reference()}
    set {_uniqueStorage()._bodyPlaceholder = newValue}
  }
  /// Returns true if `bodyPlaceholder` has been explicitly set.
  var hasBodyPlaceholder: Bool {return _storage._bodyPlaceholder != nil}
  /// Clears the value of `bodyPlaceholder`. Subsequent reads from it will return its default value.
  mutating func clearBodyPlaceholder() {_uniqueStorage()._bodyPlaceholder = nil}

  var objectPlaceholder: TSP_Reference {
    get {return _storage._objectPlaceholder ?? TSP_Reference()}
    set {_uniqueStorage()._objectPlaceholder = newValue}
  }
  /// Returns true if `objectPlaceholder` has been explicitly set.
  var hasObjectPlaceholder: Bool {return _storage._objectPlaceholder != nil}
  /// Clears the value of `objectPlaceholder`. Subsequent reads from it will return its default value.
  mutating func clearObjectPlaceholder() {_uniqueStorage()._objectPlaceholder = nil}

  var slideNumberPlaceholder: TSP_Reference {
    get {return _storage._slideNumberPlaceholder ?? TSP_Reference()}
    set {_uniqueStorage()._slideNumberPlaceholder = newValue}
  }
  /// Returns true if `slideNumberPlaceholder` has been explicitly set.
  var hasSlideNumberPlaceholder: Bool {return _storage._slideNumberPlaceholder != nil}
  /// Clears the value of `slideNumberPlaceholder`. Subsequent reads from it will return its default value.
  mutating func clearSlideNumberPlaceholder() {_uniqueStorage()._slideNumberPlaceholder = nil}

  var ownedDrawables: [TSP_Reference] {
    get {return _storage._ownedDrawables}
    set {_uniqueStorage()._ownedDrawables = newValue}
  }

  var drawablesZOrder: [TSP_Reference] {
    get {return _storage._drawablesZOrder}
    set {_uniqueStorage()._drawablesZOrder = newValue}
  }

  var sageTagToInfoMap: [KN_SlideArchive.SageTagMapEntry] {
    get {return _storage._sageTagToInfoMap}
    set {_uniqueStorage()._sageTagToInfoMap = newValue}
  }

  var instructionalTextMap: KN_SlideArchive.InstructionalTextMap {
    get {return _storage._instructionalTextMap ?? KN_SlideArchive.InstructionalTextMap()}
    set {_uniqueStorage()._instructionalTextMap = newValue}
  }
  /// Returns true if `instructionalTextMap` has been explicitly set.
  var hasInstructionalTextMap: Bool {return _storage._instructionalTextMap != nil}
  /// Clears the value of `instructionalTextMap`. Subsequent reads from it will return its default value.
  mutating func clearInstructionalTextMap() {_uniqueStorage()._instructionalTextMap = nil}

  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  var titlePlaceholderGeometry: TSD_GeometryArchive {
    get {return _storage._titlePlaceholderGeometry ?? TSD_GeometryArchive()}
    set {_uniqueStorage()._titlePlaceholderGeometry = newValue}
  }
  /// Returns true if `titlePlaceholderGeometry` has been explicitly set.
  var hasTitlePlaceholderGeometry: Bool {return _storage._titlePlaceholderGeometry != nil}
  /// Clears the value of `titlePlaceholderGeometry`. Subsequent reads from it will return its default value.
  mutating func clearTitlePlaceholderGeometry() {_uniqueStorage()._titlePlaceholderGeometry = nil}

  var titlePlaceholderShapeStyleIndex: UInt32 {
    get {return _storage._titlePlaceholderShapeStyleIndex ?? 0}
    set {_uniqueStorage()._titlePlaceholderShapeStyleIndex = newValue}
  }
  /// Returns true if `titlePlaceholderShapeStyleIndex` has been explicitly set.
  var hasTitlePlaceholderShapeStyleIndex: Bool {return _storage._titlePlaceholderShapeStyleIndex != nil}
  /// Clears the value of `titlePlaceholderShapeStyleIndex`. Subsequent reads from it will return its default value.
  mutating func clearTitlePlaceholderShapeStyleIndex() {_uniqueStorage()._titlePlaceholderShapeStyleIndex = nil}

  var titlePlaceholderTextStyleIndex: UInt32 {
    get {return _storage._titlePlaceholderTextStyleIndex ?? 0}
    set {_uniqueStorage()._titlePlaceholderTextStyleIndex = newValue}
  }
  /// Returns true if `titlePlaceholderTextStyleIndex` has been explicitly set.
  var hasTitlePlaceholderTextStyleIndex: Bool {return _storage._titlePlaceholderTextStyleIndex != nil}
  /// Clears the value of `titlePlaceholderTextStyleIndex`. Subsequent reads from it will return its default value.
  mutating func clearTitlePlaceholderTextStyleIndex() {_uniqueStorage()._titlePlaceholderTextStyleIndex = nil}

  var titleLayoutProperties: TSWP_ShapeStylePropertiesArchive {
    get {return _storage._titleLayoutProperties ?? TSWP_ShapeStylePropertiesArchive()}
    set {_uniqueStorage()._titleLayoutProperties = newValue}
  }
  /// Returns true if `titleLayoutProperties` has been explicitly set.
  var hasTitleLayoutProperties: Bool {return _storage._titleLayoutProperties != nil}
  /// Clears the value of `titleLayoutProperties`. Subsequent reads from it will return its default value.
  mutating func clearTitleLayoutProperties() {_uniqueStorage()._titleLayoutProperties = nil}

  var bodyPlaceholderGeometry: TSD_GeometryArchive {
    get {return _storage._bodyPlaceholderGeometry ?? TSD_GeometryArchive()}
    set {_uniqueStorage()._bodyPlaceholderGeometry = newValue}
  }
  /// Returns true if `bodyPlaceholderGeometry` has been explicitly set.
  var hasBodyPlaceholderGeometry: Bool {return _storage._bodyPlaceholderGeometry != nil}
  /// Clears the value of `bodyPlaceholderGeometry`. Subsequent reads from it will return its default value.
  mutating func clearBodyPlaceholderGeometry() {_uniqueStorage()._bodyPlaceholderGeometry = nil}

  var bodyPlaceholderShapeStyleIndex: UInt32 {
    get {return _storage._bodyPlaceholderShapeStyleIndex ?? 0}
    set {_uniqueStorage()._bodyPlaceholderShapeStyleIndex = newValue}
  }
  /// Returns true if `bodyPlaceholderShapeStyleIndex` has been explicitly set.
  var hasBodyPlaceholderShapeStyleIndex: Bool {return _storage._bodyPlaceholderShapeStyleIndex != nil}
  /// Clears the value of `bodyPlaceholderShapeStyleIndex`. Subsequent reads from it will return its default value.
  mutating func clearBodyPlaceholderShapeStyleIndex() {_uniqueStorage()._bodyPlaceholderShapeStyleIndex = nil}

  var bodyPlaceholderTextStyleIndex: UInt32 {
    get {return _storage._bodyPlaceholderTextStyleIndex ?? 0}
    set {_uniqueStorage()._bodyPlaceholderTextStyleIndex = newValue}
  }
  /// Returns true if `bodyPlaceholderTextStyleIndex` has been explicitly set.
  var hasBodyPlaceholderTextStyleIndex: Bool {return _storage._bodyPlaceholderTextStyleIndex != nil}
  /// Clears the value of `bodyPlaceholderTextStyleIndex`. Subsequent reads from it will return its default value.
  mutating func clearBodyPlaceholderTextStyleIndex() {_uniqueStorage()._bodyPlaceholderTextStyleIndex = nil}

  var bodyLayoutProperties: TSWP_ShapeStylePropertiesArchive {
    get {return _storage._bodyLayoutProperties ?? TSWP_ShapeStylePropertiesArchive()}
    set {_uniqueStorage()._bodyLayoutProperties = newValue}
  }
  /// Returns true if `bodyLayoutProperties` has been explicitly set.
  var hasBodyLayoutProperties: Bool {return _storage._bodyLayoutProperties != nil}
  /// Clears the value of `bodyLayoutProperties`. Subsequent reads from it will return its default value.
  mutating func clearBodyLayoutProperties() {_uniqueStorage()._bodyLayoutProperties = nil}

  var slideNumberPlaceholderGeometry: TSD_GeometryArchive {
    get {return _storage._slideNumberPlaceholderGeometry ?? TSD_GeometryArchive()}
    set {_uniqueStorage()._slideNumberPlaceholderGeometry = newValue}
  }
  /// Returns true if `slideNumberPlaceholderGeometry` has been explicitly set.
  var hasSlideNumberPlaceholderGeometry: Bool {return _storage._slideNumberPlaceholderGeometry != nil}
  /// Clears the value of `slideNumberPlaceholderGeometry`. Subsequent reads from it will return its default value.
  mutating func clearSlideNumberPlaceholderGeometry() {_uniqueStorage()._slideNumberPlaceholderGeometry = nil}

  var slideNumberPlaceholderShapeStyleIndex: UInt32 {
    get {return _storage._slideNumberPlaceholderShapeStyleIndex ?? 0}
    set {_uniqueStorage()._slideNumberPlaceholderShapeStyleIndex = newValue}
  }
  /// Returns true if `slideNumberPlaceholderShapeStyleIndex` has been explicitly set.
  var hasSlideNumberPlaceholderShapeStyleIndex: Bool {return _storage._slideNumberPlaceholderShapeStyleIndex != nil}
  /// Clears the value of `slideNumberPlaceholderShapeStyleIndex`. Subsequent reads from it will return its default value.
  mutating func clearSlideNumberPlaceholderShapeStyleIndex() {_uniqueStorage()._slideNumberPlaceholderShapeStyleIndex = nil}

  var slideNumberPlaceholderTextStyleIndex: UInt32 {
    get {return _storage._slideNumberPlaceholderTextStyleIndex ?? 0}
    set {_uniqueStorage()._slideNumberPlaceholderTextStyleIndex = newValue}
  }
  /// Returns true if `slideNumberPlaceholderTextStyleIndex` has been explicitly set.
  var hasSlideNumberPlaceholderTextStyleIndex: Bool {return _storage._slideNumberPlaceholderTextStyleIndex != nil}
  /// Clears the value of `slideNumberPlaceholderTextStyleIndex`. Subsequent reads from it will return its default value.
  mutating func clearSlideNumberPlaceholderTextStyleIndex() {_uniqueStorage()._slideNumberPlaceholderTextStyleIndex = nil}

  var slideNumberLayoutProperties: TSWP_ShapeStylePropertiesArchive {
    get {return _storage._slideNumberLayoutProperties ?? TSWP_ShapeStylePropertiesArchive()}
    set {_uniqueStorage()._slideNumberLayoutProperties = newValue}
  }
  /// Returns true if `slideNumberLayoutProperties` has been explicitly set.
  var hasSlideNumberLayoutProperties: Bool {return _storage._slideNumberLayoutProperties != nil}
  /// Clears the value of `slideNumberLayoutProperties`. Subsequent reads from it will return its default value.
  mutating func clearSlideNumberLayoutProperties() {_uniqueStorage()._slideNumberLayoutProperties = nil}

  var classicStylesheetRecord: TSP_Reference {
    get {return _storage._classicStylesheetRecord ?? TSP_Reference()}
    set {_uniqueStorage()._classicStylesheetRecord = newValue}
  }
  /// Returns true if `classicStylesheetRecord` has been explicitly set.
  var hasClassicStylesheetRecord: Bool {return _storage._classicStylesheetRecord != nil}
  /// Clears the value of `classicStylesheetRecord`. Subsequent reads from it will return its default value.
  mutating func clearClassicStylesheetRecord() {_uniqueStorage()._classicStylesheetRecord = nil}

  var bodyParagraphStyles: [TSP_Reference] {
    get {return _storage._bodyParagraphStyles}
    set {_uniqueStorage()._bodyParagraphStyles = newValue}
  }

  var bodyListStyles: [TSP_Reference] {
    get {return _storage._bodyListStyles}
    set {_uniqueStorage()._bodyListStyles = newValue}
  }

  var thumbnailTextForTitlePlaceholder: String {
    get {return _storage._thumbnailTextForTitlePlaceholder ?? String()}
    set {_uniqueStorage()._thumbnailTextForTitlePlaceholder = newValue}
  }
  /// Returns true if `thumbnailTextForTitlePlaceholder` has been explicitly set.
  var hasThumbnailTextForTitlePlaceholder: Bool {return _storage._thumbnailTextForTitlePlaceholder != nil}
  /// Clears the value of `thumbnailTextForTitlePlaceholder`. Subsequent reads from it will return its default value.
  mutating func clearThumbnailTextForTitlePlaceholder() {_uniqueStorage()._thumbnailTextForTitlePlaceholder = nil}

  var thumbnailTextForBodyPlaceholder: String {
    get {return _storage._thumbnailTextForBodyPlaceholder ?? String()}
    set {_uniqueStorage()._thumbnailTextForBodyPlaceholder = newValue}
  }
  /// Returns true if `thumbnailTextForBodyPlaceholder` has been explicitly set.
  var hasThumbnailTextForBodyPlaceholder: Bool {return _storage._thumbnailTextForBodyPlaceholder != nil}
  /// Clears the value of `thumbnailTextForBodyPlaceholder`. Subsequent reads from it will return its default value.
  mutating func clearThumbnailTextForBodyPlaceholder() {_uniqueStorage()._thumbnailTextForBodyPlaceholder = nil}

  var slideObjectsLayerWithMaster: Bool {
    get {return _storage._slideObjectsLayerWithMaster ?? false}
    set {_uniqueStorage()._slideObjectsLayerWithMaster = newValue}
  }
  /// Returns true if `slideObjectsLayerWithMaster` has been explicitly set.
  var hasSlideObjectsLayerWithMaster: Bool {return _storage._slideObjectsLayerWithMaster != nil}
  /// Clears the value of `slideObjectsLayerWithMaster`. Subsequent reads from it will return its default value.
  mutating func clearSlideObjectsLayerWithMaster() {_uniqueStorage()._slideObjectsLayerWithMaster = nil}

  var master: TSP_Reference {
    get {return _storage._master ?? TSP_Reference()}
    set {_uniqueStorage()._master = newValue}
  }
  /// Returns true if `master` has been explicitly set.
  var hasMaster: Bool {return _storage._master != nil}
  /// Clears the value of `master`. Subsequent reads from it will return its default value.
  mutating func clearMaster() {_uniqueStorage()._master = nil}

  var staticGuides: [TSD_GuideArchive] {
    get {return _storage._staticGuides}
    set {_uniqueStorage()._staticGuides = newValue}
  }

  var userDefinedGuideStorage: TSP_Reference {
    get {return _storage._userDefinedGuideStorage ?? TSP_Reference()}
    set {_uniqueStorage()._userDefinedGuideStorage = newValue}
  }
  /// Returns true if `userDefinedGuideStorage` has been explicitly set.
  var hasUserDefinedGuideStorage: Bool {return _storage._userDefinedGuideStorage != nil}
  /// Clears the value of `userDefinedGuideStorage`. Subsequent reads from it will return its default value.
  mutating func clearUserDefinedGuideStorage() {_uniqueStorage()._userDefinedGuideStorage = nil}

  var inDocument: Bool {
    get {return _storage._inDocument ?? false}
    set {_uniqueStorage()._inDocument = newValue}
  }
  /// Returns true if `inDocument` has been explicitly set.
  var hasInDocument: Bool {return _storage._inDocument != nil}
  /// Clears the value of `inDocument`. Subsequent reads from it will return its default value.
  mutating func clearInDocument() {_uniqueStorage()._inDocument = nil}

  var note: TSP_Reference {
    get {return _storage._note ?? TSP_Reference()}
    set {_uniqueStorage()._note = newValue}
  }
  /// Returns true if `note` has been explicitly set.
  var hasNote: Bool {return _storage._note != nil}
  /// Clears the value of `note`. Subsequent reads from it will return its default value.
  mutating func clearNote() {_uniqueStorage()._note = nil}

  var infosUsingObjectPlaceholderGeometry: [TSP_Reference] {
    get {return _storage._infosUsingObjectPlaceholderGeometry}
    set {_uniqueStorage()._infosUsingObjectPlaceholderGeometry = newValue}
  }

  var deprecatedObjectPlaceholderVisibleForExport: Bool {
    get {return _storage._deprecatedObjectPlaceholderVisibleForExport ?? false}
    set {_uniqueStorage()._deprecatedObjectPlaceholderVisibleForExport = newValue}
  }
  /// Returns true if `deprecatedObjectPlaceholderVisibleForExport` has been explicitly set.
  var hasDeprecatedObjectPlaceholderVisibleForExport: Bool {return _storage._deprecatedObjectPlaceholderVisibleForExport != nil}
  /// Clears the value of `deprecatedObjectPlaceholderVisibleForExport`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedObjectPlaceholderVisibleForExport() {_uniqueStorage()._deprecatedObjectPlaceholderVisibleForExport = nil}

  var infoUsingObjectPlaceholderGeometry: TSP_Reference {
    get {return _storage._infoUsingObjectPlaceholderGeometry ?? TSP_Reference()}
    set {_uniqueStorage()._infoUsingObjectPlaceholderGeometry = newValue}
  }
  /// Returns true if `infoUsingObjectPlaceholderGeometry` has been explicitly set.
  var hasInfoUsingObjectPlaceholderGeometry: Bool {return _storage._infoUsingObjectPlaceholderGeometry != nil}
  /// Clears the value of `infoUsingObjectPlaceholderGeometry`. Subsequent reads from it will return its default value.
  mutating func clearInfoUsingObjectPlaceholderGeometry() {_uniqueStorage()._infoUsingObjectPlaceholderGeometry = nil}

  var infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry: Bool {
    get {return _storage._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry ?? false}
    set {_uniqueStorage()._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry = newValue}
  }
  /// Returns true if `infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry` has been explicitly set.
  var hasInfoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry: Bool {return _storage._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry != nil}
  /// Clears the value of `infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry`. Subsequent reads from it will return its default value.
  mutating func clearInfoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry() {_uniqueStorage()._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

  struct SageTagMapEntry {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var tag: String {
      get {return _tag ?? String()}
      set {_tag = newValue}
    }
    /// Returns true if `tag` has been explicitly set.
    var hasTag: Bool {return self._tag != nil}
    /// Clears the value of `tag`. Subsequent reads from it will return its default value.
    mutating func clearTag() {self._tag = nil}

    var info: TSP_Reference {
      get {return _info ?? TSP_Reference()}
      set {_info = newValue}
    }
    /// Returns true if `info` has been explicitly set.
    var hasInfo: Bool {return self._info != nil}
    /// Clears the value of `info`. Subsequent reads from it will return its default value.
    mutating func clearInfo() {self._info = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _tag: String? = nil
    fileprivate var _info: TSP_Reference? = nil
  }

  struct InstructionalTextMap {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var instructionalTextForInfos: [KN_SlideArchive.InstructionalTextMap.InstructionalTextMapEntry] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct InstructionalTextMapEntry {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var info: TSP_Reference {
        get {return _info ?? TSP_Reference()}
        set {_info = newValue}
      }
      /// Returns true if `info` has been explicitly set.
      var hasInfo: Bool {return self._info != nil}
      /// Clears the value of `info`. Subsequent reads from it will return its default value.
      mutating func clearInfo() {self._info = nil}

      var instructionalText: String {
        get {return _instructionalText ?? String()}
        set {_instructionalText = newValue}
      }
      /// Returns true if `instructionalText` has been explicitly set.
      var hasInstructionalText: Bool {return self._instructionalText != nil}
      /// Clears the value of `instructionalText`. Subsequent reads from it will return its default value.
      mutating func clearInstructionalText() {self._instructionalText = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _info: TSP_Reference? = nil
      fileprivate var _instructionalText: String? = nil
    }

    init() {}
  }

    public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_SlideNodeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var children: [TSP_Reference] {
    get {return _storage._children}
    set {_uniqueStorage()._children = newValue}
  }

  var slide: TSP_Reference {
    get {return _storage._slide ?? TSP_Reference()}
    set {_uniqueStorage()._slide = newValue}
  }
  /// Returns true if `slide` has been explicitly set.
  var hasSlide: Bool {return _storage._slide != nil}
  /// Clears the value of `slide`. Subsequent reads from it will return its default value.
  mutating func clearSlide() {_uniqueStorage()._slide = nil}

  var depth: UInt32 {
    get {return _storage._depth ?? 1}
    set {_uniqueStorage()._depth = newValue}
  }
  /// Returns true if `depth` has been explicitly set.
  var hasDepth: Bool {return _storage._depth != nil}
  /// Clears the value of `depth`. Subsequent reads from it will return its default value.
  mutating func clearDepth() {_uniqueStorage()._depth = nil}

  var thumbnails: [TSP_DataReference] {
    get {return _storage._thumbnails}
    set {_uniqueStorage()._thumbnails = newValue}
  }

  var thumbnailSizes: [TSP_Size] {
    get {return _storage._thumbnailSizes}
    set {_uniqueStorage()._thumbnailSizes = newValue}
  }

  var thumbnailsAreDirty: Bool {
    get {return _storage._thumbnailsAreDirty ?? false}
    set {_uniqueStorage()._thumbnailsAreDirty = newValue}
  }
  /// Returns true if `thumbnailsAreDirty` has been explicitly set.
  var hasThumbnailsAreDirty: Bool {return _storage._thumbnailsAreDirty != nil}
  /// Clears the value of `thumbnailsAreDirty`. Subsequent reads from it will return its default value.
  mutating func clearThumbnailsAreDirty() {_uniqueStorage()._thumbnailsAreDirty = nil}

  var digestsForDatasNeedingDownloadForThumbnail: [String] {
    get {return _storage._digestsForDatasNeedingDownloadForThumbnail}
    set {_uniqueStorage()._digestsForDatasNeedingDownloadForThumbnail = newValue}
  }

  var isHidden: Bool {
    get {return _storage._isHidden ?? false}
    set {_uniqueStorage()._isHidden = newValue}
  }
  /// Returns true if `isHidden` has been explicitly set.
  var hasIsHidden: Bool {return _storage._isHidden != nil}
  /// Clears the value of `isHidden`. Subsequent reads from it will return its default value.
  mutating func clearIsHidden() {_uniqueStorage()._isHidden = nil}

  var isCollapsed: Bool {
    get {return _storage._isCollapsed ?? false}
    set {_uniqueStorage()._isCollapsed = newValue}
  }
  /// Returns true if `isCollapsed` has been explicitly set.
  var hasIsCollapsed: Bool {return _storage._isCollapsed != nil}
  /// Clears the value of `isCollapsed`. Subsequent reads from it will return its default value.
  mutating func clearIsCollapsed() {_uniqueStorage()._isCollapsed = nil}

  var isCollapsedInOutlineView: Bool {
    get {return _storage._isCollapsedInOutlineView ?? false}
    set {_uniqueStorage()._isCollapsedInOutlineView = newValue}
  }
  /// Returns true if `isCollapsedInOutlineView` has been explicitly set.
  var hasIsCollapsedInOutlineView: Bool {return _storage._isCollapsedInOutlineView != nil}
  /// Clears the value of `isCollapsedInOutlineView`. Subsequent reads from it will return its default value.
  mutating func clearIsCollapsedInOutlineView() {_uniqueStorage()._isCollapsedInOutlineView = nil}

  var hasBodyInOutlineView_p: Bool {
    get {return _storage._hasBodyInOutlineView_p ?? false}
    set {_uniqueStorage()._hasBodyInOutlineView_p = newValue}
  }
  /// Returns true if `hasBodyInOutlineView_p` has been explicitly set.
  var hasHasBodyInOutlineView_p: Bool {return _storage._hasBodyInOutlineView_p != nil}
  /// Clears the value of `hasBodyInOutlineView_p`. Subsequent reads from it will return its default value.
  mutating func clearHasBodyInOutlineView_p() {_uniqueStorage()._hasBodyInOutlineView_p = nil}

  var hasBuilds_p: Bool {
    get {return _storage._hasBuilds_p ?? false}
    set {_uniqueStorage()._hasBuilds_p = newValue}
  }
  /// Returns true if `hasBuilds_p` has been explicitly set.
  var hasHasBuilds_p: Bool {return _storage._hasBuilds_p != nil}
  /// Clears the value of `hasBuilds_p`. Subsequent reads from it will return its default value.
  mutating func clearHasBuilds_p() {_uniqueStorage()._hasBuilds_p = nil}

  var hasTransition_p: Bool {
    get {return _storage._hasTransition_p ?? false}
    set {_uniqueStorage()._hasTransition_p = newValue}
  }
  /// Returns true if `hasTransition_p` has been explicitly set.
  var hasHasTransition_p: Bool {return _storage._hasTransition_p != nil}
  /// Clears the value of `hasTransition_p`. Subsequent reads from it will return its default value.
  mutating func clearHasTransition_p() {_uniqueStorage()._hasTransition_p = nil}

  var hasNote_p: Bool {
    get {return _storage._hasNote_p ?? false}
    set {_uniqueStorage()._hasNote_p = newValue}
  }
  /// Returns true if `hasNote_p` has been explicitly set.
  var hasHasNote_p: Bool {return _storage._hasNote_p != nil}
  /// Clears the value of `hasNote_p`. Subsequent reads from it will return its default value.
  mutating func clearHasNote_p() {_uniqueStorage()._hasNote_p = nil}

  var isSlideNumberVisible: Bool {
    get {return _storage._isSlideNumberVisible ?? false}
    set {_uniqueStorage()._isSlideNumberVisible = newValue}
  }
  /// Returns true if `isSlideNumberVisible` has been explicitly set.
  var hasIsSlideNumberVisible: Bool {return _storage._isSlideNumberVisible != nil}
  /// Clears the value of `isSlideNumberVisible`. Subsequent reads from it will return its default value.
  mutating func clearIsSlideNumberVisible() {_uniqueStorage()._isSlideNumberVisible = nil}

  var uniqueIdentifier: String {
    get {return _storage._uniqueIdentifier ?? String()}
    set {_uniqueStorage()._uniqueIdentifier = newValue}
  }
  /// Returns true if `uniqueIdentifier` has been explicitly set.
  var hasUniqueIdentifier: Bool {return _storage._uniqueIdentifier != nil}
  /// Clears the value of `uniqueIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearUniqueIdentifier() {_uniqueStorage()._uniqueIdentifier = nil}

  var copyFromSlideIdentifier: String {
    get {return _storage._copyFromSlideIdentifier ?? String()}
    set {_uniqueStorage()._copyFromSlideIdentifier = newValue}
  }
  /// Returns true if `copyFromSlideIdentifier` has been explicitly set.
  var hasCopyFromSlideIdentifier: Bool {return _storage._copyFromSlideIdentifier != nil}
  /// Clears the value of `copyFromSlideIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCopyFromSlideIdentifier() {_uniqueStorage()._copyFromSlideIdentifier = nil}

  var slideSpecificHyperlinkCount: UInt32 {
    get {return _storage._slideSpecificHyperlinkCount ?? 0}
    set {_uniqueStorage()._slideSpecificHyperlinkCount = newValue}
  }
  /// Returns true if `slideSpecificHyperlinkCount` has been explicitly set.
  var hasSlideSpecificHyperlinkCount: Bool {return _storage._slideSpecificHyperlinkCount != nil}
  /// Clears the value of `slideSpecificHyperlinkCount`. Subsequent reads from it will return its default value.
  mutating func clearSlideSpecificHyperlinkCount() {_uniqueStorage()._slideSpecificHyperlinkCount = nil}

  var buildEventCount: UInt32 {
    get {return _storage._buildEventCount ?? 0}
    set {_uniqueStorage()._buildEventCount = newValue}
  }
  /// Returns true if `buildEventCount` has been explicitly set.
  var hasBuildEventCount: Bool {return _storage._buildEventCount != nil}
  /// Clears the value of `buildEventCount`. Subsequent reads from it will return its default value.
  mutating func clearBuildEventCount() {_uniqueStorage()._buildEventCount = nil}

  var buildEventCountCacheVersion: UInt32 {
    get {return _storage._buildEventCountCacheVersion ?? 0}
    set {_uniqueStorage()._buildEventCountCacheVersion = newValue}
  }
  /// Returns true if `buildEventCountCacheVersion` has been explicitly set.
  var hasBuildEventCountCacheVersion: Bool {return _storage._buildEventCountCacheVersion != nil}
  /// Clears the value of `buildEventCountCacheVersion`. Subsequent reads from it will return its default value.
  mutating func clearBuildEventCountCacheVersion() {_uniqueStorage()._buildEventCountCacheVersion = nil}

  var buildEventCountIsUpToDate: Bool {
    get {return _storage._buildEventCountIsUpToDate ?? false}
    set {_uniqueStorage()._buildEventCountIsUpToDate = newValue}
  }
  /// Returns true if `buildEventCountIsUpToDate` has been explicitly set.
  var hasBuildEventCountIsUpToDate: Bool {return _storage._buildEventCountIsUpToDate != nil}
  /// Clears the value of `buildEventCountIsUpToDate`. Subsequent reads from it will return its default value.
  mutating func clearBuildEventCountIsUpToDate() {_uniqueStorage()._buildEventCountIsUpToDate = nil}

  var hasExplicitBuilds_p: Bool {
    get {return _storage._hasExplicitBuilds_p ?? false}
    set {_uniqueStorage()._hasExplicitBuilds_p = newValue}
  }
  /// Returns true if `hasExplicitBuilds_p` has been explicitly set.
  var hasHasExplicitBuilds_p: Bool {return _storage._hasExplicitBuilds_p != nil}
  /// Clears the value of `hasExplicitBuilds_p`. Subsequent reads from it will return its default value.
  mutating func clearHasExplicitBuilds_p() {_uniqueStorage()._hasExplicitBuilds_p = nil}

  var hasExplicitBuildsCacheVersion_p: UInt32 {
    get {return _storage._hasExplicitBuildsCacheVersion_p ?? 0}
    set {_uniqueStorage()._hasExplicitBuildsCacheVersion_p = newValue}
  }
  /// Returns true if `hasExplicitBuildsCacheVersion_p` has been explicitly set.
  var hasHasExplicitBuildsCacheVersion_p: Bool {return _storage._hasExplicitBuildsCacheVersion_p != nil}
  /// Clears the value of `hasExplicitBuildsCacheVersion_p`. Subsequent reads from it will return its default value.
  mutating func clearHasExplicitBuildsCacheVersion_p() {_uniqueStorage()._hasExplicitBuildsCacheVersion_p = nil}

  var hasExplicitBuildsIsUpToDate_p: Bool {
    get {return _storage._hasExplicitBuildsIsUpToDate_p ?? false}
    set {_uniqueStorage()._hasExplicitBuildsIsUpToDate_p = newValue}
  }
  /// Returns true if `hasExplicitBuildsIsUpToDate_p` has been explicitly set.
  var hasHasExplicitBuildsIsUpToDate_p: Bool {return _storage._hasExplicitBuildsIsUpToDate_p != nil}
  /// Clears the value of `hasExplicitBuildsIsUpToDate_p`. Subsequent reads from it will return its default value.
  mutating func clearHasExplicitBuildsIsUpToDate_p() {_uniqueStorage()._hasExplicitBuildsIsUpToDate_p = nil}

  var slideSpecificHyperlinkMap: [KN_SlideNodeArchive.SlideSpecificHyperlinkMapEntry] {
    get {return _storage._slideSpecificHyperlinkMap}
    set {_uniqueStorage()._slideSpecificHyperlinkMap = newValue}
  }

  var hasBackgroundAlpha_p: Bool {
    get {return _storage._hasBackgroundAlpha_p ?? false}
    set {_uniqueStorage()._hasBackgroundAlpha_p = newValue}
  }
  /// Returns true if `hasBackgroundAlpha_p` has been explicitly set.
  var hasHasBackgroundAlpha_p: Bool {return _storage._hasBackgroundAlpha_p != nil}
  /// Clears the value of `hasBackgroundAlpha_p`. Subsequent reads from it will return its default value.
  mutating func clearHasBackgroundAlpha_p() {_uniqueStorage()._hasBackgroundAlpha_p = nil}

  var databaseThumbnail: TSP_Reference {
    get {return _storage._databaseThumbnail ?? TSP_Reference()}
    set {_uniqueStorage()._databaseThumbnail = newValue}
  }
  /// Returns true if `databaseThumbnail` has been explicitly set.
  var hasDatabaseThumbnail: Bool {return _storage._databaseThumbnail != nil}
  /// Clears the value of `databaseThumbnail`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseThumbnail() {_uniqueStorage()._databaseThumbnail = nil}

  var databaseThumbnails: [TSP_Reference] {
    get {return _storage._databaseThumbnails}
    set {_uniqueStorage()._databaseThumbnails = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct SlideSpecificHyperlinkMapEntry {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var slideNodeIdstring: String {
      get {return _slideNodeIdstring ?? String()}
      set {_slideNodeIdstring = newValue}
    }
    /// Returns true if `slideNodeIdstring` has been explicitly set.
    var hasSlideNodeIdstring: Bool {return self._slideNodeIdstring != nil}
    /// Clears the value of `slideNodeIdstring`. Subsequent reads from it will return its default value.
    mutating func clearSlideNodeIdstring() {self._slideNodeIdstring = nil}

    var infoOrStorageIdstring: [String] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _slideNodeIdstring: String? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_DesktopUILayoutArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sidebarVisible: Bool {
    get {return _sidebarVisible ?? false}
    set {_sidebarVisible = newValue}
  }
  /// Returns true if `sidebarVisible` has been explicitly set.
  var hasSidebarVisible: Bool {return self._sidebarVisible != nil}
  /// Clears the value of `sidebarVisible`. Subsequent reads from it will return its default value.
  mutating func clearSidebarVisible() {self._sidebarVisible = nil}

  var sidebarViewMode: KN_DesktopUILayoutArchive.SidebarViewMode {
    get {return _sidebarViewMode ?? .kSidebarViewModeNavigator}
    set {_sidebarViewMode = newValue}
  }
  /// Returns true if `sidebarViewMode` has been explicitly set.
  var hasSidebarViewMode: Bool {return self._sidebarViewMode != nil}
  /// Clears the value of `sidebarViewMode`. Subsequent reads from it will return its default value.
  mutating func clearSidebarViewMode() {self._sidebarViewMode = nil}

  var notesVisible: Bool {
    get {return _notesVisible ?? false}
    set {_notesVisible = newValue}
  }
  /// Returns true if `notesVisible` has been explicitly set.
  var hasNotesVisible: Bool {return self._notesVisible != nil}
  /// Clears the value of `notesVisible`. Subsequent reads from it will return its default value.
  mutating func clearNotesVisible() {self._notesVisible = nil}

  var lightTableVisible: Bool {
    get {return _lightTableVisible ?? false}
    set {_lightTableVisible = newValue}
  }
  /// Returns true if `lightTableVisible` has been explicitly set.
  var hasLightTableVisible: Bool {return self._lightTableVisible != nil}
  /// Clears the value of `lightTableVisible`. Subsequent reads from it will return its default value.
  mutating func clearLightTableVisible() {self._lightTableVisible = nil}

  var inspectorPaneVisible: Bool {
    get {return _inspectorPaneVisible ?? true}
    set {_inspectorPaneVisible = newValue}
  }
  /// Returns true if `inspectorPaneVisible` has been explicitly set.
  var hasInspectorPaneVisible: Bool {return self._inspectorPaneVisible != nil}
  /// Clears the value of `inspectorPaneVisible`. Subsequent reads from it will return its default value.
  mutating func clearInspectorPaneVisible() {self._inspectorPaneVisible = nil}

  var inspectorPaneViewMode: KN_DesktopUILayoutArchive.InspectorPaneViewMode {
    get {return _inspectorPaneViewMode ?? .kInspectorPaneViewModeFormat}
    set {_inspectorPaneViewMode = newValue}
  }
  /// Returns true if `inspectorPaneViewMode` has been explicitly set.
  var hasInspectorPaneViewMode: Bool {return self._inspectorPaneViewMode != nil}
  /// Clears the value of `inspectorPaneViewMode`. Subsequent reads from it will return its default value.
  mutating func clearInspectorPaneViewMode() {self._inspectorPaneViewMode = nil}

  var showingMasterSlides: Bool {
    get {return _showingMasterSlides ?? false}
    set {_showingMasterSlides = newValue}
  }
  /// Returns true if `showingMasterSlides` has been explicitly set.
  var hasShowingMasterSlides: Bool {return self._showingMasterSlides != nil}
  /// Clears the value of `showingMasterSlides`. Subsequent reads from it will return its default value.
  mutating func clearShowingMasterSlides() {self._showingMasterSlides = nil}

  var inspectorPaneAutohidden: Bool {
    get {return _inspectorPaneAutohidden ?? false}
    set {_inspectorPaneAutohidden = newValue}
  }
  /// Returns true if `inspectorPaneAutohidden` has been explicitly set.
  var hasInspectorPaneAutohidden: Bool {return self._inspectorPaneAutohidden != nil}
  /// Clears the value of `inspectorPaneAutohidden`. Subsequent reads from it will return its default value.
  mutating func clearInspectorPaneAutohidden() {self._inspectorPaneAutohidden = nil}

  var elementListVisible: Bool {
    get {return _elementListVisible ?? false}
    set {_elementListVisible = newValue}
  }
  /// Returns true if `elementListVisible` has been explicitly set.
  var hasElementListVisible: Bool {return self._elementListVisible != nil}
  /// Clears the value of `elementListVisible`. Subsequent reads from it will return its default value.
  mutating func clearElementListVisible() {self._elementListVisible = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum SidebarViewMode: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kSidebarViewModeNavigator // = 0
    case kSidebarViewModeOutline // = 1

    init() {
      self = .kSidebarViewModeNavigator
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kSidebarViewModeNavigator
      case 1: self = .kSidebarViewModeOutline
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kSidebarViewModeNavigator: return 0
      case .kSidebarViewModeOutline: return 1
      }
    }

  }

  enum InspectorPaneViewMode: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kInspectorPaneViewModeFormat // = 0
    case kInspectorPaneViewModeAnimate // = 1
    case kInspectorPaneViewModeSetup // = 2

    init() {
      self = .kInspectorPaneViewModeFormat
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kInspectorPaneViewModeFormat
      case 1: self = .kInspectorPaneViewModeAnimate
      case 2: self = .kInspectorPaneViewModeSetup
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kInspectorPaneViewModeFormat: return 0
      case .kInspectorPaneViewModeAnimate: return 1
      case .kInspectorPaneViewModeSetup: return 2
      }
    }

  }

  init() {}

  fileprivate var _sidebarVisible: Bool? = nil
  fileprivate var _sidebarViewMode: KN_DesktopUILayoutArchive.SidebarViewMode? = nil
  fileprivate var _notesVisible: Bool? = nil
  fileprivate var _lightTableVisible: Bool? = nil
  fileprivate var _inspectorPaneVisible: Bool? = nil
  fileprivate var _inspectorPaneViewMode: KN_DesktopUILayoutArchive.InspectorPaneViewMode? = nil
  fileprivate var _showingMasterSlides: Bool? = nil
  fileprivate var _inspectorPaneAutohidden: Bool? = nil
  fileprivate var _elementListVisible: Bool? = nil
}

#if swift(>=4.2)

extension KN_DesktopUILayoutArchive.SidebarViewMode: CaseIterable {
  // Support synthesized by the compiler.
}

extension KN_DesktopUILayoutArchive.InspectorPaneViewMode: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct KN_UIStateArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var slideNodeToEdit: TSP_Reference {
    get {return _storage._slideNodeToEdit ?? TSP_Reference()}
    set {_uniqueStorage()._slideNodeToEdit = newValue}
  }
  /// Returns true if `slideNodeToEdit` has been explicitly set.
  var hasSlideNodeToEdit: Bool {return _storage._slideNodeToEdit != nil}
  /// Clears the value of `slideNodeToEdit`. Subsequent reads from it will return its default value.
  mutating func clearSlideNodeToEdit() {_uniqueStorage()._slideNodeToEdit = nil}

  var deprecatedMasterSlideNodeToApply: TSP_Reference {
    get {return _storage._deprecatedMasterSlideNodeToApply ?? TSP_Reference()}
    set {_uniqueStorage()._deprecatedMasterSlideNodeToApply = newValue}
  }
  /// Returns true if `deprecatedMasterSlideNodeToApply` has been explicitly set.
  var hasDeprecatedMasterSlideNodeToApply: Bool {return _storage._deprecatedMasterSlideNodeToApply != nil}
  /// Clears the value of `deprecatedMasterSlideNodeToApply`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedMasterSlideNodeToApply() {_uniqueStorage()._deprecatedMasterSlideNodeToApply = nil}

  var deprecatedSlideThumbnailSize: TSP_Size {
    get {return _storage._deprecatedSlideThumbnailSize ?? TSP_Size()}
    set {_uniqueStorage()._deprecatedSlideThumbnailSize = newValue}
  }
  /// Returns true if `deprecatedSlideThumbnailSize` has been explicitly set.
  var hasDeprecatedSlideThumbnailSize: Bool {return _storage._deprecatedSlideThumbnailSize != nil}
  /// Clears the value of `deprecatedSlideThumbnailSize`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedSlideThumbnailSize() {_uniqueStorage()._deprecatedSlideThumbnailSize = nil}

  var canvasViewScale: Float {
    get {return _storage._canvasViewScale ?? 0}
    set {_uniqueStorage()._canvasViewScale = newValue}
  }
  /// Returns true if `canvasViewScale` has been explicitly set.
  var hasCanvasViewScale: Bool {return _storage._canvasViewScale != nil}
  /// Clears the value of `canvasViewScale`. Subsequent reads from it will return its default value.
  mutating func clearCanvasViewScale() {_uniqueStorage()._canvasViewScale = nil}

  var canvasOffset: TSP_Point {
    get {return _storage._canvasOffset ?? TSP_Point()}
    set {_uniqueStorage()._canvasOffset = newValue}
  }
  /// Returns true if `canvasOffset` has been explicitly set.
  var hasCanvasOffset: Bool {return _storage._canvasOffset != nil}
  /// Clears the value of `canvasOffset`. Subsequent reads from it will return its default value.
  mutating func clearCanvasOffset() {_uniqueStorage()._canvasOffset = nil}

  var selectedSlideNodes: [TSP_Reference] {
    get {return _storage._selectedSlideNodes}
    set {_uniqueStorage()._selectedSlideNodes = newValue}
  }

  var iPhoneCanvasViewScale: Float {
    get {return _storage._iPhoneCanvasViewScale ?? 0}
    set {_uniqueStorage()._iPhoneCanvasViewScale = newValue}
  }
  /// Returns true if `iPhoneCanvasViewScale` has been explicitly set.
  var hasIPhoneCanvasViewScale: Bool {return _storage._iPhoneCanvasViewScale != nil}
  /// Clears the value of `iPhoneCanvasViewScale`. Subsequent reads from it will return its default value.
  mutating func clearIPhoneCanvasViewScale() {_uniqueStorage()._iPhoneCanvasViewScale = nil}

  var iPhoneCanvasOffset: TSP_Point {
    get {return _storage._iPhoneCanvasOffset ?? TSP_Point()}
    set {_uniqueStorage()._iPhoneCanvasOffset = newValue}
  }
  /// Returns true if `iPhoneCanvasOffset` has been explicitly set.
  var hasIPhoneCanvasOffset: Bool {return _storage._iPhoneCanvasOffset != nil}
  /// Clears the value of `iPhoneCanvasOffset`. Subsequent reads from it will return its default value.
  mutating func clearIPhoneCanvasOffset() {_uniqueStorage()._iPhoneCanvasOffset = nil}

  var iPhone568CanvasViewScale: Float {
    get {return _storage._iPhone568CanvasViewScale ?? 0}
    set {_uniqueStorage()._iPhone568CanvasViewScale = newValue}
  }
  /// Returns true if `iPhone568CanvasViewScale` has been explicitly set.
  var hasIPhone568CanvasViewScale: Bool {return _storage._iPhone568CanvasViewScale != nil}
  /// Clears the value of `iPhone568CanvasViewScale`. Subsequent reads from it will return its default value.
  mutating func clearIPhone568CanvasViewScale() {_uniqueStorage()._iPhone568CanvasViewScale = nil}

  var iPhone568CanvasOffset: TSP_Point {
    get {return _storage._iPhone568CanvasOffset ?? TSP_Point()}
    set {_uniqueStorage()._iPhone568CanvasOffset = newValue}
  }
  /// Returns true if `iPhone568CanvasOffset` has been explicitly set.
  var hasIPhone568CanvasOffset: Bool {return _storage._iPhone568CanvasOffset != nil}
  /// Clears the value of `iPhone568CanvasOffset`. Subsequent reads from it will return its default value.
  mutating func clearIPhone568CanvasOffset() {_uniqueStorage()._iPhone568CanvasOffset = nil}

  var desktopUiLayout: TSP_Reference {
    get {return _storage._desktopUiLayout ?? TSP_Reference()}
    set {_uniqueStorage()._desktopUiLayout = newValue}
  }
  /// Returns true if `desktopUiLayout` has been explicitly set.
  var hasDesktopUiLayout: Bool {return _storage._desktopUiLayout != nil}
  /// Clears the value of `desktopUiLayout`. Subsequent reads from it will return its default value.
  mutating func clearDesktopUiLayout() {_uniqueStorage()._desktopUiLayout = nil}

  var desktopSlideViewContentFitsWindow: Bool {
    get {return _storage._desktopSlideViewContentFitsWindow ?? false}
    set {_uniqueStorage()._desktopSlideViewContentFitsWindow = newValue}
  }
  /// Returns true if `desktopSlideViewContentFitsWindow` has been explicitly set.
  var hasDesktopSlideViewContentFitsWindow: Bool {return _storage._desktopSlideViewContentFitsWindow != nil}
  /// Clears the value of `desktopSlideViewContentFitsWindow`. Subsequent reads from it will return its default value.
  mutating func clearDesktopSlideViewContentFitsWindow() {_uniqueStorage()._desktopSlideViewContentFitsWindow = nil}

  var desktopCanvasViewScale: Float {
    get {return _storage._desktopCanvasViewScale ?? 0}
    set {_uniqueStorage()._desktopCanvasViewScale = newValue}
  }
  /// Returns true if `desktopCanvasViewScale` has been explicitly set.
  var hasDesktopCanvasViewScale: Bool {return _storage._desktopCanvasViewScale != nil}
  /// Clears the value of `desktopCanvasViewScale`. Subsequent reads from it will return its default value.
  mutating func clearDesktopCanvasViewScale() {_uniqueStorage()._desktopCanvasViewScale = nil}

  var desktopCanvasOffset: TSP_Point {
    get {return _storage._desktopCanvasOffset ?? TSP_Point()}
    set {_uniqueStorage()._desktopCanvasOffset = newValue}
  }
  /// Returns true if `desktopCanvasOffset` has been explicitly set.
  var hasDesktopCanvasOffset: Bool {return _storage._desktopCanvasOffset != nil}
  /// Clears the value of `desktopCanvasOffset`. Subsequent reads from it will return its default value.
  mutating func clearDesktopCanvasOffset() {_uniqueStorage()._desktopCanvasOffset = nil}

  var lightTableZoomScale: Float {
    get {return _storage._lightTableZoomScale ?? 0}
    set {_uniqueStorage()._lightTableZoomScale = newValue}
  }
  /// Returns true if `lightTableZoomScale` has been explicitly set.
  var hasLightTableZoomScale: Bool {return _storage._lightTableZoomScale != nil}
  /// Clears the value of `lightTableZoomScale`. Subsequent reads from it will return its default value.
  mutating func clearLightTableZoomScale() {_uniqueStorage()._lightTableZoomScale = nil}

  var chartUiState: [TSCH_ChartUIState] {
    get {return _storage._chartUiState}
    set {_uniqueStorage()._chartUiState = newValue}
  }

  var showSlideGuides: Bool {
    get {return _storage._showSlideGuides ?? false}
    set {_uniqueStorage()._showSlideGuides = newValue}
  }
  /// Returns true if `showSlideGuides` has been explicitly set.
  var hasShowSlideGuides: Bool {return _storage._showSlideGuides != nil}
  /// Clears the value of `showSlideGuides`. Subsequent reads from it will return its default value.
  mutating func clearShowSlideGuides() {_uniqueStorage()._showSlideGuides = nil}

  var showMasterGuides: Bool {
    get {return _storage._showMasterGuides ?? false}
    set {_uniqueStorage()._showMasterGuides = newValue}
  }
  /// Returns true if `showMasterGuides` has been explicitly set.
  var hasShowMasterGuides: Bool {return _storage._showMasterGuides != nil}
  /// Clears the value of `showMasterGuides`. Subsequent reads from it will return its default value.
  mutating func clearShowMasterGuides() {_uniqueStorage()._showMasterGuides = nil}

  var showsComments: Bool {
    get {return _storage._showsComments ?? false}
    set {_uniqueStorage()._showsComments = newValue}
  }
  /// Returns true if `showsComments` has been explicitly set.
  var hasShowsComments: Bool {return _storage._showsComments != nil}
  /// Clears the value of `showsComments`. Subsequent reads from it will return its default value.
  mutating func clearShowsComments() {_uniqueStorage()._showsComments = nil}

  var commentsPrintingToggleEnabled: Bool {
    get {return _storage._commentsPrintingToggleEnabled ?? false}
    set {_uniqueStorage()._commentsPrintingToggleEnabled = newValue}
  }
  /// Returns true if `commentsPrintingToggleEnabled` has been explicitly set.
  var hasCommentsPrintingToggleEnabled: Bool {return _storage._commentsPrintingToggleEnabled != nil}
  /// Clears the value of `commentsPrintingToggleEnabled`. Subsequent reads from it will return its default value.
  mutating func clearCommentsPrintingToggleEnabled() {_uniqueStorage()._commentsPrintingToggleEnabled = nil}

  var collapsedSlideNodes: [TSP_Reference] {
    get {return _storage._collapsedSlideNodes}
    set {_uniqueStorage()._collapsedSlideNodes = newValue}
  }

  var outlineCollapsedSlideNodes: [TSP_Reference] {
    get {return _storage._outlineCollapsedSlideNodes}
    set {_uniqueStorage()._outlineCollapsedSlideNodes = newValue}
  }

  var outlineHasBodySlideNodes: [TSP_Reference] {
    get {return _storage._outlineHasBodySlideNodes}
    set {_uniqueStorage()._outlineHasBodySlideNodes = newValue}
  }

  var showsRuler: Bool {
    get {return _storage._showsRuler ?? false}
    set {_uniqueStorage()._showsRuler = newValue}
  }
  /// Returns true if `showsRuler` has been explicitly set.
  var hasShowsRuler: Bool {return _storage._showsRuler != nil}
  /// Clears the value of `showsRuler`. Subsequent reads from it will return its default value.
  mutating func clearShowsRuler() {_uniqueStorage()._showsRuler = nil}

  var desktopNavigatorViewWidth: Float {
    get {return _storage._desktopNavigatorViewWidth ?? 0}
    set {_uniqueStorage()._desktopNavigatorViewWidth = newValue}
  }
  /// Returns true if `desktopNavigatorViewWidth` has been explicitly set.
  var hasDesktopNavigatorViewWidth: Bool {return _storage._desktopNavigatorViewWidth != nil}
  /// Clears the value of `desktopNavigatorViewWidth`. Subsequent reads from it will return its default value.
  mutating func clearDesktopNavigatorViewWidth() {_uniqueStorage()._desktopNavigatorViewWidth = nil}

  var desktopOutlineViewWidth: Float {
    get {return _storage._desktopOutlineViewWidth ?? 0}
    set {_uniqueStorage()._desktopOutlineViewWidth = newValue}
  }
  /// Returns true if `desktopOutlineViewWidth` has been explicitly set.
  var hasDesktopOutlineViewWidth: Bool {return _storage._desktopOutlineViewWidth != nil}
  /// Clears the value of `desktopOutlineViewWidth`. Subsequent reads from it will return its default value.
  mutating func clearDesktopOutlineViewWidth() {_uniqueStorage()._desktopOutlineViewWidth = nil}

  var desktopOutlineViewDefaultFixed: Bool {
    get {return _storage._desktopOutlineViewDefaultFixed ?? false}
    set {_uniqueStorage()._desktopOutlineViewDefaultFixed = newValue}
  }
  /// Returns true if `desktopOutlineViewDefaultFixed` has been explicitly set.
  var hasDesktopOutlineViewDefaultFixed: Bool {return _storage._desktopOutlineViewDefaultFixed != nil}
  /// Clears the value of `desktopOutlineViewDefaultFixed`. Subsequent reads from it will return its default value.
  mutating func clearDesktopOutlineViewDefaultFixed() {_uniqueStorage()._desktopOutlineViewDefaultFixed = nil}

  var desktopMainContentSize: TSP_Size {
    get {return _storage._desktopMainContentSize ?? TSP_Size()}
    set {_uniqueStorage()._desktopMainContentSize = newValue}
  }
  /// Returns true if `desktopMainContentSize` has been explicitly set.
  var hasDesktopMainContentSize: Bool {return _storage._desktopMainContentSize != nil}
  /// Clears the value of `desktopMainContentSize`. Subsequent reads from it will return its default value.
  mutating func clearDesktopMainContentSize() {_uniqueStorage()._desktopMainContentSize = nil}

  var desktopPresenterNotesViewHeight: Float {
    get {return _storage._desktopPresenterNotesViewHeight ?? 0}
    set {_uniqueStorage()._desktopPresenterNotesViewHeight = newValue}
  }
  /// Returns true if `desktopPresenterNotesViewHeight` has been explicitly set.
  var hasDesktopPresenterNotesViewHeight: Bool {return _storage._desktopPresenterNotesViewHeight != nil}
  /// Clears the value of `desktopPresenterNotesViewHeight`. Subsequent reads from it will return its default value.
  mutating func clearDesktopPresenterNotesViewHeight() {_uniqueStorage()._desktopPresenterNotesViewHeight = nil}

  var desktopMainWindowOrigin: TSP_Point {
    get {return _storage._desktopMainWindowOrigin ?? TSP_Point()}
    set {_uniqueStorage()._desktopMainWindowOrigin = newValue}
  }
  /// Returns true if `desktopMainWindowOrigin` has been explicitly set.
  var hasDesktopMainWindowOrigin: Bool {return _storage._desktopMainWindowOrigin != nil}
  /// Clears the value of `desktopMainWindowOrigin`. Subsequent reads from it will return its default value.
  mutating func clearDesktopMainWindowOrigin() {_uniqueStorage()._desktopMainWindowOrigin = nil}

  var lightTableHidesSkippedSlides: Bool {
    get {return _storage._lightTableHidesSkippedSlides ?? false}
    set {_uniqueStorage()._lightTableHidesSkippedSlides = newValue}
  }
  /// Returns true if `lightTableHidesSkippedSlides` has been explicitly set.
  var hasLightTableHidesSkippedSlides: Bool {return _storage._lightTableHidesSkippedSlides != nil}
  /// Clears the value of `lightTableHidesSkippedSlides`. Subsequent reads from it will return its default value.
  mutating func clearLightTableHidesSkippedSlides() {_uniqueStorage()._lightTableHidesSkippedSlides = nil}

  var selectionPath: TSK_SelectionPathArchive {
    get {return _storage._selectionPath ?? TSK_SelectionPathArchive()}
    set {_uniqueStorage()._selectionPath = newValue}
  }
  /// Returns true if `selectionPath` has been explicitly set.
  var hasSelectionPath: Bool {return _storage._selectionPath != nil}
  /// Clears the value of `selectionPath`. Subsequent reads from it will return its default value.
  mutating func clearSelectionPath() {_uniqueStorage()._selectionPath = nil}

  var desktopElementListViewWidth: Float {
    get {return _storage._desktopElementListViewWidth ?? 0}
    set {_uniqueStorage()._desktopElementListViewWidth = newValue}
  }
  /// Returns true if `desktopElementListViewWidth` has been explicitly set.
  var hasDesktopElementListViewWidth: Bool {return _storage._desktopElementListViewWidth != nil}
  /// Clears the value of `desktopElementListViewWidth`. Subsequent reads from it will return its default value.
  mutating func clearDesktopElementListViewWidth() {_uniqueStorage()._desktopElementListViewWidth = nil}

  var elementListExpandedGroups: [TSP_Reference] {
    get {return _storage._elementListExpandedGroups}
    set {_uniqueStorage()._elementListExpandedGroups = newValue}
  }

  var showsMobileLightTable: Bool {
    get {return _storage._showsMobileLightTable ?? false}
    set {_uniqueStorage()._showsMobileLightTable = newValue}
  }
  /// Returns true if `showsMobileLightTable` has been explicitly set.
  var hasShowsMobileLightTable: Bool {return _storage._showsMobileLightTable != nil}
  /// Clears the value of `showsMobileLightTable`. Subsequent reads from it will return its default value.
  mutating func clearShowsMobileLightTable() {_uniqueStorage()._showsMobileLightTable = nil}

  var mobileLightTableZoomScale: Float {
    get {return _storage._mobileLightTableZoomScale ?? 0}
    set {_uniqueStorage()._mobileLightTableZoomScale = newValue}
  }
  /// Returns true if `mobileLightTableZoomScale` has been explicitly set.
  var hasMobileLightTableZoomScale: Bool {return _storage._mobileLightTableZoomScale != nil}
  /// Clears the value of `mobileLightTableZoomScale`. Subsequent reads from it will return its default value.
  mutating func clearMobileLightTableZoomScale() {_uniqueStorage()._mobileLightTableZoomScale = nil}

  var mobileLightTableHidesSkippedSlides: Bool {
    get {return _storage._mobileLightTableHidesSkippedSlides ?? false}
    set {_uniqueStorage()._mobileLightTableHidesSkippedSlides = newValue}
  }
  /// Returns true if `mobileLightTableHidesSkippedSlides` has been explicitly set.
  var hasMobileLightTableHidesSkippedSlides: Bool {return _storage._mobileLightTableHidesSkippedSlides != nil}
  /// Clears the value of `mobileLightTableHidesSkippedSlides`. Subsequent reads from it will return its default value.
  mutating func clearMobileLightTableHidesSkippedSlides() {_uniqueStorage()._mobileLightTableHidesSkippedSlides = nil}

  var freehandDrawingToolkitState: TSP_Reference {
    get {return _storage._freehandDrawingToolkitState ?? TSP_Reference()}
    set {_uniqueStorage()._freehandDrawingToolkitState = newValue}
  }
  /// Returns true if `freehandDrawingToolkitState` has been explicitly set.
  var hasFreehandDrawingToolkitState: Bool {return _storage._freehandDrawingToolkitState != nil}
  /// Clears the value of `freehandDrawingToolkitState`. Subsequent reads from it will return its default value.
  mutating func clearFreehandDrawingToolkitState() {_uniqueStorage()._freehandDrawingToolkitState = nil}

  var selectionPathTransformer: TSP_Reference {
    get {return _storage._selectionPathTransformer ?? TSP_Reference()}
    set {_uniqueStorage()._selectionPathTransformer = newValue}
  }
  /// Returns true if `selectionPathTransformer` has been explicitly set.
  var hasSelectionPathTransformer: Bool {return _storage._selectionPathTransformer != nil}
  /// Clears the value of `selectionPathTransformer`. Subsequent reads from it will return its default value.
  mutating func clearSelectionPathTransformer() {_uniqueStorage()._selectionPathTransformer = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_IOSRestorableViewStateRootArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var savedPlaybackState: KN_IOSSavedPlaybackStateArchive {
    get {return _savedPlaybackState ?? KN_IOSSavedPlaybackStateArchive()}
    set {_savedPlaybackState = newValue}
  }
  /// Returns true if `savedPlaybackState` has been explicitly set.
  var hasSavedPlaybackState: Bool {return self._savedPlaybackState != nil}
  /// Clears the value of `savedPlaybackState`. Subsequent reads from it will return its default value.
  mutating func clearSavedPlaybackState() {self._savedPlaybackState = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _savedPlaybackState: KN_IOSSavedPlaybackStateArchive? = nil
}

struct KN_IOSSavedPlaybackStateArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var presentationType: KN_IOSSavedPlaybackStateArchive.PresentationType {
    get {return _presentationType ?? .manual}
    set {_presentationType = newValue}
  }
  /// Returns true if `presentationType` has been explicitly set.
  var hasPresentationType: Bool {return self._presentationType != nil}
  /// Clears the value of `presentationType`. Subsequent reads from it will return its default value.
  mutating func clearPresentationType() {self._presentationType = nil}

  var slideNodeIndex: UInt32 {
    get {return _slideNodeIndex ?? 0}
    set {_slideNodeIndex = newValue}
  }
  /// Returns true if `slideNodeIndex` has been explicitly set.
  var hasSlideNodeIndex: Bool {return self._slideNodeIndex != nil}
  /// Clears the value of `slideNodeIndex`. Subsequent reads from it will return its default value.
  mutating func clearSlideNodeIndex() {self._slideNodeIndex = nil}

  var eventIndex: UInt32 {
    get {return _eventIndex ?? 0}
    set {_eventIndex = newValue}
  }
  /// Returns true if `eventIndex` has been explicitly set.
  var hasEventIndex: Bool {return self._eventIndex != nil}
  /// Clears the value of `eventIndex`. Subsequent reads from it will return its default value.
  mutating func clearEventIndex() {self._eventIndex = nil}

  var breadcrumbTrail: [String] = []

  var hadExternalDisplay: Bool {
    get {return _hadExternalDisplay ?? false}
    set {_hadExternalDisplay = newValue}
  }
  /// Returns true if `hadExternalDisplay` has been explicitly set.
  var hasHadExternalDisplay: Bool {return self._hadExternalDisplay != nil}
  /// Clears the value of `hadExternalDisplay`. Subsequent reads from it will return its default value.
  mutating func clearHadExternalDisplay() {self._hadExternalDisplay = nil}

  var isElapsedTimeStarted: Bool {
    get {return _isElapsedTimeStarted ?? false}
    set {_isElapsedTimeStarted = newValue}
  }
  /// Returns true if `isElapsedTimeStarted` has been explicitly set.
  var hasIsElapsedTimeStarted: Bool {return self._isElapsedTimeStarted != nil}
  /// Clears the value of `isElapsedTimeStarted`. Subsequent reads from it will return its default value.
  mutating func clearIsElapsedTimeStarted() {self._isElapsedTimeStarted = nil}

  var elapsedTimeStartTime: Double {
    get {return _elapsedTimeStartTime ?? 0}
    set {_elapsedTimeStartTime = newValue}
  }
  /// Returns true if `elapsedTimeStartTime` has been explicitly set.
  var hasElapsedTimeStartTime: Bool {return self._elapsedTimeStartTime != nil}
  /// Clears the value of `elapsedTimeStartTime`. Subsequent reads from it will return its default value.
  mutating func clearElapsedTimeStartTime() {self._elapsedTimeStartTime = nil}

  var recordingPlaybackCurrentTime: Double {
    get {return _recordingPlaybackCurrentTime ?? 0}
    set {_recordingPlaybackCurrentTime = newValue}
  }
  /// Returns true if `recordingPlaybackCurrentTime` has been explicitly set.
  var hasRecordingPlaybackCurrentTime: Bool {return self._recordingPlaybackCurrentTime != nil}
  /// Clears the value of `recordingPlaybackCurrentTime`. Subsequent reads from it will return its default value.
  mutating func clearRecordingPlaybackCurrentTime() {self._recordingPlaybackCurrentTime = nil}

  var shouldShowSlideNavigator: Bool {
    get {return _shouldShowSlideNavigator ?? false}
    set {_shouldShowSlideNavigator = newValue}
  }
  /// Returns true if `shouldShowSlideNavigator` has been explicitly set.
  var hasShouldShowSlideNavigator: Bool {return self._shouldShowSlideNavigator != nil}
  /// Clears the value of `shouldShowSlideNavigator`. Subsequent reads from it will return its default value.
  mutating func clearShouldShowSlideNavigator() {self._shouldShowSlideNavigator = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PresentationType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case manual // = 1
    case record // = 2
    case playRecording // = 3
    case rehearse // = 4
    case showcast // = 5

    init() {
      self = .manual
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .manual
      case 2: self = .record
      case 3: self = .playRecording
      case 4: self = .rehearse
      case 5: self = .showcast
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .manual: return 1
      case .record: return 2
      case .playRecording: return 3
      case .rehearse: return 4
      case .showcast: return 5
      }
    }

  }

  init() {}

  fileprivate var _presentationType: KN_IOSSavedPlaybackStateArchive.PresentationType? = nil
  fileprivate var _slideNodeIndex: UInt32? = nil
  fileprivate var _eventIndex: UInt32? = nil
  fileprivate var _hadExternalDisplay: Bool? = nil
  fileprivate var _isElapsedTimeStarted: Bool? = nil
  fileprivate var _elapsedTimeStartTime: Double? = nil
  fileprivate var _recordingPlaybackCurrentTime: Double? = nil
  fileprivate var _shouldShowSlideNavigator: Bool? = nil
}

#if swift(>=4.2)

extension KN_IOSSavedPlaybackStateArchive.PresentationType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct KN_CanvasSelectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var infos: [TSP_Reference] = []

  var nonInteractiveInfos: [TSP_Reference] = []

  var infosForActionGhostIndexes: [TSP_Reference] = []

  var actionGhostIndexes: [TSP_IndexSet] = []

  var buildChunks: [TSP_Reference] = []

  var databaseActionGhostIndexes: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct KN_ActionGhostSelectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct KN_ThemeCustomTimingCurveArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var curve: TSD_PathSourceArchive {
    get {return _curve ?? TSD_PathSourceArchive()}
    set {_curve = newValue}
  }
  /// Returns true if `curve` has been explicitly set.
  var hasCurve: Bool {return self._curve != nil}
  /// Clears the value of `curve`. Subsequent reads from it will return its default value.
  mutating func clearCurve() {self._curve = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _curve: TSD_PathSourceArchive? = nil
}

struct KN_ThemeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSS_ThemeArchive {
    get {return _super ?? TSS_ThemeArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var masters: [TSP_Reference] = []

  var uuid: String {
    get {return _uuid ?? String()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  var classicThemeRecords: [TSP_Reference] = []

  var defaultMasterSlideNode: TSP_Reference {
    get {return _defaultMasterSlideNode ?? TSP_Reference()}
    set {_defaultMasterSlideNode = newValue}
  }
  /// Returns true if `defaultMasterSlideNode` has been explicitly set.
  var hasDefaultMasterSlideNode: Bool {return self._defaultMasterSlideNode != nil}
  /// Clears the value of `defaultMasterSlideNode`. Subsequent reads from it will return its default value.
  mutating func clearDefaultMasterSlideNode() {self._defaultMasterSlideNode = nil}

  var defaultMasterSlideNodeReference: TSP_Reference {
    get {return _defaultMasterSlideNodeReference ?? TSP_Reference()}
    set {_defaultMasterSlideNodeReference = newValue}
  }
  /// Returns true if `defaultMasterSlideNodeReference` has been explicitly set.
  var hasDefaultMasterSlideNodeReference: Bool {return self._defaultMasterSlideNodeReference != nil}
  /// Clears the value of `defaultMasterSlideNodeReference`. Subsequent reads from it will return its default value.
  mutating func clearDefaultMasterSlideNodeReference() {self._defaultMasterSlideNodeReference = nil}

  var defaultMasterSlideNodeIsOurBestGuess: Bool {
    get {return _defaultMasterSlideNodeIsOurBestGuess ?? false}
    set {_defaultMasterSlideNodeIsOurBestGuess = newValue}
  }
  /// Returns true if `defaultMasterSlideNodeIsOurBestGuess` has been explicitly set.
  var hasDefaultMasterSlideNodeIsOurBestGuess: Bool {return self._defaultMasterSlideNodeIsOurBestGuess != nil}
  /// Clears the value of `defaultMasterSlideNodeIsOurBestGuess`. Subsequent reads from it will return its default value.
  mutating func clearDefaultMasterSlideNodeIsOurBestGuess() {self._defaultMasterSlideNodeIsOurBestGuess = nil}

  var customEffectTimingCurves: [KN_ThemeCustomTimingCurveArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSS_ThemeArchive? = nil
  fileprivate var _uuid: String? = nil
  fileprivate var _defaultMasterSlideNode: TSP_Reference? = nil
  fileprivate var _defaultMasterSlideNodeReference: TSP_Reference? = nil
  fileprivate var _defaultMasterSlideNodeIsOurBestGuess: Bool? = nil
}

struct KN_SlideTreeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rootSlideNode: TSP_Reference {
    get {return _rootSlideNode ?? TSP_Reference()}
    set {_rootSlideNode = newValue}
  }
  /// Returns true if `rootSlideNode` has been explicitly set.
  var hasRootSlideNode: Bool {return self._rootSlideNode != nil}
  /// Clears the value of `rootSlideNode`. Subsequent reads from it will return its default value.
  mutating func clearRootSlideNode() {self._rootSlideNode = nil}

  var slides: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rootSlideNode: TSP_Reference? = nil
}

struct KN_ShowArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uiState: TSP_Reference {
    get {return _uiState ?? TSP_Reference()}
    set {_uiState = newValue}
  }
  /// Returns true if `uiState` has been explicitly set.
  var hasUiState: Bool {return self._uiState != nil}
  /// Clears the value of `uiState`. Subsequent reads from it will return its default value.
  mutating func clearUiState() {self._uiState = nil}

  var theme: TSP_Reference {
    get {return _theme ?? TSP_Reference()}
    set {_theme = newValue}
  }
  /// Returns true if `theme` has been explicitly set.
  var hasTheme: Bool {return self._theme != nil}
  /// Clears the value of `theme`. Subsequent reads from it will return its default value.
  mutating func clearTheme() {self._theme = nil}

  var slideTree: KN_SlideTreeArchive {
    get {return _slideTree ?? KN_SlideTreeArchive()}
    set {_slideTree = newValue}
  }
  /// Returns true if `slideTree` has been explicitly set.
  var hasSlideTree: Bool {return self._slideTree != nil}
  /// Clears the value of `slideTree`. Subsequent reads from it will return its default value.
  mutating func clearSlideTree() {self._slideTree = nil}

  var size: TSP_Size {
    get {return _size ?? TSP_Size()}
    set {_size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  var hasSize: Bool {return self._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  mutating func clearSize() {self._size = nil}

  var stylesheet: TSP_Reference {
    get {return _stylesheet ?? TSP_Reference()}
    set {_stylesheet = newValue}
  }
  /// Returns true if `stylesheet` has been explicitly set.
  var hasStylesheet: Bool {return self._stylesheet != nil}
  /// Clears the value of `stylesheet`. Subsequent reads from it will return its default value.
  mutating func clearStylesheet() {self._stylesheet = nil}

  var slideNumbersVisible: Bool {
    get {return _slideNumbersVisible ?? false}
    set {_slideNumbersVisible = newValue}
  }
  /// Returns true if `slideNumbersVisible` has been explicitly set.
  var hasSlideNumbersVisible: Bool {return self._slideNumbersVisible != nil}
  /// Clears the value of `slideNumbersVisible`. Subsequent reads from it will return its default value.
  mutating func clearSlideNumbersVisible() {self._slideNumbersVisible = nil}

  var recording: TSP_Reference {
    get {return _recording ?? TSP_Reference()}
    set {_recording = newValue}
  }
  /// Returns true if `recording` has been explicitly set.
  var hasRecording: Bool {return self._recording != nil}
  /// Clears the value of `recording`. Subsequent reads from it will return its default value.
  mutating func clearRecording() {self._recording = nil}

  var loopPresentation: Bool {
    get {return _loopPresentation ?? false}
    set {_loopPresentation = newValue}
  }
  /// Returns true if `loopPresentation` has been explicitly set.
  var hasLoopPresentation: Bool {return self._loopPresentation != nil}
  /// Clears the value of `loopPresentation`. Subsequent reads from it will return its default value.
  mutating func clearLoopPresentation() {self._loopPresentation = nil}

  var mode: KN_ShowArchive.KNShowMode {
    get {return _mode ?? .kKnshowModeNormal}
    set {_mode = newValue}
  }
  /// Returns true if `mode` has been explicitly set.
  var hasMode: Bool {return self._mode != nil}
  /// Clears the value of `mode`. Subsequent reads from it will return its default value.
  mutating func clearMode() {self._mode = nil}

  var autoplayTransitionDelay: Double {
    get {return _autoplayTransitionDelay ?? 5}
    set {_autoplayTransitionDelay = newValue}
  }
  /// Returns true if `autoplayTransitionDelay` has been explicitly set.
  var hasAutoplayTransitionDelay: Bool {return self._autoplayTransitionDelay != nil}
  /// Clears the value of `autoplayTransitionDelay`. Subsequent reads from it will return its default value.
  mutating func clearAutoplayTransitionDelay() {self._autoplayTransitionDelay = nil}

  var autoplayBuildDelay: Double {
    get {return _autoplayBuildDelay ?? 2}
    set {_autoplayBuildDelay = newValue}
  }
  /// Returns true if `autoplayBuildDelay` has been explicitly set.
  var hasAutoplayBuildDelay: Bool {return self._autoplayBuildDelay != nil}
  /// Clears the value of `autoplayBuildDelay`. Subsequent reads from it will return its default value.
  mutating func clearAutoplayBuildDelay() {self._autoplayBuildDelay = nil}

  var idleTimerActive: Bool {
    get {return _idleTimerActive ?? false}
    set {_idleTimerActive = newValue}
  }
  /// Returns true if `idleTimerActive` has been explicitly set.
  var hasIdleTimerActive: Bool {return self._idleTimerActive != nil}
  /// Clears the value of `idleTimerActive`. Subsequent reads from it will return its default value.
  mutating func clearIdleTimerActive() {self._idleTimerActive = nil}

  var idleTimerDelay: Double {
    get {return _idleTimerDelay ?? 900}
    set {_idleTimerDelay = newValue}
  }
  /// Returns true if `idleTimerDelay` has been explicitly set.
  var hasIdleTimerDelay: Bool {return self._idleTimerDelay != nil}
  /// Clears the value of `idleTimerDelay`. Subsequent reads from it will return its default value.
  mutating func clearIdleTimerDelay() {self._idleTimerDelay = nil}

  var soundtrack: TSP_Reference {
    get {return _soundtrack ?? TSP_Reference()}
    set {_soundtrack = newValue}
  }
  /// Returns true if `soundtrack` has been explicitly set.
  var hasSoundtrack: Bool {return self._soundtrack != nil}
  /// Clears the value of `soundtrack`. Subsequent reads from it will return its default value.
  mutating func clearSoundtrack() {self._soundtrack = nil}

  var automaticallyPlaysUponOpen: Bool {
    get {return _automaticallyPlaysUponOpen ?? false}
    set {_automaticallyPlaysUponOpen = newValue}
  }
  /// Returns true if `automaticallyPlaysUponOpen` has been explicitly set.
  var hasAutomaticallyPlaysUponOpen: Bool {return self._automaticallyPlaysUponOpen != nil}
  /// Clears the value of `automaticallyPlaysUponOpen`. Subsequent reads from it will return its default value.
  mutating func clearAutomaticallyPlaysUponOpen() {self._automaticallyPlaysUponOpen = nil}

  var slideList: TSP_Reference {
    get {return _slideList ?? TSP_Reference()}
    set {_slideList = newValue}
  }
  /// Returns true if `slideList` has been explicitly set.
  var hasSlideList: Bool {return self._slideList != nil}
  /// Clears the value of `slideList`. Subsequent reads from it will return its default value.
  mutating func clearSlideList() {self._slideList = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum KNShowMode: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kKnshowModeNormal // = 0
    case kKnshowModeAutoPlay // = 1
    case kKnshowModeHyperlinksOnly // = 2

    init() {
      self = .kKnshowModeNormal
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kKnshowModeNormal
      case 1: self = .kKnshowModeAutoPlay
      case 2: self = .kKnshowModeHyperlinksOnly
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kKnshowModeNormal: return 0
      case .kKnshowModeAutoPlay: return 1
      case .kKnshowModeHyperlinksOnly: return 2
      }
    }

  }

  init() {}

  fileprivate var _uiState: TSP_Reference? = nil
  fileprivate var _theme: TSP_Reference? = nil
  fileprivate var _slideTree: KN_SlideTreeArchive? = nil
  fileprivate var _size: TSP_Size? = nil
  fileprivate var _stylesheet: TSP_Reference? = nil
  fileprivate var _slideNumbersVisible: Bool? = nil
  fileprivate var _recording: TSP_Reference? = nil
  fileprivate var _loopPresentation: Bool? = nil
  fileprivate var _mode: KN_ShowArchive.KNShowMode? = nil
  fileprivate var _autoplayTransitionDelay: Double? = nil
  fileprivate var _autoplayBuildDelay: Double? = nil
  fileprivate var _idleTimerActive: Bool? = nil
  fileprivate var _idleTimerDelay: Double? = nil
  fileprivate var _soundtrack: TSP_Reference? = nil
  fileprivate var _automaticallyPlaysUponOpen: Bool? = nil
  fileprivate var _slideList: TSP_Reference? = nil
}

#if swift(>=4.2)

extension KN_ShowArchive.KNShowMode: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct KN_DocumentArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSA_DocumentArchive {
    get {return _super ?? TSA_DocumentArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var show: TSP_Reference {
    get {return _show ?? TSP_Reference()}
    set {_show = newValue}
  }
  /// Returns true if `show` has been explicitly set.
  var hasShow: Bool {return self._show != nil}
  /// Clears the value of `show`. Subsequent reads from it will return its default value.
  mutating func clearShow() {self._show = nil}

  var tablesCustomFormatList: TSP_Reference {
    get {return _tablesCustomFormatList ?? TSP_Reference()}
    set {_tablesCustomFormatList = newValue}
  }
  /// Returns true if `tablesCustomFormatList` has been explicitly set.
  var hasTablesCustomFormatList: Bool {return self._tablesCustomFormatList != nil}
  /// Clears the value of `tablesCustomFormatList`. Subsequent reads from it will return its default value.
  mutating func clearTablesCustomFormatList() {self._tablesCustomFormatList = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSA_DocumentArchive? = nil
  fileprivate var _show: TSP_Reference? = nil
  fileprivate var _tablesCustomFormatList: TSP_Reference? = nil
}

struct KN_SlideStylePropertiesArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fill: TSD_FillArchive {
    get {return _fill ?? TSD_FillArchive()}
    set {_fill = newValue}
  }
  /// Returns true if `fill` has been explicitly set.
  var hasFill: Bool {return self._fill != nil}
  /// Clears the value of `fill`. Subsequent reads from it will return its default value.
  mutating func clearFill() {self._fill = nil}

  var transition: KN_TransitionAttributesArchive {
    get {return _transition ?? KN_TransitionAttributesArchive()}
    set {_transition = newValue}
  }
  /// Returns true if `transition` has been explicitly set.
  var hasTransition: Bool {return self._transition != nil}
  /// Clears the value of `transition`. Subsequent reads from it will return its default value.
  mutating func clearTransition() {self._transition = nil}

  var transitionNull: Bool {
    get {return _transitionNull ?? false}
    set {_transitionNull = newValue}
  }
  /// Returns true if `transitionNull` has been explicitly set.
  var hasTransitionNull: Bool {return self._transitionNull != nil}
  /// Clears the value of `transitionNull`. Subsequent reads from it will return its default value.
  mutating func clearTransitionNull() {self._transitionNull = nil}

  var titlePlaceholderVisibility: Bool {
    get {return _titlePlaceholderVisibility ?? false}
    set {_titlePlaceholderVisibility = newValue}
  }
  /// Returns true if `titlePlaceholderVisibility` has been explicitly set.
  var hasTitlePlaceholderVisibility: Bool {return self._titlePlaceholderVisibility != nil}
  /// Clears the value of `titlePlaceholderVisibility`. Subsequent reads from it will return its default value.
  mutating func clearTitlePlaceholderVisibility() {self._titlePlaceholderVisibility = nil}

  var bodyPlaceholderVisibility: Bool {
    get {return _bodyPlaceholderVisibility ?? false}
    set {_bodyPlaceholderVisibility = newValue}
  }
  /// Returns true if `bodyPlaceholderVisibility` has been explicitly set.
  var hasBodyPlaceholderVisibility: Bool {return self._bodyPlaceholderVisibility != nil}
  /// Clears the value of `bodyPlaceholderVisibility`. Subsequent reads from it will return its default value.
  mutating func clearBodyPlaceholderVisibility() {self._bodyPlaceholderVisibility = nil}

  var objectPlaceholderVisibility: Bool {
    get {return _objectPlaceholderVisibility ?? false}
    set {_objectPlaceholderVisibility = newValue}
  }
  /// Returns true if `objectPlaceholderVisibility` has been explicitly set.
  var hasObjectPlaceholderVisibility: Bool {return self._objectPlaceholderVisibility != nil}
  /// Clears the value of `objectPlaceholderVisibility`. Subsequent reads from it will return its default value.
  mutating func clearObjectPlaceholderVisibility() {self._objectPlaceholderVisibility = nil}

  var slideNumberPlaceholderVisibility: Bool {
    get {return _slideNumberPlaceholderVisibility ?? false}
    set {_slideNumberPlaceholderVisibility = newValue}
  }
  /// Returns true if `slideNumberPlaceholderVisibility` has been explicitly set.
  var hasSlideNumberPlaceholderVisibility: Bool {return self._slideNumberPlaceholderVisibility != nil}
  /// Clears the value of `slideNumberPlaceholderVisibility`. Subsequent reads from it will return its default value.
  mutating func clearSlideNumberPlaceholderVisibility() {self._slideNumberPlaceholderVisibility = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fill: TSD_FillArchive? = nil
  fileprivate var _transition: KN_TransitionAttributesArchive? = nil
  fileprivate var _transitionNull: Bool? = nil
  fileprivate var _titlePlaceholderVisibility: Bool? = nil
  fileprivate var _bodyPlaceholderVisibility: Bool? = nil
  fileprivate var _objectPlaceholderVisibility: Bool? = nil
  fileprivate var _slideNumberPlaceholderVisibility: Bool? = nil
}

struct KN_SlideStyleArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSS_StyleArchive {
    get {return _super ?? TSS_StyleArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var overrideCount: UInt32 {
    get {return _overrideCount ?? 0}
    set {_overrideCount = newValue}
  }
  /// Returns true if `overrideCount` has been explicitly set.
  var hasOverrideCount: Bool {return self._overrideCount != nil}
  /// Clears the value of `overrideCount`. Subsequent reads from it will return its default value.
  mutating func clearOverrideCount() {self._overrideCount = nil}

  var slideProperties: KN_SlideStylePropertiesArchive {
    get {return _slideProperties ?? KN_SlideStylePropertiesArchive()}
    set {_slideProperties = newValue}
  }
  /// Returns true if `slideProperties` has been explicitly set.
  var hasSlideProperties: Bool {return self._slideProperties != nil}
  /// Clears the value of `slideProperties`. Subsequent reads from it will return its default value.
  mutating func clearSlideProperties() {self._slideProperties = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSS_StyleArchive? = nil
  fileprivate var _overrideCount: UInt32? = nil
  fileprivate var _slideProperties: KN_SlideStylePropertiesArchive? = nil
}

struct KN_PasteboardNativeStorageArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var drawables: [TSP_Reference] {
    get {return _storage._drawables}
    set {_uniqueStorage()._drawables = newValue}
  }

  var builds: [TSP_Reference] {
    get {return _storage._builds}
    set {_uniqueStorage()._builds = newValue}
  }

  var buildChunks: [TSP_Reference] {
    get {return _storage._buildChunks}
    set {_uniqueStorage()._buildChunks = newValue}
  }

  var slideNodes: [TSP_Reference] {
    get {return _storage._slideNodes}
    set {_uniqueStorage()._slideNodes = newValue}
  }

  var displayedSlideNodes: [TSP_Reference] {
    get {return _storage._displayedSlideNodes}
    set {_uniqueStorage()._displayedSlideNodes = newValue}
  }

  var masterSlideNodes: [TSP_Reference] {
    get {return _storage._masterSlideNodes}
    set {_uniqueStorage()._masterSlideNodes = newValue}
  }

  var collapsedSlideNodes: [TSP_Reference] {
    get {return _storage._collapsedSlideNodes}
    set {_uniqueStorage()._collapsedSlideNodes = newValue}
  }

  var outlineCollapsedSlideNodes: [TSP_Reference] {
    get {return _storage._outlineCollapsedSlideNodes}
    set {_uniqueStorage()._outlineCollapsedSlideNodes = newValue}
  }

  var outlineHasBodySlideNodes: [TSP_Reference] {
    get {return _storage._outlineHasBodySlideNodes}
    set {_uniqueStorage()._outlineHasBodySlideNodes = newValue}
  }

  var originalShowSize: TSP_Size {
    get {return _storage._originalShowSize ?? TSP_Size()}
    set {_uniqueStorage()._originalShowSize = newValue}
  }
  /// Returns true if `originalShowSize` has been explicitly set.
  var hasOriginalShowSize: Bool {return _storage._originalShowSize != nil}
  /// Clears the value of `originalShowSize`. Subsequent reads from it will return its default value.
  mutating func clearOriginalShowSize() {_uniqueStorage()._originalShowSize = nil}

  var titleRanges: [TSP_Range] {
    get {return _storage._titleRanges}
    set {_uniqueStorage()._titleRanges = newValue}
  }

  var geometriesInRoot: [TSD_GeometryArchive] {
    get {return _storage._geometriesInRoot}
    set {_uniqueStorage()._geometriesInRoot = newValue}
  }

  var slideNodeUniqueIdentifier: String {
    get {return _storage._slideNodeUniqueIdentifier ?? String()}
    set {_uniqueStorage()._slideNodeUniqueIdentifier = newValue}
  }
  /// Returns true if `slideNodeUniqueIdentifier` has been explicitly set.
  var hasSlideNodeUniqueIdentifier: Bool {return _storage._slideNodeUniqueIdentifier != nil}
  /// Clears the value of `slideNodeUniqueIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearSlideNodeUniqueIdentifier() {_uniqueStorage()._slideNodeUniqueIdentifier = nil}

  var customEffectTimingCurves: [KN_ThemeCustomTimingCurveArchive] {
    get {return _storage._customEffectTimingCurves}
    set {_uniqueStorage()._customEffectTimingCurves = newValue}
  }

  var originalSlideNodeUuids: [String] {
    get {return _storage._originalSlideNodeUuids}
    set {_uniqueStorage()._originalSlideNodeUuids = newValue}
  }

  var slideNodesHaveDatasNeedingDownload: Bool {
    get {return _storage._slideNodesHaveDatasNeedingDownload ?? false}
    set {_uniqueStorage()._slideNodesHaveDatasNeedingDownload = newValue}
  }
  /// Returns true if `slideNodesHaveDatasNeedingDownload` has been explicitly set.
  var hasSlideNodesHaveDatasNeedingDownload: Bool {return _storage._slideNodesHaveDatasNeedingDownload != nil}
  /// Clears the value of `slideNodesHaveDatasNeedingDownload`. Subsequent reads from it will return its default value.
  mutating func clearSlideNodesHaveDatasNeedingDownload() {_uniqueStorage()._slideNodesHaveDatasNeedingDownload = nil}

  var transition: KN_TransitionArchive {
    get {return _storage._transition ?? KN_TransitionArchive()}
    set {_uniqueStorage()._transition = newValue}
  }
  /// Returns true if `transition` has been explicitly set.
  var hasTransition: Bool {return _storage._transition != nil}
  /// Clears the value of `transition`. Subsequent reads from it will return its default value.
  mutating func clearTransition() {_uniqueStorage()._transition = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_PrototypeForUndoMasterChangeArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var slideStyle: TSP_Reference {
    get {return _slideStyle ?? TSP_Reference()}
    set {_slideStyle = newValue}
  }
  /// Returns true if `slideStyle` has been explicitly set.
  var hasSlideStyle: Bool {return self._slideStyle != nil}
  /// Clears the value of `slideStyle`. Subsequent reads from it will return its default value.
  mutating func clearSlideStyle() {self._slideStyle = nil}

  var masterSlideID: TSP_UUID {
    get {return _masterSlideID ?? TSP_UUID()}
    set {_masterSlideID = newValue}
  }
  /// Returns true if `masterSlideID` has been explicitly set.
  var hasMasterSlideID: Bool {return self._masterSlideID != nil}
  /// Clears the value of `masterSlideID`. Subsequent reads from it will return its default value.
  mutating func clearMasterSlideID() {self._masterSlideID = nil}

  var drawableInfoIDList: [TSP_UUID] = []

  var placeholders: [TSP_Reference] = []

  var placeholderTagsList: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _slideStyle: TSP_Reference? = nil
  fileprivate var _masterSlideID: TSP_UUID? = nil
}

struct KN_RecordingArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eventTracks: [TSP_Reference] = []

  var movieTrack: TSP_Reference {
    get {return _movieTrack ?? TSP_Reference()}
    set {_movieTrack = newValue}
  }
  /// Returns true if `movieTrack` has been explicitly set.
  var hasMovieTrack: Bool {return self._movieTrack != nil}
  /// Clears the value of `movieTrack`. Subsequent reads from it will return its default value.
  mutating func clearMovieTrack() {self._movieTrack = nil}

  var duration: Double {
    get {return _duration ?? 0}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var syncStateEnum: KN_RecordingArchive.RecordingSyncStateEnum {
    get {return _syncStateEnum ?? .kRecordingSyncStateInSyncWithShow}
    set {_syncStateEnum = newValue}
  }
  /// Returns true if `syncStateEnum` has been explicitly set.
  var hasSyncStateEnum: Bool {return self._syncStateEnum != nil}
  /// Clears the value of `syncStateEnum`. Subsequent reads from it will return its default value.
  mutating func clearSyncStateEnum() {self._syncStateEnum = nil}

  var modificationDate: TSP_Date {
    get {return _modificationDate ?? TSP_Date()}
    set {_modificationDate = newValue}
  }
  /// Returns true if `modificationDate` has been explicitly set.
  var hasModificationDate: Bool {return self._modificationDate != nil}
  /// Clears the value of `modificationDate`. Subsequent reads from it will return its default value.
  mutating func clearModificationDate() {self._modificationDate = nil}

  var syncState: KN_RecordingSyncState {
    get {return _syncState ?? KN_RecordingSyncState()}
    set {_syncState = newValue}
  }
  /// Returns true if `syncState` has been explicitly set.
  var hasSyncState: Bool {return self._syncState != nil}
  /// Clears the value of `syncState`. Subsequent reads from it will return its default value.
  mutating func clearSyncState() {self._syncState = nil}

  var correctionHistory: KN_RecordingCorrectionHistory {
    get {return _correctionHistory ?? KN_RecordingCorrectionHistory()}
    set {_correctionHistory = newValue}
  }
  /// Returns true if `correctionHistory` has been explicitly set.
  var hasCorrectionHistory: Bool {return self._correctionHistory != nil}
  /// Clears the value of `correctionHistory`. Subsequent reads from it will return its default value.
  mutating func clearCorrectionHistory() {self._correctionHistory = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum RecordingSyncStateEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kRecordingSyncStateInSyncWithShow // = 0
    case kRecordingSyncStateOutOfSyncWithShow // = 1

    init() {
      self = .kRecordingSyncStateInSyncWithShow
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kRecordingSyncStateInSyncWithShow
      case 1: self = .kRecordingSyncStateOutOfSyncWithShow
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kRecordingSyncStateInSyncWithShow: return 0
      case .kRecordingSyncStateOutOfSyncWithShow: return 1
      }
    }

  }

  init() {}

  fileprivate var _movieTrack: TSP_Reference? = nil
  fileprivate var _duration: Double? = nil
  fileprivate var _syncStateEnum: KN_RecordingArchive.RecordingSyncStateEnum? = nil
  fileprivate var _modificationDate: TSP_Date? = nil
  fileprivate var _syncState: KN_RecordingSyncState? = nil
  fileprivate var _correctionHistory: KN_RecordingCorrectionHistory? = nil
}

#if swift(>=4.2)

extension KN_RecordingArchive.RecordingSyncStateEnum: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct KN_RecordingSyncState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var outOfSyncToken: TSP_UUID {
    get {return _outOfSyncToken ?? TSP_UUID()}
    set {_outOfSyncToken = newValue}
  }
  /// Returns true if `outOfSyncToken` has been explicitly set.
  var hasOutOfSyncToken: Bool {return self._outOfSyncToken != nil}
  /// Clears the value of `outOfSyncToken`. Subsequent reads from it will return its default value.
  mutating func clearOutOfSyncToken() {self._outOfSyncToken = nil}

  var canClearOutOfSyncToken: Bool {
    get {return _canClearOutOfSyncToken ?? false}
    set {_canClearOutOfSyncToken = newValue}
  }
  /// Returns true if `canClearOutOfSyncToken` has been explicitly set.
  var hasCanClearOutOfSyncToken: Bool {return self._canClearOutOfSyncToken != nil}
  /// Clears the value of `canClearOutOfSyncToken`. Subsequent reads from it will return its default value.
  mutating func clearCanClearOutOfSyncToken() {self._canClearOutOfSyncToken = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _outOfSyncToken: TSP_UUID? = nil
  fileprivate var _canClearOutOfSyncToken: Bool? = nil
}

struct KN_RecordingCorrectionHistory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var didAddMissingEventsForRadar49654305: Bool {
    get {return _didAddMissingEventsForRadar49654305 ?? false}
    set {_didAddMissingEventsForRadar49654305 = newValue}
  }
  /// Returns true if `didAddMissingEventsForRadar49654305` has been explicitly set.
  var hasDidAddMissingEventsForRadar49654305: Bool {return self._didAddMissingEventsForRadar49654305 != nil}
  /// Clears the value of `didAddMissingEventsForRadar49654305`. Subsequent reads from it will return its default value.
  mutating func clearDidAddMissingEventsForRadar49654305() {self._didAddMissingEventsForRadar49654305 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _didAddMissingEventsForRadar49654305: Bool? = nil
}

struct KN_RecordingEventTrackArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: String {
    get {return _type ?? String()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var events: [KN_RecordingEventArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _type: String? = nil
}

struct KN_RecordingEventArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var startTime: Double {
    get {return _startTime ?? -1}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  var navigationEventArchive: KN_RecordingNavigationEventArchive {
    get {return _navigationEventArchive ?? KN_RecordingNavigationEventArchive()}
    set {_navigationEventArchive = newValue}
  }
  /// Returns true if `navigationEventArchive` has been explicitly set.
  var hasNavigationEventArchive: Bool {return self._navigationEventArchive != nil}
  /// Clears the value of `navigationEventArchive`. Subsequent reads from it will return its default value.
  mutating func clearNavigationEventArchive() {self._navigationEventArchive = nil}

  var laserEventArchive: KN_RecordingLaserEventArchive {
    get {return _laserEventArchive ?? KN_RecordingLaserEventArchive()}
    set {_laserEventArchive = newValue}
  }
  /// Returns true if `laserEventArchive` has been explicitly set.
  var hasLaserEventArchive: Bool {return self._laserEventArchive != nil}
  /// Clears the value of `laserEventArchive`. Subsequent reads from it will return its default value.
  mutating func clearLaserEventArchive() {self._laserEventArchive = nil}

  var pauseEventArchive: KN_RecordingPauseEventArchive {
    get {return _pauseEventArchive ?? KN_RecordingPauseEventArchive()}
    set {_pauseEventArchive = newValue}
  }
  /// Returns true if `pauseEventArchive` has been explicitly set.
  var hasPauseEventArchive: Bool {return self._pauseEventArchive != nil}
  /// Clears the value of `pauseEventArchive`. Subsequent reads from it will return its default value.
  mutating func clearPauseEventArchive() {self._pauseEventArchive = nil}

  var movieEventArchive: KN_RecordingMovieEventArchive {
    get {return _movieEventArchive ?? KN_RecordingMovieEventArchive()}
    set {_movieEventArchive = newValue}
  }
  /// Returns true if `movieEventArchive` has been explicitly set.
  var hasMovieEventArchive: Bool {return self._movieEventArchive != nil}
  /// Clears the value of `movieEventArchive`. Subsequent reads from it will return its default value.
  mutating func clearMovieEventArchive() {self._movieEventArchive = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startTime: Double? = nil
  fileprivate var _navigationEventArchive: KN_RecordingNavigationEventArchive? = nil
  fileprivate var _laserEventArchive: KN_RecordingLaserEventArchive? = nil
  fileprivate var _pauseEventArchive: KN_RecordingPauseEventArchive? = nil
  fileprivate var _movieEventArchive: KN_RecordingMovieEventArchive? = nil
}

struct KN_RecordingNavigationEventArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var targetSlideNodeID: TSP_UUID {
    get {return _targetSlideNodeID ?? TSP_UUID()}
    set {_targetSlideNodeID = newValue}
  }
  /// Returns true if `targetSlideNodeID` has been explicitly set.
  var hasTargetSlideNodeID: Bool {return self._targetSlideNodeID != nil}
  /// Clears the value of `targetSlideNodeID`. Subsequent reads from it will return its default value.
  mutating func clearTargetSlideNodeID() {self._targetSlideNodeID = nil}

  var targetSlideNodeReference: TSP_Reference {
    get {return _targetSlideNodeReference ?? TSP_Reference()}
    set {_targetSlideNodeReference = newValue}
  }
  /// Returns true if `targetSlideNodeReference` has been explicitly set.
  var hasTargetSlideNodeReference: Bool {return self._targetSlideNodeReference != nil}
  /// Clears the value of `targetSlideNodeReference`. Subsequent reads from it will return its default value.
  mutating func clearTargetSlideNodeReference() {self._targetSlideNodeReference = nil}

  var targetEventIndex: UInt32 {
    get {return _targetEventIndex ?? 0}
    set {_targetEventIndex = newValue}
  }
  /// Returns true if `targetEventIndex` has been explicitly set.
  var hasTargetEventIndex: Bool {return self._targetEventIndex != nil}
  /// Clears the value of `targetEventIndex`. Subsequent reads from it will return its default value.
  mutating func clearTargetEventIndex() {self._targetEventIndex = nil}

  var animationPhase: KN_RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase {
    get {return _animationPhase ?? .kRecordingNavigationEventAnimationNone}
    set {_animationPhase = newValue}
  }
  /// Returns true if `animationPhase` has been explicitly set.
  var hasAnimationPhase: Bool {return self._animationPhase != nil}
  /// Clears the value of `animationPhase`. Subsequent reads from it will return its default value.
  mutating func clearAnimationPhase() {self._animationPhase = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum RecordingNavigationEventAnimationPhase: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kRecordingNavigationEventAnimationNone // = 0
    case kRecordingNavigationEventAnimationStart // = 1
    case kRecordingNavigationEventAnimationEnd // = 2

    init() {
      self = .kRecordingNavigationEventAnimationNone
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kRecordingNavigationEventAnimationNone
      case 1: self = .kRecordingNavigationEventAnimationStart
      case 2: self = .kRecordingNavigationEventAnimationEnd
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kRecordingNavigationEventAnimationNone: return 0
      case .kRecordingNavigationEventAnimationStart: return 1
      case .kRecordingNavigationEventAnimationEnd: return 2
      }
    }

  }

  init() {}

  fileprivate var _targetSlideNodeID: TSP_UUID? = nil
  fileprivate var _targetSlideNodeReference: TSP_Reference? = nil
  fileprivate var _targetEventIndex: UInt32? = nil
  fileprivate var _animationPhase: KN_RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase? = nil
}

#if swift(>=4.2)

extension KN_RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct KN_RecordingLaserEventArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unscaledLocation: TSP_Point {
    get {return _unscaledLocation ?? TSP_Point()}
    set {_unscaledLocation = newValue}
  }
  /// Returns true if `unscaledLocation` has been explicitly set.
  var hasUnscaledLocation: Bool {return self._unscaledLocation != nil}
  /// Clears the value of `unscaledLocation`. Subsequent reads from it will return its default value.
  mutating func clearUnscaledLocation() {self._unscaledLocation = nil}

  var unitLocation: TSP_Point {
    get {return _unitLocation ?? TSP_Point()}
    set {_unitLocation = newValue}
  }
  /// Returns true if `unitLocation` has been explicitly set.
  var hasUnitLocation: Bool {return self._unitLocation != nil}
  /// Clears the value of `unitLocation`. Subsequent reads from it will return its default value.
  mutating func clearUnitLocation() {self._unitLocation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _unscaledLocation: TSP_Point? = nil
  fileprivate var _unitLocation: TSP_Point? = nil
}

struct KN_RecordingPauseEventArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pauseEventType: KN_RecordingPauseEventArchive.RecordingPauseEventType {
    get {return _pauseEventType ?? .kRecordingPauseEventTypeResume}
    set {_pauseEventType = newValue}
  }
  /// Returns true if `pauseEventType` has been explicitly set.
  var hasPauseEventType: Bool {return self._pauseEventType != nil}
  /// Clears the value of `pauseEventType`. Subsequent reads from it will return its default value.
  mutating func clearPauseEventType() {self._pauseEventType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum RecordingPauseEventType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kRecordingPauseEventTypeResume // = 0
    case kRecordingPauseEventTypePause // = 1
    case kRecordingPauseEventTypeConcealWithBlack // = 2
    case kRecordingPauseEventTypeConcealWithWhite // = 3

    init() {
      self = .kRecordingPauseEventTypeResume
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kRecordingPauseEventTypeResume
      case 1: self = .kRecordingPauseEventTypePause
      case 2: self = .kRecordingPauseEventTypeConcealWithBlack
      case 3: self = .kRecordingPauseEventTypeConcealWithWhite
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kRecordingPauseEventTypeResume: return 0
      case .kRecordingPauseEventTypePause: return 1
      case .kRecordingPauseEventTypeConcealWithBlack: return 2
      case .kRecordingPauseEventTypeConcealWithWhite: return 3
      }
    }

  }

  init() {}

  fileprivate var _pauseEventType: KN_RecordingPauseEventArchive.RecordingPauseEventType? = nil
}

#if swift(>=4.2)

extension KN_RecordingPauseEventArchive.RecordingPauseEventType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct KN_RecordingMovieEventArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var movieInfoReference: TSP_Reference {
    get {return _movieInfoReference ?? TSP_Reference()}
    set {_movieInfoReference = newValue}
  }
  /// Returns true if `movieInfoReference` has been explicitly set.
  var hasMovieInfoReference: Bool {return self._movieInfoReference != nil}
  /// Clears the value of `movieInfoReference`. Subsequent reads from it will return its default value.
  mutating func clearMovieInfoReference() {self._movieInfoReference = nil}

  var movieEventType: KN_RecordingMovieEventArchive.RecordingMovieEventType {
    get {return _movieEventType ?? .kRecordingMovieEventSeek}
    set {_movieEventType = newValue}
  }
  /// Returns true if `movieEventType` has been explicitly set.
  var hasMovieEventType: Bool {return self._movieEventType != nil}
  /// Clears the value of `movieEventType`. Subsequent reads from it will return its default value.
  mutating func clearMovieEventType() {self._movieEventType = nil}

  var movieEventValue: Double {
    get {return _movieEventValue ?? 0}
    set {_movieEventValue = newValue}
  }
  /// Returns true if `movieEventValue` has been explicitly set.
  var hasMovieEventValue: Bool {return self._movieEventValue != nil}
  /// Clears the value of `movieEventValue`. Subsequent reads from it will return its default value.
  mutating func clearMovieEventValue() {self._movieEventValue = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum RecordingMovieEventType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kRecordingMovieEventNone // = 0
    case kRecordingMovieEventSeek // = 1
    case kRecordingMovieEventSetRate // = 2
    case kRecordingMovieEventStartPlayback // = 3
    case kRecordingMovieEventStopPlayback // = 4
    case kRecordingMovieEventBeginScrubbing // = 5
    case kRecordingMovieEventEndScrubbing // = 6

    init() {
      self = .kRecordingMovieEventNone
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kRecordingMovieEventNone
      case 1: self = .kRecordingMovieEventSeek
      case 2: self = .kRecordingMovieEventSetRate
      case 3: self = .kRecordingMovieEventStartPlayback
      case 4: self = .kRecordingMovieEventStopPlayback
      case 5: self = .kRecordingMovieEventBeginScrubbing
      case 6: self = .kRecordingMovieEventEndScrubbing
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kRecordingMovieEventNone: return 0
      case .kRecordingMovieEventSeek: return 1
      case .kRecordingMovieEventSetRate: return 2
      case .kRecordingMovieEventStartPlayback: return 3
      case .kRecordingMovieEventStopPlayback: return 4
      case .kRecordingMovieEventBeginScrubbing: return 5
      case .kRecordingMovieEventEndScrubbing: return 6
      }
    }

  }

  init() {}

  fileprivate var _movieInfoReference: TSP_Reference? = nil
  fileprivate var _movieEventType: KN_RecordingMovieEventArchive.RecordingMovieEventType? = nil
  fileprivate var _movieEventValue: Double? = nil
}

#if swift(>=4.2)

extension KN_RecordingMovieEventArchive.RecordingMovieEventType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct KN_RecordingMovieTrackArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var movieSegments: [KN_MovieSegmentArchive] = []

  var isMovieSegmentDataTrimmedToDuration: Bool {
    get {return _isMovieSegmentDataTrimmedToDuration ?? false}
    set {_isMovieSegmentDataTrimmedToDuration = newValue}
  }
  /// Returns true if `isMovieSegmentDataTrimmedToDuration` has been explicitly set.
  var hasIsMovieSegmentDataTrimmedToDuration: Bool {return self._isMovieSegmentDataTrimmedToDuration != nil}
  /// Clears the value of `isMovieSegmentDataTrimmedToDuration`. Subsequent reads from it will return its default value.
  mutating func clearIsMovieSegmentDataTrimmedToDuration() {self._isMovieSegmentDataTrimmedToDuration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _isMovieSegmentDataTrimmedToDuration: Bool? = nil
}

struct KN_MovieSegmentArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var movieData: TSP_DataReference {
    get {return _movieData ?? TSP_DataReference()}
    set {_movieData = newValue}
  }
  /// Returns true if `movieData` has been explicitly set.
  var hasMovieData: Bool {return self._movieData != nil}
  /// Clears the value of `movieData`. Subsequent reads from it will return its default value.
  mutating func clearMovieData() {self._movieData = nil}

  var startTime: Double {
    get {return _startTime ?? -1}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  var databaseMovieData: TSP_Reference {
    get {return _databaseMovieData ?? TSP_Reference()}
    set {_databaseMovieData = newValue}
  }
  /// Returns true if `databaseMovieData` has been explicitly set.
  var hasDatabaseMovieData: Bool {return self._databaseMovieData != nil}
  /// Clears the value of `databaseMovieData`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseMovieData() {self._databaseMovieData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _movieData: TSP_DataReference? = nil
  fileprivate var _startTime: Double? = nil
  fileprivate var _databaseMovieData: TSP_Reference? = nil
}

struct KN_Soundtrack {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var volume: Double {
    get {return _volume ?? 0}
    set {_volume = newValue}
  }
  /// Returns true if `volume` has been explicitly set.
  var hasVolume: Bool {return self._volume != nil}
  /// Clears the value of `volume`. Subsequent reads from it will return its default value.
  mutating func clearVolume() {self._volume = nil}

  var mode: KN_Soundtrack.SoundtrackMode {
    get {return _mode ?? .kKnsoundtrackModePlayOnce}
    set {_mode = newValue}
  }
  /// Returns true if `mode` has been explicitly set.
  var hasMode: Bool {return self._mode != nil}
  /// Clears the value of `mode`. Subsequent reads from it will return its default value.
  mutating func clearMode() {self._mode = nil}

  var movieMedia: [TSP_DataReference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum SoundtrackMode: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case kKnsoundtrackModePlayOnce // = 0
    case kKnsoundtrackModeLoop // = 1
    case kKnsoundtrackModeDoNotPlay // = 2

    init() {
      self = .kKnsoundtrackModePlayOnce
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .kKnsoundtrackModePlayOnce
      case 1: self = .kKnsoundtrackModeLoop
      case 2: self = .kKnsoundtrackModeDoNotPlay
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .kKnsoundtrackModePlayOnce: return 0
      case .kKnsoundtrackModeLoop: return 1
      case .kKnsoundtrackModeDoNotPlay: return 2
      }
    }

  }

  init() {}

  fileprivate var _volume: Double? = nil
  fileprivate var _mode: KN_Soundtrack.SoundtrackMode? = nil
}

#if swift(>=4.2)

extension KN_Soundtrack.SoundtrackMode: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct KN_SlideNumberAttachmentArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSWP_TextualAttachmentArchive {
    get {return _super ?? TSWP_TextualAttachmentArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSWP_TextualAttachmentArchive? = nil
}

struct KN_SlideCollectionSelectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var slideNodes: [TSP_Reference] = []

  var slideNodeToEdit: TSP_Reference {
    get {return _slideNodeToEdit ?? TSP_Reference()}
    set {_slideNodeToEdit = newValue}
  }
  /// Returns true if `slideNodeToEdit` has been explicitly set.
  var hasSlideNodeToEdit: Bool {return self._slideNodeToEdit != nil}
  /// Clears the value of `slideNodeToEdit`. Subsequent reads from it will return its default value.
  mutating func clearSlideNodeToEdit() {self._slideNodeToEdit = nil}

  var selectedParagraphIndexesForSlideNodes: [KN_SlideCollectionSelectionArchive.OutlineSelection] = []

  var rangeInSelectedParagraph: TSP_Range {
    get {return _rangeInSelectedParagraph ?? TSP_Range()}
    set {_rangeInSelectedParagraph = newValue}
  }
  /// Returns true if `rangeInSelectedParagraph` has been explicitly set.
  var hasRangeInSelectedParagraph: Bool {return self._rangeInSelectedParagraph != nil}
  /// Clears the value of `rangeInSelectedParagraph`. Subsequent reads from it will return its default value.
  mutating func clearRangeInSelectedParagraph() {self._rangeInSelectedParagraph = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct OutlineSelection {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var slideNode: TSP_Reference {
      get {return _slideNode ?? TSP_Reference()}
      set {_slideNode = newValue}
    }
    /// Returns true if `slideNode` has been explicitly set.
    var hasSlideNode: Bool {return self._slideNode != nil}
    /// Clears the value of `slideNode`. Subsequent reads from it will return its default value.
    mutating func clearSlideNode() {self._slideNode = nil}

    var selectedParagraphIndexes: TSP_IndexSet {
      get {return _selectedParagraphIndexes ?? TSP_IndexSet()}
      set {_selectedParagraphIndexes = newValue}
    }
    /// Returns true if `selectedParagraphIndexes` has been explicitly set.
    var hasSelectedParagraphIndexes: Bool {return self._selectedParagraphIndexes != nil}
    /// Clears the value of `selectedParagraphIndexes`. Subsequent reads from it will return its default value.
    mutating func clearSelectedParagraphIndexes() {self._selectedParagraphIndexes = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _slideNode: TSP_Reference? = nil
    fileprivate var _selectedParagraphIndexes: TSP_IndexSet? = nil
  }

  init() {}

  fileprivate var _slideNodeToEdit: TSP_Reference? = nil
  fileprivate var _rangeInSelectedParagraph: TSP_Range? = nil
}

struct KN_PresenterNotesSelectionArchive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var slideNode: TSP_Reference {
    get {return _slideNode ?? TSP_Reference()}
    set {_slideNode = newValue}
  }
  /// Returns true if `slideNode` has been explicitly set.
  var hasSlideNode: Bool {return self._slideNode != nil}
  /// Clears the value of `slideNode`. Subsequent reads from it will return its default value.
  mutating func clearSlideNode() {self._slideNode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _slideNode: TSP_Reference? = nil
}

struct KN_MixedIdOperationArgs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var argsListTypes: [KN_MixedIdOperationArgs.ArgsListKind] = []

  var addArgsList: [TSK_AddIdOperationArgs] = []

  var showPlaceholderArgsList: [TSK_IdPlacementOperationArgs] = []

  var removeArgsList: [TSK_RemoveIdOperationArgs] = []

  var hidePlaceholderArgsList: [TSK_IdPlacementOperationArgs] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ArgsListKind: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case add // = 0
    case remove // = 1
    case showPlaceholder // = 2
    case hidePlaceholder // = 3

    init() {
      self = .add
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .add
      case 1: self = .remove
      case 2: self = .showPlaceholder
      case 3: self = .hidePlaceholder
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .add: return 0
      case .remove: return 1
      case .showPlaceholder: return 2
      case .hidePlaceholder: return 3
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension KN_MixedIdOperationArgs.ArgsListKind: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "KN"

extension KN_AnimationAttributesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AnimationAttributesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "animation_type"),
    2: .same(proto: "effect"),
    3: .same(proto: "duration"),
    4: .same(proto: "direction"),
    5: .same(proto: "delay"),
    6: .standard(proto: "is_automatic"),
    7: .same(proto: "color"),
    8: .standard(proto: "custom_effect_timing_curve_1"),
    9: .standard(proto: "custom_effect_timing_curve_2"),
    10: .standard(proto: "custom_effect_timing_curve_3"),
    11: .standard(proto: "random_number_seed"),
    12: .standard(proto: "custom_detail"),
    13: .standard(proto: "custom_effect_timing_curve_theme_name_1"),
    14: .standard(proto: "custom_effect_timing_curve_theme_name_2"),
    15: .standard(proto: "custom_effect_timing_curve_theme_name_3"),
    16: .standard(proto: "writing_direction_is_rtl"),
  ]

  public var isInitialized: Bool {
    if let v = self._color, !v.isInitialized {return false}
    if let v = self._customEffectTimingCurve1, !v.isInitialized {return false}
    if let v = self._customEffectTimingCurve2, !v.isInitialized {return false}
    if let v = self._customEffectTimingCurve3, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._animationType)
      case 2: try decoder.decodeSingularStringField(value: &self._effect)
      case 3: try decoder.decodeSingularDoubleField(value: &self._duration)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._direction)
      case 5: try decoder.decodeSingularDoubleField(value: &self._delay)
      case 6: try decoder.decodeSingularBoolField(value: &self._isAutomatic)
      case 7: try decoder.decodeSingularMessageField(value: &self._color)
      case 8: try decoder.decodeSingularMessageField(value: &self._customEffectTimingCurve1)
      case 9: try decoder.decodeSingularMessageField(value: &self._customEffectTimingCurve2)
      case 10: try decoder.decodeSingularMessageField(value: &self._customEffectTimingCurve3)
      case 11: try decoder.decodeSingularUInt32Field(value: &self._randomNumberSeed)
      case 12: try decoder.decodeSingularDoubleField(value: &self._customDetail)
      case 13: try decoder.decodeSingularStringField(value: &self._customEffectTimingCurveThemeName1)
      case 14: try decoder.decodeSingularStringField(value: &self._customEffectTimingCurveThemeName2)
      case 15: try decoder.decodeSingularStringField(value: &self._customEffectTimingCurveThemeName3)
      case 16: try decoder.decodeSingularBoolField(value: &self._writingDirectionIsRtl)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._animationType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._effect {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._duration {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }
    if let v = self._direction {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._delay {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    }
    if let v = self._isAutomatic {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._customEffectTimingCurve1 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._customEffectTimingCurve2 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._customEffectTimingCurve3 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._randomNumberSeed {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
    }
    if let v = self._customDetail {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
    }
    if let v = self._customEffectTimingCurveThemeName1 {
      try visitor.visitSingularStringField(value: v, fieldNumber: 13)
    }
    if let v = self._customEffectTimingCurveThemeName2 {
      try visitor.visitSingularStringField(value: v, fieldNumber: 14)
    }
    if let v = self._customEffectTimingCurveThemeName3 {
      try visitor.visitSingularStringField(value: v, fieldNumber: 15)
    }
    if let v = self._writingDirectionIsRtl {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_AnimationAttributesArchive, rhs: KN_AnimationAttributesArchive) -> Bool {
    if lhs._animationType != rhs._animationType {return false}
    if lhs._effect != rhs._effect {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._direction != rhs._direction {return false}
    if lhs._delay != rhs._delay {return false}
    if lhs._isAutomatic != rhs._isAutomatic {return false}
    if lhs._color != rhs._color {return false}
    if lhs._customEffectTimingCurve1 != rhs._customEffectTimingCurve1 {return false}
    if lhs._customEffectTimingCurve2 != rhs._customEffectTimingCurve2 {return false}
    if lhs._customEffectTimingCurve3 != rhs._customEffectTimingCurve3 {return false}
    if lhs._randomNumberSeed != rhs._randomNumberSeed {return false}
    if lhs._customDetail != rhs._customDetail {return false}
    if lhs._customEffectTimingCurveThemeName1 != rhs._customEffectTimingCurveThemeName1 {return false}
    if lhs._customEffectTimingCurveThemeName2 != rhs._customEffectTimingCurveThemeName2 {return false}
    if lhs._customEffectTimingCurveThemeName3 != rhs._customEffectTimingCurveThemeName3 {return false}
    if lhs._writingDirectionIsRtl != rhs._writingDirectionIsRtl {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_TransitionAttributesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransitionAttributesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    8: .same(proto: "animationAttributes"),
    9: .standard(proto: "custom_twist"),
    10: .standard(proto: "custom_mosaic_size"),
    11: .standard(proto: "custom_mosaic_type"),
    12: .standard(proto: "custom_bounce"),
    13: .standard(proto: "custom_magic_move_fade_unmatched_objects"),
    15: .standard(proto: "custom_timing_curve"),
    16: .standard(proto: "custom_text_delivery_type"),
    17: .standard(proto: "custom_motion_blur"),
    18: .standard(proto: "custom_travel_distance"),
    1: .standard(proto: "database_animation_type"),
    2: .standard(proto: "database_effect"),
    3: .standard(proto: "database_duration"),
    4: .standard(proto: "database_direction"),
    5: .standard(proto: "database_delay"),
    6: .standard(proto: "database_is_automatic"),
    7: .standard(proto: "database_color"),
  ]

  fileprivate class _StorageClass {
    var _animationAttributes: KN_AnimationAttributesArchive? = nil
    var _customTwist: Float? = nil
    var _customMosaicSize: UInt32? = nil
    var _customMosaicType: UInt32? = nil
    var _customBounce: Bool? = nil
    var _customMagicMoveFadeUnmatchedObjects: Bool? = nil
    var _customTimingCurve: KN_TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType? = nil
    var _customTextDeliveryType: KN_TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType? = nil
    var _customMotionBlur: Bool? = nil
    var _customTravelDistance: Float? = nil
    var _databaseAnimationType: String? = nil
    var _databaseEffect: String? = nil
    var _databaseDuration: Double? = nil
    var _databaseDirection: UInt32? = nil
    var _databaseDelay: Float? = nil
    var _databaseIsAutomatic: Bool? = nil
    var _databaseColor: TSP_Color? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _animationAttributes = source._animationAttributes
      _customTwist = source._customTwist
      _customMosaicSize = source._customMosaicSize
      _customMosaicType = source._customMosaicType
      _customBounce = source._customBounce
      _customMagicMoveFadeUnmatchedObjects = source._customMagicMoveFadeUnmatchedObjects
      _customTimingCurve = source._customTimingCurve
      _customTextDeliveryType = source._customTextDeliveryType
      _customMotionBlur = source._customMotionBlur
      _customTravelDistance = source._customTravelDistance
      _databaseAnimationType = source._databaseAnimationType
      _databaseEffect = source._databaseEffect
      _databaseDuration = source._databaseDuration
      _databaseDirection = source._databaseDirection
      _databaseDelay = source._databaseDelay
      _databaseIsAutomatic = source._databaseIsAutomatic
      _databaseColor = source._databaseColor
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._animationAttributes, !v.isInitialized {return false}
      if let v = _storage._databaseColor, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._databaseAnimationType)
        case 2: try decoder.decodeSingularStringField(value: &_storage._databaseEffect)
        case 3: try decoder.decodeSingularDoubleField(value: &_storage._databaseDuration)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._databaseDirection)
        case 5: try decoder.decodeSingularFloatField(value: &_storage._databaseDelay)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._databaseIsAutomatic)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._databaseColor)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._animationAttributes)
        case 9: try decoder.decodeSingularFloatField(value: &_storage._customTwist)
        case 10: try decoder.decodeSingularUInt32Field(value: &_storage._customMosaicSize)
        case 11: try decoder.decodeSingularUInt32Field(value: &_storage._customMosaicType)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._customBounce)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._customMagicMoveFadeUnmatchedObjects)
        case 15: try decoder.decodeSingularEnumField(value: &_storage._customTimingCurve)
        case 16: try decoder.decodeSingularEnumField(value: &_storage._customTextDeliveryType)
        case 17: try decoder.decodeSingularBoolField(value: &_storage._customMotionBlur)
        case 18: try decoder.decodeSingularFloatField(value: &_storage._customTravelDistance)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._databaseAnimationType {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._databaseEffect {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._databaseDuration {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
      }
      if let v = _storage._databaseDirection {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._databaseDelay {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
      }
      if let v = _storage._databaseIsAutomatic {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      }
      if let v = _storage._databaseColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._animationAttributes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._customTwist {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 9)
      }
      if let v = _storage._customMosaicSize {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._customMosaicType {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
      }
      if let v = _storage._customBounce {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      }
      if let v = _storage._customMagicMoveFadeUnmatchedObjects {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      }
      if let v = _storage._customTimingCurve {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 15)
      }
      if let v = _storage._customTextDeliveryType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 16)
      }
      if let v = _storage._customMotionBlur {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      }
      if let v = _storage._customTravelDistance {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_TransitionAttributesArchive, rhs: KN_TransitionAttributesArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._animationAttributes != rhs_storage._animationAttributes {return false}
        if _storage._customTwist != rhs_storage._customTwist {return false}
        if _storage._customMosaicSize != rhs_storage._customMosaicSize {return false}
        if _storage._customMosaicType != rhs_storage._customMosaicType {return false}
        if _storage._customBounce != rhs_storage._customBounce {return false}
        if _storage._customMagicMoveFadeUnmatchedObjects != rhs_storage._customMagicMoveFadeUnmatchedObjects {return false}
        if _storage._customTimingCurve != rhs_storage._customTimingCurve {return false}
        if _storage._customTextDeliveryType != rhs_storage._customTextDeliveryType {return false}
        if _storage._customMotionBlur != rhs_storage._customMotionBlur {return false}
        if _storage._customTravelDistance != rhs_storage._customTravelDistance {return false}
        if _storage._databaseAnimationType != rhs_storage._databaseAnimationType {return false}
        if _storage._databaseEffect != rhs_storage._databaseEffect {return false}
        if _storage._databaseDuration != rhs_storage._databaseDuration {return false}
        if _storage._databaseDirection != rhs_storage._databaseDirection {return false}
        if _storage._databaseDelay != rhs_storage._databaseDelay {return false}
        if _storage._databaseIsAutomatic != rhs_storage._databaseIsAutomatic {return false}
        if _storage._databaseColor != rhs_storage._databaseColor {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TransitionCustomAttributesTimingCurveTypeLinear"),
    2: .same(proto: "TransitionCustomAttributesTimingCurveTypeEaseIn"),
    3: .same(proto: "TransitionCustomAttributesTimingCurveTypeEaseOut"),
    4: .same(proto: "TransitionCustomAttributesTimingCurveTypeEaseInEaseOut"),
    5: .same(proto: "TransitionCustomAttributesTimingCurveTypeCustom"),
  ]
}

extension KN_TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TransitionCustomAttributesTextDeliveryTypeByObject"),
    2: .same(proto: "TransitionCustomAttributesTextDeliveryTypeByWord"),
    3: .same(proto: "TransitionCustomAttributesTextDeliveryTypeByCharacter"),
    4: .same(proto: "TransitionCustomAttributesTextDeliveryTypeByLine"),
  ]
}

extension KN_TransitionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransitionArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "attributes"),
  ]

  public var isInitialized: Bool {
    if self._attributes == nil {return false}
    if let v = self._attributes, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularMessageField(value: &self._attributes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._attributes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_TransitionArchive, rhs: KN_TransitionArchive) -> Bool {
    if lhs._attributes != rhs._attributes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_BuildChunkArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BuildChunkArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "build"),
    2: .same(proto: "index"),
    3: .same(proto: "delay"),
    4: .same(proto: "duration"),
    5: .same(proto: "automatic"),
    6: .same(proto: "referent"),
    7: .standard(proto: "build_chunk_identifier"),
    8: .standard(proto: "build_id"),
  ]

  public var isInitialized: Bool {
    if let v = self._build, !v.isInitialized {return false}
    if let v = self._buildChunkIdentifier, !v.isInitialized {return false}
    if let v = self._buildID, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._build)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._index)
      case 3: try decoder.decodeSingularDoubleField(value: &self._delay)
      case 4: try decoder.decodeSingularDoubleField(value: &self._duration)
      case 5: try decoder.decodeSingularBoolField(value: &self._automatic)
      case 6: try decoder.decodeSingularBoolField(value: &self._referent)
      case 7: try decoder.decodeSingularMessageField(value: &self._buildChunkIdentifier)
      case 8: try decoder.decodeSingularMessageField(value: &self._buildID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._build {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._index {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._delay {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }
    if let v = self._duration {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    }
    if let v = self._automatic {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._referent {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._buildChunkIdentifier {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._buildID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_BuildChunkArchive, rhs: KN_BuildChunkArchive) -> Bool {
    if lhs._build != rhs._build {return false}
    if lhs._index != rhs._index {return false}
    if lhs._delay != rhs._delay {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._automatic != rhs._automatic {return false}
    if lhs._referent != rhs._referent {return false}
    if lhs._buildChunkIdentifier != rhs._buildChunkIdentifier {return false}
    if lhs._buildID != rhs._buildID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_BuildChunkIdentifierArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BuildChunkIdentifierArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "build_id"),
    2: .standard(proto: "build_chunk_id"),
  ]

  public var isInitialized: Bool {
    if let v = self._buildID, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._buildID)
      case 2: try decoder.decodeSingularInt32Field(value: &self._buildChunkID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._buildID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._buildChunkID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_BuildChunkIdentifierArchive, rhs: KN_BuildChunkIdentifierArchive) -> Bool {
    if lhs._buildID != rhs._buildID {return false}
    if lhs._buildChunkID != rhs._buildChunkID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_BuildAttributeValueArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BuildAttributeValueArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "integer_value"),
    2: .standard(proto: "double_value"),
    3: .standard(proto: "bool_value"),
    4: .standard(proto: "string_value"),
    5: .standard(proto: "path_source_value"),
    6: .standard(proto: "color_value"),
    7: .same(proto: "type"),
  ]

  public var isInitialized: Bool {
    if let v = self._pathSourceValue, !v.isInitialized {return false}
    if let v = self._colorValue, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._integerValue)
      case 2: try decoder.decodeSingularDoubleField(value: &self._doubleValue)
      case 3: try decoder.decodeSingularBoolField(value: &self._boolValue)
      case 4: try decoder.decodeSingularStringField(value: &self._stringValue)
      case 5: try decoder.decodeSingularMessageField(value: &self._pathSourceValue)
      case 6: try decoder.decodeSingularMessageField(value: &self._colorValue)
      case 7: try decoder.decodeSingularEnumField(value: &self._type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._integerValue {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._doubleValue {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    if let v = self._boolValue {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._stringValue {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._pathSourceValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._colorValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_BuildAttributeValueArchive, rhs: KN_BuildAttributeValueArchive) -> Bool {
    if lhs._integerValue != rhs._integerValue {return false}
    if lhs._doubleValue != rhs._doubleValue {return false}
    if lhs._boolValue != rhs._boolValue {return false}
    if lhs._stringValue != rhs._stringValue {return false}
    if lhs._pathSourceValue != rhs._pathSourceValue {return false}
    if lhs._colorValue != rhs._colorValue {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_BuildAttributeValueArchive.BuildAttributeValueType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "k_integer"),
    2: .same(proto: "k_double"),
    3: .same(proto: "k_bool"),
    4: .same(proto: "k_string"),
    5: .same(proto: "k_path_source"),
    6: .same(proto: "k_color"),
  ]
}

extension KN_BuildAttributeTupleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BuildAttributeTupleArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "property"),
    2: .same(proto: "value"),
    3: .standard(proto: "build_id"),
    4: .standard(proto: "build_chunk_identifier"),
  ]

  public var isInitialized: Bool {
    if let v = self._value, !v.isInitialized {return false}
    if let v = self._buildID, !v.isInitialized {return false}
    if let v = self._buildChunkIdentifier, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._property)
      case 2: try decoder.decodeSingularMessageField(value: &self._value)
      case 3: try decoder.decodeSingularMessageField(value: &self._buildID)
      case 4: try decoder.decodeSingularMessageField(value: &self._buildChunkIdentifier)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._property {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._buildID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._buildChunkIdentifier {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_BuildAttributeTupleArchive, rhs: KN_BuildAttributeTupleArchive) -> Bool {
    if lhs._property != rhs._property {return false}
    if lhs._value != rhs._value {return false}
    if lhs._buildID != rhs._buildID {return false}
    if lhs._buildChunkIdentifier != rhs._buildChunkIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_BuildAttributesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BuildAttributesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    18: .same(proto: "animationAttributes"),
    4: .same(proto: "eventTrigger"),
    6: .same(proto: "delayAutomaticAfter"),
    7: .same(proto: "delayAutomaticWith"),
    14: .same(proto: "curveStyle"),
    17: .same(proto: "ChartRotation3D"),
    27: .same(proto: "startOffset"),
    28: .same(proto: "endOffset"),
    9: .standard(proto: "action_rotationAngle"),
    10: .standard(proto: "action_rotationDirection"),
    11: .standard(proto: "action_scaleSize"),
    12: .standard(proto: "action_colorAlpha"),
    13: .standard(proto: "action_acceleration"),
    22: .standard(proto: "action_motionPathSource"),
    19: .standard(proto: "custom_bounce"),
    20: .standard(proto: "custom_textDelivery"),
    21: .standard(proto: "custom_deliveryOption"),
    23: .standard(proto: "custom_action_decay"),
    24: .standard(proto: "custom_action_repeatCount"),
    25: .standard(proto: "custom_action_scale"),
    26: .standard(proto: "custom_action_jiggleIntensity"),
    29: .standard(proto: "custom_motion_blur"),
    30: .standard(proto: "custom_include_endpoints"),
    33: .standard(proto: "custom_shine"),
    34: .standard(proto: "custom_scale_amount"),
    35: .standard(proto: "custom_travel_distance"),
    36: .standard(proto: "custom_cursor"),
    1: .standard(proto: "database_animationType"),
    2: .standard(proto: "database_effect"),
    3: .standard(proto: "database_direction"),
    5: .standard(proto: "database_delay"),
    8: .standard(proto: "database_duration"),
    16: .standard(proto: "database_color"),
    15: .same(proto: "motionPathString"),
  ]

  fileprivate class _StorageClass {
    var _animationAttributes: KN_AnimationAttributesArchive? = nil
    var _eventTrigger: UInt32? = nil
    var _delayAutomaticAfter: Double? = nil
    var _delayAutomaticWith: Double? = nil
    var _curveStyle: KN_BuildAttributesArchive.BuildAttributesCurveStyle? = nil
    var _chartRotation3D: Double? = nil
    var _startOffset: UInt32? = nil
    var _endOffset: UInt32? = nil
    var _actionRotationAngle: Double? = nil
    var _actionRotationDirection: KN_BuildAttributesArchive.BuildAttributesRotationDirection? = nil
    var _actionScaleSize: Double? = nil
    var _actionColorAlpha: Double? = nil
    var _actionAcceleration: KN_BuildAttributesArchive.BuildAttributesAcceleration? = nil
    var _actionMotionPathSource: TSD_PathSourceArchive? = nil
    var _customBounce: Bool? = nil
    var _customTextDelivery: KN_BuildAttributesArchive.BuildAttributesTextDelivery? = nil
    var _customDeliveryOption: KN_BuildAttributesArchive.BuildAttributesDeliveryOption? = nil
    var _customActionDecay: Bool? = nil
    var _customActionRepeatCount: UInt32? = nil
    var _customActionScale: Double? = nil
    var _customActionJiggleIntensity: KN_BuildAttributesArchive.ActionBuildAttributesJiggleIntensity? = nil
    var _customMotionBlur: Bool? = nil
    var _customIncludeEndpoints: Bool? = nil
    var _customShine: Bool? = nil
    var _customScaleAmount: Double? = nil
    var _customTravelDistance: Double? = nil
    var _customCursor: Bool? = nil
    var _databaseAnimationType: String? = nil
    var _databaseEffect: String? = nil
    var _databaseDirection: UInt32? = nil
    var _databaseDelay: Double? = nil
    var _databaseDuration: Double? = nil
    var _databaseColor: TSP_Color? = nil
    var _motionPathString: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _animationAttributes = source._animationAttributes
      _eventTrigger = source._eventTrigger
      _delayAutomaticAfter = source._delayAutomaticAfter
      _delayAutomaticWith = source._delayAutomaticWith
      _curveStyle = source._curveStyle
      _chartRotation3D = source._chartRotation3D
      _startOffset = source._startOffset
      _endOffset = source._endOffset
      _actionRotationAngle = source._actionRotationAngle
      _actionRotationDirection = source._actionRotationDirection
      _actionScaleSize = source._actionScaleSize
      _actionColorAlpha = source._actionColorAlpha
      _actionAcceleration = source._actionAcceleration
      _actionMotionPathSource = source._actionMotionPathSource
      _customBounce = source._customBounce
      _customTextDelivery = source._customTextDelivery
      _customDeliveryOption = source._customDeliveryOption
      _customActionDecay = source._customActionDecay
      _customActionRepeatCount = source._customActionRepeatCount
      _customActionScale = source._customActionScale
      _customActionJiggleIntensity = source._customActionJiggleIntensity
      _customMotionBlur = source._customMotionBlur
      _customIncludeEndpoints = source._customIncludeEndpoints
      _customShine = source._customShine
      _customScaleAmount = source._customScaleAmount
      _customTravelDistance = source._customTravelDistance
      _customCursor = source._customCursor
      _databaseAnimationType = source._databaseAnimationType
      _databaseEffect = source._databaseEffect
      _databaseDirection = source._databaseDirection
      _databaseDelay = source._databaseDelay
      _databaseDuration = source._databaseDuration
      _databaseColor = source._databaseColor
      _motionPathString = source._motionPathString
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._animationAttributes, !v.isInitialized {return false}
      if let v = _storage._actionMotionPathSource, !v.isInitialized {return false}
      if let v = _storage._databaseColor, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._databaseAnimationType)
        case 2: try decoder.decodeSingularStringField(value: &_storage._databaseEffect)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._databaseDirection)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._eventTrigger)
        case 5: try decoder.decodeSingularDoubleField(value: &_storage._databaseDelay)
        case 6: try decoder.decodeSingularDoubleField(value: &_storage._delayAutomaticAfter)
        case 7: try decoder.decodeSingularDoubleField(value: &_storage._delayAutomaticWith)
        case 8: try decoder.decodeSingularDoubleField(value: &_storage._databaseDuration)
        case 9: try decoder.decodeSingularDoubleField(value: &_storage._actionRotationAngle)
        case 10: try decoder.decodeSingularEnumField(value: &_storage._actionRotationDirection)
        case 11: try decoder.decodeSingularDoubleField(value: &_storage._actionScaleSize)
        case 12: try decoder.decodeSingularDoubleField(value: &_storage._actionColorAlpha)
        case 13: try decoder.decodeSingularEnumField(value: &_storage._actionAcceleration)
        case 14: try decoder.decodeSingularEnumField(value: &_storage._curveStyle)
        case 15: try decoder.decodeSingularStringField(value: &_storage._motionPathString)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._databaseColor)
        case 17: try decoder.decodeSingularDoubleField(value: &_storage._chartRotation3D)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._animationAttributes)
        case 19: try decoder.decodeSingularBoolField(value: &_storage._customBounce)
        case 20: try decoder.decodeSingularEnumField(value: &_storage._customTextDelivery)
        case 21: try decoder.decodeSingularEnumField(value: &_storage._customDeliveryOption)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._actionMotionPathSource)
        case 23: try decoder.decodeSingularBoolField(value: &_storage._customActionDecay)
        case 24: try decoder.decodeSingularUInt32Field(value: &_storage._customActionRepeatCount)
        case 25: try decoder.decodeSingularDoubleField(value: &_storage._customActionScale)
        case 26: try decoder.decodeSingularEnumField(value: &_storage._customActionJiggleIntensity)
        case 27: try decoder.decodeSingularUInt32Field(value: &_storage._startOffset)
        case 28: try decoder.decodeSingularUInt32Field(value: &_storage._endOffset)
        case 29: try decoder.decodeSingularBoolField(value: &_storage._customMotionBlur)
        case 30: try decoder.decodeSingularBoolField(value: &_storage._customIncludeEndpoints)
        case 33: try decoder.decodeSingularBoolField(value: &_storage._customShine)
        case 34: try decoder.decodeSingularDoubleField(value: &_storage._customScaleAmount)
        case 35: try decoder.decodeSingularDoubleField(value: &_storage._customTravelDistance)
        case 36: try decoder.decodeSingularBoolField(value: &_storage._customCursor)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._databaseAnimationType {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._databaseEffect {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._databaseDirection {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._eventTrigger {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._databaseDelay {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      }
      if let v = _storage._delayAutomaticAfter {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
      }
      if let v = _storage._delayAutomaticWith {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
      }
      if let v = _storage._databaseDuration {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
      }
      if let v = _storage._actionRotationAngle {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 9)
      }
      if let v = _storage._actionRotationDirection {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 10)
      }
      if let v = _storage._actionScaleSize {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
      }
      if let v = _storage._actionColorAlpha {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      }
      if let v = _storage._actionAcceleration {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 13)
      }
      if let v = _storage._curveStyle {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 14)
      }
      if let v = _storage._motionPathString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
      }
      if let v = _storage._databaseColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._chartRotation3D {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 17)
      }
      if let v = _storage._animationAttributes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._customBounce {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      }
      if let v = _storage._customTextDelivery {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 20)
      }
      if let v = _storage._customDeliveryOption {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 21)
      }
      if let v = _storage._actionMotionPathSource {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if let v = _storage._customActionDecay {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      }
      if let v = _storage._customActionRepeatCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 24)
      }
      if let v = _storage._customActionScale {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 25)
      }
      if let v = _storage._customActionJiggleIntensity {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 26)
      }
      if let v = _storage._startOffset {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 27)
      }
      if let v = _storage._endOffset {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 28)
      }
      if let v = _storage._customMotionBlur {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 29)
      }
      if let v = _storage._customIncludeEndpoints {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 30)
      }
      if let v = _storage._customShine {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 33)
      }
      if let v = _storage._customScaleAmount {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 34)
      }
      if let v = _storage._customTravelDistance {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 35)
      }
      if let v = _storage._customCursor {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 36)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_BuildAttributesArchive, rhs: KN_BuildAttributesArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._animationAttributes != rhs_storage._animationAttributes {return false}
        if _storage._eventTrigger != rhs_storage._eventTrigger {return false}
        if _storage._delayAutomaticAfter != rhs_storage._delayAutomaticAfter {return false}
        if _storage._delayAutomaticWith != rhs_storage._delayAutomaticWith {return false}
        if _storage._curveStyle != rhs_storage._curveStyle {return false}
        if _storage._chartRotation3D != rhs_storage._chartRotation3D {return false}
        if _storage._startOffset != rhs_storage._startOffset {return false}
        if _storage._endOffset != rhs_storage._endOffset {return false}
        if _storage._actionRotationAngle != rhs_storage._actionRotationAngle {return false}
        if _storage._actionRotationDirection != rhs_storage._actionRotationDirection {return false}
        if _storage._actionScaleSize != rhs_storage._actionScaleSize {return false}
        if _storage._actionColorAlpha != rhs_storage._actionColorAlpha {return false}
        if _storage._actionAcceleration != rhs_storage._actionAcceleration {return false}
        if _storage._actionMotionPathSource != rhs_storage._actionMotionPathSource {return false}
        if _storage._customBounce != rhs_storage._customBounce {return false}
        if _storage._customTextDelivery != rhs_storage._customTextDelivery {return false}
        if _storage._customDeliveryOption != rhs_storage._customDeliveryOption {return false}
        if _storage._customActionDecay != rhs_storage._customActionDecay {return false}
        if _storage._customActionRepeatCount != rhs_storage._customActionRepeatCount {return false}
        if _storage._customActionScale != rhs_storage._customActionScale {return false}
        if _storage._customActionJiggleIntensity != rhs_storage._customActionJiggleIntensity {return false}
        if _storage._customMotionBlur != rhs_storage._customMotionBlur {return false}
        if _storage._customIncludeEndpoints != rhs_storage._customIncludeEndpoints {return false}
        if _storage._customShine != rhs_storage._customShine {return false}
        if _storage._customScaleAmount != rhs_storage._customScaleAmount {return false}
        if _storage._customTravelDistance != rhs_storage._customTravelDistance {return false}
        if _storage._customCursor != rhs_storage._customCursor {return false}
        if _storage._databaseAnimationType != rhs_storage._databaseAnimationType {return false}
        if _storage._databaseEffect != rhs_storage._databaseEffect {return false}
        if _storage._databaseDirection != rhs_storage._databaseDirection {return false}
        if _storage._databaseDelay != rhs_storage._databaseDelay {return false}
        if _storage._databaseDuration != rhs_storage._databaseDuration {return false}
        if _storage._databaseColor != rhs_storage._databaseColor {return false}
        if _storage._motionPathString != rhs_storage._motionPathString {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_BuildAttributesArchive.BuildAttributesAcceleration: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kNone"),
    1: .same(proto: "kEaseIn"),
    2: .same(proto: "kEaseOut"),
    3: .same(proto: "kEaseBoth"),
    4: .same(proto: "kCustom"),
  ]
}

extension KN_BuildAttributesArchive.BuildAttributesRotationDirection: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    31: .same(proto: "kClockwise"),
    32: .same(proto: "kCounterclockwise"),
  ]
}

extension KN_BuildAttributesArchive.BuildAttributesCurveStyle: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kStraight"),
    1: .same(proto: "kCurved"),
  ]
}

extension KN_BuildAttributesArchive.BuildAttributesTextDelivery: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kTextDeliveryUndefined"),
    1: .same(proto: "kTextDeliveryByObject"),
    2: .same(proto: "kTextDeliveryByWord"),
    3: .same(proto: "kTextDeliveryByCharacter"),
    4: .same(proto: "kTextDeliveryByLine"),
  ]
}

extension KN_BuildAttributesArchive.BuildAttributesDeliveryOption: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kDeliveryOptionUndefined"),
    1: .same(proto: "kDeliveryOptionForward"),
    2: .same(proto: "kDeliveryOptionBackward"),
    3: .same(proto: "kDeliveryOptionFromCenter"),
    4: .same(proto: "kDeliveryOptionFromEdges"),
    5: .same(proto: "kDeliveryOptionRandom"),
  ]
}

extension KN_BuildAttributesArchive.ActionBuildAttributesJiggleIntensity: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kJiggleIntensitySmall"),
    1: .same(proto: "kJiggleIntensityMedium"),
    2: .same(proto: "kJiggleIntensityLarge"),
  ]
}

extension KN_BuildArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BuildArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "drawable"),
    2: .same(proto: "delivery"),
    3: .same(proto: "duration"),
    4: .same(proto: "attributes"),
    5: .standard(proto: "chunk_id_seed"),
  ]

  public var isInitialized: Bool {
    if self._delivery == nil {return false}
    if self._attributes == nil {return false}
    if let v = self._drawable, !v.isInitialized {return false}
    if let v = self._attributes, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._drawable)
      case 2: try decoder.decodeSingularStringField(value: &self._delivery)
      case 3: try decoder.decodeSingularDoubleField(value: &self._duration)
      case 4: try decoder.decodeSingularMessageField(value: &self._attributes)
      case 5: try decoder.decodeSingularInt32Field(value: &self._chunkIDSeed)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._drawable {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._delivery {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._duration {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }
    if let v = self._attributes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._chunkIDSeed {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_BuildArchive, rhs: KN_BuildArchive) -> Bool {
    if lhs._drawable != rhs._drawable {return false}
    if lhs._delivery != rhs._delivery {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._attributes != rhs._attributes {return false}
    if lhs._chunkIDSeed != rhs._chunkIDSeed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_PlaceholderArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlaceholderArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "kind"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeSingularEnumField(value: &self._kind)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._kind {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_PlaceholderArchive, rhs: KN_PlaceholderArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._kind != rhs._kind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_PlaceholderArchive.Kind: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kKindPlaceholder"),
    1: .same(proto: "kKindSlideNumberPlaceholder"),
    2: .same(proto: "kKindTitlePlaceholder"),
    3: .same(proto: "kKindBodyPlaceholder"),
    4: .same(proto: "kKindObjectPlaceholder"),
  ]
}

extension KN_NoteArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NoteArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "containedStorage"),
  ]

  public var isInitialized: Bool {
    if self._containedStorage == nil {return false}
    if let v = self._containedStorage, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._containedStorage)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._containedStorage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_NoteArchive, rhs: KN_NoteArchive) -> Bool {
    if lhs._containedStorage != rhs._containedStorage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_ClassicStylesheetRecordArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClassicStylesheetRecordArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identifier_to_style_map"),
    2: .standard(proto: "deprecated_theme"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.identifierToStyleMap) {return false}
    if let v = self._deprecatedTheme, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.identifierToStyleMap)
      case 2: try decoder.decodeSingularMessageField(value: &self._deprecatedTheme)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identifierToStyleMap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.identifierToStyleMap, fieldNumber: 1)
    }
    if let v = self._deprecatedTheme {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_ClassicStylesheetRecordArchive, rhs: KN_ClassicStylesheetRecordArchive) -> Bool {
    if lhs.identifierToStyleMap != rhs.identifierToStyleMap {return false}
    if lhs._deprecatedTheme != rhs._deprecatedTheme {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_ClassicThemeRecordArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClassicThemeRecordArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "stylesheetRecord"),
    3: .same(proto: "masters"),
  ]

  public var isInitialized: Bool {
    if let v = self._stylesheetRecord, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.masters) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._uuid)
      case 2: try decoder.decodeSingularMessageField(value: &self._stylesheetRecord)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.masters)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._uuid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._stylesheetRecord {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.masters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.masters, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_ClassicThemeRecordArchive, rhs: KN_ClassicThemeRecordArchive) -> Bool {
    if lhs._uuid != rhs._uuid {return false}
    if lhs._stylesheetRecord != rhs._stylesheetRecord {return false}
    if lhs.masters != rhs.masters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".SlideArchive"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "style"),
    2: .same(proto: "builds"),
    3: .same(proto: "buildChunkArchives"),
    43: .same(proto: "buildChunks"),
    4: .same(proto: "transition"),
    5: .same(proto: "titlePlaceholder"),
    6: .same(proto: "bodyPlaceholder"),
    30: .same(proto: "objectPlaceholder"),
    20: .same(proto: "slideNumberPlaceholder"),
    7: .standard(proto: "owned_drawables"),
    42: .standard(proto: "drawables_z_order"),
    28: .standard(proto: "sage_tag_to_info_map"),
    45: .standard(proto: "instructional_text_map"),
    10: .same(proto: "name"),
    11: .same(proto: "titlePlaceholderGeometry"),
    12: .same(proto: "titlePlaceholderShapeStyleIndex"),
    13: .same(proto: "titlePlaceholderTextStyleIndex"),
    24: .same(proto: "titleLayoutProperties"),
    14: .same(proto: "bodyPlaceholderGeometry"),
    15: .same(proto: "bodyPlaceholderShapeStyleIndex"),
    16: .same(proto: "bodyPlaceholderTextStyleIndex"),
    25: .same(proto: "bodyLayoutProperties"),
    21: .same(proto: "slideNumberPlaceholderGeometry"),
    22: .same(proto: "slideNumberPlaceholderShapeStyleIndex"),
    23: .same(proto: "slideNumberPlaceholderTextStyleIndex"),
    26: .same(proto: "slideNumberLayoutProperties"),
    29: .same(proto: "classicStylesheetRecord"),
    31: .same(proto: "bodyParagraphStyles"),
    35: .same(proto: "bodyListStyles"),
    37: .same(proto: "thumbnailTextForTitlePlaceholder"),
    38: .same(proto: "thumbnailTextForBodyPlaceholder"),
    41: .same(proto: "slideObjectsLayerWithMaster"),
    17: .same(proto: "master"),
    18: .same(proto: "staticGuides"),
    36: .same(proto: "userDefinedGuideStorage"),
    19: .same(proto: "inDocument"),
    27: .same(proto: "note"),
    44: .standard(proto: "infos_using_object_placeholder_geometry"),
    34: .standard(proto: "deprecated_objectPlaceholderVisibleForExport"),
    39: .standard(proto: "info_using_object_placeholder_geometry"),
    40: .standard(proto: "info_using_object_placeholder_geometry_matches_object_placeholder_geometry"),
  ]

  fileprivate class _StorageClass {
    var _style: TSP_Reference? = nil
    var _builds: [TSP_Reference] = []
    var _buildChunkArchives: [KN_BuildChunkArchive] = []
    var _buildChunks: [TSP_Reference] = []
    var _transition: KN_TransitionArchive? = nil
    var _titlePlaceholder: TSP_Reference? = nil
    var _bodyPlaceholder: TSP_Reference? = nil
    var _objectPlaceholder: TSP_Reference? = nil
    var _slideNumberPlaceholder: TSP_Reference? = nil
    var _ownedDrawables: [TSP_Reference] = []
    var _drawablesZOrder: [TSP_Reference] = []
    var _sageTagToInfoMap: [KN_SlideArchive.SageTagMapEntry] = []
    var _instructionalTextMap: KN_SlideArchive.InstructionalTextMap? = nil
    var _name: String? = nil
    var _titlePlaceholderGeometry: TSD_GeometryArchive? = nil
    var _titlePlaceholderShapeStyleIndex: UInt32? = nil
    var _titlePlaceholderTextStyleIndex: UInt32? = nil
    var _titleLayoutProperties: TSWP_ShapeStylePropertiesArchive? = nil
    var _bodyPlaceholderGeometry: TSD_GeometryArchive? = nil
    var _bodyPlaceholderShapeStyleIndex: UInt32? = nil
    var _bodyPlaceholderTextStyleIndex: UInt32? = nil
    var _bodyLayoutProperties: TSWP_ShapeStylePropertiesArchive? = nil
    var _slideNumberPlaceholderGeometry: TSD_GeometryArchive? = nil
    var _slideNumberPlaceholderShapeStyleIndex: UInt32? = nil
    var _slideNumberPlaceholderTextStyleIndex: UInt32? = nil
    var _slideNumberLayoutProperties: TSWP_ShapeStylePropertiesArchive? = nil
    var _classicStylesheetRecord: TSP_Reference? = nil
    var _bodyParagraphStyles: [TSP_Reference] = []
    var _bodyListStyles: [TSP_Reference] = []
    var _thumbnailTextForTitlePlaceholder: String? = nil
    var _thumbnailTextForBodyPlaceholder: String? = nil
    var _slideObjectsLayerWithMaster: Bool? = nil
    var _master: TSP_Reference? = nil
    var _staticGuides: [TSD_GuideArchive] = []
    var _userDefinedGuideStorage: TSP_Reference? = nil
    var _inDocument: Bool? = nil
    var _note: TSP_Reference? = nil
    var _infosUsingObjectPlaceholderGeometry: [TSP_Reference] = []
    var _deprecatedObjectPlaceholderVisibleForExport: Bool? = nil
    var _infoUsingObjectPlaceholderGeometry: TSP_Reference? = nil
    var _infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry: Bool? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _style = source._style
      _builds = source._builds
      _buildChunkArchives = source._buildChunkArchives
      _buildChunks = source._buildChunks
      _transition = source._transition
      _titlePlaceholder = source._titlePlaceholder
      _bodyPlaceholder = source._bodyPlaceholder
      _objectPlaceholder = source._objectPlaceholder
      _slideNumberPlaceholder = source._slideNumberPlaceholder
      _ownedDrawables = source._ownedDrawables
      _drawablesZOrder = source._drawablesZOrder
      _sageTagToInfoMap = source._sageTagToInfoMap
      _instructionalTextMap = source._instructionalTextMap
      _name = source._name
      _titlePlaceholderGeometry = source._titlePlaceholderGeometry
      _titlePlaceholderShapeStyleIndex = source._titlePlaceholderShapeStyleIndex
      _titlePlaceholderTextStyleIndex = source._titlePlaceholderTextStyleIndex
      _titleLayoutProperties = source._titleLayoutProperties
      _bodyPlaceholderGeometry = source._bodyPlaceholderGeometry
      _bodyPlaceholderShapeStyleIndex = source._bodyPlaceholderShapeStyleIndex
      _bodyPlaceholderTextStyleIndex = source._bodyPlaceholderTextStyleIndex
      _bodyLayoutProperties = source._bodyLayoutProperties
      _slideNumberPlaceholderGeometry = source._slideNumberPlaceholderGeometry
      _slideNumberPlaceholderShapeStyleIndex = source._slideNumberPlaceholderShapeStyleIndex
      _slideNumberPlaceholderTextStyleIndex = source._slideNumberPlaceholderTextStyleIndex
      _slideNumberLayoutProperties = source._slideNumberLayoutProperties
      _classicStylesheetRecord = source._classicStylesheetRecord
      _bodyParagraphStyles = source._bodyParagraphStyles
      _bodyListStyles = source._bodyListStyles
      _thumbnailTextForTitlePlaceholder = source._thumbnailTextForTitlePlaceholder
      _thumbnailTextForBodyPlaceholder = source._thumbnailTextForBodyPlaceholder
      _slideObjectsLayerWithMaster = source._slideObjectsLayerWithMaster
      _master = source._master
      _staticGuides = source._staticGuides
      _userDefinedGuideStorage = source._userDefinedGuideStorage
      _inDocument = source._inDocument
      _note = source._note
      _infosUsingObjectPlaceholderGeometry = source._infosUsingObjectPlaceholderGeometry
      _deprecatedObjectPlaceholderVisibleForExport = source._deprecatedObjectPlaceholderVisibleForExport
      _infoUsingObjectPlaceholderGeometry = source._infoUsingObjectPlaceholderGeometry
      _infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry = source._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._style == nil {return false}
      if _storage._transition == nil {return false}
      if _storage._inDocument == nil {return false}
      if let v = _storage._style, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._builds) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._buildChunkArchives) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._buildChunks) {return false}
      if let v = _storage._transition, !v.isInitialized {return false}
      if let v = _storage._titlePlaceholder, !v.isInitialized {return false}
      if let v = _storage._bodyPlaceholder, !v.isInitialized {return false}
      if let v = _storage._objectPlaceholder, !v.isInitialized {return false}
      if let v = _storage._slideNumberPlaceholder, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._ownedDrawables) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._drawablesZOrder) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._sageTagToInfoMap) {return false}
      if let v = _storage._instructionalTextMap, !v.isInitialized {return false}
      if let v = _storage._titlePlaceholderGeometry, !v.isInitialized {return false}
      if let v = _storage._titleLayoutProperties, !v.isInitialized {return false}
      if let v = _storage._bodyPlaceholderGeometry, !v.isInitialized {return false}
      if let v = _storage._bodyLayoutProperties, !v.isInitialized {return false}
      if let v = _storage._slideNumberPlaceholderGeometry, !v.isInitialized {return false}
      if let v = _storage._slideNumberLayoutProperties, !v.isInitialized {return false}
      if let v = _storage._classicStylesheetRecord, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._bodyParagraphStyles) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._bodyListStyles) {return false}
      if let v = _storage._master, !v.isInitialized {return false}
      if let v = _storage._userDefinedGuideStorage, !v.isInitialized {return false}
      if let v = _storage._note, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._infosUsingObjectPlaceholderGeometry) {return false}
      if let v = _storage._infoUsingObjectPlaceholderGeometry, !v.isInitialized {return false}
      return true
    }
  }

    mutating public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._style)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._builds)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._buildChunkArchives)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._transition)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._titlePlaceholder)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._bodyPlaceholder)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._ownedDrawables)
        case 10: try decoder.decodeSingularStringField(value: &_storage._name)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._titlePlaceholderGeometry)
        case 12: try decoder.decodeSingularUInt32Field(value: &_storage._titlePlaceholderShapeStyleIndex)
        case 13: try decoder.decodeSingularUInt32Field(value: &_storage._titlePlaceholderTextStyleIndex)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._bodyPlaceholderGeometry)
        case 15: try decoder.decodeSingularUInt32Field(value: &_storage._bodyPlaceholderShapeStyleIndex)
        case 16: try decoder.decodeSingularUInt32Field(value: &_storage._bodyPlaceholderTextStyleIndex)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._master)
        case 18: try decoder.decodeRepeatedMessageField(value: &_storage._staticGuides)
        case 19: try decoder.decodeSingularBoolField(value: &_storage._inDocument)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._slideNumberPlaceholder)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._slideNumberPlaceholderGeometry)
        case 22: try decoder.decodeSingularUInt32Field(value: &_storage._slideNumberPlaceholderShapeStyleIndex)
        case 23: try decoder.decodeSingularUInt32Field(value: &_storage._slideNumberPlaceholderTextStyleIndex)
        case 24: try decoder.decodeSingularMessageField(value: &_storage._titleLayoutProperties)
        case 25: try decoder.decodeSingularMessageField(value: &_storage._bodyLayoutProperties)
        case 26: try decoder.decodeSingularMessageField(value: &_storage._slideNumberLayoutProperties)
        case 27: try decoder.decodeSingularMessageField(value: &_storage._note)
        case 28: try decoder.decodeRepeatedMessageField(value: &_storage._sageTagToInfoMap)
        case 29: try decoder.decodeSingularMessageField(value: &_storage._classicStylesheetRecord)
        case 30: try decoder.decodeSingularMessageField(value: &_storage._objectPlaceholder)
        case 31: try decoder.decodeRepeatedMessageField(value: &_storage._bodyParagraphStyles)
        case 34: try decoder.decodeSingularBoolField(value: &_storage._deprecatedObjectPlaceholderVisibleForExport)
        case 35: try decoder.decodeRepeatedMessageField(value: &_storage._bodyListStyles)
        case 36: try decoder.decodeSingularMessageField(value: &_storage._userDefinedGuideStorage)
        case 37: try decoder.decodeSingularStringField(value: &_storage._thumbnailTextForTitlePlaceholder)
        case 38: try decoder.decodeSingularStringField(value: &_storage._thumbnailTextForBodyPlaceholder)
        case 39: try decoder.decodeSingularMessageField(value: &_storage._infoUsingObjectPlaceholderGeometry)
        case 40: try decoder.decodeSingularBoolField(value: &_storage._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry)
        case 41: try decoder.decodeSingularBoolField(value: &_storage._slideObjectsLayerWithMaster)
        case 42: try decoder.decodeRepeatedMessageField(value: &_storage._drawablesZOrder)
        case 43: try decoder.decodeRepeatedMessageField(value: &_storage._buildChunks)
        case 44: try decoder.decodeRepeatedMessageField(value: &_storage._infosUsingObjectPlaceholderGeometry)
        case 45: try decoder.decodeSingularMessageField(value: &_storage._instructionalTextMap)
        default: break
        }
      }
    }
  }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._style {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._builds.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._builds, fieldNumber: 2)
      }
      if !_storage._buildChunkArchives.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._buildChunkArchives, fieldNumber: 3)
      }
      if let v = _storage._transition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._titlePlaceholder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._bodyPlaceholder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._ownedDrawables.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._ownedDrawables, fieldNumber: 7)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      }
      if let v = _storage._titlePlaceholderGeometry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._titlePlaceholderShapeStyleIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
      }
      if let v = _storage._titlePlaceholderTextStyleIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 13)
      }
      if let v = _storage._bodyPlaceholderGeometry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._bodyPlaceholderShapeStyleIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 15)
      }
      if let v = _storage._bodyPlaceholderTextStyleIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 16)
      }
      if let v = _storage._master {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if !_storage._staticGuides.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._staticGuides, fieldNumber: 18)
      }
      if let v = _storage._inDocument {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      }
      if let v = _storage._slideNumberPlaceholder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._slideNumberPlaceholderGeometry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._slideNumberPlaceholderShapeStyleIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 22)
      }
      if let v = _storage._slideNumberPlaceholderTextStyleIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 23)
      }
      if let v = _storage._titleLayoutProperties {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
      if let v = _storage._bodyLayoutProperties {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      }
      if let v = _storage._slideNumberLayoutProperties {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if let v = _storage._note {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      }
      if !_storage._sageTagToInfoMap.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._sageTagToInfoMap, fieldNumber: 28)
      }
      if let v = _storage._classicStylesheetRecord {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      }
      if let v = _storage._objectPlaceholder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }
      if !_storage._bodyParagraphStyles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._bodyParagraphStyles, fieldNumber: 31)
      }
      if let v = _storage._deprecatedObjectPlaceholderVisibleForExport {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 34)
      }
      if !_storage._bodyListStyles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._bodyListStyles, fieldNumber: 35)
      }
      if let v = _storage._userDefinedGuideStorage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 36)
      }
      if let v = _storage._thumbnailTextForTitlePlaceholder {
        try visitor.visitSingularStringField(value: v, fieldNumber: 37)
      }
      if let v = _storage._thumbnailTextForBodyPlaceholder {
        try visitor.visitSingularStringField(value: v, fieldNumber: 38)
      }
      if let v = _storage._infoUsingObjectPlaceholderGeometry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 39)
      }
      if let v = _storage._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 40)
      }
      if let v = _storage._slideObjectsLayerWithMaster {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 41)
      }
      if !_storage._drawablesZOrder.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._drawablesZOrder, fieldNumber: 42)
      }
      if !_storage._buildChunks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._buildChunks, fieldNumber: 43)
      }
      if !_storage._infosUsingObjectPlaceholderGeometry.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._infosUsingObjectPlaceholderGeometry, fieldNumber: 44)
      }
      if let v = _storage._instructionalTextMap {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 45)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

    public static func ==(lhs: KN_SlideArchive, rhs: KN_SlideArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._style != rhs_storage._style {return false}
        if _storage._builds != rhs_storage._builds {return false}
        if _storage._buildChunkArchives != rhs_storage._buildChunkArchives {return false}
        if _storage._buildChunks != rhs_storage._buildChunks {return false}
        if _storage._transition != rhs_storage._transition {return false}
        if _storage._titlePlaceholder != rhs_storage._titlePlaceholder {return false}
        if _storage._bodyPlaceholder != rhs_storage._bodyPlaceholder {return false}
        if _storage._objectPlaceholder != rhs_storage._objectPlaceholder {return false}
        if _storage._slideNumberPlaceholder != rhs_storage._slideNumberPlaceholder {return false}
        if _storage._ownedDrawables != rhs_storage._ownedDrawables {return false}
        if _storage._drawablesZOrder != rhs_storage._drawablesZOrder {return false}
        if _storage._sageTagToInfoMap != rhs_storage._sageTagToInfoMap {return false}
        if _storage._instructionalTextMap != rhs_storage._instructionalTextMap {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._titlePlaceholderGeometry != rhs_storage._titlePlaceholderGeometry {return false}
        if _storage._titlePlaceholderShapeStyleIndex != rhs_storage._titlePlaceholderShapeStyleIndex {return false}
        if _storage._titlePlaceholderTextStyleIndex != rhs_storage._titlePlaceholderTextStyleIndex {return false}
        if _storage._titleLayoutProperties != rhs_storage._titleLayoutProperties {return false}
        if _storage._bodyPlaceholderGeometry != rhs_storage._bodyPlaceholderGeometry {return false}
        if _storage._bodyPlaceholderShapeStyleIndex != rhs_storage._bodyPlaceholderShapeStyleIndex {return false}
        if _storage._bodyPlaceholderTextStyleIndex != rhs_storage._bodyPlaceholderTextStyleIndex {return false}
        if _storage._bodyLayoutProperties != rhs_storage._bodyLayoutProperties {return false}
        if _storage._slideNumberPlaceholderGeometry != rhs_storage._slideNumberPlaceholderGeometry {return false}
        if _storage._slideNumberPlaceholderShapeStyleIndex != rhs_storage._slideNumberPlaceholderShapeStyleIndex {return false}
        if _storage._slideNumberPlaceholderTextStyleIndex != rhs_storage._slideNumberPlaceholderTextStyleIndex {return false}
        if _storage._slideNumberLayoutProperties != rhs_storage._slideNumberLayoutProperties {return false}
        if _storage._classicStylesheetRecord != rhs_storage._classicStylesheetRecord {return false}
        if _storage._bodyParagraphStyles != rhs_storage._bodyParagraphStyles {return false}
        if _storage._bodyListStyles != rhs_storage._bodyListStyles {return false}
        if _storage._thumbnailTextForTitlePlaceholder != rhs_storage._thumbnailTextForTitlePlaceholder {return false}
        if _storage._thumbnailTextForBodyPlaceholder != rhs_storage._thumbnailTextForBodyPlaceholder {return false}
        if _storage._slideObjectsLayerWithMaster != rhs_storage._slideObjectsLayerWithMaster {return false}
        if _storage._master != rhs_storage._master {return false}
        if _storage._staticGuides != rhs_storage._staticGuides {return false}
        if _storage._userDefinedGuideStorage != rhs_storage._userDefinedGuideStorage {return false}
        if _storage._inDocument != rhs_storage._inDocument {return false}
        if _storage._note != rhs_storage._note {return false}
        if _storage._infosUsingObjectPlaceholderGeometry != rhs_storage._infosUsingObjectPlaceholderGeometry {return false}
        if _storage._deprecatedObjectPlaceholderVisibleForExport != rhs_storage._deprecatedObjectPlaceholderVisibleForExport {return false}
        if _storage._infoUsingObjectPlaceholderGeometry != rhs_storage._infoUsingObjectPlaceholderGeometry {return false}
        if _storage._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry != rhs_storage._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideArchive.SageTagMapEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = KN_SlideArchive.protoMessageName + ".SageTagMapEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "info"),
  ]

  public var isInitialized: Bool {
    if self._tag == nil {return false}
    if self._info == nil {return false}
    if let v = self._info, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._tag)
      case 2: try decoder.decodeSingularMessageField(value: &self._info)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._tag {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideArchive.SageTagMapEntry, rhs: KN_SlideArchive.SageTagMapEntry) -> Bool {
    if lhs._tag != rhs._tag {return false}
    if lhs._info != rhs._info {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideArchive.InstructionalTextMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = KN_SlideArchive.protoMessageName + ".InstructionalTextMap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instructional_text_for_infos"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.instructionalTextForInfos) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.instructionalTextForInfos)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instructionalTextForInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instructionalTextForInfos, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideArchive.InstructionalTextMap, rhs: KN_SlideArchive.InstructionalTextMap) -> Bool {
    if lhs.instructionalTextForInfos != rhs.instructionalTextForInfos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideArchive.InstructionalTextMap.InstructionalTextMapEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = KN_SlideArchive.InstructionalTextMap.protoMessageName + ".InstructionalTextMapEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "info"),
    2: .standard(proto: "instructional_text"),
  ]

  public var isInitialized: Bool {
    if self._instructionalText == nil {return false}
    if let v = self._info, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._info)
      case 2: try decoder.decodeSingularStringField(value: &self._instructionalText)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._instructionalText {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideArchive.InstructionalTextMap.InstructionalTextMapEntry, rhs: KN_SlideArchive.InstructionalTextMap.InstructionalTextMapEntry) -> Bool {
    if lhs._info != rhs._info {return false}
    if lhs._instructionalText != rhs._instructionalText {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideNodeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SlideNodeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "children"),
    2: .same(proto: "slide"),
    21: .same(proto: "depth"),
    16: .same(proto: "thumbnails"),
    10: .same(proto: "thumbnailSizes"),
    14: .same(proto: "thumbnailsAreDirty"),
    25: .standard(proto: "digests_for_datas_needing_download_for_thumbnail"),
    4: .same(proto: "isHidden"),
    5: .same(proto: "isCollapsed"),
    17: .same(proto: "isCollapsedInOutlineView"),
    19: .same(proto: "hasBodyInOutlineView"),
    6: .same(proto: "hasBuilds"),
    7: .same(proto: "hasTransition"),
    8: .same(proto: "hasNote"),
    18: .same(proto: "isSlideNumberVisible"),
    11: .same(proto: "uniqueIdentifier"),
    12: .same(proto: "copyFromSlideIdentifier"),
    13: .same(proto: "slideSpecificHyperlinkCount"),
    15: .standard(proto: "build_event_count"),
    26: .standard(proto: "build_event_count_cache_version"),
    22: .standard(proto: "build_event_count_is_up_to_date"),
    20: .standard(proto: "has_explicit_builds"),
    27: .standard(proto: "has_explicit_builds_cache_version"),
    23: .standard(proto: "has_explicit_builds_is_up_to_date"),
    24: .same(proto: "slideSpecificHyperlinkMap"),
    28: .standard(proto: "has_background_alpha"),
    3: .standard(proto: "database_thumbnail"),
    9: .standard(proto: "database_thumbnails"),
  ]

  fileprivate class _StorageClass {
    var _children: [TSP_Reference] = []
    var _slide: TSP_Reference? = nil
    var _depth: UInt32? = nil
    var _thumbnails: [TSP_DataReference] = []
    var _thumbnailSizes: [TSP_Size] = []
    var _thumbnailsAreDirty: Bool? = nil
    var _digestsForDatasNeedingDownloadForThumbnail: [String] = []
    var _isHidden: Bool? = nil
    var _isCollapsed: Bool? = nil
    var _isCollapsedInOutlineView: Bool? = nil
    var _hasBodyInOutlineView_p: Bool? = nil
    var _hasBuilds_p: Bool? = nil
    var _hasTransition_p: Bool? = nil
    var _hasNote_p: Bool? = nil
    var _isSlideNumberVisible: Bool? = nil
    var _uniqueIdentifier: String? = nil
    var _copyFromSlideIdentifier: String? = nil
    var _slideSpecificHyperlinkCount: UInt32? = nil
    var _buildEventCount: UInt32? = nil
    var _buildEventCountCacheVersion: UInt32? = nil
    var _buildEventCountIsUpToDate: Bool? = nil
    var _hasExplicitBuilds_p: Bool? = nil
    var _hasExplicitBuildsCacheVersion_p: UInt32? = nil
    var _hasExplicitBuildsIsUpToDate_p: Bool? = nil
    var _slideSpecificHyperlinkMap: [KN_SlideNodeArchive.SlideSpecificHyperlinkMapEntry] = []
    var _hasBackgroundAlpha_p: Bool? = nil
    var _databaseThumbnail: TSP_Reference? = nil
    var _databaseThumbnails: [TSP_Reference] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _children = source._children
      _slide = source._slide
      _depth = source._depth
      _thumbnails = source._thumbnails
      _thumbnailSizes = source._thumbnailSizes
      _thumbnailsAreDirty = source._thumbnailsAreDirty
      _digestsForDatasNeedingDownloadForThumbnail = source._digestsForDatasNeedingDownloadForThumbnail
      _isHidden = source._isHidden
      _isCollapsed = source._isCollapsed
      _isCollapsedInOutlineView = source._isCollapsedInOutlineView
      _hasBodyInOutlineView_p = source._hasBodyInOutlineView_p
      _hasBuilds_p = source._hasBuilds_p
      _hasTransition_p = source._hasTransition_p
      _hasNote_p = source._hasNote_p
      _isSlideNumberVisible = source._isSlideNumberVisible
      _uniqueIdentifier = source._uniqueIdentifier
      _copyFromSlideIdentifier = source._copyFromSlideIdentifier
      _slideSpecificHyperlinkCount = source._slideSpecificHyperlinkCount
      _buildEventCount = source._buildEventCount
      _buildEventCountCacheVersion = source._buildEventCountCacheVersion
      _buildEventCountIsUpToDate = source._buildEventCountIsUpToDate
      _hasExplicitBuilds_p = source._hasExplicitBuilds_p
      _hasExplicitBuildsCacheVersion_p = source._hasExplicitBuildsCacheVersion_p
      _hasExplicitBuildsIsUpToDate_p = source._hasExplicitBuildsIsUpToDate_p
      _slideSpecificHyperlinkMap = source._slideSpecificHyperlinkMap
      _hasBackgroundAlpha_p = source._hasBackgroundAlpha_p
      _databaseThumbnail = source._databaseThumbnail
      _databaseThumbnails = source._databaseThumbnails
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._isHidden == nil {return false}
      if _storage._hasBuilds_p == nil {return false}
      if _storage._hasTransition_p == nil {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._children) {return false}
      if let v = _storage._slide, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._thumbnails) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._thumbnailSizes) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._slideSpecificHyperlinkMap) {return false}
      if let v = _storage._databaseThumbnail, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._databaseThumbnails) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._children)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._slide)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._databaseThumbnail)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._isHidden)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._isCollapsed)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._hasBuilds_p)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._hasTransition_p)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._hasNote_p)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._databaseThumbnails)
        case 10: try decoder.decodeRepeatedMessageField(value: &_storage._thumbnailSizes)
        case 11: try decoder.decodeSingularStringField(value: &_storage._uniqueIdentifier)
        case 12: try decoder.decodeSingularStringField(value: &_storage._copyFromSlideIdentifier)
        case 13: try decoder.decodeSingularUInt32Field(value: &_storage._slideSpecificHyperlinkCount)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._thumbnailsAreDirty)
        case 15: try decoder.decodeSingularUInt32Field(value: &_storage._buildEventCount)
        case 16: try decoder.decodeRepeatedMessageField(value: &_storage._thumbnails)
        case 17: try decoder.decodeSingularBoolField(value: &_storage._isCollapsedInOutlineView)
        case 18: try decoder.decodeSingularBoolField(value: &_storage._isSlideNumberVisible)
        case 19: try decoder.decodeSingularBoolField(value: &_storage._hasBodyInOutlineView_p)
        case 20: try decoder.decodeSingularBoolField(value: &_storage._hasExplicitBuilds_p)
        case 21: try decoder.decodeSingularUInt32Field(value: &_storage._depth)
        case 22: try decoder.decodeSingularBoolField(value: &_storage._buildEventCountIsUpToDate)
        case 23: try decoder.decodeSingularBoolField(value: &_storage._hasExplicitBuildsIsUpToDate_p)
        case 24: try decoder.decodeRepeatedMessageField(value: &_storage._slideSpecificHyperlinkMap)
        case 25: try decoder.decodeRepeatedStringField(value: &_storage._digestsForDatasNeedingDownloadForThumbnail)
        case 26: try decoder.decodeSingularUInt32Field(value: &_storage._buildEventCountCacheVersion)
        case 27: try decoder.decodeSingularUInt32Field(value: &_storage._hasExplicitBuildsCacheVersion_p)
        case 28: try decoder.decodeSingularBoolField(value: &_storage._hasBackgroundAlpha_p)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._children.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._children, fieldNumber: 1)
      }
      if let v = _storage._slide {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._databaseThumbnail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._isHidden {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      }
      if let v = _storage._isCollapsed {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      }
      if let v = _storage._hasBuilds_p {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      }
      if let v = _storage._hasTransition_p {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      }
      if let v = _storage._hasNote_p {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      }
      if !_storage._databaseThumbnails.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._databaseThumbnails, fieldNumber: 9)
      }
      if !_storage._thumbnailSizes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._thumbnailSizes, fieldNumber: 10)
      }
      if let v = _storage._uniqueIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      }
      if let v = _storage._copyFromSlideIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
      }
      if let v = _storage._slideSpecificHyperlinkCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 13)
      }
      if let v = _storage._thumbnailsAreDirty {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      }
      if let v = _storage._buildEventCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 15)
      }
      if !_storage._thumbnails.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._thumbnails, fieldNumber: 16)
      }
      if let v = _storage._isCollapsedInOutlineView {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      }
      if let v = _storage._isSlideNumberVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      }
      if let v = _storage._hasBodyInOutlineView_p {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      }
      if let v = _storage._hasExplicitBuilds_p {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      }
      if let v = _storage._depth {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 21)
      }
      if let v = _storage._buildEventCountIsUpToDate {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 22)
      }
      if let v = _storage._hasExplicitBuildsIsUpToDate_p {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      }
      if !_storage._slideSpecificHyperlinkMap.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._slideSpecificHyperlinkMap, fieldNumber: 24)
      }
      if !_storage._digestsForDatasNeedingDownloadForThumbnail.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._digestsForDatasNeedingDownloadForThumbnail, fieldNumber: 25)
      }
      if let v = _storage._buildEventCountCacheVersion {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 26)
      }
      if let v = _storage._hasExplicitBuildsCacheVersion_p {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 27)
      }
      if let v = _storage._hasBackgroundAlpha_p {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 28)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideNodeArchive, rhs: KN_SlideNodeArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._children != rhs_storage._children {return false}
        if _storage._slide != rhs_storage._slide {return false}
        if _storage._depth != rhs_storage._depth {return false}
        if _storage._thumbnails != rhs_storage._thumbnails {return false}
        if _storage._thumbnailSizes != rhs_storage._thumbnailSizes {return false}
        if _storage._thumbnailsAreDirty != rhs_storage._thumbnailsAreDirty {return false}
        if _storage._digestsForDatasNeedingDownloadForThumbnail != rhs_storage._digestsForDatasNeedingDownloadForThumbnail {return false}
        if _storage._isHidden != rhs_storage._isHidden {return false}
        if _storage._isCollapsed != rhs_storage._isCollapsed {return false}
        if _storage._isCollapsedInOutlineView != rhs_storage._isCollapsedInOutlineView {return false}
        if _storage._hasBodyInOutlineView_p != rhs_storage._hasBodyInOutlineView_p {return false}
        if _storage._hasBuilds_p != rhs_storage._hasBuilds_p {return false}
        if _storage._hasTransition_p != rhs_storage._hasTransition_p {return false}
        if _storage._hasNote_p != rhs_storage._hasNote_p {return false}
        if _storage._isSlideNumberVisible != rhs_storage._isSlideNumberVisible {return false}
        if _storage._uniqueIdentifier != rhs_storage._uniqueIdentifier {return false}
        if _storage._copyFromSlideIdentifier != rhs_storage._copyFromSlideIdentifier {return false}
        if _storage._slideSpecificHyperlinkCount != rhs_storage._slideSpecificHyperlinkCount {return false}
        if _storage._buildEventCount != rhs_storage._buildEventCount {return false}
        if _storage._buildEventCountCacheVersion != rhs_storage._buildEventCountCacheVersion {return false}
        if _storage._buildEventCountIsUpToDate != rhs_storage._buildEventCountIsUpToDate {return false}
        if _storage._hasExplicitBuilds_p != rhs_storage._hasExplicitBuilds_p {return false}
        if _storage._hasExplicitBuildsCacheVersion_p != rhs_storage._hasExplicitBuildsCacheVersion_p {return false}
        if _storage._hasExplicitBuildsIsUpToDate_p != rhs_storage._hasExplicitBuildsIsUpToDate_p {return false}
        if _storage._slideSpecificHyperlinkMap != rhs_storage._slideSpecificHyperlinkMap {return false}
        if _storage._hasBackgroundAlpha_p != rhs_storage._hasBackgroundAlpha_p {return false}
        if _storage._databaseThumbnail != rhs_storage._databaseThumbnail {return false}
        if _storage._databaseThumbnails != rhs_storage._databaseThumbnails {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideNodeArchive.SlideSpecificHyperlinkMapEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = KN_SlideNodeArchive.protoMessageName + ".SlideSpecificHyperlinkMapEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "slideNodeIDString"),
    2: .same(proto: "infoOrStorageIDString"),
  ]

  public var isInitialized: Bool {
    if self._slideNodeIdstring == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._slideNodeIdstring)
      case 2: try decoder.decodeRepeatedStringField(value: &self.infoOrStorageIdstring)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._slideNodeIdstring {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.infoOrStorageIdstring.isEmpty {
      try visitor.visitRepeatedStringField(value: self.infoOrStorageIdstring, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideNodeArchive.SlideSpecificHyperlinkMapEntry, rhs: KN_SlideNodeArchive.SlideSpecificHyperlinkMapEntry) -> Bool {
    if lhs._slideNodeIdstring != rhs._slideNodeIdstring {return false}
    if lhs.infoOrStorageIdstring != rhs.infoOrStorageIdstring {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_DesktopUILayoutArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DesktopUILayoutArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sidebar_visible"),
    2: .standard(proto: "sidebar_view_mode"),
    3: .standard(proto: "notes_visible"),
    5: .standard(proto: "light_table_visible"),
    6: .standard(proto: "inspector_pane_visible"),
    7: .standard(proto: "inspector_pane_view_mode"),
    8: .standard(proto: "showing_master_slides"),
    9: .standard(proto: "inspector_pane_autohidden"),
    10: .standard(proto: "element_list_visible"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._sidebarVisible)
      case 2: try decoder.decodeSingularEnumField(value: &self._sidebarViewMode)
      case 3: try decoder.decodeSingularBoolField(value: &self._notesVisible)
      case 5: try decoder.decodeSingularBoolField(value: &self._lightTableVisible)
      case 6: try decoder.decodeSingularBoolField(value: &self._inspectorPaneVisible)
      case 7: try decoder.decodeSingularEnumField(value: &self._inspectorPaneViewMode)
      case 8: try decoder.decodeSingularBoolField(value: &self._showingMasterSlides)
      case 9: try decoder.decodeSingularBoolField(value: &self._inspectorPaneAutohidden)
      case 10: try decoder.decodeSingularBoolField(value: &self._elementListVisible)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sidebarVisible {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._sidebarViewMode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._notesVisible {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._lightTableVisible {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._inspectorPaneVisible {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._inspectorPaneViewMode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
    }
    if let v = self._showingMasterSlides {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._inspectorPaneAutohidden {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    if let v = self._elementListVisible {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_DesktopUILayoutArchive, rhs: KN_DesktopUILayoutArchive) -> Bool {
    if lhs._sidebarVisible != rhs._sidebarVisible {return false}
    if lhs._sidebarViewMode != rhs._sidebarViewMode {return false}
    if lhs._notesVisible != rhs._notesVisible {return false}
    if lhs._lightTableVisible != rhs._lightTableVisible {return false}
    if lhs._inspectorPaneVisible != rhs._inspectorPaneVisible {return false}
    if lhs._inspectorPaneViewMode != rhs._inspectorPaneViewMode {return false}
    if lhs._showingMasterSlides != rhs._showingMasterSlides {return false}
    if lhs._inspectorPaneAutohidden != rhs._inspectorPaneAutohidden {return false}
    if lhs._elementListVisible != rhs._elementListVisible {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_DesktopUILayoutArchive.SidebarViewMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kSidebarViewModeNavigator"),
    1: .same(proto: "kSidebarViewModeOutline"),
  ]
}

extension KN_DesktopUILayoutArchive.InspectorPaneViewMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kInspectorPaneViewModeFormat"),
    1: .same(proto: "kInspectorPaneViewModeAnimate"),
    2: .same(proto: "kInspectorPaneViewModeSetup"),
  ]
}

extension KN_UIStateArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UIStateArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "slideNodeToEdit"),
    2: .standard(proto: "deprecated_masterSlideNodeToApply"),
    3: .standard(proto: "deprecated_slideThumbnailSize"),
    4: .same(proto: "canvasViewScale"),
    5: .same(proto: "canvasOffset"),
    6: .same(proto: "selectedSlideNodes"),
    7: .same(proto: "iPhoneCanvasViewScale"),
    8: .same(proto: "iPhoneCanvasOffset"),
    9: .same(proto: "iPhone568CanvasViewScale"),
    10: .same(proto: "iPhone568CanvasOffset"),
    11: .standard(proto: "desktop_ui_layout"),
    12: .standard(proto: "desktop_slide_view_content_fits_window"),
    13: .standard(proto: "desktop_canvas_view_scale"),
    21: .standard(proto: "desktop_canvas_offset"),
    14: .standard(proto: "light_table_zoom_scale"),
    15: .standard(proto: "chart_ui_state"),
    16: .standard(proto: "show_slide_guides"),
    17: .standard(proto: "show_master_guides"),
    18: .standard(proto: "shows_comments"),
    39: .standard(proto: "comments_printing_toggle_enabled"),
    19: .standard(proto: "collapsed_slide_nodes"),
    28: .standard(proto: "outline_collapsed_slide_nodes"),
    30: .standard(proto: "outline_has_body_slide_nodes"),
    20: .standard(proto: "shows_ruler"),
    22: .standard(proto: "desktop_navigator_view_width"),
    23: .standard(proto: "desktop_outline_view_width"),
    31: .standard(proto: "desktop_outline_view_default_fixed"),
    24: .standard(proto: "desktop_main_content_size"),
    25: .standard(proto: "desktop_presenter_notes_view_height"),
    26: .standard(proto: "desktop_main_window_origin"),
    27: .standard(proto: "light_table_hides_skipped_slides"),
    29: .standard(proto: "selection_path"),
    32: .standard(proto: "desktop_element_list_view_width"),
    33: .standard(proto: "element_list_expanded_groups"),
    34: .standard(proto: "shows_mobile_light_table"),
    35: .standard(proto: "mobile_light_table_zoom_scale"),
    36: .standard(proto: "mobile_light_table_hides_skipped_slides"),
    37: .standard(proto: "freehand_drawing_toolkit_state"),
    38: .standard(proto: "selection_path_transformer"),
  ]

  fileprivate class _StorageClass {
    var _slideNodeToEdit: TSP_Reference? = nil
    var _deprecatedMasterSlideNodeToApply: TSP_Reference? = nil
    var _deprecatedSlideThumbnailSize: TSP_Size? = nil
    var _canvasViewScale: Float? = nil
    var _canvasOffset: TSP_Point? = nil
    var _selectedSlideNodes: [TSP_Reference] = []
    var _iPhoneCanvasViewScale: Float? = nil
    var _iPhoneCanvasOffset: TSP_Point? = nil
    var _iPhone568CanvasViewScale: Float? = nil
    var _iPhone568CanvasOffset: TSP_Point? = nil
    var _desktopUiLayout: TSP_Reference? = nil
    var _desktopSlideViewContentFitsWindow: Bool? = nil
    var _desktopCanvasViewScale: Float? = nil
    var _desktopCanvasOffset: TSP_Point? = nil
    var _lightTableZoomScale: Float? = nil
    var _chartUiState: [TSCH_ChartUIState] = []
    var _showSlideGuides: Bool? = nil
    var _showMasterGuides: Bool? = nil
    var _showsComments: Bool? = nil
    var _commentsPrintingToggleEnabled: Bool? = nil
    var _collapsedSlideNodes: [TSP_Reference] = []
    var _outlineCollapsedSlideNodes: [TSP_Reference] = []
    var _outlineHasBodySlideNodes: [TSP_Reference] = []
    var _showsRuler: Bool? = nil
    var _desktopNavigatorViewWidth: Float? = nil
    var _desktopOutlineViewWidth: Float? = nil
    var _desktopOutlineViewDefaultFixed: Bool? = nil
    var _desktopMainContentSize: TSP_Size? = nil
    var _desktopPresenterNotesViewHeight: Float? = nil
    var _desktopMainWindowOrigin: TSP_Point? = nil
    var _lightTableHidesSkippedSlides: Bool? = nil
    var _selectionPath: TSK_SelectionPathArchive? = nil
    var _desktopElementListViewWidth: Float? = nil
    var _elementListExpandedGroups: [TSP_Reference] = []
    var _showsMobileLightTable: Bool? = nil
    var _mobileLightTableZoomScale: Float? = nil
    var _mobileLightTableHidesSkippedSlides: Bool? = nil
    var _freehandDrawingToolkitState: TSP_Reference? = nil
    var _selectionPathTransformer: TSP_Reference? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _slideNodeToEdit = source._slideNodeToEdit
      _deprecatedMasterSlideNodeToApply = source._deprecatedMasterSlideNodeToApply
      _deprecatedSlideThumbnailSize = source._deprecatedSlideThumbnailSize
      _canvasViewScale = source._canvasViewScale
      _canvasOffset = source._canvasOffset
      _selectedSlideNodes = source._selectedSlideNodes
      _iPhoneCanvasViewScale = source._iPhoneCanvasViewScale
      _iPhoneCanvasOffset = source._iPhoneCanvasOffset
      _iPhone568CanvasViewScale = source._iPhone568CanvasViewScale
      _iPhone568CanvasOffset = source._iPhone568CanvasOffset
      _desktopUiLayout = source._desktopUiLayout
      _desktopSlideViewContentFitsWindow = source._desktopSlideViewContentFitsWindow
      _desktopCanvasViewScale = source._desktopCanvasViewScale
      _desktopCanvasOffset = source._desktopCanvasOffset
      _lightTableZoomScale = source._lightTableZoomScale
      _chartUiState = source._chartUiState
      _showSlideGuides = source._showSlideGuides
      _showMasterGuides = source._showMasterGuides
      _showsComments = source._showsComments
      _commentsPrintingToggleEnabled = source._commentsPrintingToggleEnabled
      _collapsedSlideNodes = source._collapsedSlideNodes
      _outlineCollapsedSlideNodes = source._outlineCollapsedSlideNodes
      _outlineHasBodySlideNodes = source._outlineHasBodySlideNodes
      _showsRuler = source._showsRuler
      _desktopNavigatorViewWidth = source._desktopNavigatorViewWidth
      _desktopOutlineViewWidth = source._desktopOutlineViewWidth
      _desktopOutlineViewDefaultFixed = source._desktopOutlineViewDefaultFixed
      _desktopMainContentSize = source._desktopMainContentSize
      _desktopPresenterNotesViewHeight = source._desktopPresenterNotesViewHeight
      _desktopMainWindowOrigin = source._desktopMainWindowOrigin
      _lightTableHidesSkippedSlides = source._lightTableHidesSkippedSlides
      _selectionPath = source._selectionPath
      _desktopElementListViewWidth = source._desktopElementListViewWidth
      _elementListExpandedGroups = source._elementListExpandedGroups
      _showsMobileLightTable = source._showsMobileLightTable
      _mobileLightTableZoomScale = source._mobileLightTableZoomScale
      _mobileLightTableHidesSkippedSlides = source._mobileLightTableHidesSkippedSlides
      _freehandDrawingToolkitState = source._freehandDrawingToolkitState
      _selectionPathTransformer = source._selectionPathTransformer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._slideNodeToEdit, !v.isInitialized {return false}
      if let v = _storage._deprecatedMasterSlideNodeToApply, !v.isInitialized {return false}
      if let v = _storage._deprecatedSlideThumbnailSize, !v.isInitialized {return false}
      if let v = _storage._canvasOffset, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._selectedSlideNodes) {return false}
      if let v = _storage._iPhoneCanvasOffset, !v.isInitialized {return false}
      if let v = _storage._iPhone568CanvasOffset, !v.isInitialized {return false}
      if let v = _storage._desktopUiLayout, !v.isInitialized {return false}
      if let v = _storage._desktopCanvasOffset, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._chartUiState) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._collapsedSlideNodes) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._outlineCollapsedSlideNodes) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._outlineHasBodySlideNodes) {return false}
      if let v = _storage._desktopMainContentSize, !v.isInitialized {return false}
      if let v = _storage._desktopMainWindowOrigin, !v.isInitialized {return false}
      if let v = _storage._selectionPath, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._elementListExpandedGroups) {return false}
      if let v = _storage._freehandDrawingToolkitState, !v.isInitialized {return false}
      if let v = _storage._selectionPathTransformer, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._slideNodeToEdit)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._deprecatedMasterSlideNodeToApply)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._deprecatedSlideThumbnailSize)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._canvasViewScale)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._canvasOffset)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._selectedSlideNodes)
        case 7: try decoder.decodeSingularFloatField(value: &_storage._iPhoneCanvasViewScale)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._iPhoneCanvasOffset)
        case 9: try decoder.decodeSingularFloatField(value: &_storage._iPhone568CanvasViewScale)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._iPhone568CanvasOffset)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._desktopUiLayout)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._desktopSlideViewContentFitsWindow)
        case 13: try decoder.decodeSingularFloatField(value: &_storage._desktopCanvasViewScale)
        case 14: try decoder.decodeSingularFloatField(value: &_storage._lightTableZoomScale)
        case 15: try decoder.decodeRepeatedMessageField(value: &_storage._chartUiState)
        case 16: try decoder.decodeSingularBoolField(value: &_storage._showSlideGuides)
        case 17: try decoder.decodeSingularBoolField(value: &_storage._showMasterGuides)
        case 18: try decoder.decodeSingularBoolField(value: &_storage._showsComments)
        case 19: try decoder.decodeRepeatedMessageField(value: &_storage._collapsedSlideNodes)
        case 20: try decoder.decodeSingularBoolField(value: &_storage._showsRuler)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._desktopCanvasOffset)
        case 22: try decoder.decodeSingularFloatField(value: &_storage._desktopNavigatorViewWidth)
        case 23: try decoder.decodeSingularFloatField(value: &_storage._desktopOutlineViewWidth)
        case 24: try decoder.decodeSingularMessageField(value: &_storage._desktopMainContentSize)
        case 25: try decoder.decodeSingularFloatField(value: &_storage._desktopPresenterNotesViewHeight)
        case 26: try decoder.decodeSingularMessageField(value: &_storage._desktopMainWindowOrigin)
        case 27: try decoder.decodeSingularBoolField(value: &_storage._lightTableHidesSkippedSlides)
        case 28: try decoder.decodeRepeatedMessageField(value: &_storage._outlineCollapsedSlideNodes)
        case 29: try decoder.decodeSingularMessageField(value: &_storage._selectionPath)
        case 30: try decoder.decodeRepeatedMessageField(value: &_storage._outlineHasBodySlideNodes)
        case 31: try decoder.decodeSingularBoolField(value: &_storage._desktopOutlineViewDefaultFixed)
        case 32: try decoder.decodeSingularFloatField(value: &_storage._desktopElementListViewWidth)
        case 33: try decoder.decodeRepeatedMessageField(value: &_storage._elementListExpandedGroups)
        case 34: try decoder.decodeSingularBoolField(value: &_storage._showsMobileLightTable)
        case 35: try decoder.decodeSingularFloatField(value: &_storage._mobileLightTableZoomScale)
        case 36: try decoder.decodeSingularBoolField(value: &_storage._mobileLightTableHidesSkippedSlides)
        case 37: try decoder.decodeSingularMessageField(value: &_storage._freehandDrawingToolkitState)
        case 38: try decoder.decodeSingularMessageField(value: &_storage._selectionPathTransformer)
        case 39: try decoder.decodeSingularBoolField(value: &_storage._commentsPrintingToggleEnabled)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._slideNodeToEdit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._deprecatedMasterSlideNodeToApply {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._deprecatedSlideThumbnailSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._canvasViewScale {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
      }
      if let v = _storage._canvasOffset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._selectedSlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._selectedSlideNodes, fieldNumber: 6)
      }
      if let v = _storage._iPhoneCanvasViewScale {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 7)
      }
      if let v = _storage._iPhoneCanvasOffset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._iPhone568CanvasViewScale {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 9)
      }
      if let v = _storage._iPhone568CanvasOffset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._desktopUiLayout {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._desktopSlideViewContentFitsWindow {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      }
      if let v = _storage._desktopCanvasViewScale {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 13)
      }
      if let v = _storage._lightTableZoomScale {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 14)
      }
      if !_storage._chartUiState.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._chartUiState, fieldNumber: 15)
      }
      if let v = _storage._showSlideGuides {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      }
      if let v = _storage._showMasterGuides {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      }
      if let v = _storage._showsComments {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      }
      if !_storage._collapsedSlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._collapsedSlideNodes, fieldNumber: 19)
      }
      if let v = _storage._showsRuler {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      }
      if let v = _storage._desktopCanvasOffset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._desktopNavigatorViewWidth {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 22)
      }
      if let v = _storage._desktopOutlineViewWidth {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 23)
      }
      if let v = _storage._desktopMainContentSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
      if let v = _storage._desktopPresenterNotesViewHeight {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 25)
      }
      if let v = _storage._desktopMainWindowOrigin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if let v = _storage._lightTableHidesSkippedSlides {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 27)
      }
      if !_storage._outlineCollapsedSlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._outlineCollapsedSlideNodes, fieldNumber: 28)
      }
      if let v = _storage._selectionPath {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      }
      if !_storage._outlineHasBodySlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._outlineHasBodySlideNodes, fieldNumber: 30)
      }
      if let v = _storage._desktopOutlineViewDefaultFixed {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 31)
      }
      if let v = _storage._desktopElementListViewWidth {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 32)
      }
      if !_storage._elementListExpandedGroups.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._elementListExpandedGroups, fieldNumber: 33)
      }
      if let v = _storage._showsMobileLightTable {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 34)
      }
      if let v = _storage._mobileLightTableZoomScale {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 35)
      }
      if let v = _storage._mobileLightTableHidesSkippedSlides {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 36)
      }
      if let v = _storage._freehandDrawingToolkitState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 37)
      }
      if let v = _storage._selectionPathTransformer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 38)
      }
      if let v = _storage._commentsPrintingToggleEnabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 39)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_UIStateArchive, rhs: KN_UIStateArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._slideNodeToEdit != rhs_storage._slideNodeToEdit {return false}
        if _storage._deprecatedMasterSlideNodeToApply != rhs_storage._deprecatedMasterSlideNodeToApply {return false}
        if _storage._deprecatedSlideThumbnailSize != rhs_storage._deprecatedSlideThumbnailSize {return false}
        if _storage._canvasViewScale != rhs_storage._canvasViewScale {return false}
        if _storage._canvasOffset != rhs_storage._canvasOffset {return false}
        if _storage._selectedSlideNodes != rhs_storage._selectedSlideNodes {return false}
        if _storage._iPhoneCanvasViewScale != rhs_storage._iPhoneCanvasViewScale {return false}
        if _storage._iPhoneCanvasOffset != rhs_storage._iPhoneCanvasOffset {return false}
        if _storage._iPhone568CanvasViewScale != rhs_storage._iPhone568CanvasViewScale {return false}
        if _storage._iPhone568CanvasOffset != rhs_storage._iPhone568CanvasOffset {return false}
        if _storage._desktopUiLayout != rhs_storage._desktopUiLayout {return false}
        if _storage._desktopSlideViewContentFitsWindow != rhs_storage._desktopSlideViewContentFitsWindow {return false}
        if _storage._desktopCanvasViewScale != rhs_storage._desktopCanvasViewScale {return false}
        if _storage._desktopCanvasOffset != rhs_storage._desktopCanvasOffset {return false}
        if _storage._lightTableZoomScale != rhs_storage._lightTableZoomScale {return false}
        if _storage._chartUiState != rhs_storage._chartUiState {return false}
        if _storage._showSlideGuides != rhs_storage._showSlideGuides {return false}
        if _storage._showMasterGuides != rhs_storage._showMasterGuides {return false}
        if _storage._showsComments != rhs_storage._showsComments {return false}
        if _storage._commentsPrintingToggleEnabled != rhs_storage._commentsPrintingToggleEnabled {return false}
        if _storage._collapsedSlideNodes != rhs_storage._collapsedSlideNodes {return false}
        if _storage._outlineCollapsedSlideNodes != rhs_storage._outlineCollapsedSlideNodes {return false}
        if _storage._outlineHasBodySlideNodes != rhs_storage._outlineHasBodySlideNodes {return false}
        if _storage._showsRuler != rhs_storage._showsRuler {return false}
        if _storage._desktopNavigatorViewWidth != rhs_storage._desktopNavigatorViewWidth {return false}
        if _storage._desktopOutlineViewWidth != rhs_storage._desktopOutlineViewWidth {return false}
        if _storage._desktopOutlineViewDefaultFixed != rhs_storage._desktopOutlineViewDefaultFixed {return false}
        if _storage._desktopMainContentSize != rhs_storage._desktopMainContentSize {return false}
        if _storage._desktopPresenterNotesViewHeight != rhs_storage._desktopPresenterNotesViewHeight {return false}
        if _storage._desktopMainWindowOrigin != rhs_storage._desktopMainWindowOrigin {return false}
        if _storage._lightTableHidesSkippedSlides != rhs_storage._lightTableHidesSkippedSlides {return false}
        if _storage._selectionPath != rhs_storage._selectionPath {return false}
        if _storage._desktopElementListViewWidth != rhs_storage._desktopElementListViewWidth {return false}
        if _storage._elementListExpandedGroups != rhs_storage._elementListExpandedGroups {return false}
        if _storage._showsMobileLightTable != rhs_storage._showsMobileLightTable {return false}
        if _storage._mobileLightTableZoomScale != rhs_storage._mobileLightTableZoomScale {return false}
        if _storage._mobileLightTableHidesSkippedSlides != rhs_storage._mobileLightTableHidesSkippedSlides {return false}
        if _storage._freehandDrawingToolkitState != rhs_storage._freehandDrawingToolkitState {return false}
        if _storage._selectionPathTransformer != rhs_storage._selectionPathTransformer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_IOSRestorableViewStateRootArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IOSRestorableViewStateRootArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "saved_playback_state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._savedPlaybackState)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._savedPlaybackState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_IOSRestorableViewStateRootArchive, rhs: KN_IOSRestorableViewStateRootArchive) -> Bool {
    if lhs._savedPlaybackState != rhs._savedPlaybackState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_IOSSavedPlaybackStateArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IOSSavedPlaybackStateArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "presentation_type"),
    2: .standard(proto: "slide_node_index"),
    3: .standard(proto: "event_index"),
    4: .standard(proto: "breadcrumb_trail"),
    5: .standard(proto: "had_external_display"),
    6: .standard(proto: "is_elapsed_time_started"),
    7: .standard(proto: "elapsed_time_start_time"),
    8: .standard(proto: "recording_playback_current_time"),
    9: .standard(proto: "should_show_slide_navigator"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._presentationType)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._slideNodeIndex)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._eventIndex)
      case 4: try decoder.decodeRepeatedStringField(value: &self.breadcrumbTrail)
      case 5: try decoder.decodeSingularBoolField(value: &self._hadExternalDisplay)
      case 6: try decoder.decodeSingularBoolField(value: &self._isElapsedTimeStarted)
      case 7: try decoder.decodeSingularDoubleField(value: &self._elapsedTimeStartTime)
      case 8: try decoder.decodeSingularDoubleField(value: &self._recordingPlaybackCurrentTime)
      case 9: try decoder.decodeSingularBoolField(value: &self._shouldShowSlideNavigator)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._presentationType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._slideNodeIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._eventIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if !self.breadcrumbTrail.isEmpty {
      try visitor.visitRepeatedStringField(value: self.breadcrumbTrail, fieldNumber: 4)
    }
    if let v = self._hadExternalDisplay {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._isElapsedTimeStarted {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._elapsedTimeStartTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
    }
    if let v = self._recordingPlaybackCurrentTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
    }
    if let v = self._shouldShowSlideNavigator {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_IOSSavedPlaybackStateArchive, rhs: KN_IOSSavedPlaybackStateArchive) -> Bool {
    if lhs._presentationType != rhs._presentationType {return false}
    if lhs._slideNodeIndex != rhs._slideNodeIndex {return false}
    if lhs._eventIndex != rhs._eventIndex {return false}
    if lhs.breadcrumbTrail != rhs.breadcrumbTrail {return false}
    if lhs._hadExternalDisplay != rhs._hadExternalDisplay {return false}
    if lhs._isElapsedTimeStarted != rhs._isElapsedTimeStarted {return false}
    if lhs._elapsedTimeStartTime != rhs._elapsedTimeStartTime {return false}
    if lhs._recordingPlaybackCurrentTime != rhs._recordingPlaybackCurrentTime {return false}
    if lhs._shouldShowSlideNavigator != rhs._shouldShowSlideNavigator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_IOSSavedPlaybackStateArchive.PresentationType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Manual"),
    2: .same(proto: "Record"),
    3: .same(proto: "PlayRecording"),
    4: .same(proto: "Rehearse"),
    5: .same(proto: "Showcast"),
  ]
}

extension KN_CanvasSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CanvasSelectionArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "infos"),
    5: .standard(proto: "non_interactive_infos"),
    6: .standard(proto: "infos_for_action_ghost_indexes"),
    3: .standard(proto: "action_ghost_indexes"),
    4: .standard(proto: "build_chunks"),
    2: .standard(proto: "database_action_ghost_indexes"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.infos) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.nonInteractiveInfos) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.infosForActionGhostIndexes) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.actionGhostIndexes) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.buildChunks) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.infos)
      case 2: try decoder.decodeRepeatedUInt32Field(value: &self.databaseActionGhostIndexes)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.actionGhostIndexes)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.buildChunks)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.nonInteractiveInfos)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.infosForActionGhostIndexes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.infos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.infos, fieldNumber: 1)
    }
    if !self.databaseActionGhostIndexes.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.databaseActionGhostIndexes, fieldNumber: 2)
    }
    if !self.actionGhostIndexes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.actionGhostIndexes, fieldNumber: 3)
    }
    if !self.buildChunks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.buildChunks, fieldNumber: 4)
    }
    if !self.nonInteractiveInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nonInteractiveInfos, fieldNumber: 5)
    }
    if !self.infosForActionGhostIndexes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.infosForActionGhostIndexes, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_CanvasSelectionArchive, rhs: KN_CanvasSelectionArchive) -> Bool {
    if lhs.infos != rhs.infos {return false}
    if lhs.nonInteractiveInfos != rhs.nonInteractiveInfos {return false}
    if lhs.infosForActionGhostIndexes != rhs.infosForActionGhostIndexes {return false}
    if lhs.actionGhostIndexes != rhs.actionGhostIndexes {return false}
    if lhs.buildChunks != rhs.buildChunks {return false}
    if lhs.databaseActionGhostIndexes != rhs.databaseActionGhostIndexes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_ActionGhostSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActionGhostSelectionArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_ActionGhostSelectionArchive, rhs: KN_ActionGhostSelectionArchive) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_ThemeCustomTimingCurveArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThemeCustomTimingCurveArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "curve"),
  ]

  public var isInitialized: Bool {
    if self._name == nil {return false}
    if self._curve == nil {return false}
    if let v = self._curve, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeSingularMessageField(value: &self._curve)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._curve {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_ThemeCustomTimingCurveArchive, rhs: KN_ThemeCustomTimingCurveArchive) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._curve != rhs._curve {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_ThemeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThemeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    2: .same(proto: "masters"),
    3: .same(proto: "uuid"),
    4: .same(proto: "classicThemeRecords"),
    5: .same(proto: "defaultMasterSlideNode"),
    6: .standard(proto: "default_master_slide_node_reference"),
    7: .standard(proto: "default_master_slide_node_is_our_best_guess"),
    8: .standard(proto: "custom_effect_timing_curves"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.masters) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.classicThemeRecords) {return false}
    if let v = self._defaultMasterSlideNode, !v.isInitialized {return false}
    if let v = self._defaultMasterSlideNodeReference, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.customEffectTimingCurves) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.masters)
      case 3: try decoder.decodeSingularStringField(value: &self._uuid)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.classicThemeRecords)
      case 5: try decoder.decodeSingularMessageField(value: &self._defaultMasterSlideNode)
      case 6: try decoder.decodeSingularMessageField(value: &self._defaultMasterSlideNodeReference)
      case 7: try decoder.decodeSingularBoolField(value: &self._defaultMasterSlideNodeIsOurBestGuess)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.customEffectTimingCurves)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.masters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.masters, fieldNumber: 2)
    }
    if let v = self._uuid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if !self.classicThemeRecords.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.classicThemeRecords, fieldNumber: 4)
    }
    if let v = self._defaultMasterSlideNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._defaultMasterSlideNodeReference {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._defaultMasterSlideNodeIsOurBestGuess {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    if !self.customEffectTimingCurves.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.customEffectTimingCurves, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_ThemeArchive, rhs: KN_ThemeArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.masters != rhs.masters {return false}
    if lhs._uuid != rhs._uuid {return false}
    if lhs.classicThemeRecords != rhs.classicThemeRecords {return false}
    if lhs._defaultMasterSlideNode != rhs._defaultMasterSlideNode {return false}
    if lhs._defaultMasterSlideNodeReference != rhs._defaultMasterSlideNodeReference {return false}
    if lhs._defaultMasterSlideNodeIsOurBestGuess != rhs._defaultMasterSlideNodeIsOurBestGuess {return false}
    if lhs.customEffectTimingCurves != rhs.customEffectTimingCurves {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideTreeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SlideTreeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rootSlideNode"),
    2: .same(proto: "slides"),
  ]

  public var isInitialized: Bool {
    if let v = self._rootSlideNode, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.slides) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._rootSlideNode)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.slides)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._rootSlideNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.slides.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.slides, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideTreeArchive, rhs: KN_SlideTreeArchive) -> Bool {
    if lhs._rootSlideNode != rhs._rootSlideNode {return false}
    if lhs.slides != rhs.slides {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_ShowArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShowArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uiState"),
    2: .same(proto: "theme"),
    3: .same(proto: "slideTree"),
    4: .same(proto: "size"),
    5: .same(proto: "stylesheet"),
    6: .same(proto: "slideNumbersVisible"),
    7: .same(proto: "recording"),
    8: .standard(proto: "loop_presentation"),
    9: .same(proto: "mode"),
    10: .standard(proto: "autoplay_transition_delay"),
    11: .standard(proto: "autoplay_build_delay"),
    15: .standard(proto: "idle_timer_active"),
    16: .standard(proto: "idle_timer_delay"),
    17: .same(proto: "soundtrack"),
    18: .standard(proto: "automatically_plays_upon_open"),
    19: .same(proto: "slideList"),
  ]

  public var isInitialized: Bool {
    if self._theme == nil {return false}
    if self._slideTree == nil {return false}
    if self._size == nil {return false}
    if self._stylesheet == nil {return false}
    if let v = self._uiState, !v.isInitialized {return false}
    if let v = self._theme, !v.isInitialized {return false}
    if let v = self._slideTree, !v.isInitialized {return false}
    if let v = self._size, !v.isInitialized {return false}
    if let v = self._stylesheet, !v.isInitialized {return false}
    if let v = self._recording, !v.isInitialized {return false}
    if let v = self._soundtrack, !v.isInitialized {return false}
    if let v = self._slideList, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._uiState)
      case 2: try decoder.decodeSingularMessageField(value: &self._theme)
      case 3: try decoder.decodeSingularMessageField(value: &self._slideTree)
      case 4: try decoder.decodeSingularMessageField(value: &self._size)
      case 5: try decoder.decodeSingularMessageField(value: &self._stylesheet)
      case 6: try decoder.decodeSingularBoolField(value: &self._slideNumbersVisible)
      case 7: try decoder.decodeSingularMessageField(value: &self._recording)
      case 8: try decoder.decodeSingularBoolField(value: &self._loopPresentation)
      case 9: try decoder.decodeSingularEnumField(value: &self._mode)
      case 10: try decoder.decodeSingularDoubleField(value: &self._autoplayTransitionDelay)
      case 11: try decoder.decodeSingularDoubleField(value: &self._autoplayBuildDelay)
      case 15: try decoder.decodeSingularBoolField(value: &self._idleTimerActive)
      case 16: try decoder.decodeSingularDoubleField(value: &self._idleTimerDelay)
      case 17: try decoder.decodeSingularMessageField(value: &self._soundtrack)
      case 18: try decoder.decodeSingularBoolField(value: &self._automaticallyPlaysUponOpen)
      case 19: try decoder.decodeSingularMessageField(value: &self._slideList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._uiState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._theme {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._slideTree {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._size {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._stylesheet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._slideNumbersVisible {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._recording {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._loopPresentation {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._mode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
    }
    if let v = self._autoplayTransitionDelay {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 10)
    }
    if let v = self._autoplayBuildDelay {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
    }
    if let v = self._idleTimerActive {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
    }
    if let v = self._idleTimerDelay {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 16)
    }
    if let v = self._soundtrack {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }
    if let v = self._automaticallyPlaysUponOpen {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
    }
    if let v = self._slideList {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_ShowArchive, rhs: KN_ShowArchive) -> Bool {
    if lhs._uiState != rhs._uiState {return false}
    if lhs._theme != rhs._theme {return false}
    if lhs._slideTree != rhs._slideTree {return false}
    if lhs._size != rhs._size {return false}
    if lhs._stylesheet != rhs._stylesheet {return false}
    if lhs._slideNumbersVisible != rhs._slideNumbersVisible {return false}
    if lhs._recording != rhs._recording {return false}
    if lhs._loopPresentation != rhs._loopPresentation {return false}
    if lhs._mode != rhs._mode {return false}
    if lhs._autoplayTransitionDelay != rhs._autoplayTransitionDelay {return false}
    if lhs._autoplayBuildDelay != rhs._autoplayBuildDelay {return false}
    if lhs._idleTimerActive != rhs._idleTimerActive {return false}
    if lhs._idleTimerDelay != rhs._idleTimerDelay {return false}
    if lhs._soundtrack != rhs._soundtrack {return false}
    if lhs._automaticallyPlaysUponOpen != rhs._automaticallyPlaysUponOpen {return false}
    if lhs._slideList != rhs._slideList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_ShowArchive.KNShowMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kKNShowModeNormal"),
    1: .same(proto: "kKNShowModeAutoPlay"),
    2: .same(proto: "kKNShowModeHyperlinksOnly"),
  ]
}

extension KN_DocumentArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DocumentArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "super"),
    2: .same(proto: "show"),
    4: .standard(proto: "tables_custom_format_list"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._show == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._show, !v.isInitialized {return false}
    if let v = self._tablesCustomFormatList, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularMessageField(value: &self._show)
      case 3: try decoder.decodeSingularMessageField(value: &self._super)
      case 4: try decoder.decodeSingularMessageField(value: &self._tablesCustomFormatList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._show {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._tablesCustomFormatList {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_DocumentArchive, rhs: KN_DocumentArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._show != rhs._show {return false}
    if lhs._tablesCustomFormatList != rhs._tablesCustomFormatList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideStylePropertiesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SlideStylePropertiesArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fill"),
    2: .same(proto: "transition"),
    3: .standard(proto: "transition_null"),
    4: .same(proto: "titlePlaceholderVisibility"),
    5: .same(proto: "bodyPlaceholderVisibility"),
    7: .same(proto: "objectPlaceholderVisibility"),
    6: .same(proto: "slideNumberPlaceholderVisibility"),
  ]

  public var isInitialized: Bool {
    if let v = self._fill, !v.isInitialized {return false}
    if let v = self._transition, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._fill)
      case 2: try decoder.decodeSingularMessageField(value: &self._transition)
      case 3: try decoder.decodeSingularBoolField(value: &self._transitionNull)
      case 4: try decoder.decodeSingularBoolField(value: &self._titlePlaceholderVisibility)
      case 5: try decoder.decodeSingularBoolField(value: &self._bodyPlaceholderVisibility)
      case 6: try decoder.decodeSingularBoolField(value: &self._slideNumberPlaceholderVisibility)
      case 7: try decoder.decodeSingularBoolField(value: &self._objectPlaceholderVisibility)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._fill {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._transition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._transitionNull {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._titlePlaceholderVisibility {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._bodyPlaceholderVisibility {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._slideNumberPlaceholderVisibility {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._objectPlaceholderVisibility {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideStylePropertiesArchive, rhs: KN_SlideStylePropertiesArchive) -> Bool {
    if lhs._fill != rhs._fill {return false}
    if lhs._transition != rhs._transition {return false}
    if lhs._transitionNull != rhs._transitionNull {return false}
    if lhs._titlePlaceholderVisibility != rhs._titlePlaceholderVisibility {return false}
    if lhs._bodyPlaceholderVisibility != rhs._bodyPlaceholderVisibility {return false}
    if lhs._objectPlaceholderVisibility != rhs._objectPlaceholderVisibility {return false}
    if lhs._slideNumberPlaceholderVisibility != rhs._slideNumberPlaceholderVisibility {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideStyleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SlideStyleArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
    10: .standard(proto: "override_count"),
    11: .standard(proto: "slide_properties"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._slideProperties, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      case 10: try decoder.decodeSingularUInt32Field(value: &self._overrideCount)
      case 11: try decoder.decodeSingularMessageField(value: &self._slideProperties)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._overrideCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
    }
    if let v = self._slideProperties {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideStyleArchive, rhs: KN_SlideStyleArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._overrideCount != rhs._overrideCount {return false}
    if lhs._slideProperties != rhs._slideProperties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_PasteboardNativeStorageArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PasteboardNativeStorageArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "drawables"),
    2: .same(proto: "builds"),
    3: .same(proto: "buildChunks"),
    4: .same(proto: "slideNodes"),
    12: .standard(proto: "displayed_slide_nodes"),
    9: .same(proto: "masterSlideNodes"),
    10: .same(proto: "collapsedSlideNodes"),
    11: .same(proto: "outlineCollapsedSlideNodes"),
    13: .same(proto: "outlineHasBodySlideNodes"),
    5: .same(proto: "originalShowSize"),
    6: .same(proto: "titleRanges"),
    7: .standard(proto: "geometries_in_root"),
    8: .standard(proto: "slide_node_unique_identifier"),
    14: .standard(proto: "custom_effect_timing_curves"),
    15: .standard(proto: "original_slide_node_UUIDs"),
    16: .standard(proto: "slide_nodes_have_datas_needing_download"),
    17: .same(proto: "transition"),
  ]

  fileprivate class _StorageClass {
    var _drawables: [TSP_Reference] = []
    var _builds: [TSP_Reference] = []
    var _buildChunks: [TSP_Reference] = []
    var _slideNodes: [TSP_Reference] = []
    var _displayedSlideNodes: [TSP_Reference] = []
    var _masterSlideNodes: [TSP_Reference] = []
    var _collapsedSlideNodes: [TSP_Reference] = []
    var _outlineCollapsedSlideNodes: [TSP_Reference] = []
    var _outlineHasBodySlideNodes: [TSP_Reference] = []
    var _originalShowSize: TSP_Size? = nil
    var _titleRanges: [TSP_Range] = []
    var _geometriesInRoot: [TSD_GeometryArchive] = []
    var _slideNodeUniqueIdentifier: String? = nil
    var _customEffectTimingCurves: [KN_ThemeCustomTimingCurveArchive] = []
    var _originalSlideNodeUuids: [String] = []
    var _slideNodesHaveDatasNeedingDownload: Bool? = nil
    var _transition: KN_TransitionArchive? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _drawables = source._drawables
      _builds = source._builds
      _buildChunks = source._buildChunks
      _slideNodes = source._slideNodes
      _displayedSlideNodes = source._displayedSlideNodes
      _masterSlideNodes = source._masterSlideNodes
      _collapsedSlideNodes = source._collapsedSlideNodes
      _outlineCollapsedSlideNodes = source._outlineCollapsedSlideNodes
      _outlineHasBodySlideNodes = source._outlineHasBodySlideNodes
      _originalShowSize = source._originalShowSize
      _titleRanges = source._titleRanges
      _geometriesInRoot = source._geometriesInRoot
      _slideNodeUniqueIdentifier = source._slideNodeUniqueIdentifier
      _customEffectTimingCurves = source._customEffectTimingCurves
      _originalSlideNodeUuids = source._originalSlideNodeUuids
      _slideNodesHaveDatasNeedingDownload = source._slideNodesHaveDatasNeedingDownload
      _transition = source._transition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._drawables) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._builds) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._buildChunks) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._slideNodes) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._displayedSlideNodes) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._masterSlideNodes) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._collapsedSlideNodes) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._outlineCollapsedSlideNodes) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._outlineHasBodySlideNodes) {return false}
      if let v = _storage._originalShowSize, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._titleRanges) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._geometriesInRoot) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._customEffectTimingCurves) {return false}
      if let v = _storage._transition, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._drawables)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._builds)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._buildChunks)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._slideNodes)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._originalShowSize)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._titleRanges)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._geometriesInRoot)
        case 8: try decoder.decodeSingularStringField(value: &_storage._slideNodeUniqueIdentifier)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._masterSlideNodes)
        case 10: try decoder.decodeRepeatedMessageField(value: &_storage._collapsedSlideNodes)
        case 11: try decoder.decodeRepeatedMessageField(value: &_storage._outlineCollapsedSlideNodes)
        case 12: try decoder.decodeRepeatedMessageField(value: &_storage._displayedSlideNodes)
        case 13: try decoder.decodeRepeatedMessageField(value: &_storage._outlineHasBodySlideNodes)
        case 14: try decoder.decodeRepeatedMessageField(value: &_storage._customEffectTimingCurves)
        case 15: try decoder.decodeRepeatedStringField(value: &_storage._originalSlideNodeUuids)
        case 16: try decoder.decodeSingularBoolField(value: &_storage._slideNodesHaveDatasNeedingDownload)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._transition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._drawables.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._drawables, fieldNumber: 1)
      }
      if !_storage._builds.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._builds, fieldNumber: 2)
      }
      if !_storage._buildChunks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._buildChunks, fieldNumber: 3)
      }
      if !_storage._slideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._slideNodes, fieldNumber: 4)
      }
      if let v = _storage._originalShowSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._titleRanges.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._titleRanges, fieldNumber: 6)
      }
      if !_storage._geometriesInRoot.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._geometriesInRoot, fieldNumber: 7)
      }
      if let v = _storage._slideNodeUniqueIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      }
      if !_storage._masterSlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._masterSlideNodes, fieldNumber: 9)
      }
      if !_storage._collapsedSlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._collapsedSlideNodes, fieldNumber: 10)
      }
      if !_storage._outlineCollapsedSlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._outlineCollapsedSlideNodes, fieldNumber: 11)
      }
      if !_storage._displayedSlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._displayedSlideNodes, fieldNumber: 12)
      }
      if !_storage._outlineHasBodySlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._outlineHasBodySlideNodes, fieldNumber: 13)
      }
      if !_storage._customEffectTimingCurves.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._customEffectTimingCurves, fieldNumber: 14)
      }
      if !_storage._originalSlideNodeUuids.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._originalSlideNodeUuids, fieldNumber: 15)
      }
      if let v = _storage._slideNodesHaveDatasNeedingDownload {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      }
      if let v = _storage._transition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_PasteboardNativeStorageArchive, rhs: KN_PasteboardNativeStorageArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._drawables != rhs_storage._drawables {return false}
        if _storage._builds != rhs_storage._builds {return false}
        if _storage._buildChunks != rhs_storage._buildChunks {return false}
        if _storage._slideNodes != rhs_storage._slideNodes {return false}
        if _storage._displayedSlideNodes != rhs_storage._displayedSlideNodes {return false}
        if _storage._masterSlideNodes != rhs_storage._masterSlideNodes {return false}
        if _storage._collapsedSlideNodes != rhs_storage._collapsedSlideNodes {return false}
        if _storage._outlineCollapsedSlideNodes != rhs_storage._outlineCollapsedSlideNodes {return false}
        if _storage._outlineHasBodySlideNodes != rhs_storage._outlineHasBodySlideNodes {return false}
        if _storage._originalShowSize != rhs_storage._originalShowSize {return false}
        if _storage._titleRanges != rhs_storage._titleRanges {return false}
        if _storage._geometriesInRoot != rhs_storage._geometriesInRoot {return false}
        if _storage._slideNodeUniqueIdentifier != rhs_storage._slideNodeUniqueIdentifier {return false}
        if _storage._customEffectTimingCurves != rhs_storage._customEffectTimingCurves {return false}
        if _storage._originalSlideNodeUuids != rhs_storage._originalSlideNodeUuids {return false}
        if _storage._slideNodesHaveDatasNeedingDownload != rhs_storage._slideNodesHaveDatasNeedingDownload {return false}
        if _storage._transition != rhs_storage._transition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_PrototypeForUndoMasterChangeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PrototypeForUndoMasterChangeArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "slide_style"),
    2: .standard(proto: "master_slide_id"),
    3: .standard(proto: "drawable_info_id_list"),
    4: .same(proto: "placeholders"),
    5: .standard(proto: "placeholder_tags_list"),
  ]

  public var isInitialized: Bool {
    if self._masterSlideID == nil {return false}
    if let v = self._slideStyle, !v.isInitialized {return false}
    if let v = self._masterSlideID, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.drawableInfoIDList) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.placeholders) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._slideStyle)
      case 2: try decoder.decodeSingularMessageField(value: &self._masterSlideID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.drawableInfoIDList)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.placeholders)
      case 5: try decoder.decodeRepeatedStringField(value: &self.placeholderTagsList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._slideStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._masterSlideID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.drawableInfoIDList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.drawableInfoIDList, fieldNumber: 3)
    }
    if !self.placeholders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.placeholders, fieldNumber: 4)
    }
    if !self.placeholderTagsList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.placeholderTagsList, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_PrototypeForUndoMasterChangeArchive, rhs: KN_PrototypeForUndoMasterChangeArchive) -> Bool {
    if lhs._slideStyle != rhs._slideStyle {return false}
    if lhs._masterSlideID != rhs._masterSlideID {return false}
    if lhs.drawableInfoIDList != rhs.drawableInfoIDList {return false}
    if lhs.placeholders != rhs.placeholders {return false}
    if lhs.placeholderTagsList != rhs.placeholderTagsList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_tracks"),
    2: .standard(proto: "movie_track"),
    3: .same(proto: "duration"),
    4: .standard(proto: "sync_state_enum"),
    5: .standard(proto: "modification_date"),
    6: .standard(proto: "sync_state"),
    7: .standard(proto: "correction_history"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.eventTracks) {return false}
    if let v = self._movieTrack, !v.isInitialized {return false}
    if let v = self._modificationDate, !v.isInitialized {return false}
    if let v = self._syncState, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.eventTracks)
      case 2: try decoder.decodeSingularMessageField(value: &self._movieTrack)
      case 3: try decoder.decodeSingularDoubleField(value: &self._duration)
      case 4: try decoder.decodeSingularEnumField(value: &self._syncStateEnum)
      case 5: try decoder.decodeSingularMessageField(value: &self._modificationDate)
      case 6: try decoder.decodeSingularMessageField(value: &self._syncState)
      case 7: try decoder.decodeSingularMessageField(value: &self._correctionHistory)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.eventTracks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.eventTracks, fieldNumber: 1)
    }
    if let v = self._movieTrack {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._duration {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }
    if let v = self._syncStateEnum {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    if let v = self._modificationDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._syncState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._correctionHistory {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingArchive, rhs: KN_RecordingArchive) -> Bool {
    if lhs.eventTracks != rhs.eventTracks {return false}
    if lhs._movieTrack != rhs._movieTrack {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._syncStateEnum != rhs._syncStateEnum {return false}
    if lhs._modificationDate != rhs._modificationDate {return false}
    if lhs._syncState != rhs._syncState {return false}
    if lhs._correctionHistory != rhs._correctionHistory {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingArchive.RecordingSyncStateEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kRecordingSyncStateInSyncWithShow"),
    1: .same(proto: "kRecordingSyncStateOutOfSyncWithShow"),
  ]
}

extension KN_RecordingSyncState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingSyncState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "out_of_sync_token"),
    2: .standard(proto: "can_clear_out_of_sync_token"),
  ]

  public var isInitialized: Bool {
    if let v = self._outOfSyncToken, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._outOfSyncToken)
      case 2: try decoder.decodeSingularBoolField(value: &self._canClearOutOfSyncToken)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._outOfSyncToken {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._canClearOutOfSyncToken {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingSyncState, rhs: KN_RecordingSyncState) -> Bool {
    if lhs._outOfSyncToken != rhs._outOfSyncToken {return false}
    if lhs._canClearOutOfSyncToken != rhs._canClearOutOfSyncToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingCorrectionHistory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingCorrectionHistory"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "did_add_missing_events_for_radar_49654305"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._didAddMissingEventsForRadar49654305)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._didAddMissingEventsForRadar49654305 {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingCorrectionHistory, rhs: KN_RecordingCorrectionHistory) -> Bool {
    if lhs._didAddMissingEventsForRadar49654305 != rhs._didAddMissingEventsForRadar49654305 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingEventTrackArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingEventTrackArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "events"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.events) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._type)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.events)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingEventTrackArchive, rhs: KN_RecordingEventTrackArchive) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs.events != rhs.events {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingEventArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingEventArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time"),
    1000: .standard(proto: "navigation_event_archive"),
    1001: .standard(proto: "laser_event_archive"),
    1002: .standard(proto: "pause_event_archive"),
    1003: .standard(proto: "movie_event_archive"),
  ]

  public var isInitialized: Bool {
    if let v = self._navigationEventArchive, !v.isInitialized {return false}
    if let v = self._laserEventArchive, !v.isInitialized {return false}
    if let v = self._movieEventArchive, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._startTime)
      case 1000: try decoder.decodeSingularMessageField(value: &self._navigationEventArchive)
      case 1001: try decoder.decodeSingularMessageField(value: &self._laserEventArchive)
      case 1002: try decoder.decodeSingularMessageField(value: &self._pauseEventArchive)
      case 1003: try decoder.decodeSingularMessageField(value: &self._movieEventArchive)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._startTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    if let v = self._navigationEventArchive {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1000)
    }
    if let v = self._laserEventArchive {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1001)
    }
    if let v = self._pauseEventArchive {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1002)
    }
    if let v = self._movieEventArchive {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1003)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingEventArchive, rhs: KN_RecordingEventArchive) -> Bool {
    if lhs._startTime != rhs._startTime {return false}
    if lhs._navigationEventArchive != rhs._navigationEventArchive {return false}
    if lhs._laserEventArchive != rhs._laserEventArchive {return false}
    if lhs._pauseEventArchive != rhs._pauseEventArchive {return false}
    if lhs._movieEventArchive != rhs._movieEventArchive {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingNavigationEventArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingNavigationEventArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .standard(proto: "target_slide_node_id"),
    1: .standard(proto: "target_slide_node_reference"),
    2: .standard(proto: "target_event_index"),
    3: .standard(proto: "animation_phase"),
  ]

  public var isInitialized: Bool {
    if let v = self._targetSlideNodeID, !v.isInitialized {return false}
    if let v = self._targetSlideNodeReference, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._targetSlideNodeReference)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._targetEventIndex)
      case 3: try decoder.decodeSingularEnumField(value: &self._animationPhase)
      case 4: try decoder.decodeSingularMessageField(value: &self._targetSlideNodeID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._targetSlideNodeReference {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._targetEventIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._animationPhase {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._targetSlideNodeID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingNavigationEventArchive, rhs: KN_RecordingNavigationEventArchive) -> Bool {
    if lhs._targetSlideNodeID != rhs._targetSlideNodeID {return false}
    if lhs._targetSlideNodeReference != rhs._targetSlideNodeReference {return false}
    if lhs._targetEventIndex != rhs._targetEventIndex {return false}
    if lhs._animationPhase != rhs._animationPhase {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kRecordingNavigationEventAnimationNone"),
    1: .same(proto: "kRecordingNavigationEventAnimationStart"),
    2: .same(proto: "kRecordingNavigationEventAnimationEnd"),
  ]
}

extension KN_RecordingLaserEventArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingLaserEventArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unscaled_location"),
    2: .standard(proto: "unit_location"),
  ]

  public var isInitialized: Bool {
    if let v = self._unscaledLocation, !v.isInitialized {return false}
    if let v = self._unitLocation, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._unscaledLocation)
      case 2: try decoder.decodeSingularMessageField(value: &self._unitLocation)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._unscaledLocation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._unitLocation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingLaserEventArchive, rhs: KN_RecordingLaserEventArchive) -> Bool {
    if lhs._unscaledLocation != rhs._unscaledLocation {return false}
    if lhs._unitLocation != rhs._unitLocation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingPauseEventArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingPauseEventArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pause_event_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._pauseEventType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._pauseEventType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingPauseEventArchive, rhs: KN_RecordingPauseEventArchive) -> Bool {
    if lhs._pauseEventType != rhs._pauseEventType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingPauseEventArchive.RecordingPauseEventType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kRecordingPauseEventTypeResume"),
    1: .same(proto: "kRecordingPauseEventTypePause"),
    2: .same(proto: "kRecordingPauseEventTypeConcealWithBlack"),
    3: .same(proto: "kRecordingPauseEventTypeConcealWithWhite"),
  ]
}

extension KN_RecordingMovieEventArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingMovieEventArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "movie_info_reference"),
    2: .standard(proto: "movie_event_type"),
    3: .standard(proto: "movie_event_value"),
  ]

  public var isInitialized: Bool {
    if let v = self._movieInfoReference, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._movieInfoReference)
      case 2: try decoder.decodeSingularEnumField(value: &self._movieEventType)
      case 3: try decoder.decodeSingularDoubleField(value: &self._movieEventValue)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._movieInfoReference {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._movieEventType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._movieEventValue {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingMovieEventArchive, rhs: KN_RecordingMovieEventArchive) -> Bool {
    if lhs._movieInfoReference != rhs._movieInfoReference {return false}
    if lhs._movieEventType != rhs._movieEventType {return false}
    if lhs._movieEventValue != rhs._movieEventValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingMovieEventArchive.RecordingMovieEventType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kRecordingMovieEventNone"),
    1: .same(proto: "kRecordingMovieEventSeek"),
    2: .same(proto: "kRecordingMovieEventSetRate"),
    3: .same(proto: "kRecordingMovieEventStartPlayback"),
    4: .same(proto: "kRecordingMovieEventStopPlayback"),
    5: .same(proto: "kRecordingMovieEventBeginScrubbing"),
    6: .same(proto: "kRecordingMovieEventEndScrubbing"),
  ]
}

extension KN_RecordingMovieTrackArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingMovieTrackArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "movie_segments"),
    2: .standard(proto: "is_movie_segment_data_trimmed_to_duration"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.movieSegments) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.movieSegments)
      case 2: try decoder.decodeSingularBoolField(value: &self._isMovieSegmentDataTrimmedToDuration)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.movieSegments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.movieSegments, fieldNumber: 1)
    }
    if let v = self._isMovieSegmentDataTrimmedToDuration {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingMovieTrackArchive, rhs: KN_RecordingMovieTrackArchive) -> Bool {
    if lhs.movieSegments != rhs.movieSegments {return false}
    if lhs._isMovieSegmentDataTrimmedToDuration != rhs._isMovieSegmentDataTrimmedToDuration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_MovieSegmentArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MovieSegmentArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "movie_data"),
    2: .standard(proto: "start_time"),
    1: .standard(proto: "database_movie_data"),
  ]

  public var isInitialized: Bool {
    if let v = self._movieData, !v.isInitialized {return false}
    if let v = self._databaseMovieData, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._databaseMovieData)
      case 2: try decoder.decodeSingularDoubleField(value: &self._startTime)
      case 3: try decoder.decodeSingularMessageField(value: &self._movieData)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._databaseMovieData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._startTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    if let v = self._movieData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_MovieSegmentArchive, rhs: KN_MovieSegmentArchive) -> Bool {
    if lhs._movieData != rhs._movieData {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._databaseMovieData != rhs._databaseMovieData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_Soundtrack: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Soundtrack"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "volume"),
    2: .same(proto: "mode"),
    3: .standard(proto: "movie_media"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.movieMedia) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._volume)
      case 2: try decoder.decodeSingularEnumField(value: &self._mode)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.movieMedia)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._volume {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    if let v = self._mode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if !self.movieMedia.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.movieMedia, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_Soundtrack, rhs: KN_Soundtrack) -> Bool {
    if lhs._volume != rhs._volume {return false}
    if lhs._mode != rhs._mode {return false}
    if lhs.movieMedia != rhs.movieMedia {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_Soundtrack.SoundtrackMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kKNSoundtrackModePlayOnce"),
    1: .same(proto: "kKNSoundtrackModeLoop"),
    2: .same(proto: "kKNSoundtrackModeDoNotPlay"),
  ]
}

extension KN_SlideNumberAttachmentArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SlideNumberAttachmentArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  public var isInitialized: Bool {
    if self._super == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._super)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideNumberAttachmentArchive, rhs: KN_SlideNumberAttachmentArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideCollectionSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SlideCollectionSelectionArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "slide_nodes"),
    2: .standard(proto: "slide_node_to_edit"),
    3: .standard(proto: "selected_paragraph_indexes_for_slide_nodes"),
    4: .standard(proto: "range_in_selected_paragraph"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.slideNodes) {return false}
    if let v = self._slideNodeToEdit, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.selectedParagraphIndexesForSlideNodes) {return false}
    if let v = self._rangeInSelectedParagraph, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.slideNodes)
      case 2: try decoder.decodeSingularMessageField(value: &self._slideNodeToEdit)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.selectedParagraphIndexesForSlideNodes)
      case 4: try decoder.decodeSingularMessageField(value: &self._rangeInSelectedParagraph)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.slideNodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.slideNodes, fieldNumber: 1)
    }
    if let v = self._slideNodeToEdit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.selectedParagraphIndexesForSlideNodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.selectedParagraphIndexesForSlideNodes, fieldNumber: 3)
    }
    if let v = self._rangeInSelectedParagraph {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideCollectionSelectionArchive, rhs: KN_SlideCollectionSelectionArchive) -> Bool {
    if lhs.slideNodes != rhs.slideNodes {return false}
    if lhs._slideNodeToEdit != rhs._slideNodeToEdit {return false}
    if lhs.selectedParagraphIndexesForSlideNodes != rhs.selectedParagraphIndexesForSlideNodes {return false}
    if lhs._rangeInSelectedParagraph != rhs._rangeInSelectedParagraph {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideCollectionSelectionArchive.OutlineSelection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = KN_SlideCollectionSelectionArchive.protoMessageName + ".OutlineSelection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "slide_node"),
    2: .standard(proto: "selected_paragraph_indexes"),
  ]

  public var isInitialized: Bool {
    if self._slideNode == nil {return false}
    if self._selectedParagraphIndexes == nil {return false}
    if let v = self._slideNode, !v.isInitialized {return false}
    if let v = self._selectedParagraphIndexes, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._slideNode)
      case 2: try decoder.decodeSingularMessageField(value: &self._selectedParagraphIndexes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._slideNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._selectedParagraphIndexes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideCollectionSelectionArchive.OutlineSelection, rhs: KN_SlideCollectionSelectionArchive.OutlineSelection) -> Bool {
    if lhs._slideNode != rhs._slideNode {return false}
    if lhs._selectedParagraphIndexes != rhs._selectedParagraphIndexes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_PresenterNotesSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PresenterNotesSelectionArchive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "slide_node"),
  ]

  public var isInitialized: Bool {
    if let v = self._slideNode, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._slideNode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._slideNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_PresenterNotesSelectionArchive, rhs: KN_PresenterNotesSelectionArchive) -> Bool {
    if lhs._slideNode != rhs._slideNode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_MixedIdOperationArgs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MixedIdOperationArgs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "args_list_types"),
    2: .standard(proto: "add_args_list"),
    3: .standard(proto: "show_placeholder_args_list"),
    4: .standard(proto: "remove_args_list"),
    5: .standard(proto: "hide_placeholder_args_list"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.addArgsList) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.showPlaceholderArgsList) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.removeArgsList) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.hidePlaceholderArgsList) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedEnumField(value: &self.argsListTypes)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.addArgsList)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.showPlaceholderArgsList)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.removeArgsList)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.hidePlaceholderArgsList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.argsListTypes.isEmpty {
      try visitor.visitRepeatedEnumField(value: self.argsListTypes, fieldNumber: 1)
    }
    if !self.addArgsList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addArgsList, fieldNumber: 2)
    }
    if !self.showPlaceholderArgsList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.showPlaceholderArgsList, fieldNumber: 3)
    }
    if !self.removeArgsList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.removeArgsList, fieldNumber: 4)
    }
    if !self.hidePlaceholderArgsList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hidePlaceholderArgsList, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_MixedIdOperationArgs, rhs: KN_MixedIdOperationArgs) -> Bool {
    if lhs.argsListTypes != rhs.argsListTypes {return false}
    if lhs.addArgsList != rhs.addArgsList {return false}
    if lhs.showPlaceholderArgsList != rhs.showPlaceholderArgsList {return false}
    if lhs.removeArgsList != rhs.removeArgsList {return false}
    if lhs.hidePlaceholderArgsList != rhs.hidePlaceholderArgsList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_MixedIdOperationArgs.ArgsListKind: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Add"),
    1: .same(proto: "Remove"),
    2: .same(proto: "ShowPlaceholder"),
    3: .same(proto: "HidePlaceholder"),
  ]
}
